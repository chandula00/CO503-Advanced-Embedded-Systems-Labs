
consumer_1.elf:     file format elf32-littlenios2
consumer_1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000301b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00030000 paddr 0x00030000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00030020 paddr 0x00030020 align 2**12
         filesz 0x0000c734 memsz 0x0000c734 flags r-x
    LOAD off    0x0000e000 vaddr 0x00000000 paddr 0x0003c754 align 2**12
         filesz 0x00001dc4 memsz 0x000020b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00030000  00030000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00030020  00030020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c59c  000301b8  000301b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000036c  00000000  0003c754  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0000036c  0003cac0  0000e36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00001dc4  0003e518  0000fdc4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fdc4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  0000fde8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022d81  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008f5c  00000000  00000000  000338e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a10c  00000000  00000000  0003c845  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a64  00000000  00000000  00046954  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003059  00000000  00000000  000483b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011002  00000000  00000000  0004b411  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005c414  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005c428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000601a8  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  000601ab  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000601af  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000601b0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000601b1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000601b5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000601b9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  000601bd  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  000601c7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  000601d1  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  000601db  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  000601de  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00077d35  00000000  00000000  0006022f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00030000 l    d  .entry	00000000 .entry
00030020 l    d  .exceptions	00000000 .exceptions
000301b8 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
0000036c l    d  .rwdata	00000000 .rwdata
00001dc4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../consumer_1_bsp//obj/HAL/src/crt0.o
000301f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00030094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0003052c l     F .text	00000034 __sprint_r
00000092 l     O .rodata	00000010 blanks.3515
000000a2 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00032574 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00033fe4 l     F .text	00000008 __fp_lock
00033fec l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000036c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000000d8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00000220 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000385c8 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00039308 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00039a9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00039bb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00039be4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00039ce4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00039dd8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00039ec4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0003a0a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001db4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0003a314 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0003a454 l     F .text	00000038 alt_dev_reg
00000d28 l     O .rwdata	00001060 jtag_uart1
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0003ac38 l     F .text	00000204 altera_avalon_jtag_uart_irq
0003ae3c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003b478 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003b6d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0003bb5c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0003bcb4 l     F .text	00000050 alt_get_errno
0003bd04 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00036aa4 g     F .text	00000074 _mprec_log10
00036b94 g     F .text	00000084 __any_on
00037814 g     F .text	00000064 _isatty_r
00000108 g     O .rodata	00000028 __mprec_tinytens
00039fe8 g     F .text	00000078 alt_main
00039a58 g     F .text	00000044 __ashldi3
00030408 g     F .text	00000084 _puts_r
00001e20 g     O .bss	00000100 alt_irq
00037878 g     F .text	0000006c _lseek_r
0003a7a4 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0003cac0 g       *ABS*	00000000 __flash_rwdata_start
00038e68 g     F .text	0000005c __eqdf2
00030280 g     F .text	0000001c FIFO_1_INIT
000020b0 g       *ABS*	00000000 __alt_heap_start
000303cc g     F .text	0000003c printf
000373b8 g     F .text	0000005c __sseek
00034088 g     F .text	0000010c __sinit
00034d20 g     F .text	0000009c _setlocale_r
00034000 g     F .text	00000078 __sfmoreglue
0003a080 g     F .text	00000020 __malloc_unlock
00035960 g     F .text	0000018c memmove
0003a524 g     F .text	00000098 altera_avalon_fifo_init
00034078 g     F .text	00000010 _cleanup
0003a854 g     F .text	00000058 altera_avalon_fifo_write_fifo
00035bc8 g     F .text	000000a8 _Balloc
00038f20 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00030000 g     F .entry	0000000c __reset
0003a9ec g     F .text	00000028 altera_avalon_fifo_read_backpressure
00030020 g       *ABS*	00000000 __flash_exceptions_start
000377ac g     F .text	00000068 _fstat_r
00001ddc g     O .bss	00000004 errno
00001de4 g     O .bss	00000004 alt_argv
00009d88 g       *ABS*	00000000 _gp
0003a6f0 g     F .text	0000005c altera_avalon_fifo_clear_event
00000ba8 g     O .rwdata	00000180 alt_fd_list
0003c108 g     F .text	00000090 alt_find_dev
00035820 g     F .text	00000140 memcpy
00033ff4 g     F .text	0000000c _cleanup_r
00039044 g     F .text	000000d4 __floatsidf
0003bc3c g     F .text	00000078 alt_io_redirect
00038fe8 g     F .text	0000005c __ltdf2
0003c754 g       *ABS*	00000000 __DTOR_END__
0003048c g     F .text	00000014 puts
00036a00 g     F .text	000000a4 __ratio
0003b03c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000303a0 g     F .text	0000002c _printf_r
00039428 g     F .text	00000008 __udivsi3
00039d34 g     F .text	000000a4 isatty
00000158 g     O .rodata	000000c8 __mprec_tens
00034dbc g     F .text	0000000c __locale_charset
00001dd8 g     O .bss	00000004 __malloc_top_pad
00001d90 g     O .rwdata	00000004 __mb_cur_max
00034dc8 g     F .text	0000000c _localeconv_r
00035ff8 g     F .text	0000003c __i2b
000346dc g     F .text	000004e4 __sfvwrite_r
00037278 g     F .text	00000064 _sbrk_r
000302b4 g     F .text	000000ac consumer
000378e4 g     F .text	0000006c _read_r
0000076c g     O .rwdata	0000000c __lc_ctype
00001dac g     O .rwdata	00000004 alt_max_fd
00039840 g     F .text	00000104 __unpack_d
0003765c g     F .text	0000013c _fclose_r
00033fb4 g     F .text	00000030 fflush
00001dd4 g     O .bss	00000004 __malloc_max_sbrked_mem
0003891c g     F .text	00000054 __adddf3
00036774 g     F .text	00000148 __b2d
00037fa0 g     F .text	00000628 __umoddi3
00039f14 g     F .text	000000d4 lseek
00001d88 g     O .rwdata	00000004 _global_impure_ptr
00036c18 g     F .text	000005fc _realloc_r
000020b0 g       *ABS*	00000000 __bss_end
0003ba6c g     F .text	000000f0 alt_iic_isr_register
0003bfe4 g     F .text	00000104 alt_tick
00037950 g     F .text	00000650 __udivdi3
00000130 g     O .rodata	00000028 __mprec_bigtens
00035ddc g     F .text	00000104 __s2b
000391ec g     F .text	0000011c __floatunsidf
00036514 g     F .text	00000058 __mcmp
000342a0 g     F .text	00000018 __fp_lock_all
0003ba20 g     F .text	0000004c alt_ic_irq_enabled
0003bf4c g     F .text	00000098 alt_alarm_stop
00001dec g     O .bss	00000004 alt_irq_active
000300ec g     F .exceptions	000000cc alt_irq_handler
00000b80 g     O .rwdata	00000028 alt_dev_null
0003b6b4 g     F .text	0000001c alt_dcache_flush_all
00035ee0 g     F .text	00000068 __hi0bits
00039118 g     F .text	000000d4 __fixdfsi
0003a74c g     F .text	00000058 altera_avalon_fifo_write_ienable
00001dc4 g       *ABS*	00000000 __ram_rwdata_end
0003a660 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00001da4 g     O .rwdata	00000008 alt_dev_list
0003a364 g     F .text	000000f0 write
0000036c g       *ABS*	00000000 __ram_rodata_end
00039c34 g     F .text	000000b0 fstat
00039a14 g     F .text	00000044 __lshrdi3
0003628c g     F .text	0000012c __pow5mult
00001dcc g     O .bss	00000004 __nlocale_changed
00039430 g     F .text	00000008 __umodsi3
000020b0 g       *ABS*	00000000 end
0003ab78 g     F .text	000000c0 altera_avalon_jtag_uart_init
0003a68c g     F .text	0000003c altera_avalon_fifo_read_event
0003c754 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0003b4ec g     F .text	00000088 alt_avalon_timer_sc_init
00039570 g     F .text	000000ac __clzsi2
0003b254 g     F .text	00000224 altera_avalon_jtag_uart_write
00034290 g     F .text	00000004 __sfp_lock_acquire
0003a918 g     F .text	0000004c altera_avalon_fifo_read_fifo
00035728 g     F .text	000000f8 memchr
00030560 g     F .text	00001e7c ___vfprintf_internal_r
0003440c g     F .text	000002d0 _free_r
0003c578 g     F .text	000001a0 __call_exitprocs
00001dc8 g     O .bss	00000004 __mlocale_changed
00001d94 g     O .rwdata	00000004 __malloc_sbrk_base
000301b8 g     F .text	0000003c _start
00001df0 g     O .bss	00000004 _alt_tick_rate
000363b8 g     F .text	0000015c __lshift
00001df4 g     O .bss	00000004 _alt_nticks
0003a0f0 g     F .text	000000f4 read
0003a4c0 g     F .text	00000064 alt_sys_init
0003c448 g     F .text	00000130 __register_exitproc
00036034 g     F .text	00000258 __multiply
0003aee0 g     F .text	00000068 altera_avalon_jtag_uart_close
00039438 g     F .text	00000028 __mulsi3
0000036c g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001df8 g     O .bss	00000028 __malloc_current_mallinfo
000368bc g     F .text	00000144 __d2b
0003aa14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0003c2ac g     F .text	000000d4 alt_get_fd
00039944 g     F .text	000000d0 __fpcmp_parts_d
000375f8 g     F .text	00000064 _close_r
0003c3cc g     F .text	0000007c memcmp
0003aad4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000020b0 g       *ABS*	00000000 __alt_stack_base
0003ab24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00032400 g     F .text	00000174 __swsetup_r
0003a5bc g     F .text	0000003c altera_avalon_fifo_read_status
00038cb4 g     F .text	000001b4 __divdf3
00034194 g     F .text	000000fc __sfp
00036b18 g     F .text	0000007c __copybits
00000778 g     O .rwdata	00000408 __malloc_av_
0003429c g     F .text	00000004 __sinit_lock_release
000389d0 g     F .text	000002e4 __muldf3
000372dc g     F .text	00000054 __sread
0003a9c0 g     F .text	0000002c altera_avalon_fifo_read_other_info
0003c198 g     F .text	00000114 alt_find_file
0003b720 g     F .text	000000a0 alt_dev_llist_insert
0003a060 g     F .text	00000020 __malloc_lock
0003a264 g     F .text	000000b0 sbrk
00033dcc g     F .text	000001e8 _fflush_r
0003752c g     F .text	000000cc _calloc_r
00001dc4 g       *ABS*	00000000 __bss_start
00035aec g     F .text	000000dc memset
0003029c g     F .text	00000018 main
00001de8 g     O .bss	00000004 alt_envp
00001dd0 g     O .bss	00000004 __malloc_max_total_mem
0003aa74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0003a6c8 g     F .text	00000028 altera_avalon_fifo_read_level
00037414 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00037798 g     F .text	00000014 fclose
00001f20 g     O .bss	00000190 _atexit0
000327b0 g     F .text	0000161c _dtoa_r
00034fa4 g     F .text	00000784 _malloc_r
00001db0 g     O .rwdata	00000004 alt_errno
00034bc0 g     F .text	000000a8 _fwalk
000301f4 g     F .text	00000048 WRITE_FIFO_1
0003937c g     F .text	00000050 __divsi3
0000022c g     O .rodata	00000014 __thenan_df
000342d0 g     F .text	0000013c _malloc_trim_r
0003c754 g       *ABS*	00000000 __CTOR_END__
0003741c g     F .text	000000a4 strcmp
0003c754 g       *ABS*	00000000 __flash_rodata_start
0003c754 g       *ABS*	00000000 __DTOR_LIST__
00030360 g     F .text	00000040 delay
00038ec4 g     F .text	0000005c __nedf2
0003a48c g     F .text	00000034 alt_irq_init
0003a1e4 g     F .text	00000080 alt_release_fd
00000240 g     O .rodata	00000100 __clz_tab
00001dc4 g     O .bss	00000004 _PathLocale
0003c380 g     F .text	00000014 atexit
000374c0 g     F .text	0000006c _write_r
00034dd4 g     F .text	0000001c setlocale
00001d8c g     O .rwdata	00000004 _impure_ptr
00001de0 g     O .bss	00000004 alt_argc
0003b81c g     F .text	0000005c _do_dtors
00030020 g       .exceptions	00000000 alt_irq_entry
00036714 g     F .text	00000060 __ulp
00037214 g     F .text	00000038 __isinfd
000342b8 g     F .text	00000018 __fp_unlock_all
00001d9c g     O .rwdata	00000008 alt_fs_list
00030000 g       *ABS*	00000000 __alt_mem_onchip_instruction_memory1
00030020 g       *ABS*	00000000 __ram_exceptions_start
00034df0 g     F .text	0000000c localeconv
0003a964 g     F .text	0000005c altera_avalon_fifo_write_other_info
0003b894 g     F .text	00000050 alt_ic_isr_register
00001dc4 g       *ABS*	00000000 _edata
00000000 g       *ABS*	00000000 __alt_mem_onchip_data_memory_cpu1
000020b0 g       *ABS*	00000000 _end
000301b8 g       *ABS*	00000000 __ram_exceptions_end
0003af48 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0003b980 g     F .text	000000a0 alt_ic_irq_disable
00037330 g     F .text	00000088 __swrite
00001d98 g     O .rwdata	00000004 __malloc_trim_threshold
0003c0e8 g     F .text	00000020 altera_nios2_qsys_irq_init
0003c394 g     F .text	00000038 exit
00034c68 g     F .text	000000b8 _fwalk_reent
0003656c g     F .text	000001a8 __mdiff
000393cc g     F .text	0000005c __modsi3
0003a5f8 g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00030020 g     F .exceptions	00000000 alt_exception
00034294 g     F .text	00000004 __sfp_lock_release
0003c718 g     F .text	0000003c _exit
0003724c g     F .text	0000002c __isnand
0003b574 g     F .text	00000140 alt_alarm_start
00039460 g     F .text	00000110 __muldi3
0003a634 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00034dfc g     F .text	000001a8 __smakebuf_r
000304a0 g     F .text	0000008c strlen
0003bdf4 g     F .text	00000158 open
0003a8ac g     F .text	0000006c altera_avalon_read_fifo
00038f84 g     F .text	00000064 __gedf2
0003023c g     F .text	00000044 READ_FIFO_1
0003b878 g     F .text	0000001c alt_icache_flush_all
00001db8 g     O .rwdata	00000004 alt_priority_mask
0003b8e4 g     F .text	0000009c alt_ic_irq_enable
000323dc g     F .text	00000024 __vfprintf_internal
00038970 g     F .text	00000060 __subdf3
00035f48 g     F .text	000000b0 __lo0bits
0003a7fc g     F .text	00000058 altera_avalon_fifo_write_almostempty
00001dbc g     O .rwdata	00000008 alt_alarm_list
0003b7c0 g     F .text	0000005c _do_ctors
00039aec g     F .text	000000cc close
00039e44 g     F .text	00000080 alt_load
0003961c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00034298 g     F .text	00000004 __sinit_lock_acquire
00035c98 g     F .text	00000144 __multadd
00035c70 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00030000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   30000:	004000f4 	movhi	at,3
    ori r1, r1, %lo(_start)
   30004:	08406e14 	ori	at,at,440
    jmp r1
   30008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00030020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   30020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   30024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   30028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   3002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   30030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   30034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   30038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   3003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   30040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   30044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   30048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   3004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   30050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   30054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   30058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   3005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   30060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   30064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   30068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   3006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   30070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   30074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   30078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   3007c:	10000326 	beq	r2,zero,3008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   30080:	20000226 	beq	r4,zero,3008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   30084:	00300ec0 	call	300ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   30088:	00000306 	br	30098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   3008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   30090:	e8bfff17 	ldw	r2,-4(ea)

00030094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   30094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   30098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   3009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   300a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   300a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   300a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   300ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   300b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   300b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   300b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   300bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   300c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   300c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   300c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   300cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   300d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   300d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   300d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   300dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   300e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   300e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   300e8:	ef80083a 	eret

000300ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   300ec:	defff904 	addi	sp,sp,-28
   300f0:	dfc00615 	stw	ra,24(sp)
   300f4:	df000515 	stw	fp,20(sp)
   300f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   300fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   30100:	0005313a 	rdctl	r2,ipending
   30104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   30108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   3010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   30110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   30114:	00800044 	movi	r2,1
   30118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   3011c:	e0fffb17 	ldw	r3,-20(fp)
   30120:	e0bffc17 	ldw	r2,-16(fp)
   30124:	1884703a 	and	r2,r3,r2
   30128:	10001726 	beq	r2,zero,30188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   3012c:	00c00034 	movhi	r3,0
   30130:	18c78804 	addi	r3,r3,7712
   30134:	e0bffd17 	ldw	r2,-12(fp)
   30138:	100490fa 	slli	r2,r2,3
   3013c:	1885883a 	add	r2,r3,r2
   30140:	10c00017 	ldw	r3,0(r2)
   30144:	01000034 	movhi	r4,0
   30148:	21078804 	addi	r4,r4,7712
   3014c:	e0bffd17 	ldw	r2,-12(fp)
   30150:	100490fa 	slli	r2,r2,3
   30154:	2085883a 	add	r2,r4,r2
   30158:	10800104 	addi	r2,r2,4
   3015c:	10800017 	ldw	r2,0(r2)
   30160:	1009883a 	mov	r4,r2
   30164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   30168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   3016c:	0005313a 	rdctl	r2,ipending
   30170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   30174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   30178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   3017c:	e0bffb17 	ldw	r2,-20(fp)
   30180:	103fe31e 	bne	r2,zero,30110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   30184:	00000706 	br	301a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   30188:	e0bffc17 	ldw	r2,-16(fp)
   3018c:	1085883a 	add	r2,r2,r2
   30190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   30194:	e0bffd17 	ldw	r2,-12(fp)
   30198:	10800044 	addi	r2,r2,1
   3019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   301a0:	003fde06 	br	3011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   301a4:	e037883a 	mov	sp,fp
   301a8:	dfc00117 	ldw	ra,4(sp)
   301ac:	df000017 	ldw	fp,0(sp)
   301b0:	dec00204 	addi	sp,sp,8
   301b4:	f800283a 	ret

Disassembly of section .text:

000301b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   301b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   301bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   301c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
   301c4:	d6a76214 	ori	gp,gp,40328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   301c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
   301cc:	10877114 	ori	r2,r2,7620

    movhi r3, %hi(__bss_end)
   301d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
   301d4:	18c82c14 	ori	r3,r3,8368

    beq r2, r3, 1f
   301d8:	10c00326 	beq	r2,r3,301e8 <_start+0x30>

0:
    stw zero, (r2)
   301dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   301e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   301e4:	10fffd36 	bltu	r2,r3,301dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   301e8:	0039e440 	call	39e44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   301ec:	0039fe80 	call	39fe8 <alt_main>

000301f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   301f0:	003fff06 	br	301f0 <alt_after_alt_main>

000301f4 <WRITE_FIFO_1>:
 */

#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   301f4:	defffd04 	addi	sp,sp,-12
   301f8:	dfc00215 	stw	ra,8(sp)
   301fc:	df000115 	stw	fp,4(sp)
   30200:	df000104 	addi	fp,sp,4
   30204:	e13fff15 	stw	r4,-4(fp)
	// 									  ALTERA_AVALON_FIFO_STATUS_FULL))
	// {
	// }

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(IN_BASE, CONTROL_BASE, *buffer);
   30208:	e0bfff17 	ldw	r2,-4(fp)
   3020c:	10800017 	ldw	r2,0(r2)
   30210:	01000134 	movhi	r4,4
   30214:	21041404 	addi	r4,r4,4176
   30218:	01400134 	movhi	r5,4
   3021c:	29440004 	addi	r5,r5,4096
   30220:	100d883a 	mov	r6,r2
   30224:	003a8540 	call	3a854 <altera_avalon_fifo_write_fifo>
}
   30228:	e037883a 	mov	sp,fp
   3022c:	dfc00117 	ldw	ra,4(sp)
   30230:	df000017 	ldw	fp,0(sp)
   30234:	dec00204 	addi	sp,sp,8
   30238:	f800283a 	ret

0003023c <READ_FIFO_1>:

void READ_FIFO_1(int *buffer)
{
   3023c:	defffd04 	addi	sp,sp,-12
   30240:	dfc00215 	stw	ra,8(sp)
   30244:	df000115 	stw	fp,4(sp)
   30248:	df000104 	addi	fp,sp,4
   3024c:	e13fff15 	stw	r4,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(OUT_BASE, CONTROL_BASE);
   30250:	01000134 	movhi	r4,4
   30254:	21041404 	addi	r4,r4,4176
   30258:	01400134 	movhi	r5,4
   3025c:	29440004 	addi	r5,r5,4096
   30260:	003a9180 	call	3a918 <altera_avalon_fifo_read_fifo>
   30264:	e0ffff17 	ldw	r3,-4(fp)
   30268:	18800015 	stw	r2,0(r3)
}
   3026c:	e037883a 	mov	sp,fp
   30270:	dfc00117 	ldw	ra,4(sp)
   30274:	df000017 	ldw	fp,0(sp)
   30278:	dec00204 	addi	sp,sp,8
   3027c:	f800283a 	ret

00030280 <FIFO_1_INIT>:

// Initialization
void FIFO_1_INIT()
{
   30280:	deffff04 	addi	sp,sp,-4
   30284:	df000015 	stw	fp,0(sp)
   30288:	d839883a 	mov	fp,sp
	// Clear event register, set enable all interrupts, set almostempty and almostfull thresholds
	// altera_avalon_fifo_init(CONTROL_BASE,
	// 						0,
	// 						1,				 // Almost empty threshold
	// 						FIFO_DEPTH - 1); // Almost full threshold
   3028c:	e037883a 	mov	sp,fp
   30290:	df000017 	ldw	fp,0(sp)
   30294:	dec00104 	addi	sp,sp,4
   30298:	f800283a 	ret

0003029c <main>:

void delay(int n);
int consumer();

int main()
{
   3029c:	defffe04 	addi	sp,sp,-8
   302a0:	dfc00115 	stw	ra,4(sp)
   302a4:	df000015 	stw	fp,0(sp)
   302a8:	d839883a 	mov	fp,sp
	consumer();
   302ac:	00302b40 	call	302b4 <consumer>

	while (1)
	{
	}
   302b0:	003fff06 	br	302b0 <main+0x14>

000302b4 <consumer>:

	return 0;
}

int consumer()
{
   302b4:	defffc04 	addi	sp,sp,-16
   302b8:	dfc00315 	stw	ra,12(sp)
   302bc:	df000215 	stw	fp,8(sp)
   302c0:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   302c4:	01000034 	movhi	r4,0
   302c8:	21000004 	addi	r4,r4,0
   302cc:	003048c0 	call	3048c <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   302d0:	00302800 	call	30280 <FIFO_1_INIT>

	int j = 0;
   302d4:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   302d8:	00800144 	movi	r2,5
   302dc:	e0bffe15 	stw	r2,-8(fp)
	while (k < 500)
   302e0:	00001306 	br	30330 <consumer+0x7c>
	{
		READ_FIFO_1(&j); // Read from the producer-consumer fifo
   302e4:	e0bfff04 	addi	r2,fp,-4
   302e8:	1009883a 	mov	r4,r2
   302ec:	003023c0 	call	3023c <READ_FIFO_1>
		printf("Consumer succefully received [%i]\n", j);
   302f0:	e0bfff17 	ldw	r2,-4(fp)
   302f4:	01000034 	movhi	r4,0
   302f8:	21000504 	addi	r4,r4,20
   302fc:	100b883a 	mov	r5,r2
   30300:	00303cc0 	call	303cc <printf>
		if (j == k)
   30304:	e0ffff17 	ldw	r3,-4(fp)
   30308:	e0bffe17 	ldw	r2,-8(fp)
   3030c:	1880051e 	bne	r3,r2,30324 <consumer+0x70>
			printf("Consumer succefully received [%i]\n", j);
   30310:	e0bfff17 	ldw	r2,-4(fp)
   30314:	01000034 	movhi	r4,0
   30318:	21000504 	addi	r4,r4,20
   3031c:	100b883a 	mov	r5,r2
   30320:	00303cc0 	call	303cc <printf>

		k += 10;
   30324:	e0bffe17 	ldw	r2,-8(fp)
   30328:	10800284 	addi	r2,r2,10
   3032c:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while (k < 500)
   30330:	e0bffe17 	ldw	r2,-8(fp)
   30334:	10807d10 	cmplti	r2,r2,500
   30338:	103fea1e 	bne	r2,zero,302e4 <consumer+0x30>
			printf("Consumer succefully received [%i]\n", j);

		k += 10;
	}

	printf("Consumer finished..\n");
   3033c:	01000034 	movhi	r4,0
   30340:	21000e04 	addi	r4,r4,56
   30344:	003048c0 	call	3048c <puts>
	return 0;
   30348:	0005883a 	mov	r2,zero
}
   3034c:	e037883a 	mov	sp,fp
   30350:	dfc00117 	ldw	ra,4(sp)
   30354:	df000017 	ldw	fp,0(sp)
   30358:	dec00204 	addi	sp,sp,8
   3035c:	f800283a 	ret

00030360 <delay>:

void delay(int n)
{
   30360:	defffd04 	addi	sp,sp,-12
   30364:	df000215 	stw	fp,8(sp)
   30368:	df000204 	addi	fp,sp,8
   3036c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   30370:	e0bfff17 	ldw	r2,-4(fp)
   30374:	e0bffe15 	stw	r2,-8(fp)
   30378:	00000306 	br	30388 <delay+0x28>
   3037c:	e0bffe17 	ldw	r2,-8(fp)
   30380:	10bfffc4 	addi	r2,r2,-1
   30384:	e0bffe15 	stw	r2,-8(fp)
   30388:	e0bffe17 	ldw	r2,-8(fp)
   3038c:	00bffb16 	blt	zero,r2,3037c <delay+0x1c>
	{
		continue;
	}
   30390:	e037883a 	mov	sp,fp
   30394:	df000017 	ldw	fp,0(sp)
   30398:	dec00104 	addi	sp,sp,4
   3039c:	f800283a 	ret

000303a0 <_printf_r>:
   303a0:	defffd04 	addi	sp,sp,-12
   303a4:	dfc00015 	stw	ra,0(sp)
   303a8:	d9800115 	stw	r6,4(sp)
   303ac:	d9c00215 	stw	r7,8(sp)
   303b0:	280d883a 	mov	r6,r5
   303b4:	21400217 	ldw	r5,8(r4)
   303b8:	d9c00104 	addi	r7,sp,4
   303bc:	00305600 	call	30560 <___vfprintf_internal_r>
   303c0:	dfc00017 	ldw	ra,0(sp)
   303c4:	dec00304 	addi	sp,sp,12
   303c8:	f800283a 	ret

000303cc <printf>:
   303cc:	defffc04 	addi	sp,sp,-16
   303d0:	dfc00015 	stw	ra,0(sp)
   303d4:	d9400115 	stw	r5,4(sp)
   303d8:	d9800215 	stw	r6,8(sp)
   303dc:	d9c00315 	stw	r7,12(sp)
   303e0:	00800034 	movhi	r2,0
   303e4:	10876304 	addi	r2,r2,7564
   303e8:	10800017 	ldw	r2,0(r2)
   303ec:	200b883a 	mov	r5,r4
   303f0:	d9800104 	addi	r6,sp,4
   303f4:	11000217 	ldw	r4,8(r2)
   303f8:	00323dc0 	call	323dc <__vfprintf_internal>
   303fc:	dfc00017 	ldw	ra,0(sp)
   30400:	dec00404 	addi	sp,sp,16
   30404:	f800283a 	ret

00030408 <_puts_r>:
   30408:	defff604 	addi	sp,sp,-40
   3040c:	dc400815 	stw	r17,32(sp)
   30410:	2023883a 	mov	r17,r4
   30414:	2809883a 	mov	r4,r5
   30418:	dc000715 	stw	r16,28(sp)
   3041c:	dfc00915 	stw	ra,36(sp)
   30420:	2821883a 	mov	r16,r5
   30424:	00304a00 	call	304a0 <strlen>
   30428:	10c00044 	addi	r3,r2,1
   3042c:	d8800115 	stw	r2,4(sp)
   30430:	89400217 	ldw	r5,8(r17)
   30434:	00800034 	movhi	r2,0
   30438:	10801304 	addi	r2,r2,76
   3043c:	d8800215 	stw	r2,8(sp)
   30440:	00800044 	movi	r2,1
   30444:	d8800315 	stw	r2,12(sp)
   30448:	8809883a 	mov	r4,r17
   3044c:	00800084 	movi	r2,2
   30450:	d9800404 	addi	r6,sp,16
   30454:	dc000015 	stw	r16,0(sp)
   30458:	d8c00615 	stw	r3,24(sp)
   3045c:	dec00415 	stw	sp,16(sp)
   30460:	d8800515 	stw	r2,20(sp)
   30464:	00346dc0 	call	346dc <__sfvwrite_r>
   30468:	1000061e 	bne	r2,zero,30484 <_puts_r+0x7c>
   3046c:	00800284 	movi	r2,10
   30470:	dfc00917 	ldw	ra,36(sp)
   30474:	dc400817 	ldw	r17,32(sp)
   30478:	dc000717 	ldw	r16,28(sp)
   3047c:	dec00a04 	addi	sp,sp,40
   30480:	f800283a 	ret
   30484:	00bfffc4 	movi	r2,-1
   30488:	003ff906 	br	30470 <_puts_r+0x68>

0003048c <puts>:
   3048c:	00800034 	movhi	r2,0
   30490:	10876304 	addi	r2,r2,7564
   30494:	200b883a 	mov	r5,r4
   30498:	11000017 	ldw	r4,0(r2)
   3049c:	00304081 	jmpi	30408 <_puts_r>

000304a0 <strlen>:
   304a0:	208000cc 	andi	r2,r4,3
   304a4:	10001f1e 	bne	r2,zero,30524 <strlen+0x84>
   304a8:	20800017 	ldw	r2,0(r4)
   304ac:	01ffbff4 	movhi	r7,65279
   304b0:	39ffbfc4 	addi	r7,r7,-257
   304b4:	01a02074 	movhi	r6,32897
   304b8:	31a02004 	addi	r6,r6,-32640
   304bc:	11c7883a 	add	r3,r2,r7
   304c0:	0084303a 	nor	r2,zero,r2
   304c4:	1886703a 	and	r3,r3,r2
   304c8:	1986703a 	and	r3,r3,r6
   304cc:	2005883a 	mov	r2,r4
   304d0:	1800101e 	bne	r3,zero,30514 <strlen+0x74>
   304d4:	10800104 	addi	r2,r2,4
   304d8:	10c00017 	ldw	r3,0(r2)
   304dc:	19cb883a 	add	r5,r3,r7
   304e0:	00c6303a 	nor	r3,zero,r3
   304e4:	28c6703a 	and	r3,r5,r3
   304e8:	1986703a 	and	r3,r3,r6
   304ec:	1800091e 	bne	r3,zero,30514 <strlen+0x74>
   304f0:	10800104 	addi	r2,r2,4
   304f4:	10c00017 	ldw	r3,0(r2)
   304f8:	19cb883a 	add	r5,r3,r7
   304fc:	00c6303a 	nor	r3,zero,r3
   30500:	28c6703a 	and	r3,r5,r3
   30504:	1986703a 	and	r3,r3,r6
   30508:	183ff226 	beq	r3,zero,304d4 <strlen+0x34>
   3050c:	00000106 	br	30514 <strlen+0x74>
   30510:	10800044 	addi	r2,r2,1
   30514:	10c00007 	ldb	r3,0(r2)
   30518:	183ffd1e 	bne	r3,zero,30510 <strlen+0x70>
   3051c:	1105c83a 	sub	r2,r2,r4
   30520:	f800283a 	ret
   30524:	2005883a 	mov	r2,r4
   30528:	003ffa06 	br	30514 <strlen+0x74>

0003052c <__sprint_r>:
   3052c:	30800217 	ldw	r2,8(r6)
   30530:	defffe04 	addi	sp,sp,-8
   30534:	dc000015 	stw	r16,0(sp)
   30538:	dfc00115 	stw	ra,4(sp)
   3053c:	3021883a 	mov	r16,r6
   30540:	10000226 	beq	r2,zero,3054c <__sprint_r+0x20>
   30544:	00346dc0 	call	346dc <__sfvwrite_r>
   30548:	80000215 	stw	zero,8(r16)
   3054c:	80000115 	stw	zero,4(r16)
   30550:	dfc00117 	ldw	ra,4(sp)
   30554:	dc000017 	ldw	r16,0(sp)
   30558:	dec00204 	addi	sp,sp,8
   3055c:	f800283a 	ret

00030560 <___vfprintf_internal_r>:
   30560:	defeb904 	addi	sp,sp,-1308
   30564:	dc013d15 	stw	r16,1268(sp)
   30568:	d9013015 	stw	r4,1216(sp)
   3056c:	dfc14615 	stw	ra,1304(sp)
   30570:	df014515 	stw	fp,1300(sp)
   30574:	ddc14415 	stw	r23,1296(sp)
   30578:	dd814315 	stw	r22,1292(sp)
   3057c:	dd414215 	stw	r21,1288(sp)
   30580:	dd014115 	stw	r20,1284(sp)
   30584:	dcc14015 	stw	r19,1280(sp)
   30588:	dc813f15 	stw	r18,1276(sp)
   3058c:	dc413e15 	stw	r17,1272(sp)
   30590:	d9412915 	stw	r5,1188(sp)
   30594:	3021883a 	mov	r16,r6
   30598:	d9c12d15 	stw	r7,1204(sp)
   3059c:	0034dc80 	call	34dc8 <_localeconv_r>
   305a0:	10800017 	ldw	r2,0(r2)
   305a4:	d9013017 	ldw	r4,1216(sp)
   305a8:	d8013315 	stw	zero,1228(sp)
   305ac:	d8813715 	stw	r2,1244(sp)
   305b0:	d8013415 	stw	zero,1232(sp)
   305b4:	20000226 	beq	r4,zero,305c0 <___vfprintf_internal_r+0x60>
   305b8:	20800e17 	ldw	r2,56(r4)
   305bc:	10014b26 	beq	r2,zero,30aec <___vfprintf_internal_r+0x58c>
   305c0:	d8c12917 	ldw	r3,1188(sp)
   305c4:	1880030b 	ldhu	r2,12(r3)
   305c8:	10c0020c 	andi	r3,r2,8
   305cc:	18ffffcc 	andi	r3,r3,65535
   305d0:	18e0001c 	xori	r3,r3,32768
   305d4:	18e00004 	addi	r3,r3,-32768
   305d8:	1800ed26 	beq	r3,zero,30990 <___vfprintf_internal_r+0x430>
   305dc:	d9012917 	ldw	r4,1188(sp)
   305e0:	20c00417 	ldw	r3,16(r4)
   305e4:	1800ea26 	beq	r3,zero,30990 <___vfprintf_internal_r+0x430>
   305e8:	1100068c 	andi	r4,r2,26
   305ec:	00c00284 	movi	r3,10
   305f0:	20c0f026 	beq	r4,r3,309b4 <___vfprintf_internal_r+0x454>
   305f4:	d9010dc4 	addi	r4,sp,1079
   305f8:	d8810e04 	addi	r2,sp,1080
   305fc:	dc413017 	ldw	r17,1216(sp)
   30600:	d8c00404 	addi	r3,sp,16
   30604:	d9012615 	stw	r4,1176(sp)
   30608:	1109c83a 	sub	r4,r2,r4
   3060c:	d8812715 	stw	r2,1180(sp)
   30610:	d8c11b15 	stw	r3,1132(sp)
   30614:	d8011d15 	stw	zero,1140(sp)
   30618:	d8011c15 	stw	zero,1136(sp)
   3061c:	802b883a 	mov	r21,r16
   30620:	d8013215 	stw	zero,1224(sp)
   30624:	d8013615 	stw	zero,1240(sp)
   30628:	d8013515 	stw	zero,1236(sp)
   3062c:	d8012c15 	stw	zero,1200(sp)
   30630:	1813883a 	mov	r9,r3
   30634:	d9013915 	stw	r4,1252(sp)
   30638:	a8800007 	ldb	r2,0(r21)
   3063c:	1002f326 	beq	r2,zero,3120c <___vfprintf_internal_r+0xcac>
   30640:	00c00944 	movi	r3,37
   30644:	a825883a 	mov	r18,r21
   30648:	10c0021e 	bne	r2,r3,30654 <___vfprintf_internal_r+0xf4>
   3064c:	00001406 	br	306a0 <___vfprintf_internal_r+0x140>
   30650:	10c00326 	beq	r2,r3,30660 <___vfprintf_internal_r+0x100>
   30654:	94800044 	addi	r18,r18,1
   30658:	90800007 	ldb	r2,0(r18)
   3065c:	103ffc1e 	bne	r2,zero,30650 <___vfprintf_internal_r+0xf0>
   30660:	9561c83a 	sub	r16,r18,r21
   30664:	80000e26 	beq	r16,zero,306a0 <___vfprintf_internal_r+0x140>
   30668:	da011d17 	ldw	r8,1140(sp)
   3066c:	d8c11c17 	ldw	r3,1136(sp)
   30670:	4d400015 	stw	r21,0(r9)
   30674:	4c000115 	stw	r16,4(r9)
   30678:	4411883a 	add	r8,r8,r16
   3067c:	18c00044 	addi	r3,r3,1
   30680:	da011d15 	stw	r8,1140(sp)
   30684:	d8c11c15 	stw	r3,1136(sp)
   30688:	008001c4 	movi	r2,7
   3068c:	10c11016 	blt	r2,r3,30ad0 <___vfprintf_internal_r+0x570>
   30690:	4a400204 	addi	r9,r9,8
   30694:	d8812c17 	ldw	r2,1200(sp)
   30698:	1405883a 	add	r2,r2,r16
   3069c:	d8812c15 	stw	r2,1200(sp)
   306a0:	90800007 	ldb	r2,0(r18)
   306a4:	1000ee26 	beq	r2,zero,30a60 <___vfprintf_internal_r+0x500>
   306a8:	95400044 	addi	r21,r18,1
   306ac:	94800047 	ldb	r18,1(r18)
   306b0:	073fffc4 	movi	fp,-1
   306b4:	e007883a 	mov	r3,fp
   306b8:	d8012585 	stb	zero,1174(sp)
   306bc:	d8012e15 	stw	zero,1208(sp)
   306c0:	0021883a 	mov	r16,zero
   306c4:	05001604 	movi	r20,88
   306c8:	04c00244 	movi	r19,9
   306cc:	4839883a 	mov	fp,r9
   306d0:	ad400044 	addi	r21,r21,1
   306d4:	90bff804 	addi	r2,r18,-32
   306d8:	a080462e 	bgeu	r20,r2,307f4 <___vfprintf_internal_r+0x294>
   306dc:	e013883a 	mov	r9,fp
   306e0:	9000df26 	beq	r18,zero,30a60 <___vfprintf_internal_r+0x500>
   306e4:	00c00044 	movi	r3,1
   306e8:	d8c12815 	stw	r3,1184(sp)
   306ec:	dc810405 	stb	r18,1040(sp)
   306f0:	d8012585 	stb	zero,1174(sp)
   306f4:	d8c12b15 	stw	r3,1196(sp)
   306f8:	dcc10404 	addi	r19,sp,1040
   306fc:	d8013115 	stw	zero,1220(sp)
   30700:	80c0008c 	andi	r3,r16,2
   30704:	d8c12a15 	stw	r3,1192(sp)
   30708:	18000326 	beq	r3,zero,30718 <___vfprintf_internal_r+0x1b8>
   3070c:	d8c12817 	ldw	r3,1184(sp)
   30710:	18c00084 	addi	r3,r3,2
   30714:	d8c12815 	stw	r3,1184(sp)
   30718:	80c0210c 	andi	r3,r16,132
   3071c:	d8c12f15 	stw	r3,1212(sp)
   30720:	1802251e 	bne	r3,zero,30fb8 <___vfprintf_internal_r+0xa58>
   30724:	d9012e17 	ldw	r4,1208(sp)
   30728:	d8c12817 	ldw	r3,1184(sp)
   3072c:	20edc83a 	sub	r22,r4,r3
   30730:	0582210e 	bge	zero,r22,30fb8 <___vfprintf_internal_r+0xa58>
   30734:	02800404 	movi	r10,16
   30738:	da011d17 	ldw	r8,1140(sp)
   3073c:	d8c11c17 	ldw	r3,1136(sp)
   30740:	05c00034 	movhi	r23,0
   30744:	bdc02484 	addi	r23,r23,146
   30748:	5580200e 	bge	r10,r22,307cc <___vfprintf_internal_r+0x26c>
   3074c:	dc813815 	stw	r18,1248(sp)
   30750:	5039883a 	mov	fp,r10
   30754:	b825883a 	mov	r18,r23
   30758:	050001c4 	movi	r20,7
   3075c:	b02f883a 	mov	r23,r22
   30760:	802d883a 	mov	r22,r16
   30764:	dc012917 	ldw	r16,1188(sp)
   30768:	00000306 	br	30778 <___vfprintf_internal_r+0x218>
   3076c:	bdfffc04 	addi	r23,r23,-16
   30770:	4a400204 	addi	r9,r9,8
   30774:	e5c0110e 	bge	fp,r23,307bc <___vfprintf_internal_r+0x25c>
   30778:	4c800015 	stw	r18,0(r9)
   3077c:	4f000115 	stw	fp,4(r9)
   30780:	42000404 	addi	r8,r8,16
   30784:	18c00044 	addi	r3,r3,1
   30788:	da011d15 	stw	r8,1140(sp)
   3078c:	d8c11c15 	stw	r3,1136(sp)
   30790:	a0fff60e 	bge	r20,r3,3076c <___vfprintf_internal_r+0x20c>
   30794:	8809883a 	mov	r4,r17
   30798:	800b883a 	mov	r5,r16
   3079c:	d9811b04 	addi	r6,sp,1132
   307a0:	003052c0 	call	3052c <__sprint_r>
   307a4:	1000b41e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   307a8:	bdfffc04 	addi	r23,r23,-16
   307ac:	da011d17 	ldw	r8,1140(sp)
   307b0:	d8c11c17 	ldw	r3,1136(sp)
   307b4:	da400404 	addi	r9,sp,16
   307b8:	e5ffef16 	blt	fp,r23,30778 <___vfprintf_internal_r+0x218>
   307bc:	b021883a 	mov	r16,r22
   307c0:	b82d883a 	mov	r22,r23
   307c4:	902f883a 	mov	r23,r18
   307c8:	dc813817 	ldw	r18,1248(sp)
   307cc:	4dc00015 	stw	r23,0(r9)
   307d0:	4d800115 	stw	r22,4(r9)
   307d4:	4591883a 	add	r8,r8,r22
   307d8:	18c00044 	addi	r3,r3,1
   307dc:	da011d15 	stw	r8,1140(sp)
   307e0:	d8c11c15 	stw	r3,1136(sp)
   307e4:	008001c4 	movi	r2,7
   307e8:	10c3fe16 	blt	r2,r3,317e4 <___vfprintf_internal_r+0x1284>
   307ec:	4a400204 	addi	r9,r9,8
   307f0:	0001f306 	br	30fc0 <___vfprintf_internal_r+0xa60>
   307f4:	1085883a 	add	r2,r2,r2
   307f8:	1085883a 	add	r2,r2,r2
   307fc:	010000f4 	movhi	r4,3
   30800:	21020404 	addi	r4,r4,2064
   30804:	1105883a 	add	r2,r2,r4
   30808:	10800017 	ldw	r2,0(r2)
   3080c:	1000683a 	jmp	r2
   30810:	00030eec 	andhi	zero,zero,3131
   30814:	000306dc 	xori	zero,zero,3099
   30818:	000306dc 	xori	zero,zero,3099
   3081c:	00030f04 	movi	zero,3132
   30820:	000306dc 	xori	zero,zero,3099
   30824:	000306dc 	xori	zero,zero,3099
   30828:	000306dc 	xori	zero,zero,3099
   3082c:	000306dc 	xori	zero,zero,3099
   30830:	000306dc 	xori	zero,zero,3099
   30834:	000306dc 	xori	zero,zero,3099
   30838:	00030dbc 	xorhi	zero,zero,3126
   3083c:	00030f50 	cmplti	zero,zero,3133
   30840:	000306dc 	xori	zero,zero,3099
   30844:	00030984 	movi	zero,3110
   30848:	00030d24 	muli	zero,zero,3124
   3084c:	000306dc 	xori	zero,zero,3099
   30850:	00030f10 	cmplti	zero,zero,3132
   30854:	00030f1c 	xori	zero,zero,3132
   30858:	00030f1c 	xori	zero,zero,3132
   3085c:	00030f1c 	xori	zero,zero,3132
   30860:	00030f1c 	xori	zero,zero,3132
   30864:	00030f1c 	xori	zero,zero,3132
   30868:	00030f1c 	xori	zero,zero,3132
   3086c:	00030f1c 	xori	zero,zero,3132
   30870:	00030f1c 	xori	zero,zero,3132
   30874:	00030f1c 	xori	zero,zero,3132
   30878:	000306dc 	xori	zero,zero,3099
   3087c:	000306dc 	xori	zero,zero,3099
   30880:	000306dc 	xori	zero,zero,3099
   30884:	000306dc 	xori	zero,zero,3099
   30888:	000306dc 	xori	zero,zero,3099
   3088c:	000306dc 	xori	zero,zero,3099
   30890:	000306dc 	xori	zero,zero,3099
   30894:	000306dc 	xori	zero,zero,3099
   30898:	000306dc 	xori	zero,zero,3099
   3089c:	000306dc 	xori	zero,zero,3099
   308a0:	00030af4 	movhi	zero,3115
   308a4:	00030bb4 	movhi	zero,3118
   308a8:	000306dc 	xori	zero,zero,3099
   308ac:	00030bb4 	movhi	zero,3118
   308b0:	000306dc 	xori	zero,zero,3099
   308b4:	000306dc 	xori	zero,zero,3099
   308b8:	000306dc 	xori	zero,zero,3099
   308bc:	000306dc 	xori	zero,zero,3099
   308c0:	00030c48 	cmpgei	zero,zero,3121
   308c4:	000306dc 	xori	zero,zero,3099
   308c8:	000306dc 	xori	zero,zero,3099
   308cc:	00030c54 	movui	zero,3121
   308d0:	000306dc 	xori	zero,zero,3099
   308d4:	000306dc 	xori	zero,zero,3099
   308d8:	000306dc 	xori	zero,zero,3099
   308dc:	000306dc 	xori	zero,zero,3099
   308e0:	000306dc 	xori	zero,zero,3099
   308e4:	00030c8c 	andi	zero,zero,3122
   308e8:	000306dc 	xori	zero,zero,3099
   308ec:	000306dc 	xori	zero,zero,3099
   308f0:	00030cc8 	cmpgei	zero,zero,3123
   308f4:	000306dc 	xori	zero,zero,3099
   308f8:	000306dc 	xori	zero,zero,3099
   308fc:	000306dc 	xori	zero,zero,3099
   30900:	000306dc 	xori	zero,zero,3099
   30904:	000306dc 	xori	zero,zero,3099
   30908:	000306dc 	xori	zero,zero,3099
   3090c:	000306dc 	xori	zero,zero,3099
   30910:	000306dc 	xori	zero,zero,3099
   30914:	000306dc 	xori	zero,zero,3099
   30918:	000306dc 	xori	zero,zero,3099
   3091c:	00030f60 	cmpeqi	zero,zero,3133
   30920:	00030f94 	movui	zero,3134
   30924:	00030bb4 	movhi	zero,3118
   30928:	00030bb4 	movhi	zero,3118
   3092c:	00030bb4 	movhi	zero,3118
   30930:	00030ee0 	cmpeqi	zero,zero,3131
   30934:	00030f94 	movui	zero,3134
   30938:	000306dc 	xori	zero,zero,3099
   3093c:	000306dc 	xori	zero,zero,3099
   30940:	00030d6c 	andhi	zero,zero,3125
   30944:	000306dc 	xori	zero,zero,3099
   30948:	00030d84 	movi	zero,3126
   3094c:	00030fa0 	cmpeqi	zero,zero,3134
   30950:	00030de4 	muli	zero,zero,3127
   30954:	00030e34 	movhi	zero,3128
   30958:	000306dc 	xori	zero,zero,3099
   3095c:	00030e40 	call	30e4 <__alt_heap_start+0x1034>
   30960:	000306dc 	xori	zero,zero,3099
   30964:	00030fac 	andhi	zero,zero,3134
   30968:	000306dc 	xori	zero,zero,3099
   3096c:	000306dc 	xori	zero,zero,3099
   30970:	00030ea4 	muli	zero,zero,3130
   30974:	d9012e17 	ldw	r4,1208(sp)
   30978:	d8812d15 	stw	r2,1204(sp)
   3097c:	0109c83a 	sub	r4,zero,r4
   30980:	d9012e15 	stw	r4,1208(sp)
   30984:	84000114 	ori	r16,r16,4
   30988:	ac800007 	ldb	r18,0(r21)
   3098c:	003f5006 	br	306d0 <___vfprintf_internal_r+0x170>
   30990:	d9013017 	ldw	r4,1216(sp)
   30994:	d9412917 	ldw	r5,1188(sp)
   30998:	00324000 	call	32400 <__swsetup_r>
   3099c:	10003d1e 	bne	r2,zero,30a94 <___vfprintf_internal_r+0x534>
   309a0:	d8c12917 	ldw	r3,1188(sp)
   309a4:	1880030b 	ldhu	r2,12(r3)
   309a8:	00c00284 	movi	r3,10
   309ac:	1100068c 	andi	r4,r2,26
   309b0:	20ff101e 	bne	r4,r3,305f4 <___vfprintf_internal_r+0x94>
   309b4:	d9012917 	ldw	r4,1188(sp)
   309b8:	20c0038b 	ldhu	r3,14(r4)
   309bc:	193fffcc 	andi	r4,r3,65535
   309c0:	2120001c 	xori	r4,r4,32768
   309c4:	21200004 	addi	r4,r4,-32768
   309c8:	203f0a16 	blt	r4,zero,305f4 <___vfprintf_internal_r+0x94>
   309cc:	d9012917 	ldw	r4,1188(sp)
   309d0:	d9c12d17 	ldw	r7,1204(sp)
   309d4:	10bfff4c 	andi	r2,r2,65533
   309d8:	22800717 	ldw	r10,28(r4)
   309dc:	22400917 	ldw	r9,36(r4)
   309e0:	d9013017 	ldw	r4,1216(sp)
   309e4:	02010004 	movi	r8,1024
   309e8:	d881070d 	sth	r2,1052(sp)
   309ec:	d9410404 	addi	r5,sp,1040
   309f0:	d8800404 	addi	r2,sp,16
   309f4:	800d883a 	mov	r6,r16
   309f8:	d8c1078d 	sth	r3,1054(sp)
   309fc:	da810b15 	stw	r10,1068(sp)
   30a00:	da410d15 	stw	r9,1076(sp)
   30a04:	d8810415 	stw	r2,1040(sp)
   30a08:	d8810815 	stw	r2,1056(sp)
   30a0c:	da010615 	stw	r8,1048(sp)
   30a10:	da010915 	stw	r8,1060(sp)
   30a14:	d8010a15 	stw	zero,1064(sp)
   30a18:	00305600 	call	30560 <___vfprintf_internal_r>
   30a1c:	d8812c15 	stw	r2,1200(sp)
   30a20:	10000416 	blt	r2,zero,30a34 <___vfprintf_internal_r+0x4d4>
   30a24:	d9013017 	ldw	r4,1216(sp)
   30a28:	d9410404 	addi	r5,sp,1040
   30a2c:	0033dcc0 	call	33dcc <_fflush_r>
   30a30:	1006501e 	bne	r2,zero,32374 <___vfprintf_internal_r+0x1e14>
   30a34:	d881070b 	ldhu	r2,1052(sp)
   30a38:	1080100c 	andi	r2,r2,64
   30a3c:	10bfffcc 	andi	r2,r2,65535
   30a40:	10a0001c 	xori	r2,r2,32768
   30a44:	10a00004 	addi	r2,r2,-32768
   30a48:	10001426 	beq	r2,zero,30a9c <___vfprintf_internal_r+0x53c>
   30a4c:	d8c12917 	ldw	r3,1188(sp)
   30a50:	1880030b 	ldhu	r2,12(r3)
   30a54:	10801014 	ori	r2,r2,64
   30a58:	1880030d 	sth	r2,12(r3)
   30a5c:	00000f06 	br	30a9c <___vfprintf_internal_r+0x53c>
   30a60:	d8811d17 	ldw	r2,1140(sp)
   30a64:	10000426 	beq	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   30a68:	d9013017 	ldw	r4,1216(sp)
   30a6c:	d9412917 	ldw	r5,1188(sp)
   30a70:	d9811b04 	addi	r6,sp,1132
   30a74:	003052c0 	call	3052c <__sprint_r>
   30a78:	d8c12917 	ldw	r3,1188(sp)
   30a7c:	1880030b 	ldhu	r2,12(r3)
   30a80:	1080100c 	andi	r2,r2,64
   30a84:	10bfffcc 	andi	r2,r2,65535
   30a88:	10a0001c 	xori	r2,r2,32768
   30a8c:	10a00004 	addi	r2,r2,-32768
   30a90:	10000226 	beq	r2,zero,30a9c <___vfprintf_internal_r+0x53c>
   30a94:	00bfffc4 	movi	r2,-1
   30a98:	d8812c15 	stw	r2,1200(sp)
   30a9c:	d8812c17 	ldw	r2,1200(sp)
   30aa0:	dfc14617 	ldw	ra,1304(sp)
   30aa4:	df014517 	ldw	fp,1300(sp)
   30aa8:	ddc14417 	ldw	r23,1296(sp)
   30aac:	dd814317 	ldw	r22,1292(sp)
   30ab0:	dd414217 	ldw	r21,1288(sp)
   30ab4:	dd014117 	ldw	r20,1284(sp)
   30ab8:	dcc14017 	ldw	r19,1280(sp)
   30abc:	dc813f17 	ldw	r18,1276(sp)
   30ac0:	dc413e17 	ldw	r17,1272(sp)
   30ac4:	dc013d17 	ldw	r16,1268(sp)
   30ac8:	dec14704 	addi	sp,sp,1308
   30acc:	f800283a 	ret
   30ad0:	d9412917 	ldw	r5,1188(sp)
   30ad4:	8809883a 	mov	r4,r17
   30ad8:	d9811b04 	addi	r6,sp,1132
   30adc:	003052c0 	call	3052c <__sprint_r>
   30ae0:	103fe51e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   30ae4:	da400404 	addi	r9,sp,16
   30ae8:	003eea06 	br	30694 <___vfprintf_internal_r+0x134>
   30aec:	00340880 	call	34088 <__sinit>
   30af0:	003eb306 	br	305c0 <___vfprintf_internal_r+0x60>
   30af4:	e013883a 	mov	r9,fp
   30af8:	84000414 	ori	r16,r16,16
   30afc:	1839883a 	mov	fp,r3
   30b00:	8080080c 	andi	r2,r16,32
   30b04:	10034426 	beq	r2,zero,31818 <___vfprintf_internal_r+0x12b8>
   30b08:	d8c12d17 	ldw	r3,1204(sp)
   30b0c:	18800117 	ldw	r2,4(r3)
   30b10:	1dc00017 	ldw	r23,0(r3)
   30b14:	18c00204 	addi	r3,r3,8
   30b18:	d8c12d15 	stw	r3,1204(sp)
   30b1c:	102d883a 	mov	r22,r2
   30b20:	1003020e 	bge	r2,zero,3172c <___vfprintf_internal_r+0x11cc>
   30b24:	05efc83a 	sub	r23,zero,r23
   30b28:	b804c03a 	cmpne	r2,r23,zero
   30b2c:	05adc83a 	sub	r22,zero,r22
   30b30:	b0adc83a 	sub	r22,r22,r2
   30b34:	00800b44 	movi	r2,45
   30b38:	d8812585 	stb	r2,1174(sp)
   30b3c:	00c00044 	movi	r3,1
   30b40:	bd84b03a 	or	r2,r23,r22
   30b44:	e0000216 	blt	fp,zero,30b50 <___vfprintf_internal_r+0x5f0>
   30b48:	013fdfc4 	movi	r4,-129
   30b4c:	8120703a 	and	r16,r16,r4
   30b50:	1001cc1e 	bne	r2,zero,31284 <___vfprintf_internal_r+0xd24>
   30b54:	e001cb1e 	bne	fp,zero,31284 <___vfprintf_internal_r+0xd24>
   30b58:	18c03fcc 	andi	r3,r3,255
   30b5c:	1802ca1e 	bne	r3,zero,31688 <___vfprintf_internal_r+0x1128>
   30b60:	8080004c 	andi	r2,r16,1
   30b64:	1002c826 	beq	r2,zero,31688 <___vfprintf_internal_r+0x1128>
   30b68:	d8c13917 	ldw	r3,1252(sp)
   30b6c:	00800c04 	movi	r2,48
   30b70:	d8810dc5 	stb	r2,1079(sp)
   30b74:	d8c12b15 	stw	r3,1196(sp)
   30b78:	dcc10dc4 	addi	r19,sp,1079
   30b7c:	d8812b17 	ldw	r2,1196(sp)
   30b80:	d8812815 	stw	r2,1184(sp)
   30b84:	1700010e 	bge	r2,fp,30b8c <___vfprintf_internal_r+0x62c>
   30b88:	df012815 	stw	fp,1184(sp)
   30b8c:	d8812583 	ldbu	r2,1174(sp)
   30b90:	df013115 	stw	fp,1220(sp)
   30b94:	10803fcc 	andi	r2,r2,255
   30b98:	1080201c 	xori	r2,r2,128
   30b9c:	10bfe004 	addi	r2,r2,-128
   30ba0:	103ed726 	beq	r2,zero,30700 <___vfprintf_internal_r+0x1a0>
   30ba4:	d8c12817 	ldw	r3,1184(sp)
   30ba8:	18c00044 	addi	r3,r3,1
   30bac:	d8c12815 	stw	r3,1184(sp)
   30bb0:	003ed306 	br	30700 <___vfprintf_internal_r+0x1a0>
   30bb4:	8080020c 	andi	r2,r16,8
   30bb8:	e013883a 	mov	r9,fp
   30bbc:	1839883a 	mov	fp,r3
   30bc0:	1003a626 	beq	r2,zero,31a5c <___vfprintf_internal_r+0x14fc>
   30bc4:	d9012d17 	ldw	r4,1204(sp)
   30bc8:	25800017 	ldw	r22,0(r4)
   30bcc:	25000117 	ldw	r20,4(r4)
   30bd0:	21000204 	addi	r4,r4,8
   30bd4:	d9012d15 	stw	r4,1204(sp)
   30bd8:	dd813315 	stw	r22,1228(sp)
   30bdc:	dd013415 	stw	r20,1232(sp)
   30be0:	b009883a 	mov	r4,r22
   30be4:	a00b883a 	mov	r5,r20
   30be8:	da413c15 	stw	r9,1264(sp)
   30bec:	00372140 	call	37214 <__isinfd>
   30bf0:	da413c17 	ldw	r9,1264(sp)
   30bf4:	b009883a 	mov	r4,r22
   30bf8:	a00b883a 	mov	r5,r20
   30bfc:	10041d26 	beq	r2,zero,31c74 <___vfprintf_internal_r+0x1714>
   30c00:	000d883a 	mov	r6,zero
   30c04:	000f883a 	mov	r7,zero
   30c08:	0038fe80 	call	38fe8 <__ltdf2>
   30c0c:	da413c17 	ldw	r9,1264(sp)
   30c10:	1004da16 	blt	r2,zero,31f7c <___vfprintf_internal_r+0x1a1c>
   30c14:	d8812583 	ldbu	r2,1174(sp)
   30c18:	00c011c4 	movi	r3,71
   30c1c:	1c83d116 	blt	r3,r18,31b64 <___vfprintf_internal_r+0x1604>
   30c20:	04c00034 	movhi	r19,0
   30c24:	9cc01404 	addi	r19,r19,80
   30c28:	00c000c4 	movi	r3,3
   30c2c:	d8c12815 	stw	r3,1184(sp)
   30c30:	00ffdfc4 	movi	r3,-129
   30c34:	80e0703a 	and	r16,r16,r3
   30c38:	d8c12817 	ldw	r3,1184(sp)
   30c3c:	d8013115 	stw	zero,1220(sp)
   30c40:	d8c12b15 	stw	r3,1196(sp)
   30c44:	003fd306 	br	30b94 <___vfprintf_internal_r+0x634>
   30c48:	84000214 	ori	r16,r16,8
   30c4c:	ac800007 	ldb	r18,0(r21)
   30c50:	003e9f06 	br	306d0 <___vfprintf_internal_r+0x170>
   30c54:	e013883a 	mov	r9,fp
   30c58:	84000414 	ori	r16,r16,16
   30c5c:	1839883a 	mov	fp,r3
   30c60:	8080080c 	andi	r2,r16,32
   30c64:	10031d26 	beq	r2,zero,318dc <___vfprintf_internal_r+0x137c>
   30c68:	d8812d17 	ldw	r2,1204(sp)
   30c6c:	0007883a 	mov	r3,zero
   30c70:	15c00017 	ldw	r23,0(r2)
   30c74:	15800117 	ldw	r22,4(r2)
   30c78:	10800204 	addi	r2,r2,8
   30c7c:	d8812d15 	stw	r2,1204(sp)
   30c80:	d8012585 	stb	zero,1174(sp)
   30c84:	bd84b03a 	or	r2,r23,r22
   30c88:	003fae06 	br	30b44 <___vfprintf_internal_r+0x5e4>
   30c8c:	e013883a 	mov	r9,fp
   30c90:	84000414 	ori	r16,r16,16
   30c94:	1839883a 	mov	fp,r3
   30c98:	8080080c 	andi	r2,r16,32
   30c9c:	1002e726 	beq	r2,zero,3183c <___vfprintf_internal_r+0x12dc>
   30ca0:	d8c12d17 	ldw	r3,1204(sp)
   30ca4:	d9012d17 	ldw	r4,1204(sp)
   30ca8:	1dc00017 	ldw	r23,0(r3)
   30cac:	1d800117 	ldw	r22,4(r3)
   30cb0:	21000204 	addi	r4,r4,8
   30cb4:	00c00044 	movi	r3,1
   30cb8:	d9012d15 	stw	r4,1204(sp)
   30cbc:	bd84b03a 	or	r2,r23,r22
   30cc0:	d8012585 	stb	zero,1174(sp)
   30cc4:	003f9f06 	br	30b44 <___vfprintf_internal_r+0x5e4>
   30cc8:	e013883a 	mov	r9,fp
   30ccc:	1839883a 	mov	fp,r3
   30cd0:	00c00034 	movhi	r3,0
   30cd4:	18c01804 	addi	r3,r3,96
   30cd8:	d8c13615 	stw	r3,1240(sp)
   30cdc:	8080080c 	andi	r2,r16,32
   30ce0:	10007726 	beq	r2,zero,30ec0 <___vfprintf_internal_r+0x960>
   30ce4:	d9012d17 	ldw	r4,1204(sp)
   30ce8:	25c00017 	ldw	r23,0(r4)
   30cec:	25800117 	ldw	r22,4(r4)
   30cf0:	21000204 	addi	r4,r4,8
   30cf4:	d9012d15 	stw	r4,1204(sp)
   30cf8:	8080004c 	andi	r2,r16,1
   30cfc:	1002c226 	beq	r2,zero,31808 <___vfprintf_internal_r+0x12a8>
   30d00:	bd84b03a 	or	r2,r23,r22
   30d04:	10035d26 	beq	r2,zero,31a7c <___vfprintf_internal_r+0x151c>
   30d08:	00c00c04 	movi	r3,48
   30d0c:	d8c12505 	stb	r3,1172(sp)
   30d10:	dc812545 	stb	r18,1173(sp)
   30d14:	84000094 	ori	r16,r16,2
   30d18:	00c00084 	movi	r3,2
   30d1c:	d8012585 	stb	zero,1174(sp)
   30d20:	003f8806 	br	30b44 <___vfprintf_internal_r+0x5e4>
   30d24:	ac800007 	ldb	r18,0(r21)
   30d28:	00c00a84 	movi	r3,42
   30d2c:	adc00044 	addi	r23,r21,1
   30d30:	90c57526 	beq	r18,r3,32308 <___vfprintf_internal_r+0x1da8>
   30d34:	95bff404 	addi	r22,r18,-48
   30d38:	0009883a 	mov	r4,zero
   30d3c:	9d84ff36 	bltu	r19,r22,3213c <___vfprintf_internal_r+0x1bdc>
   30d40:	01400284 	movi	r5,10
   30d44:	00394380 	call	39438 <__mulsi3>
   30d48:	bc800007 	ldb	r18,0(r23)
   30d4c:	b089883a 	add	r4,r22,r2
   30d50:	bdc00044 	addi	r23,r23,1
   30d54:	95bff404 	addi	r22,r18,-48
   30d58:	9dbff92e 	bgeu	r19,r22,30d40 <___vfprintf_internal_r+0x7e0>
   30d5c:	2007883a 	mov	r3,r4
   30d60:	20044316 	blt	r4,zero,31e70 <___vfprintf_internal_r+0x1910>
   30d64:	b82b883a 	mov	r21,r23
   30d68:	003e5a06 	br	306d4 <___vfprintf_internal_r+0x174>
   30d6c:	ac800007 	ldb	r18,0(r21)
   30d70:	01001b04 	movi	r4,108
   30d74:	a805883a 	mov	r2,r21
   30d78:	91045526 	beq	r18,r4,31ed0 <___vfprintf_internal_r+0x1970>
   30d7c:	84000414 	ori	r16,r16,16
   30d80:	003e5306 	br	306d0 <___vfprintf_internal_r+0x170>
   30d84:	8080080c 	andi	r2,r16,32
   30d88:	e013883a 	mov	r9,fp
   30d8c:	10034026 	beq	r2,zero,31a90 <___vfprintf_internal_r+0x1530>
   30d90:	d9012d17 	ldw	r4,1204(sp)
   30d94:	20800017 	ldw	r2,0(r4)
   30d98:	d9012c17 	ldw	r4,1200(sp)
   30d9c:	2007d7fa 	srai	r3,r4,31
   30da0:	d9012d17 	ldw	r4,1204(sp)
   30da4:	10c00115 	stw	r3,4(r2)
   30da8:	21000104 	addi	r4,r4,4
   30dac:	d9012d15 	stw	r4,1204(sp)
   30db0:	d9012c17 	ldw	r4,1200(sp)
   30db4:	11000015 	stw	r4,0(r2)
   30db8:	003e1f06 	br	30638 <___vfprintf_internal_r+0xd8>
   30dbc:	d9012d17 	ldw	r4,1204(sp)
   30dc0:	21000017 	ldw	r4,0(r4)
   30dc4:	d9012e15 	stw	r4,1208(sp)
   30dc8:	d9012d17 	ldw	r4,1204(sp)
   30dcc:	20800104 	addi	r2,r4,4
   30dd0:	d9012e17 	ldw	r4,1208(sp)
   30dd4:	203ee716 	blt	r4,zero,30974 <___vfprintf_internal_r+0x414>
   30dd8:	d8812d15 	stw	r2,1204(sp)
   30ddc:	ac800007 	ldb	r18,0(r21)
   30de0:	003e3b06 	br	306d0 <___vfprintf_internal_r+0x170>
   30de4:	e013883a 	mov	r9,fp
   30de8:	1839883a 	mov	fp,r3
   30dec:	d8c12d17 	ldw	r3,1204(sp)
   30df0:	00800c04 	movi	r2,48
   30df4:	01000034 	movhi	r4,0
   30df8:	21001d04 	addi	r4,r4,116
   30dfc:	1dc00017 	ldw	r23,0(r3)
   30e00:	18c00104 	addi	r3,r3,4
   30e04:	d8812505 	stb	r2,1172(sp)
   30e08:	00801e04 	movi	r2,120
   30e0c:	d8812545 	stb	r2,1173(sp)
   30e10:	d8c12d15 	stw	r3,1204(sp)
   30e14:	002d883a 	mov	r22,zero
   30e18:	84000094 	ori	r16,r16,2
   30e1c:	d9013615 	stw	r4,1240(sp)
   30e20:	00c00084 	movi	r3,2
   30e24:	04801e04 	movi	r18,120
   30e28:	b805883a 	mov	r2,r23
   30e2c:	d8012585 	stb	zero,1174(sp)
   30e30:	003f4406 	br	30b44 <___vfprintf_internal_r+0x5e4>
   30e34:	84000814 	ori	r16,r16,32
   30e38:	ac800007 	ldb	r18,0(r21)
   30e3c:	003e2406 	br	306d0 <___vfprintf_internal_r+0x170>
   30e40:	d8812d17 	ldw	r2,1204(sp)
   30e44:	d8012585 	stb	zero,1174(sp)
   30e48:	e013883a 	mov	r9,fp
   30e4c:	14c00017 	ldw	r19,0(r2)
   30e50:	1839883a 	mov	fp,r3
   30e54:	15c00104 	addi	r23,r2,4
   30e58:	98045526 	beq	r19,zero,31fb0 <___vfprintf_internal_r+0x1a50>
   30e5c:	9809883a 	mov	r4,r19
   30e60:	18043116 	blt	r3,zero,31f28 <___vfprintf_internal_r+0x19c8>
   30e64:	000b883a 	mov	r5,zero
   30e68:	180d883a 	mov	r6,r3
   30e6c:	da413c15 	stw	r9,1264(sp)
   30e70:	00357280 	call	35728 <memchr>
   30e74:	da413c17 	ldw	r9,1264(sp)
   30e78:	10047a26 	beq	r2,zero,32064 <___vfprintf_internal_r+0x1b04>
   30e7c:	14c5c83a 	sub	r2,r2,r19
   30e80:	d8812b15 	stw	r2,1196(sp)
   30e84:	e083d40e 	bge	fp,r2,31dd8 <___vfprintf_internal_r+0x1878>
   30e88:	df012815 	stw	fp,1184(sp)
   30e8c:	e004e416 	blt	fp,zero,32220 <___vfprintf_internal_r+0x1cc0>
   30e90:	d8812583 	ldbu	r2,1174(sp)
   30e94:	df012b15 	stw	fp,1196(sp)
   30e98:	ddc12d15 	stw	r23,1204(sp)
   30e9c:	d8013115 	stw	zero,1220(sp)
   30ea0:	003f3c06 	br	30b94 <___vfprintf_internal_r+0x634>
   30ea4:	00800034 	movhi	r2,0
   30ea8:	10801d04 	addi	r2,r2,116
   30eac:	d8813615 	stw	r2,1240(sp)
   30eb0:	8080080c 	andi	r2,r16,32
   30eb4:	e013883a 	mov	r9,fp
   30eb8:	1839883a 	mov	fp,r3
   30ebc:	103f891e 	bne	r2,zero,30ce4 <___vfprintf_internal_r+0x784>
   30ec0:	8080040c 	andi	r2,r16,16
   30ec4:	1002c326 	beq	r2,zero,319d4 <___vfprintf_internal_r+0x1474>
   30ec8:	d8812d17 	ldw	r2,1204(sp)
   30ecc:	002d883a 	mov	r22,zero
   30ed0:	15c00017 	ldw	r23,0(r2)
   30ed4:	10800104 	addi	r2,r2,4
   30ed8:	d8812d15 	stw	r2,1204(sp)
   30edc:	003f8606 	br	30cf8 <___vfprintf_internal_r+0x798>
   30ee0:	84001014 	ori	r16,r16,64
   30ee4:	ac800007 	ldb	r18,0(r21)
   30ee8:	003df906 	br	306d0 <___vfprintf_internal_r+0x170>
   30eec:	d8812587 	ldb	r2,1174(sp)
   30ef0:	1002e51e 	bne	r2,zero,31a88 <___vfprintf_internal_r+0x1528>
   30ef4:	00800804 	movi	r2,32
   30ef8:	d8812585 	stb	r2,1174(sp)
   30efc:	ac800007 	ldb	r18,0(r21)
   30f00:	003df306 	br	306d0 <___vfprintf_internal_r+0x170>
   30f04:	84000054 	ori	r16,r16,1
   30f08:	ac800007 	ldb	r18,0(r21)
   30f0c:	003df006 	br	306d0 <___vfprintf_internal_r+0x170>
   30f10:	84002014 	ori	r16,r16,128
   30f14:	ac800007 	ldb	r18,0(r21)
   30f18:	003ded06 	br	306d0 <___vfprintf_internal_r+0x170>
   30f1c:	0009883a 	mov	r4,zero
   30f20:	95bff404 	addi	r22,r18,-48
   30f24:	182f883a 	mov	r23,r3
   30f28:	01400284 	movi	r5,10
   30f2c:	00394380 	call	39438 <__mulsi3>
   30f30:	ac800007 	ldb	r18,0(r21)
   30f34:	1589883a 	add	r4,r2,r22
   30f38:	ad400044 	addi	r21,r21,1
   30f3c:	95bff404 	addi	r22,r18,-48
   30f40:	9dbff92e 	bgeu	r19,r22,30f28 <___vfprintf_internal_r+0x9c8>
   30f44:	b807883a 	mov	r3,r23
   30f48:	d9012e15 	stw	r4,1208(sp)
   30f4c:	003de106 	br	306d4 <___vfprintf_internal_r+0x174>
   30f50:	00800ac4 	movi	r2,43
   30f54:	d8812585 	stb	r2,1174(sp)
   30f58:	ac800007 	ldb	r18,0(r21)
   30f5c:	003ddc06 	br	306d0 <___vfprintf_internal_r+0x170>
   30f60:	d8c12d17 	ldw	r3,1204(sp)
   30f64:	d9012d17 	ldw	r4,1204(sp)
   30f68:	e013883a 	mov	r9,fp
   30f6c:	18800017 	ldw	r2,0(r3)
   30f70:	21000104 	addi	r4,r4,4
   30f74:	00c00044 	movi	r3,1
   30f78:	d8c12815 	stw	r3,1184(sp)
   30f7c:	d8012585 	stb	zero,1174(sp)
   30f80:	d8810405 	stb	r2,1040(sp)
   30f84:	d9012d15 	stw	r4,1204(sp)
   30f88:	d8c12b15 	stw	r3,1196(sp)
   30f8c:	dcc10404 	addi	r19,sp,1040
   30f90:	003dda06 	br	306fc <___vfprintf_internal_r+0x19c>
   30f94:	e013883a 	mov	r9,fp
   30f98:	1839883a 	mov	fp,r3
   30f9c:	003ed806 	br	30b00 <___vfprintf_internal_r+0x5a0>
   30fa0:	e013883a 	mov	r9,fp
   30fa4:	1839883a 	mov	fp,r3
   30fa8:	003f2d06 	br	30c60 <___vfprintf_internal_r+0x700>
   30fac:	e013883a 	mov	r9,fp
   30fb0:	1839883a 	mov	fp,r3
   30fb4:	003f3806 	br	30c98 <___vfprintf_internal_r+0x738>
   30fb8:	da011d17 	ldw	r8,1140(sp)
   30fbc:	d8c11c17 	ldw	r3,1136(sp)
   30fc0:	d8812587 	ldb	r2,1174(sp)
   30fc4:	10000b26 	beq	r2,zero,30ff4 <___vfprintf_internal_r+0xa94>
   30fc8:	d8812584 	addi	r2,sp,1174
   30fcc:	48800015 	stw	r2,0(r9)
   30fd0:	00800044 	movi	r2,1
   30fd4:	48800115 	stw	r2,4(r9)
   30fd8:	4091883a 	add	r8,r8,r2
   30fdc:	1887883a 	add	r3,r3,r2
   30fe0:	da011d15 	stw	r8,1140(sp)
   30fe4:	d8c11c15 	stw	r3,1136(sp)
   30fe8:	008001c4 	movi	r2,7
   30fec:	10c18e16 	blt	r2,r3,31628 <___vfprintf_internal_r+0x10c8>
   30ff0:	4a400204 	addi	r9,r9,8
   30ff4:	d9012a17 	ldw	r4,1192(sp)
   30ff8:	20000b26 	beq	r4,zero,31028 <___vfprintf_internal_r+0xac8>
   30ffc:	d8812504 	addi	r2,sp,1172
   31000:	48800015 	stw	r2,0(r9)
   31004:	00800084 	movi	r2,2
   31008:	48800115 	stw	r2,4(r9)
   3100c:	4091883a 	add	r8,r8,r2
   31010:	18c00044 	addi	r3,r3,1
   31014:	da011d15 	stw	r8,1140(sp)
   31018:	d8c11c15 	stw	r3,1136(sp)
   3101c:	008001c4 	movi	r2,7
   31020:	10c17816 	blt	r2,r3,31604 <___vfprintf_internal_r+0x10a4>
   31024:	4a400204 	addi	r9,r9,8
   31028:	d9012f17 	ldw	r4,1212(sp)
   3102c:	00802004 	movi	r2,128
   31030:	2080fc26 	beq	r4,r2,31424 <___vfprintf_internal_r+0xec4>
   31034:	d8813117 	ldw	r2,1220(sp)
   31038:	d9012b17 	ldw	r4,1196(sp)
   3103c:	112fc83a 	sub	r23,r2,r4
   31040:	05c02a0e 	bge	zero,r23,310ec <___vfprintf_internal_r+0xb8c>
   31044:	07000404 	movi	fp,16
   31048:	05000034 	movhi	r20,0
   3104c:	a5002884 	addi	r20,r20,162
   31050:	e5c01d0e 	bge	fp,r23,310c8 <___vfprintf_internal_r+0xb68>
   31054:	dc812a15 	stw	r18,1192(sp)
   31058:	058001c4 	movi	r22,7
   3105c:	a025883a 	mov	r18,r20
   31060:	8029883a 	mov	r20,r16
   31064:	dc012917 	ldw	r16,1188(sp)
   31068:	00000306 	br	31078 <___vfprintf_internal_r+0xb18>
   3106c:	bdfffc04 	addi	r23,r23,-16
   31070:	4a400204 	addi	r9,r9,8
   31074:	e5c0110e 	bge	fp,r23,310bc <___vfprintf_internal_r+0xb5c>
   31078:	4c800015 	stw	r18,0(r9)
   3107c:	4f000115 	stw	fp,4(r9)
   31080:	42000404 	addi	r8,r8,16
   31084:	18c00044 	addi	r3,r3,1
   31088:	da011d15 	stw	r8,1140(sp)
   3108c:	d8c11c15 	stw	r3,1136(sp)
   31090:	b0fff60e 	bge	r22,r3,3106c <___vfprintf_internal_r+0xb0c>
   31094:	8809883a 	mov	r4,r17
   31098:	800b883a 	mov	r5,r16
   3109c:	d9811b04 	addi	r6,sp,1132
   310a0:	003052c0 	call	3052c <__sprint_r>
   310a4:	103e741e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   310a8:	bdfffc04 	addi	r23,r23,-16
   310ac:	da011d17 	ldw	r8,1140(sp)
   310b0:	d8c11c17 	ldw	r3,1136(sp)
   310b4:	da400404 	addi	r9,sp,16
   310b8:	e5ffef16 	blt	fp,r23,31078 <___vfprintf_internal_r+0xb18>
   310bc:	a021883a 	mov	r16,r20
   310c0:	9029883a 	mov	r20,r18
   310c4:	dc812a17 	ldw	r18,1192(sp)
   310c8:	4d000015 	stw	r20,0(r9)
   310cc:	4dc00115 	stw	r23,4(r9)
   310d0:	45d1883a 	add	r8,r8,r23
   310d4:	18c00044 	addi	r3,r3,1
   310d8:	da011d15 	stw	r8,1140(sp)
   310dc:	d8c11c15 	stw	r3,1136(sp)
   310e0:	008001c4 	movi	r2,7
   310e4:	10c13e16 	blt	r2,r3,315e0 <___vfprintf_internal_r+0x1080>
   310e8:	4a400204 	addi	r9,r9,8
   310ec:	8080400c 	andi	r2,r16,256
   310f0:	1000831e 	bne	r2,zero,31300 <___vfprintf_internal_r+0xda0>
   310f4:	d8812b17 	ldw	r2,1196(sp)
   310f8:	4cc00015 	stw	r19,0(r9)
   310fc:	48800115 	stw	r2,4(r9)
   31100:	4091883a 	add	r8,r8,r2
   31104:	18c00044 	addi	r3,r3,1
   31108:	da011d15 	stw	r8,1140(sp)
   3110c:	d8c11c15 	stw	r3,1136(sp)
   31110:	008001c4 	movi	r2,7
   31114:	10c05316 	blt	r2,r3,31264 <___vfprintf_internal_r+0xd04>
   31118:	4a400204 	addi	r9,r9,8
   3111c:	8400010c 	andi	r16,r16,4
   31120:	80002e26 	beq	r16,zero,311dc <___vfprintf_internal_r+0xc7c>
   31124:	d8812e17 	ldw	r2,1208(sp)
   31128:	d8c12817 	ldw	r3,1184(sp)
   3112c:	10e1c83a 	sub	r16,r2,r3
   31130:	04002a0e 	bge	zero,r16,311dc <___vfprintf_internal_r+0xc7c>
   31134:	04800404 	movi	r18,16
   31138:	d8c11c17 	ldw	r3,1136(sp)
   3113c:	05c00034 	movhi	r23,0
   31140:	bdc02484 	addi	r23,r23,146
   31144:	9400170e 	bge	r18,r16,311a4 <___vfprintf_internal_r+0xc44>
   31148:	04c001c4 	movi	r19,7
   3114c:	dd012917 	ldw	r20,1188(sp)
   31150:	00000306 	br	31160 <___vfprintf_internal_r+0xc00>
   31154:	843ffc04 	addi	r16,r16,-16
   31158:	4a400204 	addi	r9,r9,8
   3115c:	9400110e 	bge	r18,r16,311a4 <___vfprintf_internal_r+0xc44>
   31160:	4dc00015 	stw	r23,0(r9)
   31164:	4c800115 	stw	r18,4(r9)
   31168:	42000404 	addi	r8,r8,16
   3116c:	18c00044 	addi	r3,r3,1
   31170:	da011d15 	stw	r8,1140(sp)
   31174:	d8c11c15 	stw	r3,1136(sp)
   31178:	98fff60e 	bge	r19,r3,31154 <___vfprintf_internal_r+0xbf4>
   3117c:	8809883a 	mov	r4,r17
   31180:	a00b883a 	mov	r5,r20
   31184:	d9811b04 	addi	r6,sp,1132
   31188:	003052c0 	call	3052c <__sprint_r>
   3118c:	103e3a1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31190:	843ffc04 	addi	r16,r16,-16
   31194:	da011d17 	ldw	r8,1140(sp)
   31198:	d8c11c17 	ldw	r3,1136(sp)
   3119c:	da400404 	addi	r9,sp,16
   311a0:	943fef16 	blt	r18,r16,31160 <___vfprintf_internal_r+0xc00>
   311a4:	4dc00015 	stw	r23,0(r9)
   311a8:	4c000115 	stw	r16,4(r9)
   311ac:	8211883a 	add	r8,r16,r8
   311b0:	18c00044 	addi	r3,r3,1
   311b4:	da011d15 	stw	r8,1140(sp)
   311b8:	d8c11c15 	stw	r3,1136(sp)
   311bc:	008001c4 	movi	r2,7
   311c0:	10c0060e 	bge	r2,r3,311dc <___vfprintf_internal_r+0xc7c>
   311c4:	d9412917 	ldw	r5,1188(sp)
   311c8:	8809883a 	mov	r4,r17
   311cc:	d9811b04 	addi	r6,sp,1132
   311d0:	003052c0 	call	3052c <__sprint_r>
   311d4:	103e281e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   311d8:	da011d17 	ldw	r8,1140(sp)
   311dc:	dd012817 	ldw	r20,1184(sp)
   311e0:	d9012e17 	ldw	r4,1208(sp)
   311e4:	a100010e 	bge	r20,r4,311ec <___vfprintf_internal_r+0xc8c>
   311e8:	2029883a 	mov	r20,r4
   311ec:	d8812c17 	ldw	r2,1200(sp)
   311f0:	1505883a 	add	r2,r2,r20
   311f4:	d8812c15 	stw	r2,1200(sp)
   311f8:	4000b91e 	bne	r8,zero,314e0 <___vfprintf_internal_r+0xf80>
   311fc:	d8011c15 	stw	zero,1136(sp)
   31200:	a8800007 	ldb	r2,0(r21)
   31204:	da400404 	addi	r9,sp,16
   31208:	103d0d1e 	bne	r2,zero,30640 <___vfprintf_internal_r+0xe0>
   3120c:	a825883a 	mov	r18,r21
   31210:	003d2306 	br	306a0 <___vfprintf_internal_r+0x140>
   31214:	d9412917 	ldw	r5,1188(sp)
   31218:	8809883a 	mov	r4,r17
   3121c:	d9811b04 	addi	r6,sp,1132
   31220:	003052c0 	call	3052c <__sprint_r>
   31224:	103e141e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31228:	da011d17 	ldw	r8,1140(sp)
   3122c:	da400404 	addi	r9,sp,16
   31230:	8080004c 	andi	r2,r16,1
   31234:	103fb926 	beq	r2,zero,3111c <___vfprintf_internal_r+0xbbc>
   31238:	d8c11c17 	ldw	r3,1136(sp)
   3123c:	d9013717 	ldw	r4,1244(sp)
   31240:	00800044 	movi	r2,1
   31244:	48800115 	stw	r2,4(r9)
   31248:	49000015 	stw	r4,0(r9)
   3124c:	4091883a 	add	r8,r8,r2
   31250:	1887883a 	add	r3,r3,r2
   31254:	da011d15 	stw	r8,1140(sp)
   31258:	d8c11c15 	stw	r3,1136(sp)
   3125c:	008001c4 	movi	r2,7
   31260:	10ffad0e 	bge	r2,r3,31118 <___vfprintf_internal_r+0xbb8>
   31264:	d9412917 	ldw	r5,1188(sp)
   31268:	8809883a 	mov	r4,r17
   3126c:	d9811b04 	addi	r6,sp,1132
   31270:	003052c0 	call	3052c <__sprint_r>
   31274:	103e001e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31278:	da400404 	addi	r9,sp,16
   3127c:	da011d17 	ldw	r8,1140(sp)
   31280:	003fa606 	br	3111c <___vfprintf_internal_r+0xbbc>
   31284:	18803fcc 	andi	r2,r3,255
   31288:	00c00044 	movi	r3,1
   3128c:	10c10126 	beq	r2,r3,31694 <___vfprintf_internal_r+0x1134>
   31290:	00c00084 	movi	r3,2
   31294:	10c0ed26 	beq	r2,r3,3164c <___vfprintf_internal_r+0x10ec>
   31298:	d8c10dc4 	addi	r3,sp,1079
   3129c:	b808d0fa 	srli	r4,r23,3
   312a0:	b00a977a 	slli	r5,r22,29
   312a4:	b02cd0fa 	srli	r22,r22,3
   312a8:	bdc001cc 	andi	r23,r23,7
   312ac:	b8800c04 	addi	r2,r23,48
   312b0:	292eb03a 	or	r23,r5,r4
   312b4:	18800005 	stb	r2,0(r3)
   312b8:	bd88b03a 	or	r4,r23,r22
   312bc:	1827883a 	mov	r19,r3
   312c0:	18ffffc4 	addi	r3,r3,-1
   312c4:	203ff51e 	bne	r4,zero,3129c <___vfprintf_internal_r+0xd3c>
   312c8:	8100004c 	andi	r4,r16,1
   312cc:	980b883a 	mov	r5,r19
   312d0:	20000726 	beq	r4,zero,312f0 <___vfprintf_internal_r+0xd90>
   312d4:	10803fcc 	andi	r2,r2,255
   312d8:	1080201c 	xori	r2,r2,128
   312dc:	10bfe004 	addi	r2,r2,-128
   312e0:	01000c04 	movi	r4,48
   312e4:	11000226 	beq	r2,r4,312f0 <___vfprintf_internal_r+0xd90>
   312e8:	1827883a 	mov	r19,r3
   312ec:	293fffc5 	stb	r4,-1(r5)
   312f0:	d8812717 	ldw	r2,1180(sp)
   312f4:	14c5c83a 	sub	r2,r2,r19
   312f8:	d8812b15 	stw	r2,1196(sp)
   312fc:	003e1f06 	br	30b7c <___vfprintf_internal_r+0x61c>
   31300:	00801944 	movi	r2,101
   31304:	14807c0e 	bge	r2,r18,314f8 <___vfprintf_internal_r+0xf98>
   31308:	d9013317 	ldw	r4,1228(sp)
   3130c:	d9413417 	ldw	r5,1232(sp)
   31310:	000d883a 	mov	r6,zero
   31314:	000f883a 	mov	r7,zero
   31318:	d8c13b15 	stw	r3,1260(sp)
   3131c:	da013a15 	stw	r8,1256(sp)
   31320:	da413c15 	stw	r9,1264(sp)
   31324:	0038e680 	call	38e68 <__eqdf2>
   31328:	d8c13b17 	ldw	r3,1260(sp)
   3132c:	da013a17 	ldw	r8,1256(sp)
   31330:	da413c17 	ldw	r9,1264(sp)
   31334:	1001001e 	bne	r2,zero,31738 <___vfprintf_internal_r+0x11d8>
   31338:	00800034 	movhi	r2,0
   3133c:	10802404 	addi	r2,r2,144
   31340:	48800015 	stw	r2,0(r9)
   31344:	00800044 	movi	r2,1
   31348:	48800115 	stw	r2,4(r9)
   3134c:	4091883a 	add	r8,r8,r2
   31350:	1887883a 	add	r3,r3,r2
   31354:	da011d15 	stw	r8,1140(sp)
   31358:	d8c11c15 	stw	r3,1136(sp)
   3135c:	008001c4 	movi	r2,7
   31360:	10c20316 	blt	r2,r3,31b70 <___vfprintf_internal_r+0x1610>
   31364:	4a400204 	addi	r9,r9,8
   31368:	d8812417 	ldw	r2,1168(sp)
   3136c:	d8c13217 	ldw	r3,1224(sp)
   31370:	10c00216 	blt	r2,r3,3137c <___vfprintf_internal_r+0xe1c>
   31374:	8080004c 	andi	r2,r16,1
   31378:	103f6826 	beq	r2,zero,3111c <___vfprintf_internal_r+0xbbc>
   3137c:	d8c11c17 	ldw	r3,1136(sp)
   31380:	d9013717 	ldw	r4,1244(sp)
   31384:	00800044 	movi	r2,1
   31388:	48800115 	stw	r2,4(r9)
   3138c:	49000015 	stw	r4,0(r9)
   31390:	4091883a 	add	r8,r8,r2
   31394:	1887883a 	add	r3,r3,r2
   31398:	da011d15 	stw	r8,1140(sp)
   3139c:	d8c11c15 	stw	r3,1136(sp)
   313a0:	008001c4 	movi	r2,7
   313a4:	10c2ce16 	blt	r2,r3,31ee0 <___vfprintf_internal_r+0x1980>
   313a8:	4a400204 	addi	r9,r9,8
   313ac:	d8813217 	ldw	r2,1224(sp)
   313b0:	14bfffc4 	addi	r18,r2,-1
   313b4:	04bf590e 	bge	zero,r18,3111c <___vfprintf_internal_r+0xbbc>
   313b8:	04c00404 	movi	r19,16
   313bc:	d8c11c17 	ldw	r3,1136(sp)
   313c0:	05000034 	movhi	r20,0
   313c4:	a5002884 	addi	r20,r20,162
   313c8:	9c818a0e 	bge	r19,r18,319f4 <___vfprintf_internal_r+0x1494>
   313cc:	058001c4 	movi	r22,7
   313d0:	ddc12917 	ldw	r23,1188(sp)
   313d4:	00000306 	br	313e4 <___vfprintf_internal_r+0xe84>
   313d8:	4a400204 	addi	r9,r9,8
   313dc:	94bffc04 	addi	r18,r18,-16
   313e0:	9c81840e 	bge	r19,r18,319f4 <___vfprintf_internal_r+0x1494>
   313e4:	4d000015 	stw	r20,0(r9)
   313e8:	4cc00115 	stw	r19,4(r9)
   313ec:	42000404 	addi	r8,r8,16
   313f0:	18c00044 	addi	r3,r3,1
   313f4:	da011d15 	stw	r8,1140(sp)
   313f8:	d8c11c15 	stw	r3,1136(sp)
   313fc:	b0fff60e 	bge	r22,r3,313d8 <___vfprintf_internal_r+0xe78>
   31400:	8809883a 	mov	r4,r17
   31404:	b80b883a 	mov	r5,r23
   31408:	d9811b04 	addi	r6,sp,1132
   3140c:	003052c0 	call	3052c <__sprint_r>
   31410:	103d991e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31414:	da011d17 	ldw	r8,1140(sp)
   31418:	d8c11c17 	ldw	r3,1136(sp)
   3141c:	da400404 	addi	r9,sp,16
   31420:	003fee06 	br	313dc <___vfprintf_internal_r+0xe7c>
   31424:	d8812e17 	ldw	r2,1208(sp)
   31428:	d9012817 	ldw	r4,1184(sp)
   3142c:	112fc83a 	sub	r23,r2,r4
   31430:	05ff000e 	bge	zero,r23,31034 <___vfprintf_internal_r+0xad4>
   31434:	07000404 	movi	fp,16
   31438:	05000034 	movhi	r20,0
   3143c:	a5002884 	addi	r20,r20,162
   31440:	e5c01d0e 	bge	fp,r23,314b8 <___vfprintf_internal_r+0xf58>
   31444:	dc812a15 	stw	r18,1192(sp)
   31448:	058001c4 	movi	r22,7
   3144c:	a025883a 	mov	r18,r20
   31450:	8029883a 	mov	r20,r16
   31454:	dc012917 	ldw	r16,1188(sp)
   31458:	00000306 	br	31468 <___vfprintf_internal_r+0xf08>
   3145c:	bdfffc04 	addi	r23,r23,-16
   31460:	4a400204 	addi	r9,r9,8
   31464:	e5c0110e 	bge	fp,r23,314ac <___vfprintf_internal_r+0xf4c>
   31468:	4c800015 	stw	r18,0(r9)
   3146c:	4f000115 	stw	fp,4(r9)
   31470:	42000404 	addi	r8,r8,16
   31474:	18c00044 	addi	r3,r3,1
   31478:	da011d15 	stw	r8,1140(sp)
   3147c:	d8c11c15 	stw	r3,1136(sp)
   31480:	b0fff60e 	bge	r22,r3,3145c <___vfprintf_internal_r+0xefc>
   31484:	8809883a 	mov	r4,r17
   31488:	800b883a 	mov	r5,r16
   3148c:	d9811b04 	addi	r6,sp,1132
   31490:	003052c0 	call	3052c <__sprint_r>
   31494:	103d781e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31498:	bdfffc04 	addi	r23,r23,-16
   3149c:	da011d17 	ldw	r8,1140(sp)
   314a0:	d8c11c17 	ldw	r3,1136(sp)
   314a4:	da400404 	addi	r9,sp,16
   314a8:	e5ffef16 	blt	fp,r23,31468 <___vfprintf_internal_r+0xf08>
   314ac:	a021883a 	mov	r16,r20
   314b0:	9029883a 	mov	r20,r18
   314b4:	dc812a17 	ldw	r18,1192(sp)
   314b8:	4d000015 	stw	r20,0(r9)
   314bc:	4dc00115 	stw	r23,4(r9)
   314c0:	45d1883a 	add	r8,r8,r23
   314c4:	18c00044 	addi	r3,r3,1
   314c8:	da011d15 	stw	r8,1140(sp)
   314cc:	d8c11c15 	stw	r3,1136(sp)
   314d0:	008001c4 	movi	r2,7
   314d4:	10c13616 	blt	r2,r3,319b0 <___vfprintf_internal_r+0x1450>
   314d8:	4a400204 	addi	r9,r9,8
   314dc:	003ed506 	br	31034 <___vfprintf_internal_r+0xad4>
   314e0:	d9412917 	ldw	r5,1188(sp)
   314e4:	8809883a 	mov	r4,r17
   314e8:	d9811b04 	addi	r6,sp,1132
   314ec:	003052c0 	call	3052c <__sprint_r>
   314f0:	103f4226 	beq	r2,zero,311fc <___vfprintf_internal_r+0xc9c>
   314f4:	003d6006 	br	30a78 <___vfprintf_internal_r+0x518>
   314f8:	d9013217 	ldw	r4,1224(sp)
   314fc:	00800044 	movi	r2,1
   31500:	4cc00015 	stw	r19,0(r9)
   31504:	1101000e 	bge	r2,r4,31908 <___vfprintf_internal_r+0x13a8>
   31508:	00800044 	movi	r2,1
   3150c:	48800115 	stw	r2,4(r9)
   31510:	4091883a 	add	r8,r8,r2
   31514:	1887883a 	add	r3,r3,r2
   31518:	da011d15 	stw	r8,1140(sp)
   3151c:	d8c11c15 	stw	r3,1136(sp)
   31520:	008001c4 	movi	r2,7
   31524:	10c10c16 	blt	r2,r3,31958 <___vfprintf_internal_r+0x13f8>
   31528:	4a400204 	addi	r9,r9,8
   3152c:	d8813717 	ldw	r2,1244(sp)
   31530:	48800015 	stw	r2,0(r9)
   31534:	00800044 	movi	r2,1
   31538:	48800115 	stw	r2,4(r9)
   3153c:	4091883a 	add	r8,r8,r2
   31540:	1887883a 	add	r3,r3,r2
   31544:	da011d15 	stw	r8,1140(sp)
   31548:	d8c11c15 	stw	r3,1136(sp)
   3154c:	008001c4 	movi	r2,7
   31550:	10c10a16 	blt	r2,r3,3197c <___vfprintf_internal_r+0x141c>
   31554:	4c800204 	addi	r18,r9,8
   31558:	d9013317 	ldw	r4,1228(sp)
   3155c:	d9413417 	ldw	r5,1232(sp)
   31560:	000d883a 	mov	r6,zero
   31564:	000f883a 	mov	r7,zero
   31568:	d8c13b15 	stw	r3,1260(sp)
   3156c:	da013a15 	stw	r8,1256(sp)
   31570:	0038ec40 	call	38ec4 <__nedf2>
   31574:	d8c13b17 	ldw	r3,1260(sp)
   31578:	da013a17 	ldw	r8,1256(sp)
   3157c:	1000ba26 	beq	r2,zero,31868 <___vfprintf_internal_r+0x1308>
   31580:	d9013217 	ldw	r4,1224(sp)
   31584:	9cc00044 	addi	r19,r19,1
   31588:	94c00015 	stw	r19,0(r18)
   3158c:	20bfffc4 	addi	r2,r4,-1
   31590:	90800115 	stw	r2,4(r18)
   31594:	4091883a 	add	r8,r8,r2
   31598:	18c00044 	addi	r3,r3,1
   3159c:	da011d15 	stw	r8,1140(sp)
   315a0:	d8c11c15 	stw	r3,1136(sp)
   315a4:	008001c4 	movi	r2,7
   315a8:	10c0e216 	blt	r2,r3,31934 <___vfprintf_internal_r+0x13d4>
   315ac:	94800204 	addi	r18,r18,8
   315b0:	d9013517 	ldw	r4,1236(sp)
   315b4:	d8811fc4 	addi	r2,sp,1151
   315b8:	90800015 	stw	r2,0(r18)
   315bc:	91000115 	stw	r4,4(r18)
   315c0:	4111883a 	add	r8,r8,r4
   315c4:	18c00044 	addi	r3,r3,1
   315c8:	da011d15 	stw	r8,1140(sp)
   315cc:	d8c11c15 	stw	r3,1136(sp)
   315d0:	008001c4 	movi	r2,7
   315d4:	10ff2316 	blt	r2,r3,31264 <___vfprintf_internal_r+0xd04>
   315d8:	92400204 	addi	r9,r18,8
   315dc:	003ecf06 	br	3111c <___vfprintf_internal_r+0xbbc>
   315e0:	d9412917 	ldw	r5,1188(sp)
   315e4:	8809883a 	mov	r4,r17
   315e8:	d9811b04 	addi	r6,sp,1132
   315ec:	003052c0 	call	3052c <__sprint_r>
   315f0:	103d211e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   315f4:	da011d17 	ldw	r8,1140(sp)
   315f8:	d8c11c17 	ldw	r3,1136(sp)
   315fc:	da400404 	addi	r9,sp,16
   31600:	003eba06 	br	310ec <___vfprintf_internal_r+0xb8c>
   31604:	d9412917 	ldw	r5,1188(sp)
   31608:	8809883a 	mov	r4,r17
   3160c:	d9811b04 	addi	r6,sp,1132
   31610:	003052c0 	call	3052c <__sprint_r>
   31614:	103d181e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31618:	da011d17 	ldw	r8,1140(sp)
   3161c:	d8c11c17 	ldw	r3,1136(sp)
   31620:	da400404 	addi	r9,sp,16
   31624:	003e8006 	br	31028 <___vfprintf_internal_r+0xac8>
   31628:	d9412917 	ldw	r5,1188(sp)
   3162c:	8809883a 	mov	r4,r17
   31630:	d9811b04 	addi	r6,sp,1132
   31634:	003052c0 	call	3052c <__sprint_r>
   31638:	103d0f1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   3163c:	da011d17 	ldw	r8,1140(sp)
   31640:	d8c11c17 	ldw	r3,1136(sp)
   31644:	da400404 	addi	r9,sp,16
   31648:	003e6a06 	br	30ff4 <___vfprintf_internal_r+0xa94>
   3164c:	d9413617 	ldw	r5,1240(sp)
   31650:	d8810dc4 	addi	r2,sp,1079
   31654:	b8c003cc 	andi	r3,r23,15
   31658:	b008973a 	slli	r4,r22,28
   3165c:	28c7883a 	add	r3,r5,r3
   31660:	b82ed13a 	srli	r23,r23,4
   31664:	18c00003 	ldbu	r3,0(r3)
   31668:	b02cd13a 	srli	r22,r22,4
   3166c:	25eeb03a 	or	r23,r4,r23
   31670:	10c00005 	stb	r3,0(r2)
   31674:	bd86b03a 	or	r3,r23,r22
   31678:	1027883a 	mov	r19,r2
   3167c:	10bfffc4 	addi	r2,r2,-1
   31680:	183ff41e 	bne	r3,zero,31654 <___vfprintf_internal_r+0x10f4>
   31684:	003f1a06 	br	312f0 <___vfprintf_internal_r+0xd90>
   31688:	d8012b15 	stw	zero,1196(sp)
   3168c:	dcc10e04 	addi	r19,sp,1080
   31690:	003d3a06 	br	30b7c <___vfprintf_internal_r+0x61c>
   31694:	b0025426 	beq	r22,zero,31fe8 <___vfprintf_internal_r+0x1a88>
   31698:	b807883a 	mov	r3,r23
   3169c:	d8810dc4 	addi	r2,sp,1079
   316a0:	882f883a 	mov	r23,r17
   316a4:	04c00244 	movi	r19,9
   316a8:	8023883a 	mov	r17,r16
   316ac:	da412815 	stw	r9,1184(sp)
   316b0:	1821883a 	mov	r16,r3
   316b4:	8009883a 	mov	r4,r16
   316b8:	b00b883a 	mov	r5,r22
   316bc:	01800284 	movi	r6,10
   316c0:	000f883a 	mov	r7,zero
   316c4:	1029883a 	mov	r20,r2
   316c8:	0037fa00 	call	37fa0 <__umoddi3>
   316cc:	10800c04 	addi	r2,r2,48
   316d0:	8009883a 	mov	r4,r16
   316d4:	b00b883a 	mov	r5,r22
   316d8:	a0800005 	stb	r2,0(r20)
   316dc:	01800284 	movi	r6,10
   316e0:	000f883a 	mov	r7,zero
   316e4:	00379500 	call	37950 <__udivdi3>
   316e8:	1021883a 	mov	r16,r2
   316ec:	182d883a 	mov	r22,r3
   316f0:	a0bfffc4 	addi	r2,r20,-1
   316f4:	183fef1e 	bne	r3,zero,316b4 <___vfprintf_internal_r+0x1154>
   316f8:	9c3fee36 	bltu	r19,r16,316b4 <___vfprintf_internal_r+0x1154>
   316fc:	da412817 	ldw	r9,1184(sp)
   31700:	8005883a 	mov	r2,r16
   31704:	8821883a 	mov	r16,r17
   31708:	b823883a 	mov	r17,r23
   3170c:	102f883a 	mov	r23,r2
   31710:	d8812717 	ldw	r2,1180(sp)
   31714:	a4ffffc4 	addi	r19,r20,-1
   31718:	bdc00c04 	addi	r23,r23,48
   3171c:	14c5c83a 	sub	r2,r2,r19
   31720:	a5ffffc5 	stb	r23,-1(r20)
   31724:	d8812b15 	stw	r2,1196(sp)
   31728:	003d1406 	br	30b7c <___vfprintf_internal_r+0x61c>
   3172c:	00c00044 	movi	r3,1
   31730:	bd84b03a 	or	r2,r23,r22
   31734:	003d0306 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31738:	dc812417 	ldw	r18,1168(sp)
   3173c:	0481140e 	bge	zero,r18,31b90 <___vfprintf_internal_r+0x1630>
   31740:	d9013217 	ldw	r4,1224(sp)
   31744:	4cc00015 	stw	r19,0(r9)
   31748:	9100ec16 	blt	r18,r4,31afc <___vfprintf_internal_r+0x159c>
   3174c:	49000115 	stw	r4,4(r9)
   31750:	4111883a 	add	r8,r8,r4
   31754:	18c00044 	addi	r3,r3,1
   31758:	da011d15 	stw	r8,1140(sp)
   3175c:	d8c11c15 	stw	r3,1136(sp)
   31760:	008001c4 	movi	r2,7
   31764:	10c23616 	blt	r2,r3,32040 <___vfprintf_internal_r+0x1ae0>
   31768:	4a400204 	addi	r9,r9,8
   3176c:	d8813217 	ldw	r2,1224(sp)
   31770:	90a5c83a 	sub	r18,r18,r2
   31774:	04beae0e 	bge	zero,r18,31230 <___vfprintf_internal_r+0xcd0>
   31778:	04c00404 	movi	r19,16
   3177c:	d8c11c17 	ldw	r3,1136(sp)
   31780:	05000034 	movhi	r20,0
   31784:	a5002884 	addi	r20,r20,162
   31788:	9c81dd0e 	bge	r19,r18,31f00 <___vfprintf_internal_r+0x19a0>
   3178c:	058001c4 	movi	r22,7
   31790:	ddc12917 	ldw	r23,1188(sp)
   31794:	00000306 	br	317a4 <___vfprintf_internal_r+0x1244>
   31798:	4a400204 	addi	r9,r9,8
   3179c:	94bffc04 	addi	r18,r18,-16
   317a0:	9c81d70e 	bge	r19,r18,31f00 <___vfprintf_internal_r+0x19a0>
   317a4:	4d000015 	stw	r20,0(r9)
   317a8:	4cc00115 	stw	r19,4(r9)
   317ac:	42000404 	addi	r8,r8,16
   317b0:	18c00044 	addi	r3,r3,1
   317b4:	da011d15 	stw	r8,1140(sp)
   317b8:	d8c11c15 	stw	r3,1136(sp)
   317bc:	b0fff60e 	bge	r22,r3,31798 <___vfprintf_internal_r+0x1238>
   317c0:	8809883a 	mov	r4,r17
   317c4:	b80b883a 	mov	r5,r23
   317c8:	d9811b04 	addi	r6,sp,1132
   317cc:	003052c0 	call	3052c <__sprint_r>
   317d0:	103ca91e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   317d4:	da011d17 	ldw	r8,1140(sp)
   317d8:	d8c11c17 	ldw	r3,1136(sp)
   317dc:	da400404 	addi	r9,sp,16
   317e0:	003fee06 	br	3179c <___vfprintf_internal_r+0x123c>
   317e4:	d9412917 	ldw	r5,1188(sp)
   317e8:	8809883a 	mov	r4,r17
   317ec:	d9811b04 	addi	r6,sp,1132
   317f0:	003052c0 	call	3052c <__sprint_r>
   317f4:	103ca01e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   317f8:	da011d17 	ldw	r8,1140(sp)
   317fc:	d8c11c17 	ldw	r3,1136(sp)
   31800:	da400404 	addi	r9,sp,16
   31804:	003dee06 	br	30fc0 <___vfprintf_internal_r+0xa60>
   31808:	00c00084 	movi	r3,2
   3180c:	bd84b03a 	or	r2,r23,r22
   31810:	d8012585 	stb	zero,1174(sp)
   31814:	003ccb06 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31818:	8080040c 	andi	r2,r16,16
   3181c:	1000ae26 	beq	r2,zero,31ad8 <___vfprintf_internal_r+0x1578>
   31820:	d9012d17 	ldw	r4,1204(sp)
   31824:	25c00017 	ldw	r23,0(r4)
   31828:	21000104 	addi	r4,r4,4
   3182c:	d9012d15 	stw	r4,1204(sp)
   31830:	b82dd7fa 	srai	r22,r23,31
   31834:	b005883a 	mov	r2,r22
   31838:	003cb906 	br	30b20 <___vfprintf_internal_r+0x5c0>
   3183c:	8080040c 	andi	r2,r16,16
   31840:	10007026 	beq	r2,zero,31a04 <___vfprintf_internal_r+0x14a4>
   31844:	d8812d17 	ldw	r2,1204(sp)
   31848:	002d883a 	mov	r22,zero
   3184c:	00c00044 	movi	r3,1
   31850:	15c00017 	ldw	r23,0(r2)
   31854:	10800104 	addi	r2,r2,4
   31858:	d8812d15 	stw	r2,1204(sp)
   3185c:	d8012585 	stb	zero,1174(sp)
   31860:	b805883a 	mov	r2,r23
   31864:	003cb706 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31868:	d8813217 	ldw	r2,1224(sp)
   3186c:	14ffffc4 	addi	r19,r2,-1
   31870:	04ff4f0e 	bge	zero,r19,315b0 <___vfprintf_internal_r+0x1050>
   31874:	05800404 	movi	r22,16
   31878:	05000034 	movhi	r20,0
   3187c:	a5002884 	addi	r20,r20,162
   31880:	b4c0470e 	bge	r22,r19,319a0 <___vfprintf_internal_r+0x1440>
   31884:	05c001c4 	movi	r23,7
   31888:	df012917 	ldw	fp,1188(sp)
   3188c:	00000306 	br	3189c <___vfprintf_internal_r+0x133c>
   31890:	94800204 	addi	r18,r18,8
   31894:	9cfffc04 	addi	r19,r19,-16
   31898:	b4c0410e 	bge	r22,r19,319a0 <___vfprintf_internal_r+0x1440>
   3189c:	95000015 	stw	r20,0(r18)
   318a0:	95800115 	stw	r22,4(r18)
   318a4:	42000404 	addi	r8,r8,16
   318a8:	18c00044 	addi	r3,r3,1
   318ac:	da011d15 	stw	r8,1140(sp)
   318b0:	d8c11c15 	stw	r3,1136(sp)
   318b4:	b8fff60e 	bge	r23,r3,31890 <___vfprintf_internal_r+0x1330>
   318b8:	8809883a 	mov	r4,r17
   318bc:	e00b883a 	mov	r5,fp
   318c0:	d9811b04 	addi	r6,sp,1132
   318c4:	003052c0 	call	3052c <__sprint_r>
   318c8:	103c6b1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   318cc:	da011d17 	ldw	r8,1140(sp)
   318d0:	d8c11c17 	ldw	r3,1136(sp)
   318d4:	dc800404 	addi	r18,sp,16
   318d8:	003fee06 	br	31894 <___vfprintf_internal_r+0x1334>
   318dc:	8080040c 	andi	r2,r16,16
   318e0:	10005326 	beq	r2,zero,31a30 <___vfprintf_internal_r+0x14d0>
   318e4:	d8c12d17 	ldw	r3,1204(sp)
   318e8:	002d883a 	mov	r22,zero
   318ec:	1dc00017 	ldw	r23,0(r3)
   318f0:	18c00104 	addi	r3,r3,4
   318f4:	d8c12d15 	stw	r3,1204(sp)
   318f8:	b805883a 	mov	r2,r23
   318fc:	0007883a 	mov	r3,zero
   31900:	d8012585 	stb	zero,1174(sp)
   31904:	003c8f06 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31908:	8088703a 	and	r4,r16,r2
   3190c:	203efe1e 	bne	r4,zero,31508 <___vfprintf_internal_r+0xfa8>
   31910:	48800115 	stw	r2,4(r9)
   31914:	42000044 	addi	r8,r8,1
   31918:	18c00044 	addi	r3,r3,1
   3191c:	da011d15 	stw	r8,1140(sp)
   31920:	d8c11c15 	stw	r3,1136(sp)
   31924:	008001c4 	movi	r2,7
   31928:	10c00216 	blt	r2,r3,31934 <___vfprintf_internal_r+0x13d4>
   3192c:	4c800204 	addi	r18,r9,8
   31930:	003f1f06 	br	315b0 <___vfprintf_internal_r+0x1050>
   31934:	d9412917 	ldw	r5,1188(sp)
   31938:	8809883a 	mov	r4,r17
   3193c:	d9811b04 	addi	r6,sp,1132
   31940:	003052c0 	call	3052c <__sprint_r>
   31944:	103c4c1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31948:	dc800404 	addi	r18,sp,16
   3194c:	da011d17 	ldw	r8,1140(sp)
   31950:	d8c11c17 	ldw	r3,1136(sp)
   31954:	003f1606 	br	315b0 <___vfprintf_internal_r+0x1050>
   31958:	d9412917 	ldw	r5,1188(sp)
   3195c:	8809883a 	mov	r4,r17
   31960:	d9811b04 	addi	r6,sp,1132
   31964:	003052c0 	call	3052c <__sprint_r>
   31968:	103c431e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   3196c:	da011d17 	ldw	r8,1140(sp)
   31970:	d8c11c17 	ldw	r3,1136(sp)
   31974:	da400404 	addi	r9,sp,16
   31978:	003eec06 	br	3152c <___vfprintf_internal_r+0xfcc>
   3197c:	d9412917 	ldw	r5,1188(sp)
   31980:	8809883a 	mov	r4,r17
   31984:	d9811b04 	addi	r6,sp,1132
   31988:	003052c0 	call	3052c <__sprint_r>
   3198c:	103c3a1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31990:	da011d17 	ldw	r8,1140(sp)
   31994:	d8c11c17 	ldw	r3,1136(sp)
   31998:	dc800404 	addi	r18,sp,16
   3199c:	003eee06 	br	31558 <___vfprintf_internal_r+0xff8>
   319a0:	95000015 	stw	r20,0(r18)
   319a4:	94c00115 	stw	r19,4(r18)
   319a8:	44d1883a 	add	r8,r8,r19
   319ac:	003efa06 	br	31598 <___vfprintf_internal_r+0x1038>
   319b0:	d9412917 	ldw	r5,1188(sp)
   319b4:	8809883a 	mov	r4,r17
   319b8:	d9811b04 	addi	r6,sp,1132
   319bc:	003052c0 	call	3052c <__sprint_r>
   319c0:	103c2d1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   319c4:	da011d17 	ldw	r8,1140(sp)
   319c8:	d8c11c17 	ldw	r3,1136(sp)
   319cc:	da400404 	addi	r9,sp,16
   319d0:	003d9806 	br	31034 <___vfprintf_internal_r+0xad4>
   319d4:	8080100c 	andi	r2,r16,64
   319d8:	10011626 	beq	r2,zero,31e34 <___vfprintf_internal_r+0x18d4>
   319dc:	d8c12d17 	ldw	r3,1204(sp)
   319e0:	002d883a 	mov	r22,zero
   319e4:	1dc0000b 	ldhu	r23,0(r3)
   319e8:	18c00104 	addi	r3,r3,4
   319ec:	d8c12d15 	stw	r3,1204(sp)
   319f0:	003cc106 	br	30cf8 <___vfprintf_internal_r+0x798>
   319f4:	4d000015 	stw	r20,0(r9)
   319f8:	4c800115 	stw	r18,4(r9)
   319fc:	4491883a 	add	r8,r8,r18
   31a00:	003dc006 	br	31104 <___vfprintf_internal_r+0xba4>
   31a04:	8080100c 	andi	r2,r16,64
   31a08:	10010126 	beq	r2,zero,31e10 <___vfprintf_internal_r+0x18b0>
   31a0c:	d8c12d17 	ldw	r3,1204(sp)
   31a10:	002d883a 	mov	r22,zero
   31a14:	1dc0000b 	ldhu	r23,0(r3)
   31a18:	18c00104 	addi	r3,r3,4
   31a1c:	d8c12d15 	stw	r3,1204(sp)
   31a20:	b805883a 	mov	r2,r23
   31a24:	00c00044 	movi	r3,1
   31a28:	d8012585 	stb	zero,1174(sp)
   31a2c:	003c4506 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31a30:	8080100c 	andi	r2,r16,64
   31a34:	10010526 	beq	r2,zero,31e4c <___vfprintf_internal_r+0x18ec>
   31a38:	d9012d17 	ldw	r4,1204(sp)
   31a3c:	002d883a 	mov	r22,zero
   31a40:	0007883a 	mov	r3,zero
   31a44:	25c0000b 	ldhu	r23,0(r4)
   31a48:	21000104 	addi	r4,r4,4
   31a4c:	d9012d15 	stw	r4,1204(sp)
   31a50:	b805883a 	mov	r2,r23
   31a54:	d8012585 	stb	zero,1174(sp)
   31a58:	003c3a06 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31a5c:	d8812d17 	ldw	r2,1204(sp)
   31a60:	15800017 	ldw	r22,0(r2)
   31a64:	15000117 	ldw	r20,4(r2)
   31a68:	10800204 	addi	r2,r2,8
   31a6c:	d8812d15 	stw	r2,1204(sp)
   31a70:	dd813315 	stw	r22,1228(sp)
   31a74:	dd013415 	stw	r20,1232(sp)
   31a78:	003c5906 	br	30be0 <___vfprintf_internal_r+0x680>
   31a7c:	00c00084 	movi	r3,2
   31a80:	d8012585 	stb	zero,1174(sp)
   31a84:	003c2f06 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31a88:	ac800007 	ldb	r18,0(r21)
   31a8c:	003b1006 	br	306d0 <___vfprintf_internal_r+0x170>
   31a90:	8080040c 	andi	r2,r16,16
   31a94:	1000091e 	bne	r2,zero,31abc <___vfprintf_internal_r+0x155c>
   31a98:	8400100c 	andi	r16,r16,64
   31a9c:	80000726 	beq	r16,zero,31abc <___vfprintf_internal_r+0x155c>
   31aa0:	d8c12d17 	ldw	r3,1204(sp)
   31aa4:	d9012c17 	ldw	r4,1200(sp)
   31aa8:	18800017 	ldw	r2,0(r3)
   31aac:	18c00104 	addi	r3,r3,4
   31ab0:	d8c12d15 	stw	r3,1204(sp)
   31ab4:	1100000d 	sth	r4,0(r2)
   31ab8:	003adf06 	br	30638 <___vfprintf_internal_r+0xd8>
   31abc:	d8c12d17 	ldw	r3,1204(sp)
   31ac0:	d9012c17 	ldw	r4,1200(sp)
   31ac4:	18800017 	ldw	r2,0(r3)
   31ac8:	18c00104 	addi	r3,r3,4
   31acc:	d8c12d15 	stw	r3,1204(sp)
   31ad0:	11000015 	stw	r4,0(r2)
   31ad4:	003ad806 	br	30638 <___vfprintf_internal_r+0xd8>
   31ad8:	8080100c 	andi	r2,r16,64
   31adc:	1000c526 	beq	r2,zero,31df4 <___vfprintf_internal_r+0x1894>
   31ae0:	d8812d17 	ldw	r2,1204(sp)
   31ae4:	15c0000f 	ldh	r23,0(r2)
   31ae8:	10800104 	addi	r2,r2,4
   31aec:	d8812d15 	stw	r2,1204(sp)
   31af0:	b82dd7fa 	srai	r22,r23,31
   31af4:	b005883a 	mov	r2,r22
   31af8:	003c0906 	br	30b20 <___vfprintf_internal_r+0x5c0>
   31afc:	4c800115 	stw	r18,4(r9)
   31b00:	9211883a 	add	r8,r18,r8
   31b04:	18c00044 	addi	r3,r3,1
   31b08:	da011d15 	stw	r8,1140(sp)
   31b0c:	d8c11c15 	stw	r3,1136(sp)
   31b10:	008001c4 	movi	r2,7
   31b14:	10c14016 	blt	r2,r3,32018 <___vfprintf_internal_r+0x1ab8>
   31b18:	4a400204 	addi	r9,r9,8
   31b1c:	d8813717 	ldw	r2,1244(sp)
   31b20:	9ca7883a 	add	r19,r19,r18
   31b24:	48800015 	stw	r2,0(r9)
   31b28:	00800044 	movi	r2,1
   31b2c:	48800115 	stw	r2,4(r9)
   31b30:	4091883a 	add	r8,r8,r2
   31b34:	1887883a 	add	r3,r3,r2
   31b38:	da011d15 	stw	r8,1140(sp)
   31b3c:	d8c11c15 	stw	r3,1136(sp)
   31b40:	008001c4 	movi	r2,7
   31b44:	10c12c16 	blt	r2,r3,31ff8 <___vfprintf_internal_r+0x1a98>
   31b48:	4a400204 	addi	r9,r9,8
   31b4c:	d9013217 	ldw	r4,1224(sp)
   31b50:	da011d17 	ldw	r8,1140(sp)
   31b54:	d8c11c17 	ldw	r3,1136(sp)
   31b58:	24a5c83a 	sub	r18,r4,r18
   31b5c:	4cc00015 	stw	r19,0(r9)
   31b60:	003fa506 	br	319f8 <___vfprintf_internal_r+0x1498>
   31b64:	04c00034 	movhi	r19,0
   31b68:	9cc01504 	addi	r19,r19,84
   31b6c:	003c2e06 	br	30c28 <___vfprintf_internal_r+0x6c8>
   31b70:	d9412917 	ldw	r5,1188(sp)
   31b74:	8809883a 	mov	r4,r17
   31b78:	d9811b04 	addi	r6,sp,1132
   31b7c:	003052c0 	call	3052c <__sprint_r>
   31b80:	103bbd1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31b84:	da011d17 	ldw	r8,1140(sp)
   31b88:	da400404 	addi	r9,sp,16
   31b8c:	003df606 	br	31368 <___vfprintf_internal_r+0xe08>
   31b90:	00800034 	movhi	r2,0
   31b94:	10802404 	addi	r2,r2,144
   31b98:	48800015 	stw	r2,0(r9)
   31b9c:	00800044 	movi	r2,1
   31ba0:	48800115 	stw	r2,4(r9)
   31ba4:	4091883a 	add	r8,r8,r2
   31ba8:	1887883a 	add	r3,r3,r2
   31bac:	da011d15 	stw	r8,1140(sp)
   31bb0:	d8c11c15 	stw	r3,1136(sp)
   31bb4:	008001c4 	movi	r2,7
   31bb8:	10c0bc16 	blt	r2,r3,31eac <___vfprintf_internal_r+0x194c>
   31bbc:	4a400204 	addi	r9,r9,8
   31bc0:	9000041e 	bne	r18,zero,31bd4 <___vfprintf_internal_r+0x1674>
   31bc4:	d8c13217 	ldw	r3,1224(sp)
   31bc8:	1800021e 	bne	r3,zero,31bd4 <___vfprintf_internal_r+0x1674>
   31bcc:	8080004c 	andi	r2,r16,1
   31bd0:	103d5226 	beq	r2,zero,3111c <___vfprintf_internal_r+0xbbc>
   31bd4:	d8c11c17 	ldw	r3,1136(sp)
   31bd8:	d9013717 	ldw	r4,1244(sp)
   31bdc:	00800044 	movi	r2,1
   31be0:	48800115 	stw	r2,4(r9)
   31be4:	49000015 	stw	r4,0(r9)
   31be8:	4091883a 	add	r8,r8,r2
   31bec:	1887883a 	add	r3,r3,r2
   31bf0:	da011d15 	stw	r8,1140(sp)
   31bf4:	d8c11c15 	stw	r3,1136(sp)
   31bf8:	008001c4 	movi	r2,7
   31bfc:	10c14516 	blt	r2,r3,32114 <___vfprintf_internal_r+0x1bb4>
   31c00:	4a400204 	addi	r9,r9,8
   31c04:	04a5c83a 	sub	r18,zero,r18
   31c08:	0480d70e 	bge	zero,r18,31f68 <___vfprintf_internal_r+0x1a08>
   31c0c:	05800404 	movi	r22,16
   31c10:	05000034 	movhi	r20,0
   31c14:	a5002884 	addi	r20,r20,162
   31c18:	b480db0e 	bge	r22,r18,31f88 <___vfprintf_internal_r+0x1a28>
   31c1c:	05c001c4 	movi	r23,7
   31c20:	df012917 	ldw	fp,1188(sp)
   31c24:	00000306 	br	31c34 <___vfprintf_internal_r+0x16d4>
   31c28:	4a400204 	addi	r9,r9,8
   31c2c:	94bffc04 	addi	r18,r18,-16
   31c30:	b480d50e 	bge	r22,r18,31f88 <___vfprintf_internal_r+0x1a28>
   31c34:	4d000015 	stw	r20,0(r9)
   31c38:	4d800115 	stw	r22,4(r9)
   31c3c:	42000404 	addi	r8,r8,16
   31c40:	18c00044 	addi	r3,r3,1
   31c44:	da011d15 	stw	r8,1140(sp)
   31c48:	d8c11c15 	stw	r3,1136(sp)
   31c4c:	b8fff60e 	bge	r23,r3,31c28 <___vfprintf_internal_r+0x16c8>
   31c50:	8809883a 	mov	r4,r17
   31c54:	e00b883a 	mov	r5,fp
   31c58:	d9811b04 	addi	r6,sp,1132
   31c5c:	003052c0 	call	3052c <__sprint_r>
   31c60:	103b851e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31c64:	da011d17 	ldw	r8,1140(sp)
   31c68:	d8c11c17 	ldw	r3,1136(sp)
   31c6c:	da400404 	addi	r9,sp,16
   31c70:	003fee06 	br	31c2c <___vfprintf_internal_r+0x16cc>
   31c74:	da413c15 	stw	r9,1264(sp)
   31c78:	003724c0 	call	3724c <__isnand>
   31c7c:	da413c17 	ldw	r9,1264(sp)
   31c80:	10007e1e 	bne	r2,zero,31e7c <___vfprintf_internal_r+0x191c>
   31c84:	00bfffc4 	movi	r2,-1
   31c88:	e0816a26 	beq	fp,r2,32234 <___vfprintf_internal_r+0x1cd4>
   31c8c:	008019c4 	movi	r2,103
   31c90:	90816526 	beq	r18,r2,32228 <___vfprintf_internal_r+0x1cc8>
   31c94:	008011c4 	movi	r2,71
   31c98:	90816326 	beq	r18,r2,32228 <___vfprintf_internal_r+0x1cc8>
   31c9c:	80c04014 	ori	r3,r16,256
   31ca0:	d8c12a15 	stw	r3,1192(sp)
   31ca4:	a0016516 	blt	r20,zero,3223c <___vfprintf_internal_r+0x1cdc>
   31ca8:	d8012f05 	stb	zero,1212(sp)
   31cac:	00801984 	movi	r2,102
   31cb0:	9080f226 	beq	r18,r2,3207c <___vfprintf_internal_r+0x1b1c>
   31cb4:	00801184 	movi	r2,70
   31cb8:	9080f026 	beq	r18,r2,3207c <___vfprintf_internal_r+0x1b1c>
   31cbc:	00801944 	movi	r2,101
   31cc0:	90818d26 	beq	r18,r2,322f8 <___vfprintf_internal_r+0x1d98>
   31cc4:	00801144 	movi	r2,69
   31cc8:	90818b26 	beq	r18,r2,322f8 <___vfprintf_internal_r+0x1d98>
   31ccc:	e02f883a 	mov	r23,fp
   31cd0:	d8812404 	addi	r2,sp,1168
   31cd4:	d8800115 	stw	r2,4(sp)
   31cd8:	d8812304 	addi	r2,sp,1164
   31cdc:	d8800215 	stw	r2,8(sp)
   31ce0:	d8812204 	addi	r2,sp,1160
   31ce4:	ddc00015 	stw	r23,0(sp)
   31ce8:	d8800315 	stw	r2,12(sp)
   31cec:	8809883a 	mov	r4,r17
   31cf0:	b00b883a 	mov	r5,r22
   31cf4:	a00d883a 	mov	r6,r20
   31cf8:	01c00084 	movi	r7,2
   31cfc:	da413c15 	stw	r9,1264(sp)
   31d00:	00327b00 	call	327b0 <_dtoa_r>
   31d04:	1027883a 	mov	r19,r2
   31d08:	008019c4 	movi	r2,103
   31d0c:	da413c17 	ldw	r9,1264(sp)
   31d10:	9081951e 	bne	r18,r2,32368 <___vfprintf_internal_r+0x1e08>
   31d14:	8080004c 	andi	r2,r16,1
   31d18:	10017926 	beq	r2,zero,32300 <___vfprintf_internal_r+0x1da0>
   31d1c:	00801184 	movi	r2,70
   31d20:	9dc7883a 	add	r3,r19,r23
   31d24:	9080e626 	beq	r18,r2,320c0 <___vfprintf_internal_r+0x1b60>
   31d28:	b009883a 	mov	r4,r22
   31d2c:	a00b883a 	mov	r5,r20
   31d30:	000d883a 	mov	r6,zero
   31d34:	000f883a 	mov	r7,zero
   31d38:	d8c13b15 	stw	r3,1260(sp)
   31d3c:	da413c15 	stw	r9,1264(sp)
   31d40:	0038e680 	call	38e68 <__eqdf2>
   31d44:	d8c13b17 	ldw	r3,1260(sp)
   31d48:	da413c17 	ldw	r9,1264(sp)
   31d4c:	10000726 	beq	r2,zero,31d6c <___vfprintf_internal_r+0x180c>
   31d50:	d8812217 	ldw	r2,1160(sp)
   31d54:	10c18a2e 	bgeu	r2,r3,32380 <___vfprintf_internal_r+0x1e20>
   31d58:	01000c04 	movi	r4,48
   31d5c:	11000005 	stb	r4,0(r2)
   31d60:	10800044 	addi	r2,r2,1
   31d64:	d8812215 	stw	r2,1160(sp)
   31d68:	10fffc1e 	bne	r2,r3,31d5c <___vfprintf_internal_r+0x17fc>
   31d6c:	1cc7c83a 	sub	r3,r3,r19
   31d70:	d8c13215 	stw	r3,1224(sp)
   31d74:	008019c4 	movi	r2,103
   31d78:	9080fa26 	beq	r18,r2,32164 <___vfprintf_internal_r+0x1c04>
   31d7c:	008011c4 	movi	r2,71
   31d80:	9080f826 	beq	r18,r2,32164 <___vfprintf_internal_r+0x1c04>
   31d84:	00801984 	movi	r2,102
   31d88:	90818e1e 	bne	r18,r2,323c4 <___vfprintf_internal_r+0x1e64>
   31d8c:	d8812417 	ldw	r2,1168(sp)
   31d90:	d8812b15 	stw	r2,1196(sp)
   31d94:	00817c0e 	bge	zero,r2,32388 <___vfprintf_internal_r+0x1e28>
   31d98:	e000021e 	bne	fp,zero,31da4 <___vfprintf_internal_r+0x1844>
   31d9c:	8400004c 	andi	r16,r16,1
   31da0:	80000426 	beq	r16,zero,31db4 <___vfprintf_internal_r+0x1854>
   31da4:	d8812b17 	ldw	r2,1196(sp)
   31da8:	e2000044 	addi	r8,fp,1
   31dac:	1205883a 	add	r2,r2,r8
   31db0:	d8812b15 	stw	r2,1196(sp)
   31db4:	d8812815 	stw	r2,1184(sp)
   31db8:	10010b16 	blt	r2,zero,321e8 <___vfprintf_internal_r+0x1c88>
   31dbc:	ddc12f07 	ldb	r23,1212(sp)
   31dc0:	b800e426 	beq	r23,zero,32154 <___vfprintf_internal_r+0x1bf4>
   31dc4:	00800b44 	movi	r2,45
   31dc8:	d8812585 	stb	r2,1174(sp)
   31dcc:	dc012a17 	ldw	r16,1192(sp)
   31dd0:	d8013115 	stw	zero,1220(sp)
   31dd4:	003b7306 	br	30ba4 <___vfprintf_internal_r+0x644>
   31dd8:	d8812b17 	ldw	r2,1196(sp)
   31ddc:	d8812815 	stw	r2,1184(sp)
   31de0:	10005716 	blt	r2,zero,31f40 <___vfprintf_internal_r+0x19e0>
   31de4:	d8812583 	ldbu	r2,1174(sp)
   31de8:	ddc12d15 	stw	r23,1204(sp)
   31dec:	d8013115 	stw	zero,1220(sp)
   31df0:	003b6806 	br	30b94 <___vfprintf_internal_r+0x634>
   31df4:	d8c12d17 	ldw	r3,1204(sp)
   31df8:	1dc00017 	ldw	r23,0(r3)
   31dfc:	18c00104 	addi	r3,r3,4
   31e00:	d8c12d15 	stw	r3,1204(sp)
   31e04:	b82dd7fa 	srai	r22,r23,31
   31e08:	b005883a 	mov	r2,r22
   31e0c:	003b4406 	br	30b20 <___vfprintf_internal_r+0x5c0>
   31e10:	d9012d17 	ldw	r4,1204(sp)
   31e14:	002d883a 	mov	r22,zero
   31e18:	00c00044 	movi	r3,1
   31e1c:	25c00017 	ldw	r23,0(r4)
   31e20:	21000104 	addi	r4,r4,4
   31e24:	d9012d15 	stw	r4,1204(sp)
   31e28:	b805883a 	mov	r2,r23
   31e2c:	d8012585 	stb	zero,1174(sp)
   31e30:	003b4406 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31e34:	d9012d17 	ldw	r4,1204(sp)
   31e38:	002d883a 	mov	r22,zero
   31e3c:	25c00017 	ldw	r23,0(r4)
   31e40:	21000104 	addi	r4,r4,4
   31e44:	d9012d15 	stw	r4,1204(sp)
   31e48:	003bab06 	br	30cf8 <___vfprintf_internal_r+0x798>
   31e4c:	d8812d17 	ldw	r2,1204(sp)
   31e50:	002d883a 	mov	r22,zero
   31e54:	0007883a 	mov	r3,zero
   31e58:	15c00017 	ldw	r23,0(r2)
   31e5c:	10800104 	addi	r2,r2,4
   31e60:	d8812d15 	stw	r2,1204(sp)
   31e64:	d8012585 	stb	zero,1174(sp)
   31e68:	b805883a 	mov	r2,r23
   31e6c:	003b3506 	br	30b44 <___vfprintf_internal_r+0x5e4>
   31e70:	00ffffc4 	movi	r3,-1
   31e74:	b82b883a 	mov	r21,r23
   31e78:	003a1606 	br	306d4 <___vfprintf_internal_r+0x174>
   31e7c:	008011c4 	movi	r2,71
   31e80:	1480b116 	blt	r2,r18,32148 <___vfprintf_internal_r+0x1be8>
   31e84:	04c00034 	movhi	r19,0
   31e88:	9cc01604 	addi	r19,r19,88
   31e8c:	00c000c4 	movi	r3,3
   31e90:	00bfdfc4 	movi	r2,-129
   31e94:	80a0703a 	and	r16,r16,r2
   31e98:	d8c12815 	stw	r3,1184(sp)
   31e9c:	d8812583 	ldbu	r2,1174(sp)
   31ea0:	d8c12b15 	stw	r3,1196(sp)
   31ea4:	d8013115 	stw	zero,1220(sp)
   31ea8:	003b3a06 	br	30b94 <___vfprintf_internal_r+0x634>
   31eac:	d9412917 	ldw	r5,1188(sp)
   31eb0:	8809883a 	mov	r4,r17
   31eb4:	d9811b04 	addi	r6,sp,1132
   31eb8:	003052c0 	call	3052c <__sprint_r>
   31ebc:	103aee1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31ec0:	dc812417 	ldw	r18,1168(sp)
   31ec4:	da011d17 	ldw	r8,1140(sp)
   31ec8:	da400404 	addi	r9,sp,16
   31ecc:	003f3c06 	br	31bc0 <___vfprintf_internal_r+0x1660>
   31ed0:	ad400044 	addi	r21,r21,1
   31ed4:	84000814 	ori	r16,r16,32
   31ed8:	14800047 	ldb	r18,1(r2)
   31edc:	0039fc06 	br	306d0 <___vfprintf_internal_r+0x170>
   31ee0:	d9412917 	ldw	r5,1188(sp)
   31ee4:	8809883a 	mov	r4,r17
   31ee8:	d9811b04 	addi	r6,sp,1132
   31eec:	003052c0 	call	3052c <__sprint_r>
   31ef0:	103ae11e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31ef4:	da011d17 	ldw	r8,1140(sp)
   31ef8:	da400404 	addi	r9,sp,16
   31efc:	003d2b06 	br	313ac <___vfprintf_internal_r+0xe4c>
   31f00:	4d000015 	stw	r20,0(r9)
   31f04:	4c800115 	stw	r18,4(r9)
   31f08:	4491883a 	add	r8,r8,r18
   31f0c:	18c00044 	addi	r3,r3,1
   31f10:	da011d15 	stw	r8,1140(sp)
   31f14:	d8c11c15 	stw	r3,1136(sp)
   31f18:	008001c4 	movi	r2,7
   31f1c:	10fcbd16 	blt	r2,r3,31214 <___vfprintf_internal_r+0xcb4>
   31f20:	4a400204 	addi	r9,r9,8
   31f24:	003cc206 	br	31230 <___vfprintf_internal_r+0xcd0>
   31f28:	da413c15 	stw	r9,1264(sp)
   31f2c:	00304a00 	call	304a0 <strlen>
   31f30:	d8812b15 	stw	r2,1196(sp)
   31f34:	d8812815 	stw	r2,1184(sp)
   31f38:	da413c17 	ldw	r9,1264(sp)
   31f3c:	103fa90e 	bge	r2,zero,31de4 <___vfprintf_internal_r+0x1884>
   31f40:	d8012815 	stw	zero,1184(sp)
   31f44:	003fa706 	br	31de4 <___vfprintf_internal_r+0x1884>
   31f48:	d9412917 	ldw	r5,1188(sp)
   31f4c:	8809883a 	mov	r4,r17
   31f50:	d9811b04 	addi	r6,sp,1132
   31f54:	003052c0 	call	3052c <__sprint_r>
   31f58:	103ac71e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   31f5c:	da011d17 	ldw	r8,1140(sp)
   31f60:	d8c11c17 	ldw	r3,1136(sp)
   31f64:	da400404 	addi	r9,sp,16
   31f68:	d8813217 	ldw	r2,1224(sp)
   31f6c:	4cc00015 	stw	r19,0(r9)
   31f70:	48800115 	stw	r2,4(r9)
   31f74:	4091883a 	add	r8,r8,r2
   31f78:	003c6206 	br	31104 <___vfprintf_internal_r+0xba4>
   31f7c:	00800b44 	movi	r2,45
   31f80:	d8812585 	stb	r2,1174(sp)
   31f84:	003b2406 	br	30c18 <___vfprintf_internal_r+0x6b8>
   31f88:	4d000015 	stw	r20,0(r9)
   31f8c:	4c800115 	stw	r18,4(r9)
   31f90:	4491883a 	add	r8,r8,r18
   31f94:	18c00044 	addi	r3,r3,1
   31f98:	da011d15 	stw	r8,1140(sp)
   31f9c:	d8c11c15 	stw	r3,1136(sp)
   31fa0:	008001c4 	movi	r2,7
   31fa4:	10ffe816 	blt	r2,r3,31f48 <___vfprintf_internal_r+0x19e8>
   31fa8:	4a400204 	addi	r9,r9,8
   31fac:	003fee06 	br	31f68 <___vfprintf_internal_r+0x1a08>
   31fb0:	d8c12b15 	stw	r3,1196(sp)
   31fb4:	00800184 	movi	r2,6
   31fb8:	10c0062e 	bgeu	r2,r3,31fd4 <___vfprintf_internal_r+0x1a74>
   31fbc:	d8812b15 	stw	r2,1196(sp)
   31fc0:	d8812815 	stw	r2,1184(sp)
   31fc4:	ddc12d15 	stw	r23,1204(sp)
   31fc8:	04c00034 	movhi	r19,0
   31fcc:	9cc02204 	addi	r19,r19,136
   31fd0:	0039ca06 	br	306fc <___vfprintf_internal_r+0x19c>
   31fd4:	d8812b17 	ldw	r2,1196(sp)
   31fd8:	d8812815 	stw	r2,1184(sp)
   31fdc:	103ff90e 	bge	r2,zero,31fc4 <___vfprintf_internal_r+0x1a64>
   31fe0:	d8012815 	stw	zero,1184(sp)
   31fe4:	003ff706 	br	31fc4 <___vfprintf_internal_r+0x1a64>
   31fe8:	00800244 	movi	r2,9
   31fec:	15fdaa36 	bltu	r2,r23,31698 <___vfprintf_internal_r+0x1138>
   31ff0:	dd010e04 	addi	r20,sp,1080
   31ff4:	003dc606 	br	31710 <___vfprintf_internal_r+0x11b0>
   31ff8:	d9412917 	ldw	r5,1188(sp)
   31ffc:	8809883a 	mov	r4,r17
   32000:	d9811b04 	addi	r6,sp,1132
   32004:	003052c0 	call	3052c <__sprint_r>
   32008:	103a9b1e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   3200c:	dc812417 	ldw	r18,1168(sp)
   32010:	da400404 	addi	r9,sp,16
   32014:	003ecd06 	br	31b4c <___vfprintf_internal_r+0x15ec>
   32018:	d9412917 	ldw	r5,1188(sp)
   3201c:	8809883a 	mov	r4,r17
   32020:	d9811b04 	addi	r6,sp,1132
   32024:	003052c0 	call	3052c <__sprint_r>
   32028:	103a931e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   3202c:	dc812417 	ldw	r18,1168(sp)
   32030:	da011d17 	ldw	r8,1140(sp)
   32034:	d8c11c17 	ldw	r3,1136(sp)
   32038:	da400404 	addi	r9,sp,16
   3203c:	003eb706 	br	31b1c <___vfprintf_internal_r+0x15bc>
   32040:	d9412917 	ldw	r5,1188(sp)
   32044:	8809883a 	mov	r4,r17
   32048:	d9811b04 	addi	r6,sp,1132
   3204c:	003052c0 	call	3052c <__sprint_r>
   32050:	103a891e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   32054:	dc812417 	ldw	r18,1168(sp)
   32058:	da011d17 	ldw	r8,1140(sp)
   3205c:	da400404 	addi	r9,sp,16
   32060:	003dc206 	br	3176c <___vfprintf_internal_r+0x120c>
   32064:	df012815 	stw	fp,1184(sp)
   32068:	d8812583 	ldbu	r2,1174(sp)
   3206c:	df012b15 	stw	fp,1196(sp)
   32070:	ddc12d15 	stw	r23,1204(sp)
   32074:	d8013115 	stw	zero,1220(sp)
   32078:	003ac606 	br	30b94 <___vfprintf_internal_r+0x634>
   3207c:	d8812404 	addi	r2,sp,1168
   32080:	d8800115 	stw	r2,4(sp)
   32084:	d8812304 	addi	r2,sp,1164
   32088:	d8800215 	stw	r2,8(sp)
   3208c:	d8812204 	addi	r2,sp,1160
   32090:	df000015 	stw	fp,0(sp)
   32094:	d8800315 	stw	r2,12(sp)
   32098:	8809883a 	mov	r4,r17
   3209c:	b00b883a 	mov	r5,r22
   320a0:	a00d883a 	mov	r6,r20
   320a4:	01c000c4 	movi	r7,3
   320a8:	da413c15 	stw	r9,1264(sp)
   320ac:	00327b00 	call	327b0 <_dtoa_r>
   320b0:	da413c17 	ldw	r9,1264(sp)
   320b4:	1027883a 	mov	r19,r2
   320b8:	1707883a 	add	r3,r2,fp
   320bc:	e02f883a 	mov	r23,fp
   320c0:	99000007 	ldb	r4,0(r19)
   320c4:	00800c04 	movi	r2,48
   320c8:	20800326 	beq	r4,r2,320d8 <___vfprintf_internal_r+0x1b78>
   320cc:	da812417 	ldw	r10,1168(sp)
   320d0:	1a87883a 	add	r3,r3,r10
   320d4:	003f1406 	br	31d28 <___vfprintf_internal_r+0x17c8>
   320d8:	b009883a 	mov	r4,r22
   320dc:	a00b883a 	mov	r5,r20
   320e0:	000d883a 	mov	r6,zero
   320e4:	000f883a 	mov	r7,zero
   320e8:	d8c13b15 	stw	r3,1260(sp)
   320ec:	da413c15 	stw	r9,1264(sp)
   320f0:	0038ec40 	call	38ec4 <__nedf2>
   320f4:	d8c13b17 	ldw	r3,1260(sp)
   320f8:	da413c17 	ldw	r9,1264(sp)
   320fc:	103ff326 	beq	r2,zero,320cc <___vfprintf_internal_r+0x1b6c>
   32100:	00800044 	movi	r2,1
   32104:	15d5c83a 	sub	r10,r2,r23
   32108:	da812415 	stw	r10,1168(sp)
   3210c:	1a87883a 	add	r3,r3,r10
   32110:	003f0506 	br	31d28 <___vfprintf_internal_r+0x17c8>
   32114:	d9412917 	ldw	r5,1188(sp)
   32118:	8809883a 	mov	r4,r17
   3211c:	d9811b04 	addi	r6,sp,1132
   32120:	003052c0 	call	3052c <__sprint_r>
   32124:	103a541e 	bne	r2,zero,30a78 <___vfprintf_internal_r+0x518>
   32128:	dc812417 	ldw	r18,1168(sp)
   3212c:	da011d17 	ldw	r8,1140(sp)
   32130:	d8c11c17 	ldw	r3,1136(sp)
   32134:	da400404 	addi	r9,sp,16
   32138:	003eb206 	br	31c04 <___vfprintf_internal_r+0x16a4>
   3213c:	b82b883a 	mov	r21,r23
   32140:	0007883a 	mov	r3,zero
   32144:	00396306 	br	306d4 <___vfprintf_internal_r+0x174>
   32148:	04c00034 	movhi	r19,0
   3214c:	9cc01704 	addi	r19,r19,92
   32150:	003f4e06 	br	31e8c <___vfprintf_internal_r+0x192c>
   32154:	d8812583 	ldbu	r2,1174(sp)
   32158:	dc012a17 	ldw	r16,1192(sp)
   3215c:	d8013115 	stw	zero,1220(sp)
   32160:	003a8c06 	br	30b94 <___vfprintf_internal_r+0x634>
   32164:	d8812417 	ldw	r2,1168(sp)
   32168:	d8812b15 	stw	r2,1196(sp)
   3216c:	1029883a 	mov	r20,r2
   32170:	00bfff44 	movi	r2,-3
   32174:	a0800116 	blt	r20,r2,3217c <___vfprintf_internal_r+0x1c1c>
   32178:	e5001d0e 	bge	fp,r20,321f0 <___vfprintf_internal_r+0x1c90>
   3217c:	94bfff84 	addi	r18,r18,-2
   32180:	a53fffc4 	addi	r20,r20,-1
   32184:	dd012415 	stw	r20,1168(sp)
   32188:	dc811fc5 	stb	r18,1151(sp)
   3218c:	a0007216 	blt	r20,zero,32358 <___vfprintf_internal_r+0x1df8>
   32190:	00800ac4 	movi	r2,43
   32194:	d8812005 	stb	r2,1152(sp)
   32198:	00800244 	movi	r2,9
   3219c:	15003516 	blt	r2,r20,32274 <___vfprintf_internal_r+0x1d14>
   321a0:	00800c04 	movi	r2,48
   321a4:	a5000c04 	addi	r20,r20,48
   321a8:	d8812045 	stb	r2,1153(sp)
   321ac:	dd012085 	stb	r20,1154(sp)
   321b0:	d8c120c4 	addi	r3,sp,1155
   321b4:	d8811fc4 	addi	r2,sp,1151
   321b8:	1885c83a 	sub	r2,r3,r2
   321bc:	d8c13217 	ldw	r3,1224(sp)
   321c0:	d8813515 	stw	r2,1236(sp)
   321c4:	1885883a 	add	r2,r3,r2
   321c8:	d8812b15 	stw	r2,1196(sp)
   321cc:	00800044 	movi	r2,1
   321d0:	10c0580e 	bge	r2,r3,32334 <___vfprintf_internal_r+0x1dd4>
   321d4:	d8812b17 	ldw	r2,1196(sp)
   321d8:	10800044 	addi	r2,r2,1
   321dc:	d8812b15 	stw	r2,1196(sp)
   321e0:	d8812815 	stw	r2,1184(sp)
   321e4:	103ef50e 	bge	r2,zero,31dbc <___vfprintf_internal_r+0x185c>
   321e8:	d8012815 	stw	zero,1184(sp)
   321ec:	003ef306 	br	31dbc <___vfprintf_internal_r+0x185c>
   321f0:	d8812b17 	ldw	r2,1196(sp)
   321f4:	d8c13217 	ldw	r3,1224(sp)
   321f8:	10c01416 	blt	r2,r3,3224c <___vfprintf_internal_r+0x1cec>
   321fc:	8400004c 	andi	r16,r16,1
   32200:	80000326 	beq	r16,zero,32210 <___vfprintf_internal_r+0x1cb0>
   32204:	d8812b17 	ldw	r2,1196(sp)
   32208:	10800044 	addi	r2,r2,1
   3220c:	d8812b15 	stw	r2,1196(sp)
   32210:	d8812815 	stw	r2,1184(sp)
   32214:	10001416 	blt	r2,zero,32268 <___vfprintf_internal_r+0x1d08>
   32218:	048019c4 	movi	r18,103
   3221c:	003ee706 	br	31dbc <___vfprintf_internal_r+0x185c>
   32220:	d8012815 	stw	zero,1184(sp)
   32224:	003b1a06 	br	30e90 <___vfprintf_internal_r+0x930>
   32228:	e03e9c1e 	bne	fp,zero,31c9c <___vfprintf_internal_r+0x173c>
   3222c:	07000044 	movi	fp,1
   32230:	003e9a06 	br	31c9c <___vfprintf_internal_r+0x173c>
   32234:	07000184 	movi	fp,6
   32238:	003e9806 	br	31c9c <___vfprintf_internal_r+0x173c>
   3223c:	00c00b44 	movi	r3,45
   32240:	a520003c 	xorhi	r20,r20,32768
   32244:	d8c12f05 	stb	r3,1212(sp)
   32248:	003e9806 	br	31cac <___vfprintf_internal_r+0x174c>
   3224c:	05003f0e 	bge	zero,r20,3234c <___vfprintf_internal_r+0x1dec>
   32250:	05000044 	movi	r20,1
   32254:	d8c13217 	ldw	r3,1224(sp)
   32258:	a0e9883a 	add	r20,r20,r3
   3225c:	dd012b15 	stw	r20,1196(sp)
   32260:	dd012815 	stw	r20,1184(sp)
   32264:	a03fec0e 	bge	r20,zero,32218 <___vfprintf_internal_r+0x1cb8>
   32268:	d8012815 	stw	zero,1184(sp)
   3226c:	048019c4 	movi	r18,103
   32270:	003ed206 	br	31dbc <___vfprintf_internal_r+0x185c>
   32274:	d8c11f84 	addi	r3,sp,1150
   32278:	102f883a 	mov	r23,r2
   3227c:	4839883a 	mov	fp,r9
   32280:	a009883a 	mov	r4,r20
   32284:	01400284 	movi	r5,10
   32288:	182d883a 	mov	r22,r3
   3228c:	00393cc0 	call	393cc <__modsi3>
   32290:	10800c04 	addi	r2,r2,48
   32294:	a009883a 	mov	r4,r20
   32298:	b0800005 	stb	r2,0(r22)
   3229c:	01400284 	movi	r5,10
   322a0:	003937c0 	call	3937c <__divsi3>
   322a4:	1029883a 	mov	r20,r2
   322a8:	b0ffffc4 	addi	r3,r22,-1
   322ac:	b8bff416 	blt	r23,r2,32280 <___vfprintf_internal_r+0x1d20>
   322b0:	11400c04 	addi	r5,r2,48
   322b4:	b17fffc5 	stb	r5,-1(r22)
   322b8:	d8811fc4 	addi	r2,sp,1151
   322bc:	e013883a 	mov	r9,fp
   322c0:	18803e2e 	bgeu	r3,r2,323bc <___vfprintf_internal_r+0x1e5c>
   322c4:	b007883a 	mov	r3,r22
   322c8:	d9012044 	addi	r4,sp,1153
   322cc:	00000206 	br	322d8 <___vfprintf_internal_r+0x1d78>
   322d0:	19400003 	ldbu	r5,0(r3)
   322d4:	18c00044 	addi	r3,r3,1
   322d8:	21400005 	stb	r5,0(r4)
   322dc:	21000044 	addi	r4,r4,1
   322e0:	10fffb1e 	bne	r2,r3,322d0 <___vfprintf_internal_r+0x1d70>
   322e4:	d8c12004 	addi	r3,sp,1152
   322e8:	1d87c83a 	sub	r3,r3,r22
   322ec:	d9012044 	addi	r4,sp,1153
   322f0:	20c7883a 	add	r3,r4,r3
   322f4:	003fb006 	br	321b8 <___vfprintf_internal_r+0x1c58>
   322f8:	e5c00044 	addi	r23,fp,1
   322fc:	003e7406 	br	31cd0 <___vfprintf_internal_r+0x1770>
   32300:	d8c12217 	ldw	r3,1160(sp)
   32304:	003e9906 	br	31d6c <___vfprintf_internal_r+0x180c>
   32308:	d9012d17 	ldw	r4,1204(sp)
   3230c:	ac800043 	ldbu	r18,1(r21)
   32310:	b82b883a 	mov	r21,r23
   32314:	20c00017 	ldw	r3,0(r4)
   32318:	20800104 	addi	r2,r4,4
   3231c:	d8812d15 	stw	r2,1204(sp)
   32320:	18002116 	blt	r3,zero,323a8 <___vfprintf_internal_r+0x1e48>
   32324:	94803fcc 	andi	r18,r18,255
   32328:	9480201c 	xori	r18,r18,128
   3232c:	94bfe004 	addi	r18,r18,-128
   32330:	0038e706 	br	306d0 <___vfprintf_internal_r+0x170>
   32334:	80a0703a 	and	r16,r16,r2
   32338:	803fa61e 	bne	r16,zero,321d4 <___vfprintf_internal_r+0x1c74>
   3233c:	d8812b17 	ldw	r2,1196(sp)
   32340:	d8812815 	stw	r2,1184(sp)
   32344:	103e9d0e 	bge	r2,zero,31dbc <___vfprintf_internal_r+0x185c>
   32348:	003fa706 	br	321e8 <___vfprintf_internal_r+0x1c88>
   3234c:	00800084 	movi	r2,2
   32350:	1529c83a 	sub	r20,r2,r20
   32354:	003fbf06 	br	32254 <___vfprintf_internal_r+0x1cf4>
   32358:	00800b44 	movi	r2,45
   3235c:	0529c83a 	sub	r20,zero,r20
   32360:	d8812005 	stb	r2,1152(sp)
   32364:	003f8c06 	br	32198 <___vfprintf_internal_r+0x1c38>
   32368:	008011c4 	movi	r2,71
   3236c:	90be6926 	beq	r18,r2,31d14 <___vfprintf_internal_r+0x17b4>
   32370:	003e6a06 	br	31d1c <___vfprintf_internal_r+0x17bc>
   32374:	00bfffc4 	movi	r2,-1
   32378:	d8812c15 	stw	r2,1200(sp)
   3237c:	0039ad06 	br	30a34 <___vfprintf_internal_r+0x4d4>
   32380:	1007883a 	mov	r3,r2
   32384:	003e7906 	br	31d6c <___vfprintf_internal_r+0x180c>
   32388:	e000021e 	bne	fp,zero,32394 <___vfprintf_internal_r+0x1e34>
   3238c:	8400004c 	andi	r16,r16,1
   32390:	80000e26 	beq	r16,zero,323cc <___vfprintf_internal_r+0x1e6c>
   32394:	e7000084 	addi	fp,fp,2
   32398:	df012b15 	stw	fp,1196(sp)
   3239c:	df012815 	stw	fp,1184(sp)
   323a0:	e03e860e 	bge	fp,zero,31dbc <___vfprintf_internal_r+0x185c>
   323a4:	003f9006 	br	321e8 <___vfprintf_internal_r+0x1c88>
   323a8:	94803fcc 	andi	r18,r18,255
   323ac:	9480201c 	xori	r18,r18,128
   323b0:	00ffffc4 	movi	r3,-1
   323b4:	94bfe004 	addi	r18,r18,-128
   323b8:	0038c506 	br	306d0 <___vfprintf_internal_r+0x170>
   323bc:	d8c12044 	addi	r3,sp,1153
   323c0:	003f7d06 	br	321b8 <___vfprintf_internal_r+0x1c58>
   323c4:	dd012417 	ldw	r20,1168(sp)
   323c8:	003f6d06 	br	32180 <___vfprintf_internal_r+0x1c20>
   323cc:	00c00044 	movi	r3,1
   323d0:	d8c12815 	stw	r3,1184(sp)
   323d4:	d8c12b15 	stw	r3,1196(sp)
   323d8:	003e7806 	br	31dbc <___vfprintf_internal_r+0x185c>

000323dc <__vfprintf_internal>:
   323dc:	00800034 	movhi	r2,0
   323e0:	10876304 	addi	r2,r2,7564
   323e4:	2007883a 	mov	r3,r4
   323e8:	11000017 	ldw	r4,0(r2)
   323ec:	2805883a 	mov	r2,r5
   323f0:	300f883a 	mov	r7,r6
   323f4:	180b883a 	mov	r5,r3
   323f8:	100d883a 	mov	r6,r2
   323fc:	00305601 	jmpi	30560 <___vfprintf_internal_r>

00032400 <__swsetup_r>:
   32400:	00800034 	movhi	r2,0
   32404:	10876304 	addi	r2,r2,7564
   32408:	10800017 	ldw	r2,0(r2)
   3240c:	defffd04 	addi	sp,sp,-12
   32410:	dc400115 	stw	r17,4(sp)
   32414:	dc000015 	stw	r16,0(sp)
   32418:	dfc00215 	stw	ra,8(sp)
   3241c:	2023883a 	mov	r17,r4
   32420:	2821883a 	mov	r16,r5
   32424:	10000226 	beq	r2,zero,32430 <__swsetup_r+0x30>
   32428:	10c00e17 	ldw	r3,56(r2)
   3242c:	18003d26 	beq	r3,zero,32524 <__swsetup_r+0x124>
   32430:	8080030b 	ldhu	r2,12(r16)
   32434:	10c0020c 	andi	r3,r2,8
   32438:	18ffffcc 	andi	r3,r3,65535
   3243c:	18e0001c 	xori	r3,r3,32768
   32440:	18e00004 	addi	r3,r3,-32768
   32444:	18001226 	beq	r3,zero,32490 <__swsetup_r+0x90>
   32448:	80c00417 	ldw	r3,16(r16)
   3244c:	18001f26 	beq	r3,zero,324cc <__swsetup_r+0xcc>
   32450:	1100004c 	andi	r4,r2,1
   32454:	2000261e 	bne	r4,zero,324f0 <__swsetup_r+0xf0>
   32458:	1080008c 	andi	r2,r2,2
   3245c:	10bfffcc 	andi	r2,r2,65535
   32460:	10a0001c 	xori	r2,r2,32768
   32464:	10a00004 	addi	r2,r2,-32768
   32468:	1000311e 	bne	r2,zero,32530 <__swsetup_r+0x130>
   3246c:	80800517 	ldw	r2,20(r16)
   32470:	80800215 	stw	r2,8(r16)
   32474:	18002326 	beq	r3,zero,32504 <__swsetup_r+0x104>
   32478:	0005883a 	mov	r2,zero
   3247c:	dfc00217 	ldw	ra,8(sp)
   32480:	dc400117 	ldw	r17,4(sp)
   32484:	dc000017 	ldw	r16,0(sp)
   32488:	dec00304 	addi	sp,sp,12
   3248c:	f800283a 	ret
   32490:	10c0040c 	andi	r3,r2,16
   32494:	18ffffcc 	andi	r3,r3,65535
   32498:	18e0001c 	xori	r3,r3,32768
   3249c:	18e00004 	addi	r3,r3,-32768
   324a0:	18001e26 	beq	r3,zero,3251c <__swsetup_r+0x11c>
   324a4:	10c0010c 	andi	r3,r2,4
   324a8:	18ffffcc 	andi	r3,r3,65535
   324ac:	18e0001c 	xori	r3,r3,32768
   324b0:	18e00004 	addi	r3,r3,-32768
   324b4:	1800211e 	bne	r3,zero,3253c <__swsetup_r+0x13c>
   324b8:	80c00417 	ldw	r3,16(r16)
   324bc:	11400214 	ori	r5,r2,8
   324c0:	8140030d 	sth	r5,12(r16)
   324c4:	2805883a 	mov	r2,r5
   324c8:	183fe11e 	bne	r3,zero,32450 <__swsetup_r+0x50>
   324cc:	1140a00c 	andi	r5,r2,640
   324d0:	01008004 	movi	r4,512
   324d4:	293fde26 	beq	r5,r4,32450 <__swsetup_r+0x50>
   324d8:	8809883a 	mov	r4,r17
   324dc:	800b883a 	mov	r5,r16
   324e0:	0034dfc0 	call	34dfc <__smakebuf_r>
   324e4:	8080030b 	ldhu	r2,12(r16)
   324e8:	80c00417 	ldw	r3,16(r16)
   324ec:	003fd806 	br	32450 <__swsetup_r+0x50>
   324f0:	80800517 	ldw	r2,20(r16)
   324f4:	80000215 	stw	zero,8(r16)
   324f8:	0085c83a 	sub	r2,zero,r2
   324fc:	80800615 	stw	r2,24(r16)
   32500:	183fdd1e 	bne	r3,zero,32478 <__swsetup_r+0x78>
   32504:	8080030b 	ldhu	r2,12(r16)
   32508:	1080200c 	andi	r2,r2,128
   3250c:	10bfffcc 	andi	r2,r2,65535
   32510:	10a0001c 	xori	r2,r2,32768
   32514:	10a00004 	addi	r2,r2,-32768
   32518:	103fd826 	beq	r2,zero,3247c <__swsetup_r+0x7c>
   3251c:	00bfffc4 	movi	r2,-1
   32520:	003fd606 	br	3247c <__swsetup_r+0x7c>
   32524:	1009883a 	mov	r4,r2
   32528:	00340880 	call	34088 <__sinit>
   3252c:	003fc006 	br	32430 <__swsetup_r+0x30>
   32530:	0005883a 	mov	r2,zero
   32534:	80800215 	stw	r2,8(r16)
   32538:	003fce06 	br	32474 <__swsetup_r+0x74>
   3253c:	81400c17 	ldw	r5,48(r16)
   32540:	28000626 	beq	r5,zero,3255c <__swsetup_r+0x15c>
   32544:	80c01004 	addi	r3,r16,64
   32548:	28c00326 	beq	r5,r3,32558 <__swsetup_r+0x158>
   3254c:	8809883a 	mov	r4,r17
   32550:	003440c0 	call	3440c <_free_r>
   32554:	8080030b 	ldhu	r2,12(r16)
   32558:	80000c15 	stw	zero,48(r16)
   3255c:	80c00417 	ldw	r3,16(r16)
   32560:	013ff6c4 	movi	r4,-37
   32564:	2084703a 	and	r2,r4,r2
   32568:	80000115 	stw	zero,4(r16)
   3256c:	80c00015 	stw	r3,0(r16)
   32570:	003fd206 	br	324bc <__swsetup_r+0xbc>

00032574 <quorem>:
   32574:	defff204 	addi	sp,sp,-56
   32578:	dd000815 	stw	r20,32(sp)
   3257c:	20800417 	ldw	r2,16(r4)
   32580:	2d000417 	ldw	r20,16(r5)
   32584:	dcc00715 	stw	r19,28(sp)
   32588:	dfc00d15 	stw	ra,52(sp)
   3258c:	df000c15 	stw	fp,48(sp)
   32590:	ddc00b15 	stw	r23,44(sp)
   32594:	dd800a15 	stw	r22,40(sp)
   32598:	dd400915 	stw	r21,36(sp)
   3259c:	dc800615 	stw	r18,24(sp)
   325a0:	dc400515 	stw	r17,20(sp)
   325a4:	dc000415 	stw	r16,16(sp)
   325a8:	d9400015 	stw	r5,0(sp)
   325ac:	2027883a 	mov	r19,r4
   325b0:	15007d16 	blt	r2,r20,327a8 <quorem+0x234>
   325b4:	a0800104 	addi	r2,r20,4
   325b8:	1085883a 	add	r2,r2,r2
   325bc:	1085883a 	add	r2,r2,r2
   325c0:	28ad883a 	add	r22,r5,r2
   325c4:	2085883a 	add	r2,r4,r2
   325c8:	10800017 	ldw	r2,0(r2)
   325cc:	b1400017 	ldw	r5,0(r22)
   325d0:	a53fffc4 	addi	r20,r20,-1
   325d4:	1009883a 	mov	r4,r2
   325d8:	29400044 	addi	r5,r5,1
   325dc:	d8800115 	stw	r2,4(sp)
   325e0:	00394280 	call	39428 <__udivsi3>
   325e4:	1025883a 	mov	r18,r2
   325e8:	d8800017 	ldw	r2,0(sp)
   325ec:	9f000504 	addi	fp,r19,20
   325f0:	14000504 	addi	r16,r2,20
   325f4:	90003626 	beq	r18,zero,326d0 <quorem+0x15c>
   325f8:	802b883a 	mov	r21,r16
   325fc:	e023883a 	mov	r17,fp
   32600:	0007883a 	mov	r3,zero
   32604:	002f883a 	mov	r23,zero
   32608:	a9800017 	ldw	r6,0(r21)
   3260c:	900b883a 	mov	r5,r18
   32610:	d8c00315 	stw	r3,12(sp)
   32614:	313fffcc 	andi	r4,r6,65535
   32618:	d9800215 	stw	r6,8(sp)
   3261c:	00394380 	call	39438 <__mulsi3>
   32620:	d9800217 	ldw	r6,8(sp)
   32624:	d8c00317 	ldw	r3,12(sp)
   32628:	900b883a 	mov	r5,r18
   3262c:	3008d43a 	srli	r4,r6,16
   32630:	1887883a 	add	r3,r3,r2
   32634:	d8c00315 	stw	r3,12(sp)
   32638:	00394380 	call	39438 <__mulsi3>
   3263c:	89400017 	ldw	r5,0(r17)
   32640:	d8c00317 	ldw	r3,12(sp)
   32644:	ad400104 	addi	r21,r21,4
   32648:	293fffcc 	andi	r4,r5,65535
   3264c:	1810d43a 	srli	r8,r3,16
   32650:	25c9883a 	add	r4,r4,r23
   32654:	18ffffcc 	andi	r3,r3,65535
   32658:	20c9c83a 	sub	r4,r4,r3
   3265c:	280cd43a 	srli	r6,r5,16
   32660:	4085883a 	add	r2,r8,r2
   32664:	2007d43a 	srai	r3,r4,16
   32668:	117fffcc 	andi	r5,r2,65535
   3266c:	314bc83a 	sub	r5,r6,r5
   32670:	28cb883a 	add	r5,r5,r3
   32674:	8940008d 	sth	r5,2(r17)
   32678:	8900000d 	sth	r4,0(r17)
   3267c:	1006d43a 	srli	r3,r2,16
   32680:	282fd43a 	srai	r23,r5,16
   32684:	8c400104 	addi	r17,r17,4
   32688:	b57fdf2e 	bgeu	r22,r21,32608 <quorem+0x94>
   3268c:	d8c00117 	ldw	r3,4(sp)
   32690:	18000f1e 	bne	r3,zero,326d0 <quorem+0x15c>
   32694:	a0800144 	addi	r2,r20,5
   32698:	1085883a 	add	r2,r2,r2
   3269c:	1085883a 	add	r2,r2,r2
   326a0:	9887883a 	add	r3,r19,r2
   326a4:	18bfff04 	addi	r2,r3,-4
   326a8:	e080082e 	bgeu	fp,r2,326cc <quorem+0x158>
   326ac:	18ffff17 	ldw	r3,-4(r3)
   326b0:	18000326 	beq	r3,zero,326c0 <quorem+0x14c>
   326b4:	00000506 	br	326cc <quorem+0x158>
   326b8:	10c00017 	ldw	r3,0(r2)
   326bc:	1800031e 	bne	r3,zero,326cc <quorem+0x158>
   326c0:	10bfff04 	addi	r2,r2,-4
   326c4:	a53fffc4 	addi	r20,r20,-1
   326c8:	e0bffb36 	bltu	fp,r2,326b8 <quorem+0x144>
   326cc:	9d000415 	stw	r20,16(r19)
   326d0:	d9400017 	ldw	r5,0(sp)
   326d4:	9809883a 	mov	r4,r19
   326d8:	00365140 	call	36514 <__mcmp>
   326dc:	10002516 	blt	r2,zero,32774 <quorem+0x200>
   326e0:	94800044 	addi	r18,r18,1
   326e4:	e007883a 	mov	r3,fp
   326e8:	000d883a 	mov	r6,zero
   326ec:	18800017 	ldw	r2,0(r3)
   326f0:	82000017 	ldw	r8,0(r16)
   326f4:	84000104 	addi	r16,r16,4
   326f8:	11ffffcc 	andi	r7,r2,65535
   326fc:	413fffcc 	andi	r4,r8,65535
   32700:	398d883a 	add	r6,r7,r6
   32704:	310fc83a 	sub	r7,r6,r4
   32708:	4010d43a 	srli	r8,r8,16
   3270c:	100cd43a 	srli	r6,r2,16
   32710:	3809d43a 	srai	r4,r7,16
   32714:	19c0000d 	sth	r7,0(r3)
   32718:	320dc83a 	sub	r6,r6,r8
   3271c:	310d883a 	add	r6,r6,r4
   32720:	1980008d 	sth	r6,2(r3)
   32724:	300dd43a 	srai	r6,r6,16
   32728:	18c00104 	addi	r3,r3,4
   3272c:	b43fef2e 	bgeu	r22,r16,326ec <quorem+0x178>
   32730:	a0800144 	addi	r2,r20,5
   32734:	1085883a 	add	r2,r2,r2
   32738:	1085883a 	add	r2,r2,r2
   3273c:	9885883a 	add	r2,r19,r2
   32740:	10c00017 	ldw	r3,0(r2)
   32744:	18000b1e 	bne	r3,zero,32774 <quorem+0x200>
   32748:	10ffff04 	addi	r3,r2,-4
   3274c:	e0c0082e 	bgeu	fp,r3,32770 <quorem+0x1fc>
   32750:	10bfff17 	ldw	r2,-4(r2)
   32754:	10000326 	beq	r2,zero,32764 <quorem+0x1f0>
   32758:	00000506 	br	32770 <quorem+0x1fc>
   3275c:	18800017 	ldw	r2,0(r3)
   32760:	1000031e 	bne	r2,zero,32770 <quorem+0x1fc>
   32764:	18ffff04 	addi	r3,r3,-4
   32768:	a53fffc4 	addi	r20,r20,-1
   3276c:	e0fffb36 	bltu	fp,r3,3275c <quorem+0x1e8>
   32770:	9d000415 	stw	r20,16(r19)
   32774:	9005883a 	mov	r2,r18
   32778:	dfc00d17 	ldw	ra,52(sp)
   3277c:	df000c17 	ldw	fp,48(sp)
   32780:	ddc00b17 	ldw	r23,44(sp)
   32784:	dd800a17 	ldw	r22,40(sp)
   32788:	dd400917 	ldw	r21,36(sp)
   3278c:	dd000817 	ldw	r20,32(sp)
   32790:	dcc00717 	ldw	r19,28(sp)
   32794:	dc800617 	ldw	r18,24(sp)
   32798:	dc400517 	ldw	r17,20(sp)
   3279c:	dc000417 	ldw	r16,16(sp)
   327a0:	dec00e04 	addi	sp,sp,56
   327a4:	f800283a 	ret
   327a8:	0005883a 	mov	r2,zero
   327ac:	003ff206 	br	32778 <quorem+0x204>

000327b0 <_dtoa_r>:
   327b0:	20801017 	ldw	r2,64(r4)
   327b4:	deffdf04 	addi	sp,sp,-132
   327b8:	dcc01a15 	stw	r19,104(sp)
   327bc:	dc801915 	stw	r18,100(sp)
   327c0:	dc401815 	stw	r17,96(sp)
   327c4:	dc001715 	stw	r16,92(sp)
   327c8:	dfc02015 	stw	ra,128(sp)
   327cc:	df001f15 	stw	fp,124(sp)
   327d0:	ddc01e15 	stw	r23,120(sp)
   327d4:	dd801d15 	stw	r22,116(sp)
   327d8:	dd401c15 	stw	r21,112(sp)
   327dc:	dd001b15 	stw	r20,108(sp)
   327e0:	d9400315 	stw	r5,12(sp)
   327e4:	d9c00415 	stw	r7,16(sp)
   327e8:	2021883a 	mov	r16,r4
   327ec:	3025883a 	mov	r18,r6
   327f0:	dcc02317 	ldw	r19,140(sp)
   327f4:	3023883a 	mov	r17,r6
   327f8:	10000826 	beq	r2,zero,3281c <_dtoa_r+0x6c>
   327fc:	20c01117 	ldw	r3,68(r4)
   32800:	01800044 	movi	r6,1
   32804:	100b883a 	mov	r5,r2
   32808:	30cc983a 	sll	r6,r6,r3
   3280c:	10c00115 	stw	r3,4(r2)
   32810:	11800215 	stw	r6,8(r2)
   32814:	0035c700 	call	35c70 <_Bfree>
   32818:	80001015 	stw	zero,64(r16)
   3281c:	90002f16 	blt	r18,zero,328dc <_dtoa_r+0x12c>
   32820:	98000015 	stw	zero,0(r19)
   32824:	90dffc2c 	andhi	r3,r18,32752
   32828:	009ffc34 	movhi	r2,32752
   3282c:	18801c26 	beq	r3,r2,328a0 <_dtoa_r+0xf0>
   32830:	d9000317 	ldw	r4,12(sp)
   32834:	880b883a 	mov	r5,r17
   32838:	000d883a 	mov	r6,zero
   3283c:	000f883a 	mov	r7,zero
   32840:	0038e680 	call	38e68 <__eqdf2>
   32844:	10002c1e 	bne	r2,zero,328f8 <_dtoa_r+0x148>
   32848:	d9002217 	ldw	r4,136(sp)
   3284c:	d9c02417 	ldw	r7,144(sp)
   32850:	00800044 	movi	r2,1
   32854:	20800015 	stw	r2,0(r4)
   32858:	38019426 	beq	r7,zero,32eac <_dtoa_r+0x6fc>
   3285c:	00800034 	movhi	r2,0
   32860:	10802444 	addi	r2,r2,145
   32864:	38800015 	stw	r2,0(r7)
   32868:	15ffffc4 	addi	r23,r2,-1
   3286c:	b805883a 	mov	r2,r23
   32870:	dfc02017 	ldw	ra,128(sp)
   32874:	df001f17 	ldw	fp,124(sp)
   32878:	ddc01e17 	ldw	r23,120(sp)
   3287c:	dd801d17 	ldw	r22,116(sp)
   32880:	dd401c17 	ldw	r21,112(sp)
   32884:	dd001b17 	ldw	r20,108(sp)
   32888:	dcc01a17 	ldw	r19,104(sp)
   3288c:	dc801917 	ldw	r18,100(sp)
   32890:	dc401817 	ldw	r17,96(sp)
   32894:	dc001717 	ldw	r16,92(sp)
   32898:	dec02104 	addi	sp,sp,132
   3289c:	f800283a 	ret
   328a0:	d8c02217 	ldw	r3,136(sp)
   328a4:	d9000317 	ldw	r4,12(sp)
   328a8:	0089c3c4 	movi	r2,9999
   328ac:	18800015 	stw	r2,0(r3)
   328b0:	20016c26 	beq	r4,zero,32e64 <_dtoa_r+0x6b4>
   328b4:	05c00034 	movhi	r23,0
   328b8:	bdc03004 	addi	r23,r23,192
   328bc:	d9c02417 	ldw	r7,144(sp)
   328c0:	383fea26 	beq	r7,zero,3286c <_dtoa_r+0xbc>
   328c4:	b88000c7 	ldb	r2,3(r23)
   328c8:	10016d1e 	bne	r2,zero,32e80 <_dtoa_r+0x6d0>
   328cc:	b88000c4 	addi	r2,r23,3
   328d0:	d8c02417 	ldw	r3,144(sp)
   328d4:	18800015 	stw	r2,0(r3)
   328d8:	003fe406 	br	3286c <_dtoa_r+0xbc>
   328dc:	04600034 	movhi	r17,32768
   328e0:	8c7fffc4 	addi	r17,r17,-1
   328e4:	9462703a 	and	r17,r18,r17
   328e8:	00800044 	movi	r2,1
   328ec:	98800015 	stw	r2,0(r19)
   328f0:	8825883a 	mov	r18,r17
   328f4:	003fcb06 	br	32824 <_dtoa_r+0x74>
   328f8:	d9400317 	ldw	r5,12(sp)
   328fc:	9028d53a 	srli	r20,r18,20
   32900:	d8800204 	addi	r2,sp,8
   32904:	d8800015 	stw	r2,0(sp)
   32908:	8009883a 	mov	r4,r16
   3290c:	880d883a 	mov	r6,r17
   32910:	d9c00104 	addi	r7,sp,4
   32914:	00368bc0 	call	368bc <__d2b>
   32918:	a501ffcc 	andi	r20,r20,2047
   3291c:	1039883a 	mov	fp,r2
   32920:	a001591e 	bne	r20,zero,32e88 <_dtoa_r+0x6d8>
   32924:	dd400217 	ldw	r21,8(sp)
   32928:	dd000117 	ldw	r20,4(sp)
   3292c:	00befbc4 	movi	r2,-1041
   32930:	ad29883a 	add	r20,r21,r20
   32934:	a082d216 	blt	r20,r2,33480 <_dtoa_r+0xcd0>
   32938:	d8c00317 	ldw	r3,12(sp)
   3293c:	013f0384 	movi	r4,-1010
   32940:	2509c83a 	sub	r4,r4,r20
   32944:	a0810484 	addi	r2,r20,1042
   32948:	9124983a 	sll	r18,r18,r4
   3294c:	1884d83a 	srl	r2,r3,r2
   32950:	9088b03a 	or	r4,r18,r2
   32954:	00391ec0 	call	391ec <__floatunsidf>
   32958:	1009883a 	mov	r4,r2
   3295c:	017f8434 	movhi	r5,65040
   32960:	00800044 	movi	r2,1
   32964:	194b883a 	add	r5,r3,r5
   32968:	a53fffc4 	addi	r20,r20,-1
   3296c:	d8800f15 	stw	r2,60(sp)
   32970:	000d883a 	mov	r6,zero
   32974:	01cffe34 	movhi	r7,16376
   32978:	00389700 	call	38970 <__subdf3>
   3297c:	1009883a 	mov	r4,r2
   32980:	180b883a 	mov	r5,r3
   32984:	0198dbf4 	movhi	r6,25455
   32988:	3190d844 	addi	r6,r6,17249
   3298c:	01cff4f4 	movhi	r7,16339
   32990:	39e1e9c4 	addi	r7,r7,-30809
   32994:	00389d00 	call	389d0 <__muldf3>
   32998:	180b883a 	mov	r5,r3
   3299c:	01a2d874 	movhi	r6,35681
   329a0:	31b22cc4 	addi	r6,r6,-14157
   329a4:	01cff1f4 	movhi	r7,16327
   329a8:	39e28a04 	addi	r7,r7,-30168
   329ac:	1009883a 	mov	r4,r2
   329b0:	003891c0 	call	3891c <__adddf3>
   329b4:	a009883a 	mov	r4,r20
   329b8:	1027883a 	mov	r19,r2
   329bc:	1825883a 	mov	r18,r3
   329c0:	00390440 	call	39044 <__floatsidf>
   329c4:	1009883a 	mov	r4,r2
   329c8:	180b883a 	mov	r5,r3
   329cc:	019427f4 	movhi	r6,20639
   329d0:	319e7ec4 	addi	r6,r6,31227
   329d4:	01cff4f4 	movhi	r7,16339
   329d8:	39d104c4 	addi	r7,r7,17427
   329dc:	00389d00 	call	389d0 <__muldf3>
   329e0:	9809883a 	mov	r4,r19
   329e4:	900b883a 	mov	r5,r18
   329e8:	100d883a 	mov	r6,r2
   329ec:	180f883a 	mov	r7,r3
   329f0:	003891c0 	call	3891c <__adddf3>
   329f4:	1009883a 	mov	r4,r2
   329f8:	180b883a 	mov	r5,r3
   329fc:	1027883a 	mov	r19,r2
   32a00:	1825883a 	mov	r18,r3
   32a04:	00391180 	call	39118 <__fixdfsi>
   32a08:	9809883a 	mov	r4,r19
   32a0c:	900b883a 	mov	r5,r18
   32a10:	000d883a 	mov	r6,zero
   32a14:	000f883a 	mov	r7,zero
   32a18:	d8800615 	stw	r2,24(sp)
   32a1c:	0038fe80 	call	38fe8 <__ltdf2>
   32a20:	10027e16 	blt	r2,zero,3341c <_dtoa_r+0xc6c>
   32a24:	d8c00617 	ldw	r3,24(sp)
   32a28:	00800584 	movi	r2,22
   32a2c:	10c26c36 	bltu	r2,r3,333e0 <_dtoa_r+0xc30>
   32a30:	180490fa 	slli	r2,r3,3
   32a34:	00c00034 	movhi	r3,0
   32a38:	18c05604 	addi	r3,r3,344
   32a3c:	d9800317 	ldw	r6,12(sp)
   32a40:	1885883a 	add	r2,r3,r2
   32a44:	11000017 	ldw	r4,0(r2)
   32a48:	11400117 	ldw	r5,4(r2)
   32a4c:	880f883a 	mov	r7,r17
   32a50:	0038f200 	call	38f20 <__gtdf2>
   32a54:	00828f0e 	bge	zero,r2,33494 <_dtoa_r+0xce4>
   32a58:	d8800617 	ldw	r2,24(sp)
   32a5c:	d8000d15 	stw	zero,52(sp)
   32a60:	10bfffc4 	addi	r2,r2,-1
   32a64:	d8800615 	stw	r2,24(sp)
   32a68:	ad29c83a 	sub	r20,r21,r20
   32a6c:	a53fffc4 	addi	r20,r20,-1
   32a70:	a0026616 	blt	r20,zero,3340c <_dtoa_r+0xc5c>
   32a74:	dd000715 	stw	r20,28(sp)
   32a78:	d8000815 	stw	zero,32(sp)
   32a7c:	d8800617 	ldw	r2,24(sp)
   32a80:	10025a16 	blt	r2,zero,333ec <_dtoa_r+0xc3c>
   32a84:	d8c00717 	ldw	r3,28(sp)
   32a88:	d8800b15 	stw	r2,44(sp)
   32a8c:	d8000a15 	stw	zero,40(sp)
   32a90:	1887883a 	add	r3,r3,r2
   32a94:	d8c00715 	stw	r3,28(sp)
   32a98:	d9c00417 	ldw	r7,16(sp)
   32a9c:	00800244 	movi	r2,9
   32aa0:	11c10536 	bltu	r2,r7,32eb8 <_dtoa_r+0x708>
   32aa4:	00800144 	movi	r2,5
   32aa8:	11c4c60e 	bge	r2,r7,33dc4 <_dtoa_r+0x1614>
   32aac:	39ffff04 	addi	r7,r7,-4
   32ab0:	d9c00415 	stw	r7,16(sp)
   32ab4:	0027883a 	mov	r19,zero
   32ab8:	d9c00417 	ldw	r7,16(sp)
   32abc:	008000c4 	movi	r2,3
   32ac0:	3883a226 	beq	r7,r2,3394c <_dtoa_r+0x119c>
   32ac4:	11c2bc16 	blt	r2,r7,335b8 <_dtoa_r+0xe08>
   32ac8:	00800084 	movi	r2,2
   32acc:	3880fb1e 	bne	r7,r2,32ebc <_dtoa_r+0x70c>
   32ad0:	d8000c15 	stw	zero,48(sp)
   32ad4:	d9002117 	ldw	r4,132(sp)
   32ad8:	0103ae0e 	bge	zero,r4,33994 <_dtoa_r+0x11e4>
   32adc:	2025883a 	mov	r18,r4
   32ae0:	d9000e15 	stw	r4,56(sp)
   32ae4:	d9000915 	stw	r4,36(sp)
   32ae8:	80001115 	stw	zero,68(r16)
   32aec:	008005c4 	movi	r2,23
   32af0:	1484b22e 	bgeu	r2,r18,33dbc <_dtoa_r+0x160c>
   32af4:	00c00044 	movi	r3,1
   32af8:	00800104 	movi	r2,4
   32afc:	1085883a 	add	r2,r2,r2
   32b00:	11000504 	addi	r4,r2,20
   32b04:	180b883a 	mov	r5,r3
   32b08:	18c00044 	addi	r3,r3,1
   32b0c:	913ffb2e 	bgeu	r18,r4,32afc <_dtoa_r+0x34c>
   32b10:	81401115 	stw	r5,68(r16)
   32b14:	8009883a 	mov	r4,r16
   32b18:	0035bc80 	call	35bc8 <_Balloc>
   32b1c:	102f883a 	mov	r23,r2
   32b20:	80801015 	stw	r2,64(r16)
   32b24:	00800384 	movi	r2,14
   32b28:	1480f036 	bltu	r2,r18,32eec <_dtoa_r+0x73c>
   32b2c:	9800ef26 	beq	r19,zero,32eec <_dtoa_r+0x73c>
   32b30:	d8800617 	ldw	r2,24(sp)
   32b34:	00839c0e 	bge	zero,r2,339a8 <_dtoa_r+0x11f8>
   32b38:	d8c00617 	ldw	r3,24(sp)
   32b3c:	108003cc 	andi	r2,r2,15
   32b40:	100490fa 	slli	r2,r2,3
   32b44:	182bd13a 	srai	r21,r3,4
   32b48:	00c00034 	movhi	r3,0
   32b4c:	18c05604 	addi	r3,r3,344
   32b50:	1885883a 	add	r2,r3,r2
   32b54:	a8c0040c 	andi	r3,r21,16
   32b58:	12800017 	ldw	r10,0(r2)
   32b5c:	15800117 	ldw	r22,4(r2)
   32b60:	18038726 	beq	r3,zero,33980 <_dtoa_r+0x11d0>
   32b64:	00800034 	movhi	r2,0
   32b68:	10804c04 	addi	r2,r2,304
   32b6c:	11800817 	ldw	r6,32(r2)
   32b70:	11c00917 	ldw	r7,36(r2)
   32b74:	d9000317 	ldw	r4,12(sp)
   32b78:	880b883a 	mov	r5,r17
   32b7c:	da801515 	stw	r10,84(sp)
   32b80:	0038cb40 	call	38cb4 <__divdf3>
   32b84:	da801517 	ldw	r10,84(sp)
   32b88:	d8801015 	stw	r2,64(sp)
   32b8c:	1829883a 	mov	r20,r3
   32b90:	ad4003cc 	andi	r21,r21,15
   32b94:	048000c4 	movi	r18,3
   32b98:	a8001126 	beq	r21,zero,32be0 <_dtoa_r+0x430>
   32b9c:	04c00034 	movhi	r19,0
   32ba0:	9cc04c04 	addi	r19,r19,304
   32ba4:	5005883a 	mov	r2,r10
   32ba8:	b007883a 	mov	r3,r22
   32bac:	a980004c 	andi	r6,r21,1
   32bb0:	1009883a 	mov	r4,r2
   32bb4:	a82bd07a 	srai	r21,r21,1
   32bb8:	180b883a 	mov	r5,r3
   32bbc:	30000426 	beq	r6,zero,32bd0 <_dtoa_r+0x420>
   32bc0:	99800017 	ldw	r6,0(r19)
   32bc4:	99c00117 	ldw	r7,4(r19)
   32bc8:	94800044 	addi	r18,r18,1
   32bcc:	00389d00 	call	389d0 <__muldf3>
   32bd0:	9cc00204 	addi	r19,r19,8
   32bd4:	a83ff51e 	bne	r21,zero,32bac <_dtoa_r+0x3fc>
   32bd8:	1015883a 	mov	r10,r2
   32bdc:	182d883a 	mov	r22,r3
   32be0:	d9001017 	ldw	r4,64(sp)
   32be4:	a00b883a 	mov	r5,r20
   32be8:	500d883a 	mov	r6,r10
   32bec:	b00f883a 	mov	r7,r22
   32bf0:	0038cb40 	call	38cb4 <__divdf3>
   32bf4:	1027883a 	mov	r19,r2
   32bf8:	1829883a 	mov	r20,r3
   32bfc:	d8c00d17 	ldw	r3,52(sp)
   32c00:	18000626 	beq	r3,zero,32c1c <_dtoa_r+0x46c>
   32c04:	9809883a 	mov	r4,r19
   32c08:	a00b883a 	mov	r5,r20
   32c0c:	000d883a 	mov	r6,zero
   32c10:	01cffc34 	movhi	r7,16368
   32c14:	0038fe80 	call	38fe8 <__ltdf2>
   32c18:	10040e16 	blt	r2,zero,33c54 <_dtoa_r+0x14a4>
   32c1c:	9009883a 	mov	r4,r18
   32c20:	00390440 	call	39044 <__floatsidf>
   32c24:	1009883a 	mov	r4,r2
   32c28:	180b883a 	mov	r5,r3
   32c2c:	980d883a 	mov	r6,r19
   32c30:	a00f883a 	mov	r7,r20
   32c34:	00389d00 	call	389d0 <__muldf3>
   32c38:	1009883a 	mov	r4,r2
   32c3c:	180b883a 	mov	r5,r3
   32c40:	000d883a 	mov	r6,zero
   32c44:	01d00734 	movhi	r7,16412
   32c48:	003891c0 	call	3891c <__adddf3>
   32c4c:	057f3034 	movhi	r21,64704
   32c50:	1d6b883a 	add	r21,r3,r21
   32c54:	d8c00917 	ldw	r3,36(sp)
   32c58:	1025883a 	mov	r18,r2
   32c5c:	18031f26 	beq	r3,zero,338dc <_dtoa_r+0x112c>
   32c60:	d8800617 	ldw	r2,24(sp)
   32c64:	dac00917 	ldw	r11,36(sp)
   32c68:	d8801315 	stw	r2,76(sp)
   32c6c:	d8c00c17 	ldw	r3,48(sp)
   32c70:	18039026 	beq	r3,zero,33ab4 <_dtoa_r+0x1304>
   32c74:	58bfffc4 	addi	r2,r11,-1
   32c78:	100490fa 	slli	r2,r2,3
   32c7c:	00c00034 	movhi	r3,0
   32c80:	18c05604 	addi	r3,r3,344
   32c84:	0009883a 	mov	r4,zero
   32c88:	1885883a 	add	r2,r3,r2
   32c8c:	11800017 	ldw	r6,0(r2)
   32c90:	11c00117 	ldw	r7,4(r2)
   32c94:	014ff834 	movhi	r5,16352
   32c98:	dac01615 	stw	r11,88(sp)
   32c9c:	0038cb40 	call	38cb4 <__divdf3>
   32ca0:	900d883a 	mov	r6,r18
   32ca4:	a80f883a 	mov	r7,r21
   32ca8:	1009883a 	mov	r4,r2
   32cac:	180b883a 	mov	r5,r3
   32cb0:	00389700 	call	38970 <__subdf3>
   32cb4:	a00b883a 	mov	r5,r20
   32cb8:	9809883a 	mov	r4,r19
   32cbc:	182b883a 	mov	r21,r3
   32cc0:	d8801015 	stw	r2,64(sp)
   32cc4:	00391180 	call	39118 <__fixdfsi>
   32cc8:	1009883a 	mov	r4,r2
   32ccc:	d8801515 	stw	r2,84(sp)
   32cd0:	00390440 	call	39044 <__floatsidf>
   32cd4:	9809883a 	mov	r4,r19
   32cd8:	a00b883a 	mov	r5,r20
   32cdc:	100d883a 	mov	r6,r2
   32ce0:	180f883a 	mov	r7,r3
   32ce4:	00389700 	call	38970 <__subdf3>
   32ce8:	da401517 	ldw	r9,84(sp)
   32cec:	d9001017 	ldw	r4,64(sp)
   32cf0:	a80b883a 	mov	r5,r21
   32cf4:	4d000c04 	addi	r20,r9,48
   32cf8:	bd000005 	stb	r20,0(r23)
   32cfc:	100d883a 	mov	r6,r2
   32d00:	180f883a 	mov	r7,r3
   32d04:	bd800044 	addi	r22,r23,1
   32d08:	1025883a 	mov	r18,r2
   32d0c:	1827883a 	mov	r19,r3
   32d10:	0038f200 	call	38f20 <__gtdf2>
   32d14:	00842216 	blt	zero,r2,33da0 <_dtoa_r+0x15f0>
   32d18:	0009883a 	mov	r4,zero
   32d1c:	014ffc34 	movhi	r5,16368
   32d20:	900d883a 	mov	r6,r18
   32d24:	980f883a 	mov	r7,r19
   32d28:	00389700 	call	38970 <__subdf3>
   32d2c:	d9001017 	ldw	r4,64(sp)
   32d30:	a80b883a 	mov	r5,r21
   32d34:	100d883a 	mov	r6,r2
   32d38:	180f883a 	mov	r7,r3
   32d3c:	0038f200 	call	38f20 <__gtdf2>
   32d40:	dac01617 	ldw	r11,88(sp)
   32d44:	00841316 	blt	zero,r2,33d94 <_dtoa_r+0x15e4>
   32d48:	00800044 	movi	r2,1
   32d4c:	12c0670e 	bge	r2,r11,32eec <_dtoa_r+0x73c>
   32d50:	bad7883a 	add	r11,r23,r11
   32d54:	df001115 	stw	fp,68(sp)
   32d58:	dc401215 	stw	r17,72(sp)
   32d5c:	5839883a 	mov	fp,r11
   32d60:	dc401017 	ldw	r17,64(sp)
   32d64:	00000806 	br	32d88 <_dtoa_r+0x5d8>
   32d68:	00389700 	call	38970 <__subdf3>
   32d6c:	1009883a 	mov	r4,r2
   32d70:	180b883a 	mov	r5,r3
   32d74:	880d883a 	mov	r6,r17
   32d78:	a80f883a 	mov	r7,r21
   32d7c:	0038fe80 	call	38fe8 <__ltdf2>
   32d80:	1003ee16 	blt	r2,zero,33d3c <_dtoa_r+0x158c>
   32d84:	b703f126 	beq	r22,fp,33d4c <_dtoa_r+0x159c>
   32d88:	8809883a 	mov	r4,r17
   32d8c:	a80b883a 	mov	r5,r21
   32d90:	000d883a 	mov	r6,zero
   32d94:	01d00934 	movhi	r7,16420
   32d98:	00389d00 	call	389d0 <__muldf3>
   32d9c:	000d883a 	mov	r6,zero
   32da0:	01d00934 	movhi	r7,16420
   32da4:	9009883a 	mov	r4,r18
   32da8:	980b883a 	mov	r5,r19
   32dac:	1023883a 	mov	r17,r2
   32db0:	182b883a 	mov	r21,r3
   32db4:	00389d00 	call	389d0 <__muldf3>
   32db8:	180b883a 	mov	r5,r3
   32dbc:	1009883a 	mov	r4,r2
   32dc0:	1825883a 	mov	r18,r3
   32dc4:	1027883a 	mov	r19,r2
   32dc8:	00391180 	call	39118 <__fixdfsi>
   32dcc:	1009883a 	mov	r4,r2
   32dd0:	1029883a 	mov	r20,r2
   32dd4:	00390440 	call	39044 <__floatsidf>
   32dd8:	9809883a 	mov	r4,r19
   32ddc:	900b883a 	mov	r5,r18
   32de0:	100d883a 	mov	r6,r2
   32de4:	180f883a 	mov	r7,r3
   32de8:	00389700 	call	38970 <__subdf3>
   32dec:	a5000c04 	addi	r20,r20,48
   32df0:	b5000005 	stb	r20,0(r22)
   32df4:	1009883a 	mov	r4,r2
   32df8:	180b883a 	mov	r5,r3
   32dfc:	880d883a 	mov	r6,r17
   32e00:	a80f883a 	mov	r7,r21
   32e04:	1025883a 	mov	r18,r2
   32e08:	1827883a 	mov	r19,r3
   32e0c:	0038fe80 	call	38fe8 <__ltdf2>
   32e10:	b5800044 	addi	r22,r22,1
   32e14:	0009883a 	mov	r4,zero
   32e18:	014ffc34 	movhi	r5,16368
   32e1c:	900d883a 	mov	r6,r18
   32e20:	980f883a 	mov	r7,r19
   32e24:	103fd00e 	bge	r2,zero,32d68 <_dtoa_r+0x5b8>
   32e28:	d9001317 	ldw	r4,76(sp)
   32e2c:	df001117 	ldw	fp,68(sp)
   32e30:	d9000615 	stw	r4,24(sp)
   32e34:	8009883a 	mov	r4,r16
   32e38:	e00b883a 	mov	r5,fp
   32e3c:	0035c700 	call	35c70 <_Bfree>
   32e40:	d9c00617 	ldw	r7,24(sp)
   32e44:	d8c02217 	ldw	r3,136(sp)
   32e48:	d9002417 	ldw	r4,144(sp)
   32e4c:	b0000005 	stb	zero,0(r22)
   32e50:	38800044 	addi	r2,r7,1
   32e54:	18800015 	stw	r2,0(r3)
   32e58:	203e8426 	beq	r4,zero,3286c <_dtoa_r+0xbc>
   32e5c:	25800015 	stw	r22,0(r4)
   32e60:	003e8206 	br	3286c <_dtoa_r+0xbc>
   32e64:	00800434 	movhi	r2,16
   32e68:	10bfffc4 	addi	r2,r2,-1
   32e6c:	90a4703a 	and	r18,r18,r2
   32e70:	903e901e 	bne	r18,zero,328b4 <_dtoa_r+0x104>
   32e74:	05c00034 	movhi	r23,0
   32e78:	bdc02d04 	addi	r23,r23,180
   32e7c:	003e8f06 	br	328bc <_dtoa_r+0x10c>
   32e80:	b8800204 	addi	r2,r23,8
   32e84:	003e9206 	br	328d0 <_dtoa_r+0x120>
   32e88:	01400434 	movhi	r5,16
   32e8c:	297fffc4 	addi	r5,r5,-1
   32e90:	894a703a 	and	r5,r17,r5
   32e94:	d9000317 	ldw	r4,12(sp)
   32e98:	294ffc34 	orhi	r5,r5,16368
   32e9c:	a53f0044 	addi	r20,r20,-1023
   32ea0:	dd400217 	ldw	r21,8(sp)
   32ea4:	d8000f15 	stw	zero,60(sp)
   32ea8:	003eb106 	br	32970 <_dtoa_r+0x1c0>
   32eac:	05c00034 	movhi	r23,0
   32eb0:	bdc02404 	addi	r23,r23,144
   32eb4:	003e6d06 	br	3286c <_dtoa_r+0xbc>
   32eb8:	d8000415 	stw	zero,16(sp)
   32ebc:	80001115 	stw	zero,68(r16)
   32ec0:	8009883a 	mov	r4,r16
   32ec4:	000b883a 	mov	r5,zero
   32ec8:	0035bc80 	call	35bc8 <_Balloc>
   32ecc:	01ffffc4 	movi	r7,-1
   32ed0:	102f883a 	mov	r23,r2
   32ed4:	80801015 	stw	r2,64(r16)
   32ed8:	00800044 	movi	r2,1
   32edc:	d9c00915 	stw	r7,36(sp)
   32ee0:	d8002115 	stw	zero,132(sp)
   32ee4:	d9c00e15 	stw	r7,56(sp)
   32ee8:	d8800c15 	stw	r2,48(sp)
   32eec:	d8800117 	ldw	r2,4(sp)
   32ef0:	10008b16 	blt	r2,zero,33120 <_dtoa_r+0x970>
   32ef4:	d9000617 	ldw	r4,24(sp)
   32ef8:	00c00384 	movi	r3,14
   32efc:	19008816 	blt	r3,r4,33120 <_dtoa_r+0x970>
   32f00:	200490fa 	slli	r2,r4,3
   32f04:	d9c02117 	ldw	r7,132(sp)
   32f08:	00c00034 	movhi	r3,0
   32f0c:	18c05604 	addi	r3,r3,344
   32f10:	1885883a 	add	r2,r3,r2
   32f14:	14800017 	ldw	r18,0(r2)
   32f18:	14c00117 	ldw	r19,4(r2)
   32f1c:	3801c916 	blt	r7,zero,33644 <_dtoa_r+0xe94>
   32f20:	d9000317 	ldw	r4,12(sp)
   32f24:	900d883a 	mov	r6,r18
   32f28:	980f883a 	mov	r7,r19
   32f2c:	880b883a 	mov	r5,r17
   32f30:	0038cb40 	call	38cb4 <__divdf3>
   32f34:	180b883a 	mov	r5,r3
   32f38:	1009883a 	mov	r4,r2
   32f3c:	00391180 	call	39118 <__fixdfsi>
   32f40:	1009883a 	mov	r4,r2
   32f44:	102b883a 	mov	r21,r2
   32f48:	00390440 	call	39044 <__floatsidf>
   32f4c:	1009883a 	mov	r4,r2
   32f50:	180b883a 	mov	r5,r3
   32f54:	900d883a 	mov	r6,r18
   32f58:	980f883a 	mov	r7,r19
   32f5c:	00389d00 	call	389d0 <__muldf3>
   32f60:	d9000317 	ldw	r4,12(sp)
   32f64:	880b883a 	mov	r5,r17
   32f68:	100d883a 	mov	r6,r2
   32f6c:	180f883a 	mov	r7,r3
   32f70:	00389700 	call	38970 <__subdf3>
   32f74:	d9c00917 	ldw	r7,36(sp)
   32f78:	1009883a 	mov	r4,r2
   32f7c:	a8800c04 	addi	r2,r21,48
   32f80:	b8800005 	stb	r2,0(r23)
   32f84:	01800044 	movi	r6,1
   32f88:	180b883a 	mov	r5,r3
   32f8c:	2005883a 	mov	r2,r4
   32f90:	bd800044 	addi	r22,r23,1
   32f94:	39803726 	beq	r7,r6,33074 <_dtoa_r+0x8c4>
   32f98:	000d883a 	mov	r6,zero
   32f9c:	01d00934 	movhi	r7,16420
   32fa0:	00389d00 	call	389d0 <__muldf3>
   32fa4:	1009883a 	mov	r4,r2
   32fa8:	180b883a 	mov	r5,r3
   32fac:	000d883a 	mov	r6,zero
   32fb0:	000f883a 	mov	r7,zero
   32fb4:	1029883a 	mov	r20,r2
   32fb8:	1823883a 	mov	r17,r3
   32fbc:	0038e680 	call	38e68 <__eqdf2>
   32fc0:	103f9c26 	beq	r2,zero,32e34 <_dtoa_r+0x684>
   32fc4:	dd400917 	ldw	r21,36(sp)
   32fc8:	dc000415 	stw	r16,16(sp)
   32fcc:	00000906 	br	32ff4 <_dtoa_r+0x844>
   32fd0:	00389d00 	call	389d0 <__muldf3>
   32fd4:	1009883a 	mov	r4,r2
   32fd8:	180b883a 	mov	r5,r3
   32fdc:	000d883a 	mov	r6,zero
   32fe0:	000f883a 	mov	r7,zero
   32fe4:	1029883a 	mov	r20,r2
   32fe8:	1823883a 	mov	r17,r3
   32fec:	0038e680 	call	38e68 <__eqdf2>
   32ff0:	10022926 	beq	r2,zero,33898 <_dtoa_r+0x10e8>
   32ff4:	900d883a 	mov	r6,r18
   32ff8:	980f883a 	mov	r7,r19
   32ffc:	a009883a 	mov	r4,r20
   33000:	880b883a 	mov	r5,r17
   33004:	0038cb40 	call	38cb4 <__divdf3>
   33008:	180b883a 	mov	r5,r3
   3300c:	1009883a 	mov	r4,r2
   33010:	00391180 	call	39118 <__fixdfsi>
   33014:	1009883a 	mov	r4,r2
   33018:	1021883a 	mov	r16,r2
   3301c:	00390440 	call	39044 <__floatsidf>
   33020:	1009883a 	mov	r4,r2
   33024:	180b883a 	mov	r5,r3
   33028:	900d883a 	mov	r6,r18
   3302c:	980f883a 	mov	r7,r19
   33030:	00389d00 	call	389d0 <__muldf3>
   33034:	a009883a 	mov	r4,r20
   33038:	880b883a 	mov	r5,r17
   3303c:	100d883a 	mov	r6,r2
   33040:	180f883a 	mov	r7,r3
   33044:	00389700 	call	38970 <__subdf3>
   33048:	82400c04 	addi	r9,r16,48
   3304c:	b2400005 	stb	r9,0(r22)
   33050:	b5800044 	addi	r22,r22,1
   33054:	b5d3c83a 	sub	r9,r22,r23
   33058:	000d883a 	mov	r6,zero
   3305c:	01d00934 	movhi	r7,16420
   33060:	1009883a 	mov	r4,r2
   33064:	180b883a 	mov	r5,r3
   33068:	aa7fd91e 	bne	r21,r9,32fd0 <_dtoa_r+0x820>
   3306c:	802b883a 	mov	r21,r16
   33070:	dc000417 	ldw	r16,16(sp)
   33074:	1009883a 	mov	r4,r2
   33078:	180b883a 	mov	r5,r3
   3307c:	100d883a 	mov	r6,r2
   33080:	180f883a 	mov	r7,r3
   33084:	003891c0 	call	3891c <__adddf3>
   33088:	9009883a 	mov	r4,r18
   3308c:	980b883a 	mov	r5,r19
   33090:	100d883a 	mov	r6,r2
   33094:	180f883a 	mov	r7,r3
   33098:	1023883a 	mov	r17,r2
   3309c:	1829883a 	mov	r20,r3
   330a0:	0038fe80 	call	38fe8 <__ltdf2>
   330a4:	10000816 	blt	r2,zero,330c8 <_dtoa_r+0x918>
   330a8:	9009883a 	mov	r4,r18
   330ac:	980b883a 	mov	r5,r19
   330b0:	880d883a 	mov	r6,r17
   330b4:	a00f883a 	mov	r7,r20
   330b8:	0038e680 	call	38e68 <__eqdf2>
   330bc:	103f5d1e 	bne	r2,zero,32e34 <_dtoa_r+0x684>
   330c0:	ad40004c 	andi	r21,r21,1
   330c4:	a83f5b26 	beq	r21,zero,32e34 <_dtoa_r+0x684>
   330c8:	b53fffc3 	ldbu	r20,-1(r22)
   330cc:	b0ffff84 	addi	r3,r22,-2
   330d0:	01400e44 	movi	r5,57
   330d4:	00000306 	br	330e4 <_dtoa_r+0x934>
   330d8:	1d000003 	ldbu	r20,0(r3)
   330dc:	102d883a 	mov	r22,r2
   330e0:	18ffffc4 	addi	r3,r3,-1
   330e4:	a1003fcc 	andi	r4,r20,255
   330e8:	2100201c 	xori	r4,r4,128
   330ec:	213fe004 	addi	r4,r4,-128
   330f0:	b0bfffc4 	addi	r2,r22,-1
   330f4:	2142ca1e 	bne	r4,r5,33c20 <_dtoa_r+0x1470>
   330f8:	b8bff71e 	bne	r23,r2,330d8 <_dtoa_r+0x928>
   330fc:	d8800617 	ldw	r2,24(sp)
   33100:	05000c44 	movi	r20,49
   33104:	10800044 	addi	r2,r2,1
   33108:	d8800615 	stw	r2,24(sp)
   3310c:	00800c04 	movi	r2,48
   33110:	b8800005 	stb	r2,0(r23)
   33114:	b805883a 	mov	r2,r23
   33118:	15000005 	stb	r20,0(r2)
   3311c:	003f4506 	br	32e34 <_dtoa_r+0x684>
   33120:	d9c00c17 	ldw	r7,48(sp)
   33124:	3800c926 	beq	r7,zero,3344c <_dtoa_r+0xc9c>
   33128:	d9c00417 	ldw	r7,16(sp)
   3312c:	00c00044 	movi	r3,1
   33130:	19c16c0e 	bge	r3,r7,336e4 <_dtoa_r+0xf34>
   33134:	d9000917 	ldw	r4,36(sp)
   33138:	d9c00a17 	ldw	r7,40(sp)
   3313c:	24ffffc4 	addi	r19,r4,-1
   33140:	3cc20716 	blt	r7,r19,33960 <_dtoa_r+0x11b0>
   33144:	3ce7c83a 	sub	r19,r7,r19
   33148:	d9c00917 	ldw	r7,36(sp)
   3314c:	3802ae16 	blt	r7,zero,33c08 <_dtoa_r+0x1458>
   33150:	dc800817 	ldw	r18,32(sp)
   33154:	d8800917 	ldw	r2,36(sp)
   33158:	d8c00817 	ldw	r3,32(sp)
   3315c:	d9c00717 	ldw	r7,28(sp)
   33160:	8009883a 	mov	r4,r16
   33164:	1887883a 	add	r3,r3,r2
   33168:	388f883a 	add	r7,r7,r2
   3316c:	01400044 	movi	r5,1
   33170:	d8c00815 	stw	r3,32(sp)
   33174:	d9c00715 	stw	r7,28(sp)
   33178:	0035ff80 	call	35ff8 <__i2b>
   3317c:	102b883a 	mov	r21,r2
   33180:	90000a26 	beq	r18,zero,331ac <_dtoa_r+0x9fc>
   33184:	d8800717 	ldw	r2,28(sp)
   33188:	0080080e 	bge	zero,r2,331ac <_dtoa_r+0x9fc>
   3318c:	90812b16 	blt	r18,r2,3363c <_dtoa_r+0xe8c>
   33190:	d8c00817 	ldw	r3,32(sp)
   33194:	d9000717 	ldw	r4,28(sp)
   33198:	90a5c83a 	sub	r18,r18,r2
   3319c:	1887c83a 	sub	r3,r3,r2
   331a0:	2089c83a 	sub	r4,r4,r2
   331a4:	d8c00815 	stw	r3,32(sp)
   331a8:	d9000715 	stw	r4,28(sp)
   331ac:	d9c00a17 	ldw	r7,40(sp)
   331b0:	01c0140e 	bge	zero,r7,33204 <_dtoa_r+0xa54>
   331b4:	d8800c17 	ldw	r2,48(sp)
   331b8:	1001de26 	beq	r2,zero,33934 <_dtoa_r+0x1184>
   331bc:	04c00e0e 	bge	zero,r19,331f8 <_dtoa_r+0xa48>
   331c0:	a80b883a 	mov	r5,r21
   331c4:	8009883a 	mov	r4,r16
   331c8:	980d883a 	mov	r6,r19
   331cc:	003628c0 	call	3628c <__pow5mult>
   331d0:	e00d883a 	mov	r6,fp
   331d4:	8009883a 	mov	r4,r16
   331d8:	100b883a 	mov	r5,r2
   331dc:	102b883a 	mov	r21,r2
   331e0:	00360340 	call	36034 <__multiply>
   331e4:	1029883a 	mov	r20,r2
   331e8:	e00b883a 	mov	r5,fp
   331ec:	8009883a 	mov	r4,r16
   331f0:	0035c700 	call	35c70 <_Bfree>
   331f4:	a039883a 	mov	fp,r20
   331f8:	d8c00a17 	ldw	r3,40(sp)
   331fc:	1ccdc83a 	sub	r6,r3,r19
   33200:	3001291e 	bne	r6,zero,336a8 <_dtoa_r+0xef8>
   33204:	8009883a 	mov	r4,r16
   33208:	01400044 	movi	r5,1
   3320c:	0035ff80 	call	35ff8 <__i2b>
   33210:	d9000b17 	ldw	r4,44(sp)
   33214:	1029883a 	mov	r20,r2
   33218:	0100050e 	bge	zero,r4,33230 <_dtoa_r+0xa80>
   3321c:	d9800b17 	ldw	r6,44(sp)
   33220:	8009883a 	mov	r4,r16
   33224:	100b883a 	mov	r5,r2
   33228:	003628c0 	call	3628c <__pow5mult>
   3322c:	1029883a 	mov	r20,r2
   33230:	d9c00417 	ldw	r7,16(sp)
   33234:	00800044 	movi	r2,1
   33238:	11c0f00e 	bge	r2,r7,335fc <_dtoa_r+0xe4c>
   3323c:	0023883a 	mov	r17,zero
   33240:	d8800b17 	ldw	r2,44(sp)
   33244:	1001741e 	bne	r2,zero,33818 <_dtoa_r+0x1068>
   33248:	00800044 	movi	r2,1
   3324c:	d8c00717 	ldw	r3,28(sp)
   33250:	10c5883a 	add	r2,r2,r3
   33254:	108007cc 	andi	r2,r2,31
   33258:	10008026 	beq	r2,zero,3345c <_dtoa_r+0xcac>
   3325c:	01000804 	movi	r4,32
   33260:	2089c83a 	sub	r4,r4,r2
   33264:	00c00104 	movi	r3,4
   33268:	1902d00e 	bge	r3,r4,33dac <_dtoa_r+0x15fc>
   3326c:	d9000817 	ldw	r4,32(sp)
   33270:	d9c00717 	ldw	r7,28(sp)
   33274:	00c00704 	movi	r3,28
   33278:	1885c83a 	sub	r2,r3,r2
   3327c:	2089883a 	add	r4,r4,r2
   33280:	388f883a 	add	r7,r7,r2
   33284:	d9000815 	stw	r4,32(sp)
   33288:	90a5883a 	add	r18,r18,r2
   3328c:	d9c00715 	stw	r7,28(sp)
   33290:	d9c00817 	ldw	r7,32(sp)
   33294:	01c0050e 	bge	zero,r7,332ac <_dtoa_r+0xafc>
   33298:	e00b883a 	mov	r5,fp
   3329c:	8009883a 	mov	r4,r16
   332a0:	380d883a 	mov	r6,r7
   332a4:	00363b80 	call	363b8 <__lshift>
   332a8:	1039883a 	mov	fp,r2
   332ac:	d8800717 	ldw	r2,28(sp)
   332b0:	0080050e 	bge	zero,r2,332c8 <_dtoa_r+0xb18>
   332b4:	a00b883a 	mov	r5,r20
   332b8:	8009883a 	mov	r4,r16
   332bc:	100d883a 	mov	r6,r2
   332c0:	00363b80 	call	363b8 <__lshift>
   332c4:	1029883a 	mov	r20,r2
   332c8:	d8c00d17 	ldw	r3,52(sp)
   332cc:	1801401e 	bne	r3,zero,337d0 <_dtoa_r+0x1020>
   332d0:	d8800917 	ldw	r2,36(sp)
   332d4:	00815a0e 	bge	zero,r2,33840 <_dtoa_r+0x1090>
   332d8:	d8c00c17 	ldw	r3,48(sp)
   332dc:	18006f1e 	bne	r3,zero,3349c <_dtoa_r+0xcec>
   332e0:	b823883a 	mov	r17,r23
   332e4:	dc800917 	ldw	r18,36(sp)
   332e8:	00000206 	br	332f4 <_dtoa_r+0xb44>
   332ec:	0035c980 	call	35c98 <__multadd>
   332f0:	1039883a 	mov	fp,r2
   332f4:	e009883a 	mov	r4,fp
   332f8:	a00b883a 	mov	r5,r20
   332fc:	00325740 	call	32574 <quorem>
   33300:	10800c04 	addi	r2,r2,48
   33304:	88800005 	stb	r2,0(r17)
   33308:	8c400044 	addi	r17,r17,1
   3330c:	8dc7c83a 	sub	r3,r17,r23
   33310:	8009883a 	mov	r4,r16
   33314:	e00b883a 	mov	r5,fp
   33318:	01800284 	movi	r6,10
   3331c:	000f883a 	mov	r7,zero
   33320:	1cbff216 	blt	r3,r18,332ec <_dtoa_r+0xb3c>
   33324:	dd800917 	ldw	r22,36(sp)
   33328:	1007883a 	mov	r3,r2
   3332c:	05823a0e 	bge	zero,r22,33c18 <_dtoa_r+0x1468>
   33330:	bdad883a 	add	r22,r23,r22
   33334:	0023883a 	mov	r17,zero
   33338:	e00b883a 	mov	r5,fp
   3333c:	01800044 	movi	r6,1
   33340:	8009883a 	mov	r4,r16
   33344:	d8c01515 	stw	r3,84(sp)
   33348:	00363b80 	call	363b8 <__lshift>
   3334c:	1009883a 	mov	r4,r2
   33350:	a00b883a 	mov	r5,r20
   33354:	1039883a 	mov	fp,r2
   33358:	00365140 	call	36514 <__mcmp>
   3335c:	d8c01517 	ldw	r3,84(sp)
   33360:	0080d60e 	bge	zero,r2,336bc <_dtoa_r+0xf0c>
   33364:	b13fffc3 	ldbu	r4,-1(r22)
   33368:	b0ffff84 	addi	r3,r22,-2
   3336c:	01800e44 	movi	r6,57
   33370:	00000306 	br	33380 <_dtoa_r+0xbd0>
   33374:	19000003 	ldbu	r4,0(r3)
   33378:	102d883a 	mov	r22,r2
   3337c:	18ffffc4 	addi	r3,r3,-1
   33380:	21403fcc 	andi	r5,r4,255
   33384:	2940201c 	xori	r5,r5,128
   33388:	297fe004 	addi	r5,r5,-128
   3338c:	b0bfffc4 	addi	r2,r22,-1
   33390:	2981a71e 	bne	r5,r6,33a30 <_dtoa_r+0x1280>
   33394:	b8bff71e 	bne	r23,r2,33374 <_dtoa_r+0xbc4>
   33398:	d8800617 	ldw	r2,24(sp)
   3339c:	10800044 	addi	r2,r2,1
   333a0:	d8800615 	stw	r2,24(sp)
   333a4:	00800c44 	movi	r2,49
   333a8:	b8800005 	stb	r2,0(r23)
   333ac:	8009883a 	mov	r4,r16
   333b0:	a00b883a 	mov	r5,r20
   333b4:	0035c700 	call	35c70 <_Bfree>
   333b8:	a83e9e26 	beq	r21,zero,32e34 <_dtoa_r+0x684>
   333bc:	88000426 	beq	r17,zero,333d0 <_dtoa_r+0xc20>
   333c0:	8d400326 	beq	r17,r21,333d0 <_dtoa_r+0xc20>
   333c4:	8009883a 	mov	r4,r16
   333c8:	880b883a 	mov	r5,r17
   333cc:	0035c700 	call	35c70 <_Bfree>
   333d0:	8009883a 	mov	r4,r16
   333d4:	a80b883a 	mov	r5,r21
   333d8:	0035c700 	call	35c70 <_Bfree>
   333dc:	003e9506 	br	32e34 <_dtoa_r+0x684>
   333e0:	00c00044 	movi	r3,1
   333e4:	d8c00d15 	stw	r3,52(sp)
   333e8:	003d9f06 	br	32a68 <_dtoa_r+0x2b8>
   333ec:	d9000817 	ldw	r4,32(sp)
   333f0:	d8800617 	ldw	r2,24(sp)
   333f4:	d8000b15 	stw	zero,44(sp)
   333f8:	2089c83a 	sub	r4,r4,r2
   333fc:	0087c83a 	sub	r3,zero,r2
   33400:	d9000815 	stw	r4,32(sp)
   33404:	d8c00a15 	stw	r3,40(sp)
   33408:	003da306 	br	32a98 <_dtoa_r+0x2e8>
   3340c:	0529c83a 	sub	r20,zero,r20
   33410:	dd000815 	stw	r20,32(sp)
   33414:	d8000715 	stw	zero,28(sp)
   33418:	003d9806 	br	32a7c <_dtoa_r+0x2cc>
   3341c:	d9000617 	ldw	r4,24(sp)
   33420:	00390440 	call	39044 <__floatsidf>
   33424:	1009883a 	mov	r4,r2
   33428:	180b883a 	mov	r5,r3
   3342c:	980d883a 	mov	r6,r19
   33430:	900f883a 	mov	r7,r18
   33434:	0038ec40 	call	38ec4 <__nedf2>
   33438:	103d7a26 	beq	r2,zero,32a24 <_dtoa_r+0x274>
   3343c:	d8800617 	ldw	r2,24(sp)
   33440:	10bfffc4 	addi	r2,r2,-1
   33444:	d8800615 	stw	r2,24(sp)
   33448:	003d7606 	br	32a24 <_dtoa_r+0x274>
   3344c:	dcc00a17 	ldw	r19,40(sp)
   33450:	dc800817 	ldw	r18,32(sp)
   33454:	002b883a 	mov	r21,zero
   33458:	003f4906 	br	33180 <_dtoa_r+0x9d0>
   3345c:	00800704 	movi	r2,28
   33460:	d8c00817 	ldw	r3,32(sp)
   33464:	d9000717 	ldw	r4,28(sp)
   33468:	90a5883a 	add	r18,r18,r2
   3346c:	1887883a 	add	r3,r3,r2
   33470:	2089883a 	add	r4,r4,r2
   33474:	d8c00815 	stw	r3,32(sp)
   33478:	d9000715 	stw	r4,28(sp)
   3347c:	003f8406 	br	33290 <_dtoa_r+0xae0>
   33480:	d9c00317 	ldw	r7,12(sp)
   33484:	013efb84 	movi	r4,-1042
   33488:	2509c83a 	sub	r4,r4,r20
   3348c:	3908983a 	sll	r4,r7,r4
   33490:	003d3006 	br	32954 <_dtoa_r+0x1a4>
   33494:	d8000d15 	stw	zero,52(sp)
   33498:	003d7306 	br	32a68 <_dtoa_r+0x2b8>
   3349c:	0480050e 	bge	zero,r18,334b4 <_dtoa_r+0xd04>
   334a0:	a80b883a 	mov	r5,r21
   334a4:	8009883a 	mov	r4,r16
   334a8:	900d883a 	mov	r6,r18
   334ac:	00363b80 	call	363b8 <__lshift>
   334b0:	102b883a 	mov	r21,r2
   334b4:	8801611e 	bne	r17,zero,33a3c <_dtoa_r+0x128c>
   334b8:	a827883a 	mov	r19,r21
   334bc:	d8c00317 	ldw	r3,12(sp)
   334c0:	d9000917 	ldw	r4,36(sp)
   334c4:	b8bfffc4 	addi	r2,r23,-1
   334c8:	18c0004c 	andi	r3,r3,1
   334cc:	1105883a 	add	r2,r2,r4
   334d0:	b825883a 	mov	r18,r23
   334d4:	d8800515 	stw	r2,20(sp)
   334d8:	a823883a 	mov	r17,r21
   334dc:	d8c00315 	stw	r3,12(sp)
   334e0:	ddc00715 	stw	r23,28(sp)
   334e4:	e009883a 	mov	r4,fp
   334e8:	a00b883a 	mov	r5,r20
   334ec:	00325740 	call	32574 <quorem>
   334f0:	e009883a 	mov	r4,fp
   334f4:	880b883a 	mov	r5,r17
   334f8:	102d883a 	mov	r22,r2
   334fc:	00365140 	call	36514 <__mcmp>
   33500:	980d883a 	mov	r6,r19
   33504:	8009883a 	mov	r4,r16
   33508:	a00b883a 	mov	r5,r20
   3350c:	102b883a 	mov	r21,r2
   33510:	003656c0 	call	3656c <__mdiff>
   33514:	100d883a 	mov	r6,r2
   33518:	10800317 	ldw	r2,12(r2)
   3351c:	b5c00c04 	addi	r23,r22,48
   33520:	10008c26 	beq	r2,zero,33754 <_dtoa_r+0xfa4>
   33524:	8009883a 	mov	r4,r16
   33528:	300b883a 	mov	r5,r6
   3352c:	0035c700 	call	35c70 <_Bfree>
   33530:	00800044 	movi	r2,1
   33534:	a8007116 	blt	r21,zero,336fc <_dtoa_r+0xf4c>
   33538:	a800041e 	bne	r21,zero,3354c <_dtoa_r+0xd9c>
   3353c:	d9c00417 	ldw	r7,16(sp)
   33540:	3800021e 	bne	r7,zero,3354c <_dtoa_r+0xd9c>
   33544:	d8c00317 	ldw	r3,12(sp)
   33548:	18006c26 	beq	r3,zero,336fc <_dtoa_r+0xf4c>
   3354c:	00814c16 	blt	zero,r2,33a80 <_dtoa_r+0x12d0>
   33550:	d8c00517 	ldw	r3,20(sp)
   33554:	95400044 	addi	r21,r18,1
   33558:	95c00005 	stb	r23,0(r18)
   3355c:	a82d883a 	mov	r22,r21
   33560:	90c14d26 	beq	r18,r3,33a98 <_dtoa_r+0x12e8>
   33564:	e00b883a 	mov	r5,fp
   33568:	8009883a 	mov	r4,r16
   3356c:	01800284 	movi	r6,10
   33570:	000f883a 	mov	r7,zero
   33574:	0035c980 	call	35c98 <__multadd>
   33578:	1039883a 	mov	fp,r2
   3357c:	8cc08b26 	beq	r17,r19,337ac <_dtoa_r+0xffc>
   33580:	880b883a 	mov	r5,r17
   33584:	01800284 	movi	r6,10
   33588:	000f883a 	mov	r7,zero
   3358c:	8009883a 	mov	r4,r16
   33590:	0035c980 	call	35c98 <__multadd>
   33594:	980b883a 	mov	r5,r19
   33598:	8009883a 	mov	r4,r16
   3359c:	01800284 	movi	r6,10
   335a0:	000f883a 	mov	r7,zero
   335a4:	1023883a 	mov	r17,r2
   335a8:	0035c980 	call	35c98 <__multadd>
   335ac:	1027883a 	mov	r19,r2
   335b0:	a825883a 	mov	r18,r21
   335b4:	003fcb06 	br	334e4 <_dtoa_r+0xd34>
   335b8:	d9c00417 	ldw	r7,16(sp)
   335bc:	00800104 	movi	r2,4
   335c0:	3880e426 	beq	r7,r2,33954 <_dtoa_r+0x11a4>
   335c4:	00800144 	movi	r2,5
   335c8:	38be3c1e 	bne	r7,r2,32ebc <_dtoa_r+0x70c>
   335cc:	00c00044 	movi	r3,1
   335d0:	d8c00c15 	stw	r3,48(sp)
   335d4:	d9c02117 	ldw	r7,132(sp)
   335d8:	d8800617 	ldw	r2,24(sp)
   335dc:	388f883a 	add	r7,r7,r2
   335e0:	3c800044 	addi	r18,r7,1
   335e4:	d9c00e15 	stw	r7,56(sp)
   335e8:	dc800915 	stw	r18,36(sp)
   335ec:	04bd3e16 	blt	zero,r18,32ae8 <_dtoa_r+0x338>
   335f0:	80001115 	stw	zero,68(r16)
   335f4:	000b883a 	mov	r5,zero
   335f8:	003d4606 	br	32b14 <_dtoa_r+0x364>
   335fc:	d8c00317 	ldw	r3,12(sp)
   33600:	183f0e1e 	bne	r3,zero,3323c <_dtoa_r+0xa8c>
   33604:	00c00434 	movhi	r3,16
   33608:	18ffffc4 	addi	r3,r3,-1
   3360c:	88c6703a 	and	r3,r17,r3
   33610:	183f0a1e 	bne	r3,zero,3323c <_dtoa_r+0xa8c>
   33614:	8c5ffc2c 	andhi	r17,r17,32752
   33618:	883f0826 	beq	r17,zero,3323c <_dtoa_r+0xa8c>
   3361c:	d9000817 	ldw	r4,32(sp)
   33620:	d9c00717 	ldw	r7,28(sp)
   33624:	1023883a 	mov	r17,r2
   33628:	2089883a 	add	r4,r4,r2
   3362c:	388f883a 	add	r7,r7,r2
   33630:	d9000815 	stw	r4,32(sp)
   33634:	d9c00715 	stw	r7,28(sp)
   33638:	003f0106 	br	33240 <_dtoa_r+0xa90>
   3363c:	9005883a 	mov	r2,r18
   33640:	003ed306 	br	33190 <_dtoa_r+0x9e0>
   33644:	d8800917 	ldw	r2,36(sp)
   33648:	00be3516 	blt	zero,r2,32f20 <_dtoa_r+0x770>
   3364c:	1000b61e 	bne	r2,zero,33928 <_dtoa_r+0x1178>
   33650:	9009883a 	mov	r4,r18
   33654:	980b883a 	mov	r5,r19
   33658:	000d883a 	mov	r6,zero
   3365c:	01d00534 	movhi	r7,16404
   33660:	00389d00 	call	389d0 <__muldf3>
   33664:	d9800317 	ldw	r6,12(sp)
   33668:	1009883a 	mov	r4,r2
   3366c:	180b883a 	mov	r5,r3
   33670:	880f883a 	mov	r7,r17
   33674:	0038f840 	call	38f84 <__gedf2>
   33678:	0029883a 	mov	r20,zero
   3367c:	002b883a 	mov	r21,zero
   33680:	10007e16 	blt	r2,zero,3387c <_dtoa_r+0x10cc>
   33684:	d8802117 	ldw	r2,132(sp)
   33688:	b82d883a 	mov	r22,r23
   3368c:	0084303a 	nor	r2,zero,r2
   33690:	d8800615 	stw	r2,24(sp)
   33694:	8009883a 	mov	r4,r16
   33698:	a00b883a 	mov	r5,r20
   3369c:	0035c700 	call	35c70 <_Bfree>
   336a0:	a83f4b1e 	bne	r21,zero,333d0 <_dtoa_r+0xc20>
   336a4:	003de306 	br	32e34 <_dtoa_r+0x684>
   336a8:	e00b883a 	mov	r5,fp
   336ac:	8009883a 	mov	r4,r16
   336b0:	003628c0 	call	3628c <__pow5mult>
   336b4:	1039883a 	mov	fp,r2
   336b8:	003ed206 	br	33204 <_dtoa_r+0xa54>
   336bc:	1000021e 	bne	r2,zero,336c8 <_dtoa_r+0xf18>
   336c0:	18c0004c 	andi	r3,r3,1
   336c4:	183f271e 	bne	r3,zero,33364 <_dtoa_r+0xbb4>
   336c8:	01000c04 	movi	r4,48
   336cc:	00000106 	br	336d4 <_dtoa_r+0xf24>
   336d0:	102d883a 	mov	r22,r2
   336d4:	b0bfffc4 	addi	r2,r22,-1
   336d8:	10c00007 	ldb	r3,0(r2)
   336dc:	193ffc26 	beq	r3,r4,336d0 <_dtoa_r+0xf20>
   336e0:	003f3206 	br	333ac <_dtoa_r+0xbfc>
   336e4:	d8c00f17 	ldw	r3,60(sp)
   336e8:	18015026 	beq	r3,zero,33c2c <_dtoa_r+0x147c>
   336ec:	10810cc4 	addi	r2,r2,1075
   336f0:	dcc00a17 	ldw	r19,40(sp)
   336f4:	dc800817 	ldw	r18,32(sp)
   336f8:	003e9706 	br	33158 <_dtoa_r+0x9a8>
   336fc:	b807883a 	mov	r3,r23
   33700:	182b883a 	mov	r21,r3
   33704:	ddc00717 	ldw	r23,28(sp)
   33708:	00800e0e 	bge	zero,r2,33744 <_dtoa_r+0xf94>
   3370c:	e00b883a 	mov	r5,fp
   33710:	01800044 	movi	r6,1
   33714:	8009883a 	mov	r4,r16
   33718:	d8c01515 	stw	r3,84(sp)
   3371c:	00363b80 	call	363b8 <__lshift>
   33720:	1009883a 	mov	r4,r2
   33724:	a00b883a 	mov	r5,r20
   33728:	1039883a 	mov	fp,r2
   3372c:	00365140 	call	36514 <__mcmp>
   33730:	d8c01517 	ldw	r3,84(sp)
   33734:	0081880e 	bge	zero,r2,33d58 <_dtoa_r+0x15a8>
   33738:	00800e44 	movi	r2,57
   3373c:	b0c00c44 	addi	r3,r22,49
   33740:	a8816326 	beq	r21,r2,33cd0 <_dtoa_r+0x1520>
   33744:	90c00005 	stb	r3,0(r18)
   33748:	95800044 	addi	r22,r18,1
   3374c:	982b883a 	mov	r21,r19
   33750:	003f1606 	br	333ac <_dtoa_r+0xbfc>
   33754:	300b883a 	mov	r5,r6
   33758:	e009883a 	mov	r4,fp
   3375c:	d9801515 	stw	r6,84(sp)
   33760:	00365140 	call	36514 <__mcmp>
   33764:	d9801517 	ldw	r6,84(sp)
   33768:	8009883a 	mov	r4,r16
   3376c:	d8801515 	stw	r2,84(sp)
   33770:	300b883a 	mov	r5,r6
   33774:	0035c700 	call	35c70 <_Bfree>
   33778:	d8801517 	ldw	r2,84(sp)
   3377c:	103f6d1e 	bne	r2,zero,33534 <_dtoa_r+0xd84>
   33780:	d9c00417 	ldw	r7,16(sp)
   33784:	383f6b1e 	bne	r7,zero,33534 <_dtoa_r+0xd84>
   33788:	d8c00317 	ldw	r3,12(sp)
   3378c:	183f691e 	bne	r3,zero,33534 <_dtoa_r+0xd84>
   33790:	b807883a 	mov	r3,r23
   33794:	00800e44 	movi	r2,57
   33798:	ddc00717 	ldw	r23,28(sp)
   3379c:	18814c26 	beq	r3,r2,33cd0 <_dtoa_r+0x1520>
   337a0:	057fe80e 	bge	zero,r21,33744 <_dtoa_r+0xf94>
   337a4:	b0c00c44 	addi	r3,r22,49
   337a8:	003fe606 	br	33744 <_dtoa_r+0xf94>
   337ac:	880b883a 	mov	r5,r17
   337b0:	8009883a 	mov	r4,r16
   337b4:	01800284 	movi	r6,10
   337b8:	000f883a 	mov	r7,zero
   337bc:	0035c980 	call	35c98 <__multadd>
   337c0:	1023883a 	mov	r17,r2
   337c4:	1027883a 	mov	r19,r2
   337c8:	a825883a 	mov	r18,r21
   337cc:	003f4506 	br	334e4 <_dtoa_r+0xd34>
   337d0:	e009883a 	mov	r4,fp
   337d4:	a00b883a 	mov	r5,r20
   337d8:	00365140 	call	36514 <__mcmp>
   337dc:	103ebc0e 	bge	r2,zero,332d0 <_dtoa_r+0xb20>
   337e0:	e00b883a 	mov	r5,fp
   337e4:	8009883a 	mov	r4,r16
   337e8:	01800284 	movi	r6,10
   337ec:	000f883a 	mov	r7,zero
   337f0:	0035c980 	call	35c98 <__multadd>
   337f4:	1039883a 	mov	fp,r2
   337f8:	d8800617 	ldw	r2,24(sp)
   337fc:	d8c00c17 	ldw	r3,48(sp)
   33800:	10bfffc4 	addi	r2,r2,-1
   33804:	d8800615 	stw	r2,24(sp)
   33808:	1801571e 	bne	r3,zero,33d68 <_dtoa_r+0x15b8>
   3380c:	d9c00e17 	ldw	r7,56(sp)
   33810:	d9c00915 	stw	r7,36(sp)
   33814:	003eae06 	br	332d0 <_dtoa_r+0xb20>
   33818:	a0800417 	ldw	r2,16(r20)
   3381c:	10800104 	addi	r2,r2,4
   33820:	1085883a 	add	r2,r2,r2
   33824:	1085883a 	add	r2,r2,r2
   33828:	a085883a 	add	r2,r20,r2
   3382c:	11000017 	ldw	r4,0(r2)
   33830:	0035ee00 	call	35ee0 <__hi0bits>
   33834:	00c00804 	movi	r3,32
   33838:	1885c83a 	sub	r2,r3,r2
   3383c:	003e8306 	br	3324c <_dtoa_r+0xa9c>
   33840:	d9c00417 	ldw	r7,16(sp)
   33844:	00800084 	movi	r2,2
   33848:	11fea30e 	bge	r2,r7,332d8 <_dtoa_r+0xb28>
   3384c:	d8800917 	ldw	r2,36(sp)
   33850:	103f8c1e 	bne	r2,zero,33684 <_dtoa_r+0xed4>
   33854:	a00b883a 	mov	r5,r20
   33858:	8009883a 	mov	r4,r16
   3385c:	01800144 	movi	r6,5
   33860:	000f883a 	mov	r7,zero
   33864:	0035c980 	call	35c98 <__multadd>
   33868:	e009883a 	mov	r4,fp
   3386c:	100b883a 	mov	r5,r2
   33870:	1029883a 	mov	r20,r2
   33874:	00365140 	call	36514 <__mcmp>
   33878:	00bf820e 	bge	zero,r2,33684 <_dtoa_r+0xed4>
   3387c:	00800c44 	movi	r2,49
   33880:	b8800005 	stb	r2,0(r23)
   33884:	d8800617 	ldw	r2,24(sp)
   33888:	bd800044 	addi	r22,r23,1
   3388c:	10800044 	addi	r2,r2,1
   33890:	d8800615 	stw	r2,24(sp)
   33894:	003f7f06 	br	33694 <_dtoa_r+0xee4>
   33898:	dc000417 	ldw	r16,16(sp)
   3389c:	003d6506 	br	32e34 <_dtoa_r+0x684>
   338a0:	9009883a 	mov	r4,r18
   338a4:	00390440 	call	39044 <__floatsidf>
   338a8:	1009883a 	mov	r4,r2
   338ac:	180b883a 	mov	r5,r3
   338b0:	980d883a 	mov	r6,r19
   338b4:	a00f883a 	mov	r7,r20
   338b8:	00389d00 	call	389d0 <__muldf3>
   338bc:	1009883a 	mov	r4,r2
   338c0:	180b883a 	mov	r5,r3
   338c4:	000d883a 	mov	r6,zero
   338c8:	01d00734 	movhi	r7,16412
   338cc:	003891c0 	call	3891c <__adddf3>
   338d0:	057f3034 	movhi	r21,64704
   338d4:	1025883a 	mov	r18,r2
   338d8:	1d6b883a 	add	r21,r3,r21
   338dc:	9809883a 	mov	r4,r19
   338e0:	a00b883a 	mov	r5,r20
   338e4:	000d883a 	mov	r6,zero
   338e8:	01d00534 	movhi	r7,16404
   338ec:	00389700 	call	38970 <__subdf3>
   338f0:	1009883a 	mov	r4,r2
   338f4:	180b883a 	mov	r5,r3
   338f8:	900d883a 	mov	r6,r18
   338fc:	a80f883a 	mov	r7,r21
   33900:	1027883a 	mov	r19,r2
   33904:	1829883a 	mov	r20,r3
   33908:	0038f200 	call	38f20 <__gtdf2>
   3390c:	00806616 	blt	zero,r2,33aa8 <_dtoa_r+0x12f8>
   33910:	a9e0003c 	xorhi	r7,r21,32768
   33914:	9809883a 	mov	r4,r19
   33918:	a00b883a 	mov	r5,r20
   3391c:	900d883a 	mov	r6,r18
   33920:	0038fe80 	call	38fe8 <__ltdf2>
   33924:	103d710e 	bge	r2,zero,32eec <_dtoa_r+0x73c>
   33928:	0029883a 	mov	r20,zero
   3392c:	002b883a 	mov	r21,zero
   33930:	003f5406 	br	33684 <_dtoa_r+0xed4>
   33934:	d9800a17 	ldw	r6,40(sp)
   33938:	e00b883a 	mov	r5,fp
   3393c:	8009883a 	mov	r4,r16
   33940:	003628c0 	call	3628c <__pow5mult>
   33944:	1039883a 	mov	fp,r2
   33948:	003e2e06 	br	33204 <_dtoa_r+0xa54>
   3394c:	d8000c15 	stw	zero,48(sp)
   33950:	003f2006 	br	335d4 <_dtoa_r+0xe24>
   33954:	00800044 	movi	r2,1
   33958:	d8800c15 	stw	r2,48(sp)
   3395c:	003c5d06 	br	32ad4 <_dtoa_r+0x324>
   33960:	d8c00a17 	ldw	r3,40(sp)
   33964:	d9000b17 	ldw	r4,44(sp)
   33968:	dcc00a15 	stw	r19,40(sp)
   3396c:	98c5c83a 	sub	r2,r19,r3
   33970:	2089883a 	add	r4,r4,r2
   33974:	d9000b15 	stw	r4,44(sp)
   33978:	0027883a 	mov	r19,zero
   3397c:	003df206 	br	33148 <_dtoa_r+0x998>
   33980:	d9000317 	ldw	r4,12(sp)
   33984:	8829883a 	mov	r20,r17
   33988:	04800084 	movi	r18,2
   3398c:	d9001015 	stw	r4,64(sp)
   33990:	003c8106 	br	32b98 <_dtoa_r+0x3e8>
   33994:	04800044 	movi	r18,1
   33998:	dc800e15 	stw	r18,56(sp)
   3399c:	dc800915 	stw	r18,36(sp)
   339a0:	dc802115 	stw	r18,132(sp)
   339a4:	003f1206 	br	335f0 <_dtoa_r+0xe40>
   339a8:	d8800617 	ldw	r2,24(sp)
   339ac:	00abc83a 	sub	r21,zero,r2
   339b0:	a800a426 	beq	r21,zero,33c44 <_dtoa_r+0x1494>
   339b4:	a88003cc 	andi	r2,r21,15
   339b8:	100490fa 	slli	r2,r2,3
   339bc:	00c00034 	movhi	r3,0
   339c0:	18c05604 	addi	r3,r3,344
   339c4:	d9000317 	ldw	r4,12(sp)
   339c8:	1885883a 	add	r2,r3,r2
   339cc:	11800017 	ldw	r6,0(r2)
   339d0:	11c00117 	ldw	r7,4(r2)
   339d4:	a82bd13a 	srai	r21,r21,4
   339d8:	880b883a 	mov	r5,r17
   339dc:	00389d00 	call	389d0 <__muldf3>
   339e0:	1027883a 	mov	r19,r2
   339e4:	1829883a 	mov	r20,r3
   339e8:	a800e826 	beq	r21,zero,33d8c <_dtoa_r+0x15dc>
   339ec:	05800034 	movhi	r22,0
   339f0:	b5804c04 	addi	r22,r22,304
   339f4:	04800084 	movi	r18,2
   339f8:	a980004c 	andi	r6,r21,1
   339fc:	1009883a 	mov	r4,r2
   33a00:	a82bd07a 	srai	r21,r21,1
   33a04:	180b883a 	mov	r5,r3
   33a08:	30000426 	beq	r6,zero,33a1c <_dtoa_r+0x126c>
   33a0c:	b1800017 	ldw	r6,0(r22)
   33a10:	b1c00117 	ldw	r7,4(r22)
   33a14:	94800044 	addi	r18,r18,1
   33a18:	00389d00 	call	389d0 <__muldf3>
   33a1c:	b5800204 	addi	r22,r22,8
   33a20:	a83ff51e 	bne	r21,zero,339f8 <_dtoa_r+0x1248>
   33a24:	1027883a 	mov	r19,r2
   33a28:	1829883a 	mov	r20,r3
   33a2c:	003c7306 	br	32bfc <_dtoa_r+0x44c>
   33a30:	21000044 	addi	r4,r4,1
   33a34:	11000005 	stb	r4,0(r2)
   33a38:	003e5c06 	br	333ac <_dtoa_r+0xbfc>
   33a3c:	a9400117 	ldw	r5,4(r21)
   33a40:	8009883a 	mov	r4,r16
   33a44:	0035bc80 	call	35bc8 <_Balloc>
   33a48:	a9800417 	ldw	r6,16(r21)
   33a4c:	11000304 	addi	r4,r2,12
   33a50:	a9400304 	addi	r5,r21,12
   33a54:	31800084 	addi	r6,r6,2
   33a58:	318d883a 	add	r6,r6,r6
   33a5c:	318d883a 	add	r6,r6,r6
   33a60:	1023883a 	mov	r17,r2
   33a64:	00358200 	call	35820 <memcpy>
   33a68:	8009883a 	mov	r4,r16
   33a6c:	880b883a 	mov	r5,r17
   33a70:	01800044 	movi	r6,1
   33a74:	00363b80 	call	363b8 <__lshift>
   33a78:	1027883a 	mov	r19,r2
   33a7c:	003e8f06 	br	334bc <_dtoa_r+0xd0c>
   33a80:	b807883a 	mov	r3,r23
   33a84:	00800e44 	movi	r2,57
   33a88:	ddc00717 	ldw	r23,28(sp)
   33a8c:	18809026 	beq	r3,r2,33cd0 <_dtoa_r+0x1520>
   33a90:	18c00044 	addi	r3,r3,1
   33a94:	003f2b06 	br	33744 <_dtoa_r+0xf94>
   33a98:	b807883a 	mov	r3,r23
   33a9c:	982b883a 	mov	r21,r19
   33aa0:	ddc00717 	ldw	r23,28(sp)
   33aa4:	003e2406 	br	33338 <_dtoa_r+0xb88>
   33aa8:	0029883a 	mov	r20,zero
   33aac:	002b883a 	mov	r21,zero
   33ab0:	003f7206 	br	3387c <_dtoa_r+0x10cc>
   33ab4:	593fffc4 	addi	r4,r11,-1
   33ab8:	200490fa 	slli	r2,r4,3
   33abc:	00c00034 	movhi	r3,0
   33ac0:	18c05604 	addi	r3,r3,344
   33ac4:	d9001015 	stw	r4,64(sp)
   33ac8:	1885883a 	add	r2,r3,r2
   33acc:	11000017 	ldw	r4,0(r2)
   33ad0:	11400117 	ldw	r5,4(r2)
   33ad4:	900d883a 	mov	r6,r18
   33ad8:	a80f883a 	mov	r7,r21
   33adc:	dac01615 	stw	r11,88(sp)
   33ae0:	00389d00 	call	389d0 <__muldf3>
   33ae4:	a00b883a 	mov	r5,r20
   33ae8:	9809883a 	mov	r4,r19
   33aec:	d8c01215 	stw	r3,72(sp)
   33af0:	d8801115 	stw	r2,68(sp)
   33af4:	00391180 	call	39118 <__fixdfsi>
   33af8:	1009883a 	mov	r4,r2
   33afc:	1025883a 	mov	r18,r2
   33b00:	00390440 	call	39044 <__floatsidf>
   33b04:	9809883a 	mov	r4,r19
   33b08:	a00b883a 	mov	r5,r20
   33b0c:	100d883a 	mov	r6,r2
   33b10:	180f883a 	mov	r7,r3
   33b14:	94800c04 	addi	r18,r18,48
   33b18:	00389700 	call	38970 <__subdf3>
   33b1c:	bc800005 	stb	r18,0(r23)
   33b20:	dac01617 	ldw	r11,88(sp)
   33b24:	102b883a 	mov	r21,r2
   33b28:	00800044 	movi	r2,1
   33b2c:	bd800044 	addi	r22,r23,1
   33b30:	1815883a 	mov	r10,r3
   33b34:	58802226 	beq	r11,r2,33bc0 <_dtoa_r+0x1410>
   33b38:	bad7883a 	add	r11,r23,r11
   33b3c:	dc001415 	stw	r16,80(sp)
   33b40:	a805883a 	mov	r2,r21
   33b44:	b027883a 	mov	r19,r22
   33b48:	5821883a 	mov	r16,r11
   33b4c:	882b883a 	mov	r21,r17
   33b50:	000d883a 	mov	r6,zero
   33b54:	01d00934 	movhi	r7,16420
   33b58:	1009883a 	mov	r4,r2
   33b5c:	180b883a 	mov	r5,r3
   33b60:	00389d00 	call	389d0 <__muldf3>
   33b64:	180b883a 	mov	r5,r3
   33b68:	1009883a 	mov	r4,r2
   33b6c:	1829883a 	mov	r20,r3
   33b70:	1023883a 	mov	r17,r2
   33b74:	00391180 	call	39118 <__fixdfsi>
   33b78:	1009883a 	mov	r4,r2
   33b7c:	1025883a 	mov	r18,r2
   33b80:	00390440 	call	39044 <__floatsidf>
   33b84:	8809883a 	mov	r4,r17
   33b88:	a00b883a 	mov	r5,r20
   33b8c:	100d883a 	mov	r6,r2
   33b90:	180f883a 	mov	r7,r3
   33b94:	94800c04 	addi	r18,r18,48
   33b98:	00389700 	call	38970 <__subdf3>
   33b9c:	9cc00044 	addi	r19,r19,1
   33ba0:	9cbfffc5 	stb	r18,-1(r19)
   33ba4:	9c3fea1e 	bne	r19,r16,33b50 <_dtoa_r+0x13a0>
   33ba8:	1815883a 	mov	r10,r3
   33bac:	d8c01017 	ldw	r3,64(sp)
   33bb0:	dc001417 	ldw	r16,80(sp)
   33bb4:	a823883a 	mov	r17,r21
   33bb8:	b0ed883a 	add	r22,r22,r3
   33bbc:	102b883a 	mov	r21,r2
   33bc0:	d9001117 	ldw	r4,68(sp)
   33bc4:	d9401217 	ldw	r5,72(sp)
   33bc8:	000d883a 	mov	r6,zero
   33bcc:	01cff834 	movhi	r7,16352
   33bd0:	da801515 	stw	r10,84(sp)
   33bd4:	003891c0 	call	3891c <__adddf3>
   33bd8:	da801517 	ldw	r10,84(sp)
   33bdc:	1009883a 	mov	r4,r2
   33be0:	180b883a 	mov	r5,r3
   33be4:	500f883a 	mov	r7,r10
   33be8:	a80d883a 	mov	r6,r21
   33bec:	0038fe80 	call	38fe8 <__ltdf2>
   33bf0:	da801517 	ldw	r10,84(sp)
   33bf4:	10003b0e 	bge	r2,zero,33ce4 <_dtoa_r+0x1534>
   33bf8:	d9c01317 	ldw	r7,76(sp)
   33bfc:	b53fffc3 	ldbu	r20,-1(r22)
   33c00:	d9c00615 	stw	r7,24(sp)
   33c04:	003d3106 	br	330cc <_dtoa_r+0x91c>
   33c08:	d8800817 	ldw	r2,32(sp)
   33c0c:	11e5c83a 	sub	r18,r2,r7
   33c10:	0005883a 	mov	r2,zero
   33c14:	003d5006 	br	33158 <_dtoa_r+0x9a8>
   33c18:	05800044 	movi	r22,1
   33c1c:	003dc406 	br	33330 <_dtoa_r+0xb80>
   33c20:	a5000044 	addi	r20,r20,1
   33c24:	15000005 	stb	r20,0(r2)
   33c28:	003c8206 	br	32e34 <_dtoa_r+0x684>
   33c2c:	d8800217 	ldw	r2,8(sp)
   33c30:	00c00d84 	movi	r3,54
   33c34:	dcc00a17 	ldw	r19,40(sp)
   33c38:	1885c83a 	sub	r2,r3,r2
   33c3c:	dc800817 	ldw	r18,32(sp)
   33c40:	003d4506 	br	33158 <_dtoa_r+0x9a8>
   33c44:	dcc00317 	ldw	r19,12(sp)
   33c48:	8829883a 	mov	r20,r17
   33c4c:	04800084 	movi	r18,2
   33c50:	003bea06 	br	32bfc <_dtoa_r+0x44c>
   33c54:	d9000917 	ldw	r4,36(sp)
   33c58:	203f1126 	beq	r4,zero,338a0 <_dtoa_r+0x10f0>
   33c5c:	d9c00e17 	ldw	r7,56(sp)
   33c60:	01fca20e 	bge	zero,r7,32eec <_dtoa_r+0x73c>
   33c64:	a00b883a 	mov	r5,r20
   33c68:	9809883a 	mov	r4,r19
   33c6c:	000d883a 	mov	r6,zero
   33c70:	01d00934 	movhi	r7,16420
   33c74:	00389d00 	call	389d0 <__muldf3>
   33c78:	91000044 	addi	r4,r18,1
   33c7c:	1027883a 	mov	r19,r2
   33c80:	1829883a 	mov	r20,r3
   33c84:	00390440 	call	39044 <__floatsidf>
   33c88:	9809883a 	mov	r4,r19
   33c8c:	a00b883a 	mov	r5,r20
   33c90:	100d883a 	mov	r6,r2
   33c94:	180f883a 	mov	r7,r3
   33c98:	00389d00 	call	389d0 <__muldf3>
   33c9c:	1009883a 	mov	r4,r2
   33ca0:	180b883a 	mov	r5,r3
   33ca4:	000d883a 	mov	r6,zero
   33ca8:	01d00734 	movhi	r7,16412
   33cac:	003891c0 	call	3891c <__adddf3>
   33cb0:	1025883a 	mov	r18,r2
   33cb4:	d8800617 	ldw	r2,24(sp)
   33cb8:	057f3034 	movhi	r21,64704
   33cbc:	1d6b883a 	add	r21,r3,r21
   33cc0:	10bfffc4 	addi	r2,r2,-1
   33cc4:	d8801315 	stw	r2,76(sp)
   33cc8:	dac00e17 	ldw	r11,56(sp)
   33ccc:	003be706 	br	32c6c <_dtoa_r+0x4bc>
   33cd0:	01000e44 	movi	r4,57
   33cd4:	91000005 	stb	r4,0(r18)
   33cd8:	95800044 	addi	r22,r18,1
   33cdc:	982b883a 	mov	r21,r19
   33ce0:	003da106 	br	33368 <_dtoa_r+0xbb8>
   33ce4:	d9801117 	ldw	r6,68(sp)
   33ce8:	d9c01217 	ldw	r7,72(sp)
   33cec:	0009883a 	mov	r4,zero
   33cf0:	014ff834 	movhi	r5,16352
   33cf4:	da801515 	stw	r10,84(sp)
   33cf8:	00389700 	call	38970 <__subdf3>
   33cfc:	da801517 	ldw	r10,84(sp)
   33d00:	1009883a 	mov	r4,r2
   33d04:	180b883a 	mov	r5,r3
   33d08:	a80d883a 	mov	r6,r21
   33d0c:	500f883a 	mov	r7,r10
   33d10:	0038f200 	call	38f20 <__gtdf2>
   33d14:	00bc750e 	bge	zero,r2,32eec <_dtoa_r+0x73c>
   33d18:	01000c04 	movi	r4,48
   33d1c:	00000106 	br	33d24 <_dtoa_r+0x1574>
   33d20:	102d883a 	mov	r22,r2
   33d24:	b0bfffc4 	addi	r2,r22,-1
   33d28:	10c00007 	ldb	r3,0(r2)
   33d2c:	193ffc26 	beq	r3,r4,33d20 <_dtoa_r+0x1570>
   33d30:	d8801317 	ldw	r2,76(sp)
   33d34:	d8800615 	stw	r2,24(sp)
   33d38:	003c3e06 	br	32e34 <_dtoa_r+0x684>
   33d3c:	d9001317 	ldw	r4,76(sp)
   33d40:	df001117 	ldw	fp,68(sp)
   33d44:	d9000615 	stw	r4,24(sp)
   33d48:	003ce006 	br	330cc <_dtoa_r+0x91c>
   33d4c:	df001117 	ldw	fp,68(sp)
   33d50:	dc401217 	ldw	r17,72(sp)
   33d54:	003c6506 	br	32eec <_dtoa_r+0x73c>
   33d58:	103e7a1e 	bne	r2,zero,33744 <_dtoa_r+0xf94>
   33d5c:	1880004c 	andi	r2,r3,1
   33d60:	103e7826 	beq	r2,zero,33744 <_dtoa_r+0xf94>
   33d64:	003e7406 	br	33738 <_dtoa_r+0xf88>
   33d68:	8009883a 	mov	r4,r16
   33d6c:	a80b883a 	mov	r5,r21
   33d70:	01800284 	movi	r6,10
   33d74:	000f883a 	mov	r7,zero
   33d78:	0035c980 	call	35c98 <__multadd>
   33d7c:	d9000e17 	ldw	r4,56(sp)
   33d80:	102b883a 	mov	r21,r2
   33d84:	d9000915 	stw	r4,36(sp)
   33d88:	003d5106 	br	332d0 <_dtoa_r+0xb20>
   33d8c:	04800084 	movi	r18,2
   33d90:	003b9a06 	br	32bfc <_dtoa_r+0x44c>
   33d94:	d8c01317 	ldw	r3,76(sp)
   33d98:	d8c00615 	stw	r3,24(sp)
   33d9c:	003ccb06 	br	330cc <_dtoa_r+0x91c>
   33da0:	d8c01317 	ldw	r3,76(sp)
   33da4:	d8c00615 	stw	r3,24(sp)
   33da8:	003c2206 	br	32e34 <_dtoa_r+0x684>
   33dac:	20fd3826 	beq	r4,r3,33290 <_dtoa_r+0xae0>
   33db0:	00c00f04 	movi	r3,60
   33db4:	1885c83a 	sub	r2,r3,r2
   33db8:	003da906 	br	33460 <_dtoa_r+0xcb0>
   33dbc:	000b883a 	mov	r5,zero
   33dc0:	003b5406 	br	32b14 <_dtoa_r+0x364>
   33dc4:	04c00044 	movi	r19,1
   33dc8:	003b3b06 	br	32ab8 <_dtoa_r+0x308>

00033dcc <_fflush_r>:
   33dcc:	defffb04 	addi	sp,sp,-20
   33dd0:	dcc00315 	stw	r19,12(sp)
   33dd4:	dc400115 	stw	r17,4(sp)
   33dd8:	dfc00415 	stw	ra,16(sp)
   33ddc:	dc800215 	stw	r18,8(sp)
   33de0:	dc000015 	stw	r16,0(sp)
   33de4:	2027883a 	mov	r19,r4
   33de8:	2823883a 	mov	r17,r5
   33dec:	20000226 	beq	r4,zero,33df8 <_fflush_r+0x2c>
   33df0:	20800e17 	ldw	r2,56(r4)
   33df4:	10005726 	beq	r2,zero,33f54 <_fflush_r+0x188>
   33df8:	8880030b 	ldhu	r2,12(r17)
   33dfc:	10c0020c 	andi	r3,r2,8
   33e00:	18ffffcc 	andi	r3,r3,65535
   33e04:	18e0001c 	xori	r3,r3,32768
   33e08:	18e00004 	addi	r3,r3,-32768
   33e0c:	1800311e 	bne	r3,zero,33ed4 <_fflush_r+0x108>
   33e10:	89000117 	ldw	r4,4(r17)
   33e14:	10c20014 	ori	r3,r2,2048
   33e18:	88c0030d 	sth	r3,12(r17)
   33e1c:	180b883a 	mov	r5,r3
   33e20:	0100520e 	bge	zero,r4,33f6c <_fflush_r+0x1a0>
   33e24:	88c00a17 	ldw	r3,40(r17)
   33e28:	18002226 	beq	r3,zero,33eb4 <_fflush_r+0xe8>
   33e2c:	1084000c 	andi	r2,r2,4096
   33e30:	10bfffcc 	andi	r2,r2,65535
   33e34:	10a0001c 	xori	r2,r2,32768
   33e38:	10a00004 	addi	r2,r2,-32768
   33e3c:	10004e26 	beq	r2,zero,33f78 <_fflush_r+0x1ac>
   33e40:	8c001417 	ldw	r16,80(r17)
   33e44:	2940010c 	andi	r5,r5,4
   33e48:	297fffcc 	andi	r5,r5,65535
   33e4c:	2960001c 	xori	r5,r5,32768
   33e50:	29600004 	addi	r5,r5,-32768
   33e54:	28000626 	beq	r5,zero,33e70 <_fflush_r+0xa4>
   33e58:	89000117 	ldw	r4,4(r17)
   33e5c:	88800c17 	ldw	r2,48(r17)
   33e60:	8121c83a 	sub	r16,r16,r4
   33e64:	10000226 	beq	r2,zero,33e70 <_fflush_r+0xa4>
   33e68:	88800f17 	ldw	r2,60(r17)
   33e6c:	80a1c83a 	sub	r16,r16,r2
   33e70:	89400717 	ldw	r5,28(r17)
   33e74:	9809883a 	mov	r4,r19
   33e78:	800d883a 	mov	r6,r16
   33e7c:	000f883a 	mov	r7,zero
   33e80:	183ee83a 	callr	r3
   33e84:	8080281e 	bne	r16,r2,33f28 <_fflush_r+0x15c>
   33e88:	8880030b 	ldhu	r2,12(r17)
   33e8c:	88c00417 	ldw	r3,16(r17)
   33e90:	88000115 	stw	zero,4(r17)
   33e94:	113dffcc 	andi	r4,r2,63487
   33e98:	1084000c 	andi	r2,r2,4096
   33e9c:	10bfffcc 	andi	r2,r2,65535
   33ea0:	10a0001c 	xori	r2,r2,32768
   33ea4:	8900030d 	sth	r4,12(r17)
   33ea8:	88c00015 	stw	r3,0(r17)
   33eac:	10a00004 	addi	r2,r2,-32768
   33eb0:	10002c1e 	bne	r2,zero,33f64 <_fflush_r+0x198>
   33eb4:	0005883a 	mov	r2,zero
   33eb8:	dfc00417 	ldw	ra,16(sp)
   33ebc:	dcc00317 	ldw	r19,12(sp)
   33ec0:	dc800217 	ldw	r18,8(sp)
   33ec4:	dc400117 	ldw	r17,4(sp)
   33ec8:	dc000017 	ldw	r16,0(sp)
   33ecc:	dec00504 	addi	sp,sp,20
   33ed0:	f800283a 	ret
   33ed4:	8c800417 	ldw	r18,16(r17)
   33ed8:	903ff626 	beq	r18,zero,33eb4 <_fflush_r+0xe8>
   33edc:	8c000017 	ldw	r16,0(r17)
   33ee0:	108000cc 	andi	r2,r2,3
   33ee4:	8c800015 	stw	r18,0(r17)
   33ee8:	84a1c83a 	sub	r16,r16,r18
   33eec:	10001b1e 	bne	r2,zero,33f5c <_fflush_r+0x190>
   33ef0:	88800517 	ldw	r2,20(r17)
   33ef4:	88800215 	stw	r2,8(r17)
   33ef8:	04000316 	blt	zero,r16,33f08 <_fflush_r+0x13c>
   33efc:	003fed06 	br	33eb4 <_fflush_r+0xe8>
   33f00:	90a5883a 	add	r18,r18,r2
   33f04:	043feb0e 	bge	zero,r16,33eb4 <_fflush_r+0xe8>
   33f08:	88800917 	ldw	r2,36(r17)
   33f0c:	89400717 	ldw	r5,28(r17)
   33f10:	800f883a 	mov	r7,r16
   33f14:	900d883a 	mov	r6,r18
   33f18:	9809883a 	mov	r4,r19
   33f1c:	103ee83a 	callr	r2
   33f20:	80a1c83a 	sub	r16,r16,r2
   33f24:	00bff616 	blt	zero,r2,33f00 <_fflush_r+0x134>
   33f28:	88c0030b 	ldhu	r3,12(r17)
   33f2c:	00bfffc4 	movi	r2,-1
   33f30:	18c01014 	ori	r3,r3,64
   33f34:	88c0030d 	sth	r3,12(r17)
   33f38:	dfc00417 	ldw	ra,16(sp)
   33f3c:	dcc00317 	ldw	r19,12(sp)
   33f40:	dc800217 	ldw	r18,8(sp)
   33f44:	dc400117 	ldw	r17,4(sp)
   33f48:	dc000017 	ldw	r16,0(sp)
   33f4c:	dec00504 	addi	sp,sp,20
   33f50:	f800283a 	ret
   33f54:	00340880 	call	34088 <__sinit>
   33f58:	003fa706 	br	33df8 <_fflush_r+0x2c>
   33f5c:	0005883a 	mov	r2,zero
   33f60:	003fe406 	br	33ef4 <_fflush_r+0x128>
   33f64:	8c001415 	stw	r16,80(r17)
   33f68:	003fd206 	br	33eb4 <_fflush_r+0xe8>
   33f6c:	88c00f17 	ldw	r3,60(r17)
   33f70:	00ffac16 	blt	zero,r3,33e24 <_fflush_r+0x58>
   33f74:	003fcf06 	br	33eb4 <_fflush_r+0xe8>
   33f78:	89400717 	ldw	r5,28(r17)
   33f7c:	9809883a 	mov	r4,r19
   33f80:	000d883a 	mov	r6,zero
   33f84:	01c00044 	movi	r7,1
   33f88:	183ee83a 	callr	r3
   33f8c:	1021883a 	mov	r16,r2
   33f90:	00bfffc4 	movi	r2,-1
   33f94:	80800326 	beq	r16,r2,33fa4 <_fflush_r+0x1d8>
   33f98:	8940030b 	ldhu	r5,12(r17)
   33f9c:	88c00a17 	ldw	r3,40(r17)
   33fa0:	003fa806 	br	33e44 <_fflush_r+0x78>
   33fa4:	98c00017 	ldw	r3,0(r19)
   33fa8:	00800744 	movi	r2,29
   33fac:	18bfde1e 	bne	r3,r2,33f28 <_fflush_r+0x15c>
   33fb0:	003fc006 	br	33eb4 <_fflush_r+0xe8>

00033fb4 <fflush>:
   33fb4:	200b883a 	mov	r5,r4
   33fb8:	20000426 	beq	r4,zero,33fcc <fflush+0x18>
   33fbc:	00800034 	movhi	r2,0
   33fc0:	10876304 	addi	r2,r2,7564
   33fc4:	11000017 	ldw	r4,0(r2)
   33fc8:	0033dcc1 	jmpi	33dcc <_fflush_r>
   33fcc:	00800034 	movhi	r2,0
   33fd0:	10876204 	addi	r2,r2,7560
   33fd4:	11000017 	ldw	r4,0(r2)
   33fd8:	014000f4 	movhi	r5,3
   33fdc:	294f7304 	addi	r5,r5,15820
   33fe0:	0034c681 	jmpi	34c68 <_fwalk_reent>

00033fe4 <__fp_lock>:
   33fe4:	0005883a 	mov	r2,zero
   33fe8:	f800283a 	ret

00033fec <__fp_unlock>:
   33fec:	0005883a 	mov	r2,zero
   33ff0:	f800283a 	ret

00033ff4 <_cleanup_r>:
   33ff4:	014000f4 	movhi	r5,3
   33ff8:	295de604 	addi	r5,r5,30616
   33ffc:	0034bc01 	jmpi	34bc0 <_fwalk>

00034000 <__sfmoreglue>:
   34000:	defffc04 	addi	sp,sp,-16
   34004:	dc800215 	stw	r18,8(sp)
   34008:	2825883a 	mov	r18,r5
   3400c:	dc000015 	stw	r16,0(sp)
   34010:	01401704 	movi	r5,92
   34014:	2021883a 	mov	r16,r4
   34018:	9009883a 	mov	r4,r18
   3401c:	dfc00315 	stw	ra,12(sp)
   34020:	dc400115 	stw	r17,4(sp)
   34024:	00394380 	call	39438 <__mulsi3>
   34028:	8009883a 	mov	r4,r16
   3402c:	11400304 	addi	r5,r2,12
   34030:	1023883a 	mov	r17,r2
   34034:	0034fa40 	call	34fa4 <_malloc_r>
   34038:	1021883a 	mov	r16,r2
   3403c:	10000726 	beq	r2,zero,3405c <__sfmoreglue+0x5c>
   34040:	11000304 	addi	r4,r2,12
   34044:	10000015 	stw	zero,0(r2)
   34048:	14800115 	stw	r18,4(r2)
   3404c:	11000215 	stw	r4,8(r2)
   34050:	000b883a 	mov	r5,zero
   34054:	880d883a 	mov	r6,r17
   34058:	0035aec0 	call	35aec <memset>
   3405c:	8005883a 	mov	r2,r16
   34060:	dfc00317 	ldw	ra,12(sp)
   34064:	dc800217 	ldw	r18,8(sp)
   34068:	dc400117 	ldw	r17,4(sp)
   3406c:	dc000017 	ldw	r16,0(sp)
   34070:	dec00404 	addi	sp,sp,16
   34074:	f800283a 	ret

00034078 <_cleanup>:
   34078:	00800034 	movhi	r2,0
   3407c:	10876204 	addi	r2,r2,7560
   34080:	11000017 	ldw	r4,0(r2)
   34084:	0033ff41 	jmpi	33ff4 <_cleanup_r>

00034088 <__sinit>:
   34088:	20800e17 	ldw	r2,56(r4)
   3408c:	1000401e 	bne	r2,zero,34190 <__sinit+0x108>
   34090:	21400117 	ldw	r5,4(r4)
   34094:	018000f4 	movhi	r6,3
   34098:	318ffd04 	addi	r6,r6,16372
   3409c:	20c00217 	ldw	r3,8(r4)
   340a0:	21800f15 	stw	r6,60(r4)
   340a4:	2080bb04 	addi	r2,r4,748
   340a8:	02400044 	movi	r9,1
   340ac:	018000c4 	movi	r6,3
   340b0:	2180b915 	stw	r6,740(r4)
   340b4:	2080ba15 	stw	r2,744(r4)
   340b8:	22400e15 	stw	r9,56(r4)
   340bc:	20800317 	ldw	r2,12(r4)
   340c0:	2000b815 	stw	zero,736(r4)
   340c4:	020000f4 	movhi	r8,3
   340c8:	421cb704 	addi	r8,r8,29404
   340cc:	01c000f4 	movhi	r7,3
   340d0:	39dccc04 	addi	r7,r7,29488
   340d4:	018000f4 	movhi	r6,3
   340d8:	319cee04 	addi	r6,r6,29624
   340dc:	010000f4 	movhi	r4,3
   340e0:	211d0504 	addi	r4,r4,29716
   340e4:	02800104 	movi	r10,4
   340e8:	28000015 	stw	zero,0(r5)
   340ec:	28000115 	stw	zero,4(r5)
   340f0:	28000215 	stw	zero,8(r5)
   340f4:	2a80030d 	sth	r10,12(r5)
   340f8:	2800038d 	sth	zero,14(r5)
   340fc:	28000415 	stw	zero,16(r5)
   34100:	28000515 	stw	zero,20(r5)
   34104:	28000615 	stw	zero,24(r5)
   34108:	29400715 	stw	r5,28(r5)
   3410c:	2a000815 	stw	r8,32(r5)
   34110:	29c00915 	stw	r7,36(r5)
   34114:	29800a15 	stw	r6,40(r5)
   34118:	29000b15 	stw	r4,44(r5)
   3411c:	01400284 	movi	r5,10
   34120:	18000015 	stw	zero,0(r3)
   34124:	18000115 	stw	zero,4(r3)
   34128:	18000215 	stw	zero,8(r3)
   3412c:	1940030d 	sth	r5,12(r3)
   34130:	1a40038d 	sth	r9,14(r3)
   34134:	18000415 	stw	zero,16(r3)
   34138:	18000515 	stw	zero,20(r3)
   3413c:	18000615 	stw	zero,24(r3)
   34140:	18c00715 	stw	r3,28(r3)
   34144:	1a000815 	stw	r8,32(r3)
   34148:	19c00915 	stw	r7,36(r3)
   3414c:	19800a15 	stw	r6,40(r3)
   34150:	19000b15 	stw	r4,44(r3)
   34154:	00c00484 	movi	r3,18
   34158:	10c0030d 	sth	r3,12(r2)
   3415c:	00c00084 	movi	r3,2
   34160:	10000015 	stw	zero,0(r2)
   34164:	10000115 	stw	zero,4(r2)
   34168:	10000215 	stw	zero,8(r2)
   3416c:	10c0038d 	sth	r3,14(r2)
   34170:	10000415 	stw	zero,16(r2)
   34174:	10000515 	stw	zero,20(r2)
   34178:	10000615 	stw	zero,24(r2)
   3417c:	10800715 	stw	r2,28(r2)
   34180:	12000815 	stw	r8,32(r2)
   34184:	11c00915 	stw	r7,36(r2)
   34188:	11800a15 	stw	r6,40(r2)
   3418c:	11000b15 	stw	r4,44(r2)
   34190:	f800283a 	ret

00034194 <__sfp>:
   34194:	defffc04 	addi	sp,sp,-16
   34198:	00800034 	movhi	r2,0
   3419c:	10876204 	addi	r2,r2,7560
   341a0:	dc400115 	stw	r17,4(sp)
   341a4:	14400017 	ldw	r17,0(r2)
   341a8:	dc800215 	stw	r18,8(sp)
   341ac:	dfc00315 	stw	ra,12(sp)
   341b0:	88800e17 	ldw	r2,56(r17)
   341b4:	dc000015 	stw	r16,0(sp)
   341b8:	2025883a 	mov	r18,r4
   341bc:	10002826 	beq	r2,zero,34260 <__sfp+0xcc>
   341c0:	8c40b804 	addi	r17,r17,736
   341c4:	043fffc4 	movi	r16,-1
   341c8:	89400117 	ldw	r5,4(r17)
   341cc:	88800217 	ldw	r2,8(r17)
   341d0:	297fffc4 	addi	r5,r5,-1
   341d4:	28000a16 	blt	r5,zero,34200 <__sfp+0x6c>
   341d8:	10c0030f 	ldh	r3,12(r2)
   341dc:	18000c26 	beq	r3,zero,34210 <__sfp+0x7c>
   341e0:	10c01a04 	addi	r3,r2,104
   341e4:	00000206 	br	341f0 <__sfp+0x5c>
   341e8:	19bfe90f 	ldh	r6,-92(r3)
   341ec:	30000826 	beq	r6,zero,34210 <__sfp+0x7c>
   341f0:	297fffc4 	addi	r5,r5,-1
   341f4:	18bffd04 	addi	r2,r3,-12
   341f8:	18c01704 	addi	r3,r3,92
   341fc:	2c3ffa1e 	bne	r5,r16,341e8 <__sfp+0x54>
   34200:	88800017 	ldw	r2,0(r17)
   34204:	10001926 	beq	r2,zero,3426c <__sfp+0xd8>
   34208:	1023883a 	mov	r17,r2
   3420c:	003fee06 	br	341c8 <__sfp+0x34>
   34210:	00ffffc4 	movi	r3,-1
   34214:	10c0038d 	sth	r3,14(r2)
   34218:	00c00044 	movi	r3,1
   3421c:	10c0030d 	sth	r3,12(r2)
   34220:	10000015 	stw	zero,0(r2)
   34224:	10000215 	stw	zero,8(r2)
   34228:	10000115 	stw	zero,4(r2)
   3422c:	10000415 	stw	zero,16(r2)
   34230:	10000515 	stw	zero,20(r2)
   34234:	10000615 	stw	zero,24(r2)
   34238:	10000c15 	stw	zero,48(r2)
   3423c:	10000d15 	stw	zero,52(r2)
   34240:	10001115 	stw	zero,68(r2)
   34244:	10001215 	stw	zero,72(r2)
   34248:	dfc00317 	ldw	ra,12(sp)
   3424c:	dc800217 	ldw	r18,8(sp)
   34250:	dc400117 	ldw	r17,4(sp)
   34254:	dc000017 	ldw	r16,0(sp)
   34258:	dec00404 	addi	sp,sp,16
   3425c:	f800283a 	ret
   34260:	8809883a 	mov	r4,r17
   34264:	00340880 	call	34088 <__sinit>
   34268:	003fd506 	br	341c0 <__sfp+0x2c>
   3426c:	9009883a 	mov	r4,r18
   34270:	01400104 	movi	r5,4
   34274:	00340000 	call	34000 <__sfmoreglue>
   34278:	88800015 	stw	r2,0(r17)
   3427c:	103fe21e 	bne	r2,zero,34208 <__sfp+0x74>
   34280:	00800304 	movi	r2,12
   34284:	90800015 	stw	r2,0(r18)
   34288:	0005883a 	mov	r2,zero
   3428c:	003fee06 	br	34248 <__sfp+0xb4>

00034290 <__sfp_lock_acquire>:
   34290:	f800283a 	ret

00034294 <__sfp_lock_release>:
   34294:	f800283a 	ret

00034298 <__sinit_lock_acquire>:
   34298:	f800283a 	ret

0003429c <__sinit_lock_release>:
   3429c:	f800283a 	ret

000342a0 <__fp_lock_all>:
   342a0:	00800034 	movhi	r2,0
   342a4:	10876304 	addi	r2,r2,7564
   342a8:	11000017 	ldw	r4,0(r2)
   342ac:	014000f4 	movhi	r5,3
   342b0:	294ff904 	addi	r5,r5,16356
   342b4:	0034bc01 	jmpi	34bc0 <_fwalk>

000342b8 <__fp_unlock_all>:
   342b8:	00800034 	movhi	r2,0
   342bc:	10876304 	addi	r2,r2,7564
   342c0:	11000017 	ldw	r4,0(r2)
   342c4:	014000f4 	movhi	r5,3
   342c8:	294ffb04 	addi	r5,r5,16364
   342cc:	0034bc01 	jmpi	34bc0 <_fwalk>

000342d0 <_malloc_trim_r>:
   342d0:	defffb04 	addi	sp,sp,-20
   342d4:	dcc00315 	stw	r19,12(sp)
   342d8:	dc800215 	stw	r18,8(sp)
   342dc:	dc400115 	stw	r17,4(sp)
   342e0:	dc000015 	stw	r16,0(sp)
   342e4:	2827883a 	mov	r19,r5
   342e8:	dfc00415 	stw	ra,16(sp)
   342ec:	04400034 	movhi	r17,0
   342f0:	8c41de04 	addi	r17,r17,1912
   342f4:	2021883a 	mov	r16,r4
   342f8:	003a0600 	call	3a060 <__malloc_lock>
   342fc:	88800217 	ldw	r2,8(r17)
   34300:	14800117 	ldw	r18,4(r2)
   34304:	00bfff04 	movi	r2,-4
   34308:	90a4703a 	and	r18,r18,r2
   3430c:	9083fbc4 	addi	r2,r18,4079
   34310:	14e7c83a 	sub	r19,r2,r19
   34314:	9826d33a 	srli	r19,r19,12
   34318:	0083ffc4 	movi	r2,4095
   3431c:	9cffffc4 	addi	r19,r19,-1
   34320:	9826933a 	slli	r19,r19,12
   34324:	14c0060e 	bge	r2,r19,34340 <_malloc_trim_r+0x70>
   34328:	8009883a 	mov	r4,r16
   3432c:	000b883a 	mov	r5,zero
   34330:	00372780 	call	37278 <_sbrk_r>
   34334:	88c00217 	ldw	r3,8(r17)
   34338:	1c87883a 	add	r3,r3,r18
   3433c:	10c00a26 	beq	r2,r3,34368 <_malloc_trim_r+0x98>
   34340:	8009883a 	mov	r4,r16
   34344:	003a0800 	call	3a080 <__malloc_unlock>
   34348:	0005883a 	mov	r2,zero
   3434c:	dfc00417 	ldw	ra,16(sp)
   34350:	dcc00317 	ldw	r19,12(sp)
   34354:	dc800217 	ldw	r18,8(sp)
   34358:	dc400117 	ldw	r17,4(sp)
   3435c:	dc000017 	ldw	r16,0(sp)
   34360:	dec00504 	addi	sp,sp,20
   34364:	f800283a 	ret
   34368:	8009883a 	mov	r4,r16
   3436c:	04cbc83a 	sub	r5,zero,r19
   34370:	00372780 	call	37278 <_sbrk_r>
   34374:	00ffffc4 	movi	r3,-1
   34378:	10c01326 	beq	r2,r3,343c8 <_malloc_trim_r+0xf8>
   3437c:	00800034 	movhi	r2,0
   34380:	10877e04 	addi	r2,r2,7672
   34384:	11000017 	ldw	r4,0(r2)
   34388:	88c00217 	ldw	r3,8(r17)
   3438c:	94e5c83a 	sub	r18,r18,r19
   34390:	94800054 	ori	r18,r18,1
   34394:	24e7c83a 	sub	r19,r4,r19
   34398:	1c800115 	stw	r18,4(r3)
   3439c:	8009883a 	mov	r4,r16
   343a0:	14c00015 	stw	r19,0(r2)
   343a4:	003a0800 	call	3a080 <__malloc_unlock>
   343a8:	00800044 	movi	r2,1
   343ac:	dfc00417 	ldw	ra,16(sp)
   343b0:	dcc00317 	ldw	r19,12(sp)
   343b4:	dc800217 	ldw	r18,8(sp)
   343b8:	dc400117 	ldw	r17,4(sp)
   343bc:	dc000017 	ldw	r16,0(sp)
   343c0:	dec00504 	addi	sp,sp,20
   343c4:	f800283a 	ret
   343c8:	8009883a 	mov	r4,r16
   343cc:	000b883a 	mov	r5,zero
   343d0:	00372780 	call	37278 <_sbrk_r>
   343d4:	88c00217 	ldw	r3,8(r17)
   343d8:	014003c4 	movi	r5,15
   343dc:	10c9c83a 	sub	r4,r2,r3
   343e0:	293fd70e 	bge	r5,r4,34340 <_malloc_trim_r+0x70>
   343e4:	01400034 	movhi	r5,0
   343e8:	29476504 	addi	r5,r5,7572
   343ec:	29400017 	ldw	r5,0(r5)
   343f0:	21000054 	ori	r4,r4,1
   343f4:	19000115 	stw	r4,4(r3)
   343f8:	1145c83a 	sub	r2,r2,r5
   343fc:	01400034 	movhi	r5,0
   34400:	29477e04 	addi	r5,r5,7672
   34404:	28800015 	stw	r2,0(r5)
   34408:	003fcd06 	br	34340 <_malloc_trim_r+0x70>

0003440c <_free_r>:
   3440c:	defffd04 	addi	sp,sp,-12
   34410:	dc400115 	stw	r17,4(sp)
   34414:	dc000015 	stw	r16,0(sp)
   34418:	dfc00215 	stw	ra,8(sp)
   3441c:	2821883a 	mov	r16,r5
   34420:	2023883a 	mov	r17,r4
   34424:	28004b26 	beq	r5,zero,34554 <_free_r+0x148>
   34428:	003a0600 	call	3a060 <__malloc_lock>
   3442c:	823fff17 	ldw	r8,-4(r16)
   34430:	00bfff84 	movi	r2,-2
   34434:	81bffe04 	addi	r6,r16,-8
   34438:	4084703a 	and	r2,r8,r2
   3443c:	3087883a 	add	r3,r6,r2
   34440:	01400034 	movhi	r5,0
   34444:	2941de04 	addi	r5,r5,1912
   34448:	1a400117 	ldw	r9,4(r3)
   3444c:	29000217 	ldw	r4,8(r5)
   34450:	01ffff04 	movi	r7,-4
   34454:	49ce703a 	and	r7,r9,r7
   34458:	20c06526 	beq	r4,r3,345f0 <_free_r+0x1e4>
   3445c:	19c00115 	stw	r7,4(r3)
   34460:	4200004c 	andi	r8,r8,1
   34464:	40003026 	beq	r8,zero,34528 <_free_r+0x11c>
   34468:	0009883a 	mov	r4,zero
   3446c:	19d1883a 	add	r8,r3,r7
   34470:	42000117 	ldw	r8,4(r8)
   34474:	4200004c 	andi	r8,r8,1
   34478:	4000061e 	bne	r8,zero,34494 <_free_r+0x88>
   3447c:	11c5883a 	add	r2,r2,r7
   34480:	19c00217 	ldw	r7,8(r3)
   34484:	20004e26 	beq	r4,zero,345c0 <_free_r+0x1b4>
   34488:	18c00317 	ldw	r3,12(r3)
   3448c:	38c00315 	stw	r3,12(r7)
   34490:	19c00215 	stw	r7,8(r3)
   34494:	11c00054 	ori	r7,r2,1
   34498:	3087883a 	add	r3,r6,r2
   3449c:	31c00115 	stw	r7,4(r6)
   344a0:	18800015 	stw	r2,0(r3)
   344a4:	20001a1e 	bne	r4,zero,34510 <_free_r+0x104>
   344a8:	00c07fc4 	movi	r3,511
   344ac:	18802e2e 	bgeu	r3,r2,34568 <_free_r+0x15c>
   344b0:	1006d27a 	srli	r3,r2,9
   344b4:	01000104 	movi	r4,4
   344b8:	20c06636 	bltu	r4,r3,34654 <_free_r+0x248>
   344bc:	1008d1ba 	srli	r4,r2,6
   344c0:	21000e04 	addi	r4,r4,56
   344c4:	210f883a 	add	r7,r4,r4
   344c8:	39cf883a 	add	r7,r7,r7
   344cc:	39cf883a 	add	r7,r7,r7
   344d0:	29cf883a 	add	r7,r5,r7
   344d4:	38c00217 	ldw	r3,8(r7)
   344d8:	01400034 	movhi	r5,0
   344dc:	2941de04 	addi	r5,r5,1912
   344e0:	19c06126 	beq	r3,r7,34668 <_free_r+0x25c>
   344e4:	013fff04 	movi	r4,-4
   344e8:	19400117 	ldw	r5,4(r3)
   344ec:	290a703a 	and	r5,r5,r4
   344f0:	1140022e 	bgeu	r2,r5,344fc <_free_r+0xf0>
   344f4:	18c00217 	ldw	r3,8(r3)
   344f8:	38fffb1e 	bne	r7,r3,344e8 <_free_r+0xdc>
   344fc:	18800317 	ldw	r2,12(r3)
   34500:	30800315 	stw	r2,12(r6)
   34504:	30c00215 	stw	r3,8(r6)
   34508:	11800215 	stw	r6,8(r2)
   3450c:	19800315 	stw	r6,12(r3)
   34510:	8809883a 	mov	r4,r17
   34514:	dfc00217 	ldw	ra,8(sp)
   34518:	dc400117 	ldw	r17,4(sp)
   3451c:	dc000017 	ldw	r16,0(sp)
   34520:	dec00304 	addi	sp,sp,12
   34524:	003a0801 	jmpi	3a080 <__malloc_unlock>
   34528:	813ffe17 	ldw	r4,-8(r16)
   3452c:	2a400204 	addi	r9,r5,8
   34530:	310dc83a 	sub	r6,r6,r4
   34534:	32000217 	ldw	r8,8(r6)
   34538:	1105883a 	add	r2,r2,r4
   3453c:	42404326 	beq	r8,r9,3464c <_free_r+0x240>
   34540:	32400317 	ldw	r9,12(r6)
   34544:	0009883a 	mov	r4,zero
   34548:	42400315 	stw	r9,12(r8)
   3454c:	4a000215 	stw	r8,8(r9)
   34550:	003fc606 	br	3446c <_free_r+0x60>
   34554:	dfc00217 	ldw	ra,8(sp)
   34558:	dc400117 	ldw	r17,4(sp)
   3455c:	dc000017 	ldw	r16,0(sp)
   34560:	dec00304 	addi	sp,sp,12
   34564:	f800283a 	ret
   34568:	1004d0fa 	srli	r2,r2,3
   3456c:	02000044 	movi	r8,1
   34570:	29c00117 	ldw	r7,4(r5)
   34574:	1087883a 	add	r3,r2,r2
   34578:	18c7883a 	add	r3,r3,r3
   3457c:	1005d0ba 	srai	r2,r2,2
   34580:	18c7883a 	add	r3,r3,r3
   34584:	28c7883a 	add	r3,r5,r3
   34588:	19000217 	ldw	r4,8(r3)
   3458c:	4084983a 	sll	r2,r8,r2
   34590:	30c00315 	stw	r3,12(r6)
   34594:	31000215 	stw	r4,8(r6)
   34598:	11c4b03a 	or	r2,r2,r7
   3459c:	21800315 	stw	r6,12(r4)
   345a0:	8809883a 	mov	r4,r17
   345a4:	28800115 	stw	r2,4(r5)
   345a8:	19800215 	stw	r6,8(r3)
   345ac:	dfc00217 	ldw	ra,8(sp)
   345b0:	dc400117 	ldw	r17,4(sp)
   345b4:	dc000017 	ldw	r16,0(sp)
   345b8:	dec00304 	addi	sp,sp,12
   345bc:	003a0801 	jmpi	3a080 <__malloc_unlock>
   345c0:	02000034 	movhi	r8,0
   345c4:	4201e004 	addi	r8,r8,1920
   345c8:	3a3faf1e 	bne	r7,r8,34488 <_free_r+0x7c>
   345cc:	29800515 	stw	r6,20(r5)
   345d0:	29800415 	stw	r6,16(r5)
   345d4:	11000054 	ori	r4,r2,1
   345d8:	3087883a 	add	r3,r6,r2
   345dc:	31c00315 	stw	r7,12(r6)
   345e0:	31c00215 	stw	r7,8(r6)
   345e4:	31000115 	stw	r4,4(r6)
   345e8:	18800015 	stw	r2,0(r3)
   345ec:	003fc806 	br	34510 <_free_r+0x104>
   345f0:	4200004c 	andi	r8,r8,1
   345f4:	3885883a 	add	r2,r7,r2
   345f8:	4000071e 	bne	r8,zero,34618 <_free_r+0x20c>
   345fc:	81fffe17 	ldw	r7,-8(r16)
   34600:	31cdc83a 	sub	r6,r6,r7
   34604:	30c00317 	ldw	r3,12(r6)
   34608:	31000217 	ldw	r4,8(r6)
   3460c:	11c5883a 	add	r2,r2,r7
   34610:	20c00315 	stw	r3,12(r4)
   34614:	19000215 	stw	r4,8(r3)
   34618:	00c00034 	movhi	r3,0
   3461c:	18c76604 	addi	r3,r3,7576
   34620:	18c00017 	ldw	r3,0(r3)
   34624:	11000054 	ori	r4,r2,1
   34628:	31000115 	stw	r4,4(r6)
   3462c:	29800215 	stw	r6,8(r5)
   34630:	10ffb736 	bltu	r2,r3,34510 <_free_r+0x104>
   34634:	00800034 	movhi	r2,0
   34638:	10877604 	addi	r2,r2,7640
   3463c:	11400017 	ldw	r5,0(r2)
   34640:	8809883a 	mov	r4,r17
   34644:	00342d00 	call	342d0 <_malloc_trim_r>
   34648:	003fb106 	br	34510 <_free_r+0x104>
   3464c:	01000044 	movi	r4,1
   34650:	003f8606 	br	3446c <_free_r+0x60>
   34654:	01000504 	movi	r4,20
   34658:	20c00b36 	bltu	r4,r3,34688 <_free_r+0x27c>
   3465c:	190016c4 	addi	r4,r3,91
   34660:	210f883a 	add	r7,r4,r4
   34664:	003f9806 	br	344c8 <_free_r+0xbc>
   34668:	2009d0ba 	srai	r4,r4,2
   3466c:	00800044 	movi	r2,1
   34670:	29c00117 	ldw	r7,4(r5)
   34674:	1108983a 	sll	r4,r2,r4
   34678:	1805883a 	mov	r2,r3
   3467c:	21c8b03a 	or	r4,r4,r7
   34680:	29000115 	stw	r4,4(r5)
   34684:	003f9e06 	br	34500 <_free_r+0xf4>
   34688:	01001504 	movi	r4,84
   3468c:	20c00436 	bltu	r4,r3,346a0 <_free_r+0x294>
   34690:	1008d33a 	srli	r4,r2,12
   34694:	21001b84 	addi	r4,r4,110
   34698:	210f883a 	add	r7,r4,r4
   3469c:	003f8a06 	br	344c8 <_free_r+0xbc>
   346a0:	01005504 	movi	r4,340
   346a4:	20c00436 	bltu	r4,r3,346b8 <_free_r+0x2ac>
   346a8:	1008d3fa 	srli	r4,r2,15
   346ac:	21001dc4 	addi	r4,r4,119
   346b0:	210f883a 	add	r7,r4,r4
   346b4:	003f8406 	br	344c8 <_free_r+0xbc>
   346b8:	01015504 	movi	r4,1364
   346bc:	20c00436 	bltu	r4,r3,346d0 <_free_r+0x2c4>
   346c0:	1008d4ba 	srli	r4,r2,18
   346c4:	21001f04 	addi	r4,r4,124
   346c8:	210f883a 	add	r7,r4,r4
   346cc:	003f7e06 	br	344c8 <_free_r+0xbc>
   346d0:	01c03f04 	movi	r7,252
   346d4:	01001f84 	movi	r4,126
   346d8:	003f7b06 	br	344c8 <_free_r+0xbc>

000346dc <__sfvwrite_r>:
   346dc:	30800217 	ldw	r2,8(r6)
   346e0:	defff504 	addi	sp,sp,-44
   346e4:	dd400615 	stw	r21,24(sp)
   346e8:	dd000515 	stw	r20,20(sp)
   346ec:	dc000115 	stw	r16,4(sp)
   346f0:	dfc00a15 	stw	ra,40(sp)
   346f4:	df000915 	stw	fp,36(sp)
   346f8:	ddc00815 	stw	r23,32(sp)
   346fc:	dd800715 	stw	r22,28(sp)
   34700:	dcc00415 	stw	r19,16(sp)
   34704:	dc800315 	stw	r18,12(sp)
   34708:	dc400215 	stw	r17,8(sp)
   3470c:	3029883a 	mov	r20,r6
   34710:	202b883a 	mov	r21,r4
   34714:	2821883a 	mov	r16,r5
   34718:	10002126 	beq	r2,zero,347a0 <__sfvwrite_r+0xc4>
   3471c:	2880030b 	ldhu	r2,12(r5)
   34720:	10c0020c 	andi	r3,r2,8
   34724:	18ffffcc 	andi	r3,r3,65535
   34728:	18e0001c 	xori	r3,r3,32768
   3472c:	18e00004 	addi	r3,r3,-32768
   34730:	18002826 	beq	r3,zero,347d4 <__sfvwrite_r+0xf8>
   34734:	28c00417 	ldw	r3,16(r5)
   34738:	18002626 	beq	r3,zero,347d4 <__sfvwrite_r+0xf8>
   3473c:	10c0008c 	andi	r3,r2,2
   34740:	18ffffcc 	andi	r3,r3,65535
   34744:	18e0001c 	xori	r3,r3,32768
   34748:	18e00004 	addi	r3,r3,-32768
   3474c:	a4400017 	ldw	r17,0(r20)
   34750:	18002b26 	beq	r3,zero,34800 <__sfvwrite_r+0x124>
   34754:	0027883a 	mov	r19,zero
   34758:	0025883a 	mov	r18,zero
   3475c:	05810004 	movi	r22,1024
   34760:	980d883a 	mov	r6,r19
   34764:	a809883a 	mov	r4,r21
   34768:	90004f26 	beq	r18,zero,348a8 <__sfvwrite_r+0x1cc>
   3476c:	900f883a 	mov	r7,r18
   34770:	81400717 	ldw	r5,28(r16)
   34774:	b480012e 	bgeu	r22,r18,3477c <__sfvwrite_r+0xa0>
   34778:	01c10004 	movi	r7,1024
   3477c:	80800917 	ldw	r2,36(r16)
   34780:	103ee83a 	callr	r2
   34784:	0080540e 	bge	zero,r2,348d8 <__sfvwrite_r+0x1fc>
   34788:	a0c00217 	ldw	r3,8(r20)
   3478c:	98a7883a 	add	r19,r19,r2
   34790:	90a5c83a 	sub	r18,r18,r2
   34794:	1885c83a 	sub	r2,r3,r2
   34798:	a0800215 	stw	r2,8(r20)
   3479c:	103ff01e 	bne	r2,zero,34760 <__sfvwrite_r+0x84>
   347a0:	0005883a 	mov	r2,zero
   347a4:	dfc00a17 	ldw	ra,40(sp)
   347a8:	df000917 	ldw	fp,36(sp)
   347ac:	ddc00817 	ldw	r23,32(sp)
   347b0:	dd800717 	ldw	r22,28(sp)
   347b4:	dd400617 	ldw	r21,24(sp)
   347b8:	dd000517 	ldw	r20,20(sp)
   347bc:	dcc00417 	ldw	r19,16(sp)
   347c0:	dc800317 	ldw	r18,12(sp)
   347c4:	dc400217 	ldw	r17,8(sp)
   347c8:	dc000117 	ldw	r16,4(sp)
   347cc:	dec00b04 	addi	sp,sp,44
   347d0:	f800283a 	ret
   347d4:	a809883a 	mov	r4,r21
   347d8:	800b883a 	mov	r5,r16
   347dc:	00324000 	call	32400 <__swsetup_r>
   347e0:	1000f01e 	bne	r2,zero,34ba4 <__sfvwrite_r+0x4c8>
   347e4:	8080030b 	ldhu	r2,12(r16)
   347e8:	a4400017 	ldw	r17,0(r20)
   347ec:	10c0008c 	andi	r3,r2,2
   347f0:	18ffffcc 	andi	r3,r3,65535
   347f4:	18e0001c 	xori	r3,r3,32768
   347f8:	18e00004 	addi	r3,r3,-32768
   347fc:	183fd51e 	bne	r3,zero,34754 <__sfvwrite_r+0x78>
   34800:	10c0004c 	andi	r3,r2,1
   34804:	002d883a 	mov	r22,zero
   34808:	1800381e 	bne	r3,zero,348ec <__sfvwrite_r+0x210>
   3480c:	0025883a 	mov	r18,zero
   34810:	90002126 	beq	r18,zero,34898 <__sfvwrite_r+0x1bc>
   34814:	10c0800c 	andi	r3,r2,512
   34818:	18ffffcc 	andi	r3,r3,65535
   3481c:	18e0001c 	xori	r3,r3,32768
   34820:	18e00004 	addi	r3,r3,-32768
   34824:	84c00217 	ldw	r19,8(r16)
   34828:	18006b26 	beq	r3,zero,349d8 <__sfvwrite_r+0x2fc>
   3482c:	980f883a 	mov	r7,r19
   34830:	94c08636 	bltu	r18,r19,34a4c <__sfvwrite_r+0x370>
   34834:	10c1200c 	andi	r3,r2,1152
   34838:	18009f1e 	bne	r3,zero,34ab8 <__sfvwrite_r+0x3dc>
   3483c:	81000017 	ldw	r4,0(r16)
   34840:	982f883a 	mov	r23,r19
   34844:	9039883a 	mov	fp,r18
   34848:	9027883a 	mov	r19,r18
   3484c:	380d883a 	mov	r6,r7
   34850:	b00b883a 	mov	r5,r22
   34854:	d9c00015 	stw	r7,0(sp)
   34858:	00359600 	call	35960 <memmove>
   3485c:	d9c00017 	ldw	r7,0(sp)
   34860:	81000217 	ldw	r4,8(r16)
   34864:	80800017 	ldw	r2,0(r16)
   34868:	25efc83a 	sub	r23,r4,r23
   3486c:	11cf883a 	add	r7,r2,r7
   34870:	85c00215 	stw	r23,8(r16)
   34874:	81c00015 	stw	r7,0(r16)
   34878:	a0800217 	ldw	r2,8(r20)
   3487c:	b72d883a 	add	r22,r22,fp
   34880:	9725c83a 	sub	r18,r18,fp
   34884:	14e7c83a 	sub	r19,r2,r19
   34888:	a4c00215 	stw	r19,8(r20)
   3488c:	983fc426 	beq	r19,zero,347a0 <__sfvwrite_r+0xc4>
   34890:	8080030b 	ldhu	r2,12(r16)
   34894:	903fdf1e 	bne	r18,zero,34814 <__sfvwrite_r+0x138>
   34898:	8d800017 	ldw	r22,0(r17)
   3489c:	8c800117 	ldw	r18,4(r17)
   348a0:	8c400204 	addi	r17,r17,8
   348a4:	003fda06 	br	34810 <__sfvwrite_r+0x134>
   348a8:	8cc00017 	ldw	r19,0(r17)
   348ac:	8c800117 	ldw	r18,4(r17)
   348b0:	8c400204 	addi	r17,r17,8
   348b4:	003faa06 	br	34760 <__sfvwrite_r+0x84>
   348b8:	0036c180 	call	36c18 <_realloc_r>
   348bc:	102f883a 	mov	r23,r2
   348c0:	10009f1e 	bne	r2,zero,34b40 <__sfvwrite_r+0x464>
   348c4:	81400417 	ldw	r5,16(r16)
   348c8:	a809883a 	mov	r4,r21
   348cc:	003440c0 	call	3440c <_free_r>
   348d0:	00800304 	movi	r2,12
   348d4:	a8800015 	stw	r2,0(r21)
   348d8:	80c0030b 	ldhu	r3,12(r16)
   348dc:	00bfffc4 	movi	r2,-1
   348e0:	18c01014 	ori	r3,r3,64
   348e4:	80c0030d 	sth	r3,12(r16)
   348e8:	003fae06 	br	347a4 <__sfvwrite_r+0xc8>
   348ec:	0007883a 	mov	r3,zero
   348f0:	0039883a 	mov	fp,zero
   348f4:	0025883a 	mov	r18,zero
   348f8:	90001e26 	beq	r18,zero,34974 <__sfvwrite_r+0x298>
   348fc:	18006526 	beq	r3,zero,34a94 <__sfvwrite_r+0x3b8>
   34900:	b02f883a 	mov	r23,r22
   34904:	9580012e 	bgeu	r18,r22,3490c <__sfvwrite_r+0x230>
   34908:	902f883a 	mov	r23,r18
   3490c:	81000017 	ldw	r4,0(r16)
   34910:	80800417 	ldw	r2,16(r16)
   34914:	84c00217 	ldw	r19,8(r16)
   34918:	81c00517 	ldw	r7,20(r16)
   3491c:	1100022e 	bgeu	r2,r4,34928 <__sfvwrite_r+0x24c>
   34920:	99e7883a 	add	r19,r19,r7
   34924:	9dc01816 	blt	r19,r23,34988 <__sfvwrite_r+0x2ac>
   34928:	b9c03b16 	blt	r23,r7,34a18 <__sfvwrite_r+0x33c>
   3492c:	80800917 	ldw	r2,36(r16)
   34930:	81400717 	ldw	r5,28(r16)
   34934:	a809883a 	mov	r4,r21
   34938:	d8c00015 	stw	r3,0(sp)
   3493c:	e00d883a 	mov	r6,fp
   34940:	103ee83a 	callr	r2
   34944:	1027883a 	mov	r19,r2
   34948:	d8c00017 	ldw	r3,0(sp)
   3494c:	00bfe20e 	bge	zero,r2,348d8 <__sfvwrite_r+0x1fc>
   34950:	b4edc83a 	sub	r22,r22,r19
   34954:	b0001a26 	beq	r22,zero,349c0 <__sfvwrite_r+0x2e4>
   34958:	a0800217 	ldw	r2,8(r20)
   3495c:	e4f9883a 	add	fp,fp,r19
   34960:	94e5c83a 	sub	r18,r18,r19
   34964:	14e7c83a 	sub	r19,r2,r19
   34968:	a4c00215 	stw	r19,8(r20)
   3496c:	983f8c26 	beq	r19,zero,347a0 <__sfvwrite_r+0xc4>
   34970:	903fe21e 	bne	r18,zero,348fc <__sfvwrite_r+0x220>
   34974:	8f000017 	ldw	fp,0(r17)
   34978:	8c800117 	ldw	r18,4(r17)
   3497c:	0007883a 	mov	r3,zero
   34980:	8c400204 	addi	r17,r17,8
   34984:	003fdc06 	br	348f8 <__sfvwrite_r+0x21c>
   34988:	e00b883a 	mov	r5,fp
   3498c:	980d883a 	mov	r6,r19
   34990:	d8c00015 	stw	r3,0(sp)
   34994:	00359600 	call	35960 <memmove>
   34998:	80800017 	ldw	r2,0(r16)
   3499c:	a809883a 	mov	r4,r21
   349a0:	800b883a 	mov	r5,r16
   349a4:	14c5883a 	add	r2,r2,r19
   349a8:	80800015 	stw	r2,0(r16)
   349ac:	0033dcc0 	call	33dcc <_fflush_r>
   349b0:	d8c00017 	ldw	r3,0(sp)
   349b4:	103fc81e 	bne	r2,zero,348d8 <__sfvwrite_r+0x1fc>
   349b8:	b4edc83a 	sub	r22,r22,r19
   349bc:	b03fe61e 	bne	r22,zero,34958 <__sfvwrite_r+0x27c>
   349c0:	a809883a 	mov	r4,r21
   349c4:	800b883a 	mov	r5,r16
   349c8:	0033dcc0 	call	33dcc <_fflush_r>
   349cc:	103fc21e 	bne	r2,zero,348d8 <__sfvwrite_r+0x1fc>
   349d0:	0007883a 	mov	r3,zero
   349d4:	003fe006 	br	34958 <__sfvwrite_r+0x27c>
   349d8:	81000017 	ldw	r4,0(r16)
   349dc:	80800417 	ldw	r2,16(r16)
   349e0:	1100022e 	bgeu	r2,r4,349ec <__sfvwrite_r+0x310>
   349e4:	9839883a 	mov	fp,r19
   349e8:	9c806036 	bltu	r19,r18,34b6c <__sfvwrite_r+0x490>
   349ec:	81c00517 	ldw	r7,20(r16)
   349f0:	91c01c36 	bltu	r18,r7,34a64 <__sfvwrite_r+0x388>
   349f4:	80800917 	ldw	r2,36(r16)
   349f8:	81400717 	ldw	r5,28(r16)
   349fc:	a809883a 	mov	r4,r21
   34a00:	b00d883a 	mov	r6,r22
   34a04:	103ee83a 	callr	r2
   34a08:	1027883a 	mov	r19,r2
   34a0c:	00bfb20e 	bge	zero,r2,348d8 <__sfvwrite_r+0x1fc>
   34a10:	1039883a 	mov	fp,r2
   34a14:	003f9806 	br	34878 <__sfvwrite_r+0x19c>
   34a18:	b80d883a 	mov	r6,r23
   34a1c:	e00b883a 	mov	r5,fp
   34a20:	d8c00015 	stw	r3,0(sp)
   34a24:	00359600 	call	35960 <memmove>
   34a28:	80800217 	ldw	r2,8(r16)
   34a2c:	81000017 	ldw	r4,0(r16)
   34a30:	b827883a 	mov	r19,r23
   34a34:	15c5c83a 	sub	r2,r2,r23
   34a38:	25ef883a 	add	r23,r4,r23
   34a3c:	80800215 	stw	r2,8(r16)
   34a40:	85c00015 	stw	r23,0(r16)
   34a44:	d8c00017 	ldw	r3,0(sp)
   34a48:	003fc106 	br	34950 <__sfvwrite_r+0x274>
   34a4c:	81000017 	ldw	r4,0(r16)
   34a50:	902f883a 	mov	r23,r18
   34a54:	9039883a 	mov	fp,r18
   34a58:	9027883a 	mov	r19,r18
   34a5c:	900f883a 	mov	r7,r18
   34a60:	003f7a06 	br	3484c <__sfvwrite_r+0x170>
   34a64:	b00b883a 	mov	r5,r22
   34a68:	900d883a 	mov	r6,r18
   34a6c:	00359600 	call	35960 <memmove>
   34a70:	80c00217 	ldw	r3,8(r16)
   34a74:	80800017 	ldw	r2,0(r16)
   34a78:	9027883a 	mov	r19,r18
   34a7c:	1c87c83a 	sub	r3,r3,r18
   34a80:	1485883a 	add	r2,r2,r18
   34a84:	80c00215 	stw	r3,8(r16)
   34a88:	80800015 	stw	r2,0(r16)
   34a8c:	9039883a 	mov	fp,r18
   34a90:	003f7906 	br	34878 <__sfvwrite_r+0x19c>
   34a94:	e009883a 	mov	r4,fp
   34a98:	01400284 	movi	r5,10
   34a9c:	900d883a 	mov	r6,r18
   34aa0:	00357280 	call	35728 <memchr>
   34aa4:	10003c26 	beq	r2,zero,34b98 <__sfvwrite_r+0x4bc>
   34aa8:	15800044 	addi	r22,r2,1
   34aac:	b72dc83a 	sub	r22,r22,fp
   34ab0:	00c00044 	movi	r3,1
   34ab4:	003f9206 	br	34900 <__sfvwrite_r+0x224>
   34ab8:	81000517 	ldw	r4,20(r16)
   34abc:	81400417 	ldw	r5,16(r16)
   34ac0:	80c00017 	ldw	r3,0(r16)
   34ac4:	210d883a 	add	r6,r4,r4
   34ac8:	3109883a 	add	r4,r6,r4
   34acc:	2026d7fa 	srli	r19,r4,31
   34ad0:	1979c83a 	sub	fp,r3,r5
   34ad4:	e1800044 	addi	r6,fp,1
   34ad8:	9909883a 	add	r4,r19,r4
   34adc:	2027d07a 	srai	r19,r4,1
   34ae0:	3489883a 	add	r4,r6,r18
   34ae4:	980d883a 	mov	r6,r19
   34ae8:	9900022e 	bgeu	r19,r4,34af4 <__sfvwrite_r+0x418>
   34aec:	2027883a 	mov	r19,r4
   34af0:	200d883a 	mov	r6,r4
   34af4:	1081000c 	andi	r2,r2,1024
   34af8:	10bfffcc 	andi	r2,r2,65535
   34afc:	10a0001c 	xori	r2,r2,32768
   34b00:	10a00004 	addi	r2,r2,-32768
   34b04:	a809883a 	mov	r4,r21
   34b08:	103f6b26 	beq	r2,zero,348b8 <__sfvwrite_r+0x1dc>
   34b0c:	300b883a 	mov	r5,r6
   34b10:	0034fa40 	call	34fa4 <_malloc_r>
   34b14:	102f883a 	mov	r23,r2
   34b18:	103f6d26 	beq	r2,zero,348d0 <__sfvwrite_r+0x1f4>
   34b1c:	81400417 	ldw	r5,16(r16)
   34b20:	1009883a 	mov	r4,r2
   34b24:	e00d883a 	mov	r6,fp
   34b28:	00358200 	call	35820 <memcpy>
   34b2c:	8080030b 	ldhu	r2,12(r16)
   34b30:	00fedfc4 	movi	r3,-1153
   34b34:	10c4703a 	and	r2,r2,r3
   34b38:	10802014 	ori	r2,r2,128
   34b3c:	8080030d 	sth	r2,12(r16)
   34b40:	bf09883a 	add	r4,r23,fp
   34b44:	9f07c83a 	sub	r3,r19,fp
   34b48:	85c00415 	stw	r23,16(r16)
   34b4c:	84c00515 	stw	r19,20(r16)
   34b50:	81000015 	stw	r4,0(r16)
   34b54:	902f883a 	mov	r23,r18
   34b58:	80c00215 	stw	r3,8(r16)
   34b5c:	9039883a 	mov	fp,r18
   34b60:	9027883a 	mov	r19,r18
   34b64:	900f883a 	mov	r7,r18
   34b68:	003f3806 	br	3484c <__sfvwrite_r+0x170>
   34b6c:	b00b883a 	mov	r5,r22
   34b70:	980d883a 	mov	r6,r19
   34b74:	00359600 	call	35960 <memmove>
   34b78:	80800017 	ldw	r2,0(r16)
   34b7c:	a809883a 	mov	r4,r21
   34b80:	800b883a 	mov	r5,r16
   34b84:	14c5883a 	add	r2,r2,r19
   34b88:	80800015 	stw	r2,0(r16)
   34b8c:	0033dcc0 	call	33dcc <_fflush_r>
   34b90:	103f3926 	beq	r2,zero,34878 <__sfvwrite_r+0x19c>
   34b94:	003f5006 	br	348d8 <__sfvwrite_r+0x1fc>
   34b98:	95800044 	addi	r22,r18,1
   34b9c:	00c00044 	movi	r3,1
   34ba0:	003f5706 	br	34900 <__sfvwrite_r+0x224>
   34ba4:	80c0030b 	ldhu	r3,12(r16)
   34ba8:	00bfffc4 	movi	r2,-1
   34bac:	18c01014 	ori	r3,r3,64
   34bb0:	80c0030d 	sth	r3,12(r16)
   34bb4:	00c00244 	movi	r3,9
   34bb8:	a8c00015 	stw	r3,0(r21)
   34bbc:	003ef906 	br	347a4 <__sfvwrite_r+0xc8>

00034bc0 <_fwalk>:
   34bc0:	defff904 	addi	sp,sp,-28
   34bc4:	dcc00315 	stw	r19,12(sp)
   34bc8:	24c0b804 	addi	r19,r4,736
   34bcc:	dd400515 	stw	r21,20(sp)
   34bd0:	dd000415 	stw	r20,16(sp)
   34bd4:	dfc00615 	stw	ra,24(sp)
   34bd8:	dc800215 	stw	r18,8(sp)
   34bdc:	dc400115 	stw	r17,4(sp)
   34be0:	dc000015 	stw	r16,0(sp)
   34be4:	282b883a 	mov	r21,r5
   34be8:	0029883a 	mov	r20,zero
   34bec:	00342900 	call	34290 <__sfp_lock_acquire>
   34bf0:	98001226 	beq	r19,zero,34c3c <_fwalk+0x7c>
   34bf4:	04bfffc4 	movi	r18,-1
   34bf8:	9c400117 	ldw	r17,4(r19)
   34bfc:	9c000217 	ldw	r16,8(r19)
   34c00:	8c7fffc4 	addi	r17,r17,-1
   34c04:	88000b16 	blt	r17,zero,34c34 <_fwalk+0x74>
   34c08:	84000304 	addi	r16,r16,12
   34c0c:	80c0000f 	ldh	r3,0(r16)
   34c10:	8c7fffc4 	addi	r17,r17,-1
   34c14:	813ffd04 	addi	r4,r16,-12
   34c18:	18000426 	beq	r3,zero,34c2c <_fwalk+0x6c>
   34c1c:	80c0008f 	ldh	r3,2(r16)
   34c20:	1c800226 	beq	r3,r18,34c2c <_fwalk+0x6c>
   34c24:	a83ee83a 	callr	r21
   34c28:	a0a8b03a 	or	r20,r20,r2
   34c2c:	84001704 	addi	r16,r16,92
   34c30:	8cbff61e 	bne	r17,r18,34c0c <_fwalk+0x4c>
   34c34:	9cc00017 	ldw	r19,0(r19)
   34c38:	983fef1e 	bne	r19,zero,34bf8 <_fwalk+0x38>
   34c3c:	00342940 	call	34294 <__sfp_lock_release>
   34c40:	a005883a 	mov	r2,r20
   34c44:	dfc00617 	ldw	ra,24(sp)
   34c48:	dd400517 	ldw	r21,20(sp)
   34c4c:	dd000417 	ldw	r20,16(sp)
   34c50:	dcc00317 	ldw	r19,12(sp)
   34c54:	dc800217 	ldw	r18,8(sp)
   34c58:	dc400117 	ldw	r17,4(sp)
   34c5c:	dc000017 	ldw	r16,0(sp)
   34c60:	dec00704 	addi	sp,sp,28
   34c64:	f800283a 	ret

00034c68 <_fwalk_reent>:
   34c68:	defff804 	addi	sp,sp,-32
   34c6c:	dcc00315 	stw	r19,12(sp)
   34c70:	24c0b804 	addi	r19,r4,736
   34c74:	dd800615 	stw	r22,24(sp)
   34c78:	dd400515 	stw	r21,20(sp)
   34c7c:	dd000415 	stw	r20,16(sp)
   34c80:	dfc00715 	stw	ra,28(sp)
   34c84:	dc800215 	stw	r18,8(sp)
   34c88:	dc400115 	stw	r17,4(sp)
   34c8c:	dc000015 	stw	r16,0(sp)
   34c90:	2029883a 	mov	r20,r4
   34c94:	282b883a 	mov	r21,r5
   34c98:	002d883a 	mov	r22,zero
   34c9c:	00342900 	call	34290 <__sfp_lock_acquire>
   34ca0:	98001326 	beq	r19,zero,34cf0 <_fwalk_reent+0x88>
   34ca4:	04bfffc4 	movi	r18,-1
   34ca8:	9c400117 	ldw	r17,4(r19)
   34cac:	9c000217 	ldw	r16,8(r19)
   34cb0:	8c7fffc4 	addi	r17,r17,-1
   34cb4:	88000c16 	blt	r17,zero,34ce8 <_fwalk_reent+0x80>
   34cb8:	84000304 	addi	r16,r16,12
   34cbc:	80c0000f 	ldh	r3,0(r16)
   34cc0:	8c7fffc4 	addi	r17,r17,-1
   34cc4:	817ffd04 	addi	r5,r16,-12
   34cc8:	18000526 	beq	r3,zero,34ce0 <_fwalk_reent+0x78>
   34ccc:	80c0008f 	ldh	r3,2(r16)
   34cd0:	a009883a 	mov	r4,r20
   34cd4:	1c800226 	beq	r3,r18,34ce0 <_fwalk_reent+0x78>
   34cd8:	a83ee83a 	callr	r21
   34cdc:	b0acb03a 	or	r22,r22,r2
   34ce0:	84001704 	addi	r16,r16,92
   34ce4:	8cbff51e 	bne	r17,r18,34cbc <_fwalk_reent+0x54>
   34ce8:	9cc00017 	ldw	r19,0(r19)
   34cec:	983fee1e 	bne	r19,zero,34ca8 <_fwalk_reent+0x40>
   34cf0:	00342940 	call	34294 <__sfp_lock_release>
   34cf4:	b005883a 	mov	r2,r22
   34cf8:	dfc00717 	ldw	ra,28(sp)
   34cfc:	dd800617 	ldw	r22,24(sp)
   34d00:	dd400517 	ldw	r21,20(sp)
   34d04:	dd000417 	ldw	r20,16(sp)
   34d08:	dcc00317 	ldw	r19,12(sp)
   34d0c:	dc800217 	ldw	r18,8(sp)
   34d10:	dc400117 	ldw	r17,4(sp)
   34d14:	dc000017 	ldw	r16,0(sp)
   34d18:	dec00804 	addi	sp,sp,32
   34d1c:	f800283a 	ret

00034d20 <_setlocale_r>:
   34d20:	defffc04 	addi	sp,sp,-16
   34d24:	dc800215 	stw	r18,8(sp)
   34d28:	dc400115 	stw	r17,4(sp)
   34d2c:	dc000015 	stw	r16,0(sp)
   34d30:	dfc00315 	stw	ra,12(sp)
   34d34:	3021883a 	mov	r16,r6
   34d38:	2023883a 	mov	r17,r4
   34d3c:	2825883a 	mov	r18,r5
   34d40:	30001626 	beq	r6,zero,34d9c <_setlocale_r+0x7c>
   34d44:	3009883a 	mov	r4,r6
   34d48:	01400034 	movhi	r5,0
   34d4c:	29403104 	addi	r5,r5,196
   34d50:	003741c0 	call	3741c <strcmp>
   34d54:	10000a1e 	bne	r2,zero,34d80 <_setlocale_r+0x60>
   34d58:	8c800c15 	stw	r18,48(r17)
   34d5c:	8c000d15 	stw	r16,52(r17)
   34d60:	00800034 	movhi	r2,0
   34d64:	10803104 	addi	r2,r2,196
   34d68:	dfc00317 	ldw	ra,12(sp)
   34d6c:	dc800217 	ldw	r18,8(sp)
   34d70:	dc400117 	ldw	r17,4(sp)
   34d74:	dc000017 	ldw	r16,0(sp)
   34d78:	dec00404 	addi	sp,sp,16
   34d7c:	f800283a 	ret
   34d80:	8009883a 	mov	r4,r16
   34d84:	01400034 	movhi	r5,0
   34d88:	29401c04 	addi	r5,r5,112
   34d8c:	003741c0 	call	3741c <strcmp>
   34d90:	103ff126 	beq	r2,zero,34d58 <_setlocale_r+0x38>
   34d94:	0005883a 	mov	r2,zero
   34d98:	003ff306 	br	34d68 <_setlocale_r+0x48>
   34d9c:	00800034 	movhi	r2,0
   34da0:	10803104 	addi	r2,r2,196
   34da4:	dfc00317 	ldw	ra,12(sp)
   34da8:	dc800217 	ldw	r18,8(sp)
   34dac:	dc400117 	ldw	r17,4(sp)
   34db0:	dc000017 	ldw	r16,0(sp)
   34db4:	dec00404 	addi	sp,sp,16
   34db8:	f800283a 	ret

00034dbc <__locale_charset>:
   34dbc:	00800034 	movhi	r2,0
   34dc0:	10803204 	addi	r2,r2,200
   34dc4:	f800283a 	ret

00034dc8 <_localeconv_r>:
   34dc8:	00800034 	movhi	r2,0
   34dcc:	10803604 	addi	r2,r2,216
   34dd0:	f800283a 	ret

00034dd4 <setlocale>:
   34dd4:	00c00034 	movhi	r3,0
   34dd8:	18c76304 	addi	r3,r3,7564
   34ddc:	2005883a 	mov	r2,r4
   34de0:	19000017 	ldw	r4,0(r3)
   34de4:	280d883a 	mov	r6,r5
   34de8:	100b883a 	mov	r5,r2
   34dec:	0034d201 	jmpi	34d20 <_setlocale_r>

00034df0 <localeconv>:
   34df0:	00800034 	movhi	r2,0
   34df4:	10803604 	addi	r2,r2,216
   34df8:	f800283a 	ret

00034dfc <__smakebuf_r>:
   34dfc:	2880030b 	ldhu	r2,12(r5)
   34e00:	deffed04 	addi	sp,sp,-76
   34e04:	dc401015 	stw	r17,64(sp)
   34e08:	10c0008c 	andi	r3,r2,2
   34e0c:	18ffffcc 	andi	r3,r3,65535
   34e10:	18e0001c 	xori	r3,r3,32768
   34e14:	dc000f15 	stw	r16,60(sp)
   34e18:	dfc01215 	stw	ra,72(sp)
   34e1c:	dc801115 	stw	r18,68(sp)
   34e20:	18e00004 	addi	r3,r3,-32768
   34e24:	2821883a 	mov	r16,r5
   34e28:	2023883a 	mov	r17,r4
   34e2c:	1800381e 	bne	r3,zero,34f10 <__smakebuf_r+0x114>
   34e30:	2940038f 	ldh	r5,14(r5)
   34e34:	28002d16 	blt	r5,zero,34eec <__smakebuf_r+0xf0>
   34e38:	d80d883a 	mov	r6,sp
   34e3c:	00377ac0 	call	377ac <_fstat_r>
   34e40:	10002916 	blt	r2,zero,34ee8 <__smakebuf_r+0xec>
   34e44:	d8800117 	ldw	r2,4(sp)
   34e48:	00e00014 	movui	r3,32768
   34e4c:	10bc000c 	andi	r2,r2,61440
   34e50:	10c03c26 	beq	r2,r3,34f44 <__smakebuf_r+0x148>
   34e54:	80c0030b 	ldhu	r3,12(r16)
   34e58:	18c20014 	ori	r3,r3,2048
   34e5c:	80c0030d 	sth	r3,12(r16)
   34e60:	00c80004 	movi	r3,8192
   34e64:	10c00c1e 	bne	r2,r3,34e98 <__smakebuf_r+0x9c>
   34e68:	8140038f 	ldh	r5,14(r16)
   34e6c:	8809883a 	mov	r4,r17
   34e70:	00378140 	call	37814 <_isatty_r>
   34e74:	10000826 	beq	r2,zero,34e98 <__smakebuf_r+0x9c>
   34e78:	80c0030b 	ldhu	r3,12(r16)
   34e7c:	808010c4 	addi	r2,r16,67
   34e80:	80800015 	stw	r2,0(r16)
   34e84:	18c00054 	ori	r3,r3,1
   34e88:	80800415 	stw	r2,16(r16)
   34e8c:	00800044 	movi	r2,1
   34e90:	80c0030d 	sth	r3,12(r16)
   34e94:	80800515 	stw	r2,20(r16)
   34e98:	04810004 	movi	r18,1024
   34e9c:	8809883a 	mov	r4,r17
   34ea0:	900b883a 	mov	r5,r18
   34ea4:	0034fa40 	call	34fa4 <_malloc_r>
   34ea8:	10003026 	beq	r2,zero,34f6c <__smakebuf_r+0x170>
   34eac:	80c0030b 	ldhu	r3,12(r16)
   34eb0:	010000f4 	movhi	r4,3
   34eb4:	210ffd04 	addi	r4,r4,16372
   34eb8:	89000f15 	stw	r4,60(r17)
   34ebc:	18c02014 	ori	r3,r3,128
   34ec0:	80c0030d 	sth	r3,12(r16)
   34ec4:	80800015 	stw	r2,0(r16)
   34ec8:	80800415 	stw	r2,16(r16)
   34ecc:	84800515 	stw	r18,20(r16)
   34ed0:	dfc01217 	ldw	ra,72(sp)
   34ed4:	dc801117 	ldw	r18,68(sp)
   34ed8:	dc401017 	ldw	r17,64(sp)
   34edc:	dc000f17 	ldw	r16,60(sp)
   34ee0:	dec01304 	addi	sp,sp,76
   34ee4:	f800283a 	ret
   34ee8:	8080030b 	ldhu	r2,12(r16)
   34eec:	10c0200c 	andi	r3,r2,128
   34ef0:	18ffffcc 	andi	r3,r3,65535
   34ef4:	18e0001c 	xori	r3,r3,32768
   34ef8:	18e00004 	addi	r3,r3,-32768
   34efc:	18000f1e 	bne	r3,zero,34f3c <__smakebuf_r+0x140>
   34f00:	04810004 	movi	r18,1024
   34f04:	10820014 	ori	r2,r2,2048
   34f08:	8080030d 	sth	r2,12(r16)
   34f0c:	003fe306 	br	34e9c <__smakebuf_r+0xa0>
   34f10:	288010c4 	addi	r2,r5,67
   34f14:	28800015 	stw	r2,0(r5)
   34f18:	28800415 	stw	r2,16(r5)
   34f1c:	00800044 	movi	r2,1
   34f20:	28800515 	stw	r2,20(r5)
   34f24:	dfc01217 	ldw	ra,72(sp)
   34f28:	dc801117 	ldw	r18,68(sp)
   34f2c:	dc401017 	ldw	r17,64(sp)
   34f30:	dc000f17 	ldw	r16,60(sp)
   34f34:	dec01304 	addi	sp,sp,76
   34f38:	f800283a 	ret
   34f3c:	04801004 	movi	r18,64
   34f40:	003ff006 	br	34f04 <__smakebuf_r+0x108>
   34f44:	81000a17 	ldw	r4,40(r16)
   34f48:	00c000f4 	movhi	r3,3
   34f4c:	18dcee04 	addi	r3,r3,29624
   34f50:	20ffc01e 	bne	r4,r3,34e54 <__smakebuf_r+0x58>
   34f54:	8080030b 	ldhu	r2,12(r16)
   34f58:	00c10004 	movi	r3,1024
   34f5c:	80c01315 	stw	r3,76(r16)
   34f60:	10c4b03a 	or	r2,r2,r3
   34f64:	8080030d 	sth	r2,12(r16)
   34f68:	003fcb06 	br	34e98 <__smakebuf_r+0x9c>
   34f6c:	8080030b 	ldhu	r2,12(r16)
   34f70:	10c0800c 	andi	r3,r2,512
   34f74:	18ffffcc 	andi	r3,r3,65535
   34f78:	18e0001c 	xori	r3,r3,32768
   34f7c:	18e00004 	addi	r3,r3,-32768
   34f80:	183fd31e 	bne	r3,zero,34ed0 <__smakebuf_r+0xd4>
   34f84:	10800094 	ori	r2,r2,2
   34f88:	80c010c4 	addi	r3,r16,67
   34f8c:	8080030d 	sth	r2,12(r16)
   34f90:	00800044 	movi	r2,1
   34f94:	80c00015 	stw	r3,0(r16)
   34f98:	80c00415 	stw	r3,16(r16)
   34f9c:	80800515 	stw	r2,20(r16)
   34fa0:	003fcb06 	br	34ed0 <__smakebuf_r+0xd4>

00034fa4 <_malloc_r>:
   34fa4:	defff604 	addi	sp,sp,-40
   34fa8:	dc800215 	stw	r18,8(sp)
   34fac:	dfc00915 	stw	ra,36(sp)
   34fb0:	df000815 	stw	fp,32(sp)
   34fb4:	ddc00715 	stw	r23,28(sp)
   34fb8:	dd800615 	stw	r22,24(sp)
   34fbc:	dd400515 	stw	r21,20(sp)
   34fc0:	dd000415 	stw	r20,16(sp)
   34fc4:	dcc00315 	stw	r19,12(sp)
   34fc8:	dc400115 	stw	r17,4(sp)
   34fcc:	dc000015 	stw	r16,0(sp)
   34fd0:	288002c4 	addi	r2,r5,11
   34fd4:	00c00584 	movi	r3,22
   34fd8:	2025883a 	mov	r18,r4
   34fdc:	18802b2e 	bgeu	r3,r2,3508c <_malloc_r+0xe8>
   34fe0:	047ffe04 	movi	r17,-8
   34fe4:	1462703a 	and	r17,r2,r17
   34fe8:	88002a16 	blt	r17,zero,35094 <_malloc_r+0xf0>
   34fec:	89402936 	bltu	r17,r5,35094 <_malloc_r+0xf0>
   34ff0:	9009883a 	mov	r4,r18
   34ff4:	003a0600 	call	3a060 <__malloc_lock>
   34ff8:	00807dc4 	movi	r2,503
   34ffc:	14402936 	bltu	r2,r17,350a4 <_malloc_r+0x100>
   35000:	8808d0fa 	srli	r4,r17,3
   35004:	04c00034 	movhi	r19,0
   35008:	9cc1de04 	addi	r19,r19,1912
   3500c:	2105883a 	add	r2,r4,r4
   35010:	1085883a 	add	r2,r2,r2
   35014:	1085883a 	add	r2,r2,r2
   35018:	9885883a 	add	r2,r19,r2
   3501c:	14000317 	ldw	r16,12(r2)
   35020:	80815526 	beq	r16,r2,35578 <_malloc_r+0x5d4>
   35024:	81000117 	ldw	r4,4(r16)
   35028:	00bfff04 	movi	r2,-4
   3502c:	80c00317 	ldw	r3,12(r16)
   35030:	2084703a 	and	r2,r4,r2
   35034:	8085883a 	add	r2,r16,r2
   35038:	11800117 	ldw	r6,4(r2)
   3503c:	81400217 	ldw	r5,8(r16)
   35040:	9009883a 	mov	r4,r18
   35044:	31800054 	ori	r6,r6,1
   35048:	11800115 	stw	r6,4(r2)
   3504c:	28c00315 	stw	r3,12(r5)
   35050:	19400215 	stw	r5,8(r3)
   35054:	003a0800 	call	3a080 <__malloc_unlock>
   35058:	80800204 	addi	r2,r16,8
   3505c:	dfc00917 	ldw	ra,36(sp)
   35060:	df000817 	ldw	fp,32(sp)
   35064:	ddc00717 	ldw	r23,28(sp)
   35068:	dd800617 	ldw	r22,24(sp)
   3506c:	dd400517 	ldw	r21,20(sp)
   35070:	dd000417 	ldw	r20,16(sp)
   35074:	dcc00317 	ldw	r19,12(sp)
   35078:	dc800217 	ldw	r18,8(sp)
   3507c:	dc400117 	ldw	r17,4(sp)
   35080:	dc000017 	ldw	r16,0(sp)
   35084:	dec00a04 	addi	sp,sp,40
   35088:	f800283a 	ret
   3508c:	04400404 	movi	r17,16
   35090:	897fd72e 	bgeu	r17,r5,34ff0 <_malloc_r+0x4c>
   35094:	00800304 	movi	r2,12
   35098:	90800015 	stw	r2,0(r18)
   3509c:	0005883a 	mov	r2,zero
   350a0:	003fee06 	br	3505c <_malloc_r+0xb8>
   350a4:	8808d27a 	srli	r4,r17,9
   350a8:	20007126 	beq	r4,zero,35270 <_malloc_r+0x2cc>
   350ac:	00800104 	movi	r2,4
   350b0:	1100eb36 	bltu	r2,r4,35460 <_malloc_r+0x4bc>
   350b4:	8808d1ba 	srli	r4,r17,6
   350b8:	21000e04 	addi	r4,r4,56
   350bc:	210b883a 	add	r5,r4,r4
   350c0:	294b883a 	add	r5,r5,r5
   350c4:	294b883a 	add	r5,r5,r5
   350c8:	04c00034 	movhi	r19,0
   350cc:	9cc1de04 	addi	r19,r19,1912
   350d0:	994b883a 	add	r5,r19,r5
   350d4:	2c000317 	ldw	r16,12(r5)
   350d8:	2c000e26 	beq	r5,r16,35114 <_malloc_r+0x170>
   350dc:	80c00117 	ldw	r3,4(r16)
   350e0:	01ffff04 	movi	r7,-4
   350e4:	018003c4 	movi	r6,15
   350e8:	19c6703a 	and	r3,r3,r7
   350ec:	1c45c83a 	sub	r2,r3,r17
   350f0:	30800716 	blt	r6,r2,35110 <_malloc_r+0x16c>
   350f4:	1000610e 	bge	r2,zero,3527c <_malloc_r+0x2d8>
   350f8:	84000317 	ldw	r16,12(r16)
   350fc:	2c000526 	beq	r5,r16,35114 <_malloc_r+0x170>
   35100:	80c00117 	ldw	r3,4(r16)
   35104:	19c6703a 	and	r3,r3,r7
   35108:	1c45c83a 	sub	r2,r3,r17
   3510c:	30bff90e 	bge	r6,r2,350f4 <_malloc_r+0x150>
   35110:	213fffc4 	addi	r4,r4,-1
   35114:	21000044 	addi	r4,r4,1
   35118:	9c000417 	ldw	r16,16(r19)
   3511c:	00c00034 	movhi	r3,0
   35120:	18c1de04 	addi	r3,r3,1912
   35124:	1a400204 	addi	r9,r3,8
   35128:	8240ff26 	beq	r16,r9,35528 <_malloc_r+0x584>
   3512c:	81400117 	ldw	r5,4(r16)
   35130:	00bfff04 	movi	r2,-4
   35134:	018003c4 	movi	r6,15
   35138:	2884703a 	and	r2,r5,r2
   3513c:	144bc83a 	sub	r5,r2,r17
   35140:	3140ea16 	blt	r6,r5,354ec <_malloc_r+0x548>
   35144:	1a400515 	stw	r9,20(r3)
   35148:	1a400415 	stw	r9,16(r3)
   3514c:	2800570e 	bge	r5,zero,352ac <_malloc_r+0x308>
   35150:	01407fc4 	movi	r5,511
   35154:	2880ca36 	bltu	r5,r2,35480 <_malloc_r+0x4dc>
   35158:	1004d0fa 	srli	r2,r2,3
   3515c:	02000044 	movi	r8,1
   35160:	19c00117 	ldw	r7,4(r3)
   35164:	108b883a 	add	r5,r2,r2
   35168:	294b883a 	add	r5,r5,r5
   3516c:	1005d0ba 	srai	r2,r2,2
   35170:	294b883a 	add	r5,r5,r5
   35174:	28cb883a 	add	r5,r5,r3
   35178:	29800217 	ldw	r6,8(r5)
   3517c:	4084983a 	sll	r2,r8,r2
   35180:	81400315 	stw	r5,12(r16)
   35184:	81800215 	stw	r6,8(r16)
   35188:	11c4b03a 	or	r2,r2,r7
   3518c:	18800115 	stw	r2,4(r3)
   35190:	2c000215 	stw	r16,8(r5)
   35194:	34000315 	stw	r16,12(r6)
   35198:	200bd0ba 	srai	r5,r4,2
   3519c:	00c00044 	movi	r3,1
   351a0:	194a983a 	sll	r5,r3,r5
   351a4:	11404936 	bltu	r2,r5,352cc <_malloc_r+0x328>
   351a8:	1146703a 	and	r3,r2,r5
   351ac:	18000a1e 	bne	r3,zero,351d8 <_malloc_r+0x234>
   351b0:	00ffff04 	movi	r3,-4
   351b4:	294b883a 	add	r5,r5,r5
   351b8:	20c8703a 	and	r4,r4,r3
   351bc:	1146703a 	and	r3,r2,r5
   351c0:	21000104 	addi	r4,r4,4
   351c4:	1800041e 	bne	r3,zero,351d8 <_malloc_r+0x234>
   351c8:	294b883a 	add	r5,r5,r5
   351cc:	1146703a 	and	r3,r2,r5
   351d0:	21000104 	addi	r4,r4,4
   351d4:	183ffc26 	beq	r3,zero,351c8 <_malloc_r+0x224>
   351d8:	023fff04 	movi	r8,-4
   351dc:	01c003c4 	movi	r7,15
   351e0:	2105883a 	add	r2,r4,r4
   351e4:	1085883a 	add	r2,r2,r2
   351e8:	1085883a 	add	r2,r2,r2
   351ec:	9899883a 	add	r12,r19,r2
   351f0:	62800304 	addi	r10,r12,12
   351f4:	2017883a 	mov	r11,r4
   351f8:	54000017 	ldw	r16,0(r10)
   351fc:	51bffd04 	addi	r6,r10,-12
   35200:	8180041e 	bne	r16,r6,35214 <_malloc_r+0x270>
   35204:	0000ca06 	br	35530 <_malloc_r+0x58c>
   35208:	10001c0e 	bge	r2,zero,3527c <_malloc_r+0x2d8>
   3520c:	84000317 	ldw	r16,12(r16)
   35210:	8180c726 	beq	r16,r6,35530 <_malloc_r+0x58c>
   35214:	80c00117 	ldw	r3,4(r16)
   35218:	1a06703a 	and	r3,r3,r8
   3521c:	1c45c83a 	sub	r2,r3,r17
   35220:	38bff90e 	bge	r7,r2,35208 <_malloc_r+0x264>
   35224:	81000317 	ldw	r4,12(r16)
   35228:	81400217 	ldw	r5,8(r16)
   3522c:	8447883a 	add	r3,r16,r17
   35230:	8c400054 	ori	r17,r17,1
   35234:	29000315 	stw	r4,12(r5)
   35238:	21400215 	stw	r5,8(r4)
   3523c:	84400115 	stw	r17,4(r16)
   35240:	1889883a 	add	r4,r3,r2
   35244:	11400054 	ori	r5,r2,1
   35248:	98c00515 	stw	r3,20(r19)
   3524c:	98c00415 	stw	r3,16(r19)
   35250:	20800015 	stw	r2,0(r4)
   35254:	1a400315 	stw	r9,12(r3)
   35258:	1a400215 	stw	r9,8(r3)
   3525c:	19400115 	stw	r5,4(r3)
   35260:	9009883a 	mov	r4,r18
   35264:	003a0800 	call	3a080 <__malloc_unlock>
   35268:	80800204 	addi	r2,r16,8
   3526c:	003f7b06 	br	3505c <_malloc_r+0xb8>
   35270:	8808d0fa 	srli	r4,r17,3
   35274:	210b883a 	add	r5,r4,r4
   35278:	003f9106 	br	350c0 <_malloc_r+0x11c>
   3527c:	80c7883a 	add	r3,r16,r3
   35280:	19400117 	ldw	r5,4(r3)
   35284:	80800317 	ldw	r2,12(r16)
   35288:	81000217 	ldw	r4,8(r16)
   3528c:	29400054 	ori	r5,r5,1
   35290:	19400115 	stw	r5,4(r3)
   35294:	20800315 	stw	r2,12(r4)
   35298:	11000215 	stw	r4,8(r2)
   3529c:	9009883a 	mov	r4,r18
   352a0:	003a0800 	call	3a080 <__malloc_unlock>
   352a4:	80800204 	addi	r2,r16,8
   352a8:	003f6c06 	br	3505c <_malloc_r+0xb8>
   352ac:	8085883a 	add	r2,r16,r2
   352b0:	10c00117 	ldw	r3,4(r2)
   352b4:	9009883a 	mov	r4,r18
   352b8:	18c00054 	ori	r3,r3,1
   352bc:	10c00115 	stw	r3,4(r2)
   352c0:	003a0800 	call	3a080 <__malloc_unlock>
   352c4:	80800204 	addi	r2,r16,8
   352c8:	003f6406 	br	3505c <_malloc_r+0xb8>
   352cc:	9c000217 	ldw	r16,8(r19)
   352d0:	00bfff04 	movi	r2,-4
   352d4:	85400117 	ldw	r21,4(r16)
   352d8:	a8aa703a 	and	r21,r21,r2
   352dc:	ac400336 	bltu	r21,r17,352ec <_malloc_r+0x348>
   352e0:	ac45c83a 	sub	r2,r21,r17
   352e4:	00c003c4 	movi	r3,15
   352e8:	18805316 	blt	r3,r2,35438 <_malloc_r+0x494>
   352ec:	d5e01417 	ldw	r23,-32688(gp)
   352f0:	d0e00317 	ldw	r3,-32756(gp)
   352f4:	00bfffc4 	movi	r2,-1
   352f8:	8579883a 	add	fp,r16,r21
   352fc:	8def883a 	add	r23,r17,r23
   35300:	1880d226 	beq	r3,r2,3564c <_malloc_r+0x6a8>
   35304:	bdc403c4 	addi	r23,r23,4111
   35308:	00bc0004 	movi	r2,-4096
   3530c:	b8ae703a 	and	r23,r23,r2
   35310:	9009883a 	mov	r4,r18
   35314:	b80b883a 	mov	r5,r23
   35318:	00372780 	call	37278 <_sbrk_r>
   3531c:	1029883a 	mov	r20,r2
   35320:	00bfffc4 	movi	r2,-1
   35324:	a080d126 	beq	r20,r2,3566c <_malloc_r+0x6c8>
   35328:	a7009f36 	bltu	r20,fp,355a8 <_malloc_r+0x604>
   3532c:	05800034 	movhi	r22,0
   35330:	b5877e04 	addi	r22,r22,7672
   35334:	b0800017 	ldw	r2,0(r22)
   35338:	b885883a 	add	r2,r23,r2
   3533c:	b0800015 	stw	r2,0(r22)
   35340:	e500cf26 	beq	fp,r20,35680 <_malloc_r+0x6dc>
   35344:	d1200317 	ldw	r4,-32756(gp)
   35348:	00ffffc4 	movi	r3,-1
   3534c:	20c0e026 	beq	r4,r3,356d0 <_malloc_r+0x72c>
   35350:	a739c83a 	sub	fp,r20,fp
   35354:	1705883a 	add	r2,r2,fp
   35358:	b0800015 	stw	r2,0(r22)
   3535c:	a08001cc 	andi	r2,r20,7
   35360:	1000a526 	beq	r2,zero,355f8 <_malloc_r+0x654>
   35364:	a0a9c83a 	sub	r20,r20,r2
   35368:	00c40204 	movi	r3,4104
   3536c:	a5000204 	addi	r20,r20,8
   35370:	1885c83a 	sub	r2,r3,r2
   35374:	a5c7883a 	add	r3,r20,r23
   35378:	18c3ffcc 	andi	r3,r3,4095
   3537c:	10efc83a 	sub	r23,r2,r3
   35380:	9009883a 	mov	r4,r18
   35384:	b80b883a 	mov	r5,r23
   35388:	00372780 	call	37278 <_sbrk_r>
   3538c:	00ffffc4 	movi	r3,-1
   35390:	10c0cc26 	beq	r2,r3,356c4 <_malloc_r+0x720>
   35394:	1505c83a 	sub	r2,r2,r20
   35398:	b887883a 	add	r3,r23,r2
   3539c:	18c00054 	ori	r3,r3,1
   353a0:	b0800017 	ldw	r2,0(r22)
   353a4:	9d000215 	stw	r20,8(r19)
   353a8:	a0c00115 	stw	r3,4(r20)
   353ac:	b885883a 	add	r2,r23,r2
   353b0:	b0800015 	stw	r2,0(r22)
   353b4:	84c00e26 	beq	r16,r19,353f0 <_malloc_r+0x44c>
   353b8:	00c003c4 	movi	r3,15
   353bc:	1d40902e 	bgeu	r3,r21,35600 <_malloc_r+0x65c>
   353c0:	ad7ffd04 	addi	r21,r21,-12
   353c4:	013ffe04 	movi	r4,-8
   353c8:	a908703a 	and	r4,r21,r4
   353cc:	810b883a 	add	r5,r16,r4
   353d0:	01800144 	movi	r6,5
   353d4:	29800115 	stw	r6,4(r5)
   353d8:	29800215 	stw	r6,8(r5)
   353dc:	81400117 	ldw	r5,4(r16)
   353e0:	2940004c 	andi	r5,r5,1
   353e4:	214ab03a 	or	r5,r4,r5
   353e8:	81400115 	stw	r5,4(r16)
   353ec:	1900ae36 	bltu	r3,r4,356a8 <_malloc_r+0x704>
   353f0:	d0e01317 	ldw	r3,-32692(gp)
   353f4:	1880012e 	bgeu	r3,r2,353fc <_malloc_r+0x458>
   353f8:	d0a01315 	stw	r2,-32692(gp)
   353fc:	d0e01217 	ldw	r3,-32696(gp)
   35400:	9c000217 	ldw	r16,8(r19)
   35404:	1880012e 	bgeu	r3,r2,3540c <_malloc_r+0x468>
   35408:	d0a01215 	stw	r2,-32696(gp)
   3540c:	80c00117 	ldw	r3,4(r16)
   35410:	00bfff04 	movi	r2,-4
   35414:	1886703a 	and	r3,r3,r2
   35418:	1c45c83a 	sub	r2,r3,r17
   3541c:	1c400236 	bltu	r3,r17,35428 <_malloc_r+0x484>
   35420:	00c003c4 	movi	r3,15
   35424:	18800416 	blt	r3,r2,35438 <_malloc_r+0x494>
   35428:	9009883a 	mov	r4,r18
   3542c:	003a0800 	call	3a080 <__malloc_unlock>
   35430:	0005883a 	mov	r2,zero
   35434:	003f0906 	br	3505c <_malloc_r+0xb8>
   35438:	88c00054 	ori	r3,r17,1
   3543c:	10800054 	ori	r2,r2,1
   35440:	80c00115 	stw	r3,4(r16)
   35444:	8463883a 	add	r17,r16,r17
   35448:	88800115 	stw	r2,4(r17)
   3544c:	9009883a 	mov	r4,r18
   35450:	9c400215 	stw	r17,8(r19)
   35454:	003a0800 	call	3a080 <__malloc_unlock>
   35458:	80800204 	addi	r2,r16,8
   3545c:	003eff06 	br	3505c <_malloc_r+0xb8>
   35460:	00800504 	movi	r2,20
   35464:	1100492e 	bgeu	r2,r4,3558c <_malloc_r+0x5e8>
   35468:	00801504 	movi	r2,84
   3546c:	11005c36 	bltu	r2,r4,355e0 <_malloc_r+0x63c>
   35470:	8808d33a 	srli	r4,r17,12
   35474:	21001b84 	addi	r4,r4,110
   35478:	210b883a 	add	r5,r4,r4
   3547c:	003f1006 	br	350c0 <_malloc_r+0x11c>
   35480:	1006d27a 	srli	r3,r2,9
   35484:	01400104 	movi	r5,4
   35488:	28c0432e 	bgeu	r5,r3,35598 <_malloc_r+0x5f4>
   3548c:	01400504 	movi	r5,20
   35490:	28c07036 	bltu	r5,r3,35654 <_malloc_r+0x6b0>
   35494:	194016c4 	addi	r5,r3,91
   35498:	294d883a 	add	r6,r5,r5
   3549c:	318d883a 	add	r6,r6,r6
   354a0:	318d883a 	add	r6,r6,r6
   354a4:	998d883a 	add	r6,r19,r6
   354a8:	30c00217 	ldw	r3,8(r6)
   354ac:	01c00034 	movhi	r7,0
   354b0:	39c1de04 	addi	r7,r7,1912
   354b4:	19805726 	beq	r3,r6,35614 <_malloc_r+0x670>
   354b8:	01ffff04 	movi	r7,-4
   354bc:	19400117 	ldw	r5,4(r3)
   354c0:	29ca703a 	and	r5,r5,r7
   354c4:	1140022e 	bgeu	r2,r5,354d0 <_malloc_r+0x52c>
   354c8:	18c00217 	ldw	r3,8(r3)
   354cc:	30fffb1e 	bne	r6,r3,354bc <_malloc_r+0x518>
   354d0:	19400317 	ldw	r5,12(r3)
   354d4:	98800117 	ldw	r2,4(r19)
   354d8:	81400315 	stw	r5,12(r16)
   354dc:	80c00215 	stw	r3,8(r16)
   354e0:	2c000215 	stw	r16,8(r5)
   354e4:	1c000315 	stw	r16,12(r3)
   354e8:	003f2b06 	br	35198 <_malloc_r+0x1f4>
   354ec:	8445883a 	add	r2,r16,r17
   354f0:	8c400054 	ori	r17,r17,1
   354f4:	18800515 	stw	r2,20(r3)
   354f8:	18800415 	stw	r2,16(r3)
   354fc:	29000054 	ori	r4,r5,1
   35500:	1147883a 	add	r3,r2,r5
   35504:	84400115 	stw	r17,4(r16)
   35508:	11000115 	stw	r4,4(r2)
   3550c:	12400315 	stw	r9,12(r2)
   35510:	12400215 	stw	r9,8(r2)
   35514:	19400015 	stw	r5,0(r3)
   35518:	9009883a 	mov	r4,r18
   3551c:	003a0800 	call	3a080 <__malloc_unlock>
   35520:	80800204 	addi	r2,r16,8
   35524:	003ecd06 	br	3505c <_malloc_r+0xb8>
   35528:	18800117 	ldw	r2,4(r3)
   3552c:	003f1a06 	br	35198 <_malloc_r+0x1f4>
   35530:	5ac00044 	addi	r11,r11,1
   35534:	588000cc 	andi	r2,r11,3
   35538:	52800204 	addi	r10,r10,8
   3553c:	103f2e1e 	bne	r2,zero,351f8 <_malloc_r+0x254>
   35540:	20c000cc 	andi	r3,r4,3
   35544:	60bffe04 	addi	r2,r12,-8
   35548:	18006f26 	beq	r3,zero,35708 <_malloc_r+0x764>
   3554c:	63000017 	ldw	r12,0(r12)
   35550:	213fffc4 	addi	r4,r4,-1
   35554:	60bffa26 	beq	r12,r2,35540 <_malloc_r+0x59c>
   35558:	98800117 	ldw	r2,4(r19)
   3555c:	294b883a 	add	r5,r5,r5
   35560:	117f5a36 	bltu	r2,r5,352cc <_malloc_r+0x328>
   35564:	283f5926 	beq	r5,zero,352cc <_malloc_r+0x328>
   35568:	1146703a 	and	r3,r2,r5
   3556c:	18001626 	beq	r3,zero,355c8 <_malloc_r+0x624>
   35570:	5809883a 	mov	r4,r11
   35574:	003f1a06 	br	351e0 <_malloc_r+0x23c>
   35578:	80800204 	addi	r2,r16,8
   3557c:	84000517 	ldw	r16,20(r16)
   35580:	143ea81e 	bne	r2,r16,35024 <_malloc_r+0x80>
   35584:	21000084 	addi	r4,r4,2
   35588:	003ee306 	br	35118 <_malloc_r+0x174>
   3558c:	210016c4 	addi	r4,r4,91
   35590:	210b883a 	add	r5,r4,r4
   35594:	003eca06 	br	350c0 <_malloc_r+0x11c>
   35598:	100ad1ba 	srli	r5,r2,6
   3559c:	29400e04 	addi	r5,r5,56
   355a0:	294d883a 	add	r6,r5,r5
   355a4:	003fbd06 	br	3549c <_malloc_r+0x4f8>
   355a8:	84ff6026 	beq	r16,r19,3532c <_malloc_r+0x388>
   355ac:	00800034 	movhi	r2,0
   355b0:	1081de04 	addi	r2,r2,1912
   355b4:	14000217 	ldw	r16,8(r2)
   355b8:	00bfff04 	movi	r2,-4
   355bc:	80c00117 	ldw	r3,4(r16)
   355c0:	1886703a 	and	r3,r3,r2
   355c4:	003f9406 	br	35418 <_malloc_r+0x474>
   355c8:	294b883a 	add	r5,r5,r5
   355cc:	1146703a 	and	r3,r2,r5
   355d0:	5ac00104 	addi	r11,r11,4
   355d4:	183ffc26 	beq	r3,zero,355c8 <_malloc_r+0x624>
   355d8:	5809883a 	mov	r4,r11
   355dc:	003f0006 	br	351e0 <_malloc_r+0x23c>
   355e0:	00805504 	movi	r2,340
   355e4:	11001336 	bltu	r2,r4,35634 <_malloc_r+0x690>
   355e8:	8808d3fa 	srli	r4,r17,15
   355ec:	21001dc4 	addi	r4,r4,119
   355f0:	210b883a 	add	r5,r4,r4
   355f4:	003eb206 	br	350c0 <_malloc_r+0x11c>
   355f8:	00840004 	movi	r2,4096
   355fc:	003f5d06 	br	35374 <_malloc_r+0x3d0>
   35600:	00800044 	movi	r2,1
   35604:	a0800115 	stw	r2,4(r20)
   35608:	a021883a 	mov	r16,r20
   3560c:	0007883a 	mov	r3,zero
   35610:	003f8106 	br	35418 <_malloc_r+0x474>
   35614:	280bd0ba 	srai	r5,r5,2
   35618:	01800044 	movi	r6,1
   3561c:	38800117 	ldw	r2,4(r7)
   35620:	314c983a 	sll	r6,r6,r5
   35624:	180b883a 	mov	r5,r3
   35628:	3084b03a 	or	r2,r6,r2
   3562c:	38800115 	stw	r2,4(r7)
   35630:	003fa906 	br	354d8 <_malloc_r+0x534>
   35634:	00815504 	movi	r2,1364
   35638:	11001836 	bltu	r2,r4,3569c <_malloc_r+0x6f8>
   3563c:	8808d4ba 	srli	r4,r17,18
   35640:	21001f04 	addi	r4,r4,124
   35644:	210b883a 	add	r5,r4,r4
   35648:	003e9d06 	br	350c0 <_malloc_r+0x11c>
   3564c:	bdc00404 	addi	r23,r23,16
   35650:	003f2f06 	br	35310 <_malloc_r+0x36c>
   35654:	01401504 	movi	r5,84
   35658:	28c01f36 	bltu	r5,r3,356d8 <_malloc_r+0x734>
   3565c:	100ad33a 	srli	r5,r2,12
   35660:	29401b84 	addi	r5,r5,110
   35664:	294d883a 	add	r6,r5,r5
   35668:	003f8c06 	br	3549c <_malloc_r+0x4f8>
   3566c:	9c000217 	ldw	r16,8(r19)
   35670:	00bfff04 	movi	r2,-4
   35674:	80c00117 	ldw	r3,4(r16)
   35678:	1886703a 	and	r3,r3,r2
   3567c:	003f6606 	br	35418 <_malloc_r+0x474>
   35680:	e0c3ffcc 	andi	r3,fp,4095
   35684:	183f2f1e 	bne	r3,zero,35344 <_malloc_r+0x3a0>
   35688:	98c00217 	ldw	r3,8(r19)
   3568c:	bd49883a 	add	r4,r23,r21
   35690:	21000054 	ori	r4,r4,1
   35694:	19000115 	stw	r4,4(r3)
   35698:	003f5506 	br	353f0 <_malloc_r+0x44c>
   3569c:	01403f04 	movi	r5,252
   356a0:	01001f84 	movi	r4,126
   356a4:	003e8606 	br	350c0 <_malloc_r+0x11c>
   356a8:	9009883a 	mov	r4,r18
   356ac:	81400204 	addi	r5,r16,8
   356b0:	003440c0 	call	3440c <_free_r>
   356b4:	00800034 	movhi	r2,0
   356b8:	10877e04 	addi	r2,r2,7672
   356bc:	10800017 	ldw	r2,0(r2)
   356c0:	003f4b06 	br	353f0 <_malloc_r+0x44c>
   356c4:	00c00044 	movi	r3,1
   356c8:	002f883a 	mov	r23,zero
   356cc:	003f3406 	br	353a0 <_malloc_r+0x3fc>
   356d0:	d5200315 	stw	r20,-32756(gp)
   356d4:	003f2106 	br	3535c <_malloc_r+0x3b8>
   356d8:	01405504 	movi	r5,340
   356dc:	28c00436 	bltu	r5,r3,356f0 <_malloc_r+0x74c>
   356e0:	100ad3fa 	srli	r5,r2,15
   356e4:	29401dc4 	addi	r5,r5,119
   356e8:	294d883a 	add	r6,r5,r5
   356ec:	003f6b06 	br	3549c <_malloc_r+0x4f8>
   356f0:	01415504 	movi	r5,1364
   356f4:	28c00936 	bltu	r5,r3,3571c <_malloc_r+0x778>
   356f8:	100ad4ba 	srli	r5,r2,18
   356fc:	29401f04 	addi	r5,r5,124
   35700:	294d883a 	add	r6,r5,r5
   35704:	003f6506 	br	3549c <_malloc_r+0x4f8>
   35708:	98800117 	ldw	r2,4(r19)
   3570c:	0146303a 	nor	r3,zero,r5
   35710:	1884703a 	and	r2,r3,r2
   35714:	98800115 	stw	r2,4(r19)
   35718:	003f9006 	br	3555c <_malloc_r+0x5b8>
   3571c:	01803f04 	movi	r6,252
   35720:	01401f84 	movi	r5,126
   35724:	003f5d06 	br	3549c <_malloc_r+0x4f8>

00035728 <memchr>:
   35728:	008000c4 	movi	r2,3
   3572c:	29403fcc 	andi	r5,r5,255
   35730:	1180282e 	bgeu	r2,r6,357d4 <memchr+0xac>
   35734:	2086703a 	and	r3,r4,r2
   35738:	1800351e 	bne	r3,zero,35810 <memchr+0xe8>
   3573c:	2816923a 	slli	r11,r5,8
   35740:	2093883a 	add	r9,r4,r2
   35744:	22000084 	addi	r8,r4,2
   35748:	5957883a 	add	r11,r11,r5
   3574c:	5816923a 	slli	r11,r11,8
   35750:	20c00044 	addi	r3,r4,1
   35754:	037fbff4 	movhi	r13,65279
   35758:	6b7fbfc4 	addi	r13,r13,-257
   3575c:	5957883a 	add	r11,r11,r5
   35760:	5816923a 	slli	r11,r11,8
   35764:	03202074 	movhi	r12,32897
   35768:	63202004 	addi	r12,r12,-32640
   3576c:	101d883a 	mov	r14,r2
   35770:	5957883a 	add	r11,r11,r5
   35774:	21c00017 	ldw	r7,0(r4)
   35778:	31bfff04 	addi	r6,r6,-4
   3577c:	1805883a 	mov	r2,r3
   35780:	3acef03a 	xor	r7,r7,r11
   35784:	3b55883a 	add	r10,r7,r13
   35788:	01ce303a 	nor	r7,zero,r7
   3578c:	51ce703a 	and	r7,r10,r7
   35790:	3b0e703a 	and	r7,r7,r12
   35794:	38000a26 	beq	r7,zero,357c0 <memchr+0x98>
   35798:	21c00003 	ldbu	r7,0(r4)
   3579c:	39401e26 	beq	r7,r5,35818 <memchr+0xf0>
   357a0:	19c00003 	ldbu	r7,0(r3)
   357a4:	39401926 	beq	r7,r5,3580c <memchr+0xe4>
   357a8:	41c00003 	ldbu	r7,0(r8)
   357ac:	4005883a 	mov	r2,r8
   357b0:	39401626 	beq	r7,r5,3580c <memchr+0xe4>
   357b4:	49c00003 	ldbu	r7,0(r9)
   357b8:	4805883a 	mov	r2,r9
   357bc:	39401326 	beq	r7,r5,3580c <memchr+0xe4>
   357c0:	21000104 	addi	r4,r4,4
   357c4:	4a400104 	addi	r9,r9,4
   357c8:	42000104 	addi	r8,r8,4
   357cc:	18c00104 	addi	r3,r3,4
   357d0:	71bfe836 	bltu	r14,r6,35774 <memchr+0x4c>
   357d4:	2005883a 	mov	r2,r4
   357d8:	30000a26 	beq	r6,zero,35804 <memchr+0xdc>
   357dc:	10c00003 	ldbu	r3,0(r2)
   357e0:	19400a26 	beq	r3,r5,3580c <memchr+0xe4>
   357e4:	10c00044 	addi	r3,r2,1
   357e8:	118d883a 	add	r6,r2,r6
   357ec:	00000306 	br	357fc <memchr+0xd4>
   357f0:	11000003 	ldbu	r4,0(r2)
   357f4:	18c00044 	addi	r3,r3,1
   357f8:	21400426 	beq	r4,r5,3580c <memchr+0xe4>
   357fc:	1805883a 	mov	r2,r3
   35800:	19bffb1e 	bne	r3,r6,357f0 <memchr+0xc8>
   35804:	0005883a 	mov	r2,zero
   35808:	f800283a 	ret
   3580c:	f800283a 	ret
   35810:	2005883a 	mov	r2,r4
   35814:	003ff106 	br	357dc <memchr+0xb4>
   35818:	2005883a 	mov	r2,r4
   3581c:	f800283a 	ret

00035820 <memcpy>:
   35820:	defffb04 	addi	sp,sp,-20
   35824:	dc000015 	stw	r16,0(sp)
   35828:	dfc00415 	stw	ra,16(sp)
   3582c:	dcc00315 	stw	r19,12(sp)
   35830:	dc800215 	stw	r18,8(sp)
   35834:	dc400115 	stw	r17,4(sp)
   35838:	00c003c4 	movi	r3,15
   3583c:	2021883a 	mov	r16,r4
   35840:	3005883a 	mov	r2,r6
   35844:	1980032e 	bgeu	r3,r6,35854 <memcpy+0x34>
   35848:	2906b03a 	or	r3,r5,r4
   3584c:	18c000cc 	andi	r3,r3,3
   35850:	18001026 	beq	r3,zero,35894 <memcpy+0x74>
   35854:	8007883a 	mov	r3,r16
   35858:	288f883a 	add	r7,r5,r2
   3585c:	10000526 	beq	r2,zero,35874 <memcpy+0x54>
   35860:	29800003 	ldbu	r6,0(r5)
   35864:	18c00044 	addi	r3,r3,1
   35868:	29400044 	addi	r5,r5,1
   3586c:	19bfffc5 	stb	r6,-1(r3)
   35870:	29fffb1e 	bne	r5,r7,35860 <memcpy+0x40>
   35874:	8005883a 	mov	r2,r16
   35878:	dfc00417 	ldw	ra,16(sp)
   3587c:	dcc00317 	ldw	r19,12(sp)
   35880:	dc800217 	ldw	r18,8(sp)
   35884:	dc400117 	ldw	r17,4(sp)
   35888:	dc000017 	ldw	r16,0(sp)
   3588c:	dec00504 	addi	sp,sp,20
   35890:	f800283a 	ret
   35894:	32bffc04 	addi	r10,r6,-16
   35898:	5014d13a 	srli	r10,r10,4
   3589c:	20800404 	addi	r2,r4,16
   358a0:	2007883a 	mov	r3,r4
   358a4:	5008913a 	slli	r4,r10,4
   358a8:	280f883a 	mov	r7,r5
   358ac:	1105883a 	add	r2,r2,r4
   358b0:	3a000017 	ldw	r8,0(r7)
   358b4:	18c00404 	addi	r3,r3,16
   358b8:	39c00404 	addi	r7,r7,16
   358bc:	1a3ffc15 	stw	r8,-16(r3)
   358c0:	3a3ffd17 	ldw	r8,-12(r7)
   358c4:	1a3ffd15 	stw	r8,-12(r3)
   358c8:	3a3ffe17 	ldw	r8,-8(r7)
   358cc:	1a3ffe15 	stw	r8,-8(r3)
   358d0:	3a3fff17 	ldw	r8,-4(r7)
   358d4:	1a3fff15 	stw	r8,-4(r3)
   358d8:	18bff51e 	bne	r3,r2,358b0 <memcpy+0x90>
   358dc:	52800044 	addi	r10,r10,1
   358e0:	5014913a 	slli	r10,r10,4
   358e4:	308003cc 	andi	r2,r6,15
   358e8:	010000c4 	movi	r4,3
   358ec:	8287883a 	add	r3,r16,r10
   358f0:	2a95883a 	add	r10,r5,r10
   358f4:	2080182e 	bgeu	r4,r2,35958 <memcpy+0x138>
   358f8:	147fff04 	addi	r17,r2,-4
   358fc:	8808d0ba 	srli	r4,r17,2
   35900:	1a400104 	addi	r9,r3,4
   35904:	180d883a 	mov	r6,r3
   35908:	2105883a 	add	r2,r4,r4
   3590c:	1085883a 	add	r2,r2,r2
   35910:	4893883a 	add	r9,r9,r2
   35914:	500f883a 	mov	r7,r10
   35918:	3a000017 	ldw	r8,0(r7)
   3591c:	31800104 	addi	r6,r6,4
   35920:	39c00104 	addi	r7,r7,4
   35924:	323fff15 	stw	r8,-4(r6)
   35928:	327ffb1e 	bne	r6,r9,35918 <memcpy+0xf8>
   3592c:	20800044 	addi	r2,r4,1
   35930:	1085883a 	add	r2,r2,r2
   35934:	1085883a 	add	r2,r2,r2
   35938:	017fff04 	movi	r5,-4
   3593c:	18a5883a 	add	r18,r3,r2
   35940:	50a7883a 	add	r19,r10,r2
   35944:	00394380 	call	39438 <__mulsi3>
   35948:	1445883a 	add	r2,r2,r17
   3594c:	980b883a 	mov	r5,r19
   35950:	9007883a 	mov	r3,r18
   35954:	003fc006 	br	35858 <memcpy+0x38>
   35958:	500b883a 	mov	r5,r10
   3595c:	003fbe06 	br	35858 <memcpy+0x38>

00035960 <memmove>:
   35960:	defffb04 	addi	sp,sp,-20
   35964:	dc000015 	stw	r16,0(sp)
   35968:	dfc00415 	stw	ra,16(sp)
   3596c:	dcc00315 	stw	r19,12(sp)
   35970:	dc800215 	stw	r18,8(sp)
   35974:	dc400115 	stw	r17,4(sp)
   35978:	2021883a 	mov	r16,r4
   3597c:	300f883a 	mov	r7,r6
   35980:	2900122e 	bgeu	r5,r4,359cc <memmove+0x6c>
   35984:	2987883a 	add	r3,r5,r6
   35988:	20c0102e 	bgeu	r4,r3,359cc <memmove+0x6c>
   3598c:	218b883a 	add	r5,r4,r6
   35990:	1989c83a 	sub	r4,r3,r6
   35994:	30000526 	beq	r6,zero,359ac <memmove+0x4c>
   35998:	18ffffc4 	addi	r3,r3,-1
   3599c:	18800003 	ldbu	r2,0(r3)
   359a0:	297fffc4 	addi	r5,r5,-1
   359a4:	28800005 	stb	r2,0(r5)
   359a8:	193ffb1e 	bne	r3,r4,35998 <memmove+0x38>
   359ac:	8005883a 	mov	r2,r16
   359b0:	dfc00417 	ldw	ra,16(sp)
   359b4:	dcc00317 	ldw	r19,12(sp)
   359b8:	dc800217 	ldw	r18,8(sp)
   359bc:	dc400117 	ldw	r17,4(sp)
   359c0:	dc000017 	ldw	r16,0(sp)
   359c4:	dec00504 	addi	sp,sp,20
   359c8:	f800283a 	ret
   359cc:	008003c4 	movi	r2,15
   359d0:	1180422e 	bgeu	r2,r6,35adc <memmove+0x17c>
   359d4:	2c04b03a 	or	r2,r5,r16
   359d8:	108000cc 	andi	r2,r2,3
   359dc:	10003f1e 	bne	r2,zero,35adc <memmove+0x17c>
   359e0:	32bffc04 	addi	r10,r6,-16
   359e4:	5014d13a 	srli	r10,r10,4
   359e8:	81000404 	addi	r4,r16,16
   359ec:	8007883a 	mov	r3,r16
   359f0:	5004913a 	slli	r2,r10,4
   359f4:	280f883a 	mov	r7,r5
   359f8:	2089883a 	add	r4,r4,r2
   359fc:	38800017 	ldw	r2,0(r7)
   35a00:	18c00404 	addi	r3,r3,16
   35a04:	39c00404 	addi	r7,r7,16
   35a08:	18bffc15 	stw	r2,-16(r3)
   35a0c:	38bffd17 	ldw	r2,-12(r7)
   35a10:	18bffd15 	stw	r2,-12(r3)
   35a14:	38bffe17 	ldw	r2,-8(r7)
   35a18:	18bffe15 	stw	r2,-8(r3)
   35a1c:	38bfff17 	ldw	r2,-4(r7)
   35a20:	18bfff15 	stw	r2,-4(r3)
   35a24:	193ff51e 	bne	r3,r4,359fc <memmove+0x9c>
   35a28:	52800044 	addi	r10,r10,1
   35a2c:	5014913a 	slli	r10,r10,4
   35a30:	31c003cc 	andi	r7,r6,15
   35a34:	008000c4 	movi	r2,3
   35a38:	8287883a 	add	r3,r16,r10
   35a3c:	2a95883a 	add	r10,r5,r10
   35a40:	11c0282e 	bgeu	r2,r7,35ae4 <memmove+0x184>
   35a44:	3c7fff04 	addi	r17,r7,-4
   35a48:	8808d0ba 	srli	r4,r17,2
   35a4c:	1a400104 	addi	r9,r3,4
   35a50:	180d883a 	mov	r6,r3
   35a54:	2105883a 	add	r2,r4,r4
   35a58:	1085883a 	add	r2,r2,r2
   35a5c:	4893883a 	add	r9,r9,r2
   35a60:	5005883a 	mov	r2,r10
   35a64:	12000017 	ldw	r8,0(r2)
   35a68:	31800104 	addi	r6,r6,4
   35a6c:	10800104 	addi	r2,r2,4
   35a70:	323fff15 	stw	r8,-4(r6)
   35a74:	327ffb1e 	bne	r6,r9,35a64 <memmove+0x104>
   35a78:	20800044 	addi	r2,r4,1
   35a7c:	1085883a 	add	r2,r2,r2
   35a80:	1085883a 	add	r2,r2,r2
   35a84:	017fff04 	movi	r5,-4
   35a88:	18a5883a 	add	r18,r3,r2
   35a8c:	50a7883a 	add	r19,r10,r2
   35a90:	00394380 	call	39438 <__mulsi3>
   35a94:	144f883a 	add	r7,r2,r17
   35a98:	980b883a 	mov	r5,r19
   35a9c:	9007883a 	mov	r3,r18
   35aa0:	383fc226 	beq	r7,zero,359ac <memmove+0x4c>
   35aa4:	19cf883a 	add	r7,r3,r7
   35aa8:	29800003 	ldbu	r6,0(r5)
   35aac:	18c00044 	addi	r3,r3,1
   35ab0:	29400044 	addi	r5,r5,1
   35ab4:	19bfffc5 	stb	r6,-1(r3)
   35ab8:	19fffb1e 	bne	r3,r7,35aa8 <memmove+0x148>
   35abc:	8005883a 	mov	r2,r16
   35ac0:	dfc00417 	ldw	ra,16(sp)
   35ac4:	dcc00317 	ldw	r19,12(sp)
   35ac8:	dc800217 	ldw	r18,8(sp)
   35acc:	dc400117 	ldw	r17,4(sp)
   35ad0:	dc000017 	ldw	r16,0(sp)
   35ad4:	dec00504 	addi	sp,sp,20
   35ad8:	f800283a 	ret
   35adc:	8007883a 	mov	r3,r16
   35ae0:	003fef06 	br	35aa0 <memmove+0x140>
   35ae4:	500b883a 	mov	r5,r10
   35ae8:	003fed06 	br	35aa0 <memmove+0x140>

00035aec <memset>:
   35aec:	00c000c4 	movi	r3,3
   35af0:	2005883a 	mov	r2,r4
   35af4:	29403fcc 	andi	r5,r5,255
   35af8:	19802d2e 	bgeu	r3,r6,35bb0 <memset+0xc4>
   35afc:	20c6703a 	and	r3,r4,r3
   35b00:	18002e1e 	bne	r3,zero,35bbc <memset+0xd0>
   35b04:	2806923a 	slli	r3,r5,8
   35b08:	010003c4 	movi	r4,15
   35b0c:	3011883a 	mov	r8,r6
   35b10:	1946b03a 	or	r3,r3,r5
   35b14:	180e943a 	slli	r7,r3,16
   35b18:	38ceb03a 	or	r7,r7,r3
   35b1c:	1007883a 	mov	r3,r2
   35b20:	21800f2e 	bgeu	r4,r6,35b60 <memset+0x74>
   35b24:	19c00015 	stw	r7,0(r3)
   35b28:	19c00115 	stw	r7,4(r3)
   35b2c:	19c00215 	stw	r7,8(r3)
   35b30:	19c00315 	stw	r7,12(r3)
   35b34:	423ffc04 	addi	r8,r8,-16
   35b38:	18c00404 	addi	r3,r3,16
   35b3c:	223ff936 	bltu	r4,r8,35b24 <memset+0x38>
   35b40:	30fffc04 	addi	r3,r6,-16
   35b44:	1806d13a 	srli	r3,r3,4
   35b48:	318003cc 	andi	r6,r6,15
   35b4c:	010000c4 	movi	r4,3
   35b50:	18c00044 	addi	r3,r3,1
   35b54:	1806913a 	slli	r3,r3,4
   35b58:	10c7883a 	add	r3,r2,r3
   35b5c:	21800e2e 	bgeu	r4,r6,35b98 <memset+0xac>
   35b60:	1813883a 	mov	r9,r3
   35b64:	3011883a 	mov	r8,r6
   35b68:	010000c4 	movi	r4,3
   35b6c:	49c00015 	stw	r7,0(r9)
   35b70:	423fff04 	addi	r8,r8,-4
   35b74:	4a400104 	addi	r9,r9,4
   35b78:	223ffc36 	bltu	r4,r8,35b6c <memset+0x80>
   35b7c:	313fff04 	addi	r4,r6,-4
   35b80:	2008d0ba 	srli	r4,r4,2
   35b84:	318000cc 	andi	r6,r6,3
   35b88:	21000044 	addi	r4,r4,1
   35b8c:	2109883a 	add	r4,r4,r4
   35b90:	2109883a 	add	r4,r4,r4
   35b94:	1907883a 	add	r3,r3,r4
   35b98:	30000a26 	beq	r6,zero,35bc4 <memset+0xd8>
   35b9c:	198d883a 	add	r6,r3,r6
   35ba0:	19400005 	stb	r5,0(r3)
   35ba4:	18c00044 	addi	r3,r3,1
   35ba8:	19bffd1e 	bne	r3,r6,35ba0 <memset+0xb4>
   35bac:	f800283a 	ret
   35bb0:	2007883a 	mov	r3,r4
   35bb4:	303ff91e 	bne	r6,zero,35b9c <memset+0xb0>
   35bb8:	00000206 	br	35bc4 <memset+0xd8>
   35bbc:	2007883a 	mov	r3,r4
   35bc0:	003ff606 	br	35b9c <memset+0xb0>
   35bc4:	f800283a 	ret

00035bc8 <_Balloc>:
   35bc8:	20801317 	ldw	r2,76(r4)
   35bcc:	defffc04 	addi	sp,sp,-16
   35bd0:	dc400115 	stw	r17,4(sp)
   35bd4:	dc000015 	stw	r16,0(sp)
   35bd8:	dfc00315 	stw	ra,12(sp)
   35bdc:	dc800215 	stw	r18,8(sp)
   35be0:	2023883a 	mov	r17,r4
   35be4:	2821883a 	mov	r16,r5
   35be8:	10000f26 	beq	r2,zero,35c28 <_Balloc+0x60>
   35bec:	8407883a 	add	r3,r16,r16
   35bf0:	18c7883a 	add	r3,r3,r3
   35bf4:	10c7883a 	add	r3,r2,r3
   35bf8:	18800017 	ldw	r2,0(r3)
   35bfc:	10001126 	beq	r2,zero,35c44 <_Balloc+0x7c>
   35c00:	11000017 	ldw	r4,0(r2)
   35c04:	19000015 	stw	r4,0(r3)
   35c08:	10000415 	stw	zero,16(r2)
   35c0c:	10000315 	stw	zero,12(r2)
   35c10:	dfc00317 	ldw	ra,12(sp)
   35c14:	dc800217 	ldw	r18,8(sp)
   35c18:	dc400117 	ldw	r17,4(sp)
   35c1c:	dc000017 	ldw	r16,0(sp)
   35c20:	dec00404 	addi	sp,sp,16
   35c24:	f800283a 	ret
   35c28:	01400104 	movi	r5,4
   35c2c:	01800404 	movi	r6,16
   35c30:	003752c0 	call	3752c <_calloc_r>
   35c34:	88801315 	stw	r2,76(r17)
   35c38:	103fec1e 	bne	r2,zero,35bec <_Balloc+0x24>
   35c3c:	0005883a 	mov	r2,zero
   35c40:	003ff306 	br	35c10 <_Balloc+0x48>
   35c44:	01400044 	movi	r5,1
   35c48:	2c24983a 	sll	r18,r5,r16
   35c4c:	8809883a 	mov	r4,r17
   35c50:	91800144 	addi	r6,r18,5
   35c54:	318d883a 	add	r6,r6,r6
   35c58:	318d883a 	add	r6,r6,r6
   35c5c:	003752c0 	call	3752c <_calloc_r>
   35c60:	103ff626 	beq	r2,zero,35c3c <_Balloc+0x74>
   35c64:	14000115 	stw	r16,4(r2)
   35c68:	14800215 	stw	r18,8(r2)
   35c6c:	003fe606 	br	35c08 <_Balloc+0x40>

00035c70 <_Bfree>:
   35c70:	28000826 	beq	r5,zero,35c94 <_Bfree+0x24>
   35c74:	28c00117 	ldw	r3,4(r5)
   35c78:	20801317 	ldw	r2,76(r4)
   35c7c:	18c7883a 	add	r3,r3,r3
   35c80:	18c7883a 	add	r3,r3,r3
   35c84:	10c5883a 	add	r2,r2,r3
   35c88:	10c00017 	ldw	r3,0(r2)
   35c8c:	28c00015 	stw	r3,0(r5)
   35c90:	11400015 	stw	r5,0(r2)
   35c94:	f800283a 	ret

00035c98 <__multadd>:
   35c98:	defff604 	addi	sp,sp,-40
   35c9c:	dd400515 	stw	r21,20(sp)
   35ca0:	2d400417 	ldw	r21,16(r5)
   35ca4:	df000815 	stw	fp,32(sp)
   35ca8:	ddc00715 	stw	r23,28(sp)
   35cac:	dd800615 	stw	r22,24(sp)
   35cb0:	dd000415 	stw	r20,16(sp)
   35cb4:	dc400115 	stw	r17,4(sp)
   35cb8:	dc000015 	stw	r16,0(sp)
   35cbc:	dfc00915 	stw	ra,36(sp)
   35cc0:	dcc00315 	stw	r19,12(sp)
   35cc4:	dc800215 	stw	r18,8(sp)
   35cc8:	282d883a 	mov	r22,r5
   35ccc:	202f883a 	mov	r23,r4
   35cd0:	3029883a 	mov	r20,r6
   35cd4:	3839883a 	mov	fp,r7
   35cd8:	2c000504 	addi	r16,r5,20
   35cdc:	0023883a 	mov	r17,zero
   35ce0:	84c00017 	ldw	r19,0(r16)
   35ce4:	a00b883a 	mov	r5,r20
   35ce8:	8c400044 	addi	r17,r17,1
   35cec:	993fffcc 	andi	r4,r19,65535
   35cf0:	00394380 	call	39438 <__mulsi3>
   35cf4:	1725883a 	add	r18,r2,fp
   35cf8:	9808d43a 	srli	r4,r19,16
   35cfc:	9026d43a 	srli	r19,r18,16
   35d00:	a00b883a 	mov	r5,r20
   35d04:	00394380 	call	39438 <__mulsi3>
   35d08:	988f883a 	add	r7,r19,r2
   35d0c:	3804943a 	slli	r2,r7,16
   35d10:	94bfffcc 	andi	r18,r18,65535
   35d14:	3838d43a 	srli	fp,r7,16
   35d18:	14a5883a 	add	r18,r2,r18
   35d1c:	84800015 	stw	r18,0(r16)
   35d20:	84000104 	addi	r16,r16,4
   35d24:	8d7fee16 	blt	r17,r21,35ce0 <__multadd+0x48>
   35d28:	e0000926 	beq	fp,zero,35d50 <__multadd+0xb8>
   35d2c:	b0800217 	ldw	r2,8(r22)
   35d30:	a880140e 	bge	r21,r2,35d84 <__multadd+0xec>
   35d34:	a8800144 	addi	r2,r21,5
   35d38:	1085883a 	add	r2,r2,r2
   35d3c:	1085883a 	add	r2,r2,r2
   35d40:	b085883a 	add	r2,r22,r2
   35d44:	ad400044 	addi	r21,r21,1
   35d48:	17000015 	stw	fp,0(r2)
   35d4c:	b5400415 	stw	r21,16(r22)
   35d50:	b005883a 	mov	r2,r22
   35d54:	dfc00917 	ldw	ra,36(sp)
   35d58:	df000817 	ldw	fp,32(sp)
   35d5c:	ddc00717 	ldw	r23,28(sp)
   35d60:	dd800617 	ldw	r22,24(sp)
   35d64:	dd400517 	ldw	r21,20(sp)
   35d68:	dd000417 	ldw	r20,16(sp)
   35d6c:	dcc00317 	ldw	r19,12(sp)
   35d70:	dc800217 	ldw	r18,8(sp)
   35d74:	dc400117 	ldw	r17,4(sp)
   35d78:	dc000017 	ldw	r16,0(sp)
   35d7c:	dec00a04 	addi	sp,sp,40
   35d80:	f800283a 	ret
   35d84:	b1400117 	ldw	r5,4(r22)
   35d88:	b809883a 	mov	r4,r23
   35d8c:	29400044 	addi	r5,r5,1
   35d90:	0035bc80 	call	35bc8 <_Balloc>
   35d94:	b1800417 	ldw	r6,16(r22)
   35d98:	b1400304 	addi	r5,r22,12
   35d9c:	11000304 	addi	r4,r2,12
   35da0:	31800084 	addi	r6,r6,2
   35da4:	318d883a 	add	r6,r6,r6
   35da8:	318d883a 	add	r6,r6,r6
   35dac:	1021883a 	mov	r16,r2
   35db0:	00358200 	call	35820 <memcpy>
   35db4:	b0c00117 	ldw	r3,4(r22)
   35db8:	b8801317 	ldw	r2,76(r23)
   35dbc:	18c7883a 	add	r3,r3,r3
   35dc0:	18c7883a 	add	r3,r3,r3
   35dc4:	10c5883a 	add	r2,r2,r3
   35dc8:	10c00017 	ldw	r3,0(r2)
   35dcc:	b0c00015 	stw	r3,0(r22)
   35dd0:	15800015 	stw	r22,0(r2)
   35dd4:	802d883a 	mov	r22,r16
   35dd8:	003fd606 	br	35d34 <__multadd+0x9c>

00035ddc <__s2b>:
   35ddc:	defff904 	addi	sp,sp,-28
   35de0:	dd000415 	stw	r20,16(sp)
   35de4:	dc400115 	stw	r17,4(sp)
   35de8:	2829883a 	mov	r20,r5
   35dec:	2023883a 	mov	r17,r4
   35df0:	01400244 	movi	r5,9
   35df4:	39000204 	addi	r4,r7,8
   35df8:	dcc00315 	stw	r19,12(sp)
   35dfc:	dc800215 	stw	r18,8(sp)
   35e00:	dfc00615 	stw	ra,24(sp)
   35e04:	dd400515 	stw	r21,20(sp)
   35e08:	dc000015 	stw	r16,0(sp)
   35e0c:	3825883a 	mov	r18,r7
   35e10:	3027883a 	mov	r19,r6
   35e14:	003937c0 	call	3937c <__divsi3>
   35e18:	00c00044 	movi	r3,1
   35e1c:	000b883a 	mov	r5,zero
   35e20:	1880030e 	bge	r3,r2,35e30 <__s2b+0x54>
   35e24:	18c7883a 	add	r3,r3,r3
   35e28:	29400044 	addi	r5,r5,1
   35e2c:	18bffd16 	blt	r3,r2,35e24 <__s2b+0x48>
   35e30:	8809883a 	mov	r4,r17
   35e34:	0035bc80 	call	35bc8 <_Balloc>
   35e38:	d8c00717 	ldw	r3,28(sp)
   35e3c:	10c00515 	stw	r3,20(r2)
   35e40:	00c00044 	movi	r3,1
   35e44:	10c00415 	stw	r3,16(r2)
   35e48:	00c00244 	movi	r3,9
   35e4c:	1cc0210e 	bge	r3,r19,35ed4 <__s2b+0xf8>
   35e50:	a0eb883a 	add	r21,r20,r3
   35e54:	a821883a 	mov	r16,r21
   35e58:	a4e9883a 	add	r20,r20,r19
   35e5c:	81c00007 	ldb	r7,0(r16)
   35e60:	8809883a 	mov	r4,r17
   35e64:	84000044 	addi	r16,r16,1
   35e68:	100b883a 	mov	r5,r2
   35e6c:	01800284 	movi	r6,10
   35e70:	39fff404 	addi	r7,r7,-48
   35e74:	0035c980 	call	35c98 <__multadd>
   35e78:	853ff81e 	bne	r16,r20,35e5c <__s2b+0x80>
   35e7c:	ace1883a 	add	r16,r21,r19
   35e80:	843ffe04 	addi	r16,r16,-8
   35e84:	9c800a0e 	bge	r19,r18,35eb0 <__s2b+0xd4>
   35e88:	94e5c83a 	sub	r18,r18,r19
   35e8c:	84a5883a 	add	r18,r16,r18
   35e90:	81c00007 	ldb	r7,0(r16)
   35e94:	8809883a 	mov	r4,r17
   35e98:	84000044 	addi	r16,r16,1
   35e9c:	100b883a 	mov	r5,r2
   35ea0:	01800284 	movi	r6,10
   35ea4:	39fff404 	addi	r7,r7,-48
   35ea8:	0035c980 	call	35c98 <__multadd>
   35eac:	84bff81e 	bne	r16,r18,35e90 <__s2b+0xb4>
   35eb0:	dfc00617 	ldw	ra,24(sp)
   35eb4:	dd400517 	ldw	r21,20(sp)
   35eb8:	dd000417 	ldw	r20,16(sp)
   35ebc:	dcc00317 	ldw	r19,12(sp)
   35ec0:	dc800217 	ldw	r18,8(sp)
   35ec4:	dc400117 	ldw	r17,4(sp)
   35ec8:	dc000017 	ldw	r16,0(sp)
   35ecc:	dec00704 	addi	sp,sp,28
   35ed0:	f800283a 	ret
   35ed4:	a4000284 	addi	r16,r20,10
   35ed8:	1827883a 	mov	r19,r3
   35edc:	003fe906 	br	35e84 <__s2b+0xa8>

00035ee0 <__hi0bits>:
   35ee0:	20bfffec 	andhi	r2,r4,65535
   35ee4:	1000141e 	bne	r2,zero,35f38 <__hi0bits+0x58>
   35ee8:	2008943a 	slli	r4,r4,16
   35eec:	00800404 	movi	r2,16
   35ef0:	20ffc02c 	andhi	r3,r4,65280
   35ef4:	1800021e 	bne	r3,zero,35f00 <__hi0bits+0x20>
   35ef8:	2008923a 	slli	r4,r4,8
   35efc:	10800204 	addi	r2,r2,8
   35f00:	20fc002c 	andhi	r3,r4,61440
   35f04:	1800021e 	bne	r3,zero,35f10 <__hi0bits+0x30>
   35f08:	2008913a 	slli	r4,r4,4
   35f0c:	10800104 	addi	r2,r2,4
   35f10:	20f0002c 	andhi	r3,r4,49152
   35f14:	1800031e 	bne	r3,zero,35f24 <__hi0bits+0x44>
   35f18:	2109883a 	add	r4,r4,r4
   35f1c:	10800084 	addi	r2,r2,2
   35f20:	2109883a 	add	r4,r4,r4
   35f24:	20000316 	blt	r4,zero,35f34 <__hi0bits+0x54>
   35f28:	2110002c 	andhi	r4,r4,16384
   35f2c:	2000041e 	bne	r4,zero,35f40 <__hi0bits+0x60>
   35f30:	00800804 	movi	r2,32
   35f34:	f800283a 	ret
   35f38:	0005883a 	mov	r2,zero
   35f3c:	003fec06 	br	35ef0 <__hi0bits+0x10>
   35f40:	10800044 	addi	r2,r2,1
   35f44:	f800283a 	ret

00035f48 <__lo0bits>:
   35f48:	20c00017 	ldw	r3,0(r4)
   35f4c:	188001cc 	andi	r2,r3,7
   35f50:	10000826 	beq	r2,zero,35f74 <__lo0bits+0x2c>
   35f54:	1880004c 	andi	r2,r3,1
   35f58:	1000211e 	bne	r2,zero,35fe0 <__lo0bits+0x98>
   35f5c:	1880008c 	andi	r2,r3,2
   35f60:	1000211e 	bne	r2,zero,35fe8 <__lo0bits+0xa0>
   35f64:	1806d0ba 	srli	r3,r3,2
   35f68:	00800084 	movi	r2,2
   35f6c:	20c00015 	stw	r3,0(r4)
   35f70:	f800283a 	ret
   35f74:	18bfffcc 	andi	r2,r3,65535
   35f78:	10001326 	beq	r2,zero,35fc8 <__lo0bits+0x80>
   35f7c:	0005883a 	mov	r2,zero
   35f80:	19403fcc 	andi	r5,r3,255
   35f84:	2800021e 	bne	r5,zero,35f90 <__lo0bits+0x48>
   35f88:	1806d23a 	srli	r3,r3,8
   35f8c:	10800204 	addi	r2,r2,8
   35f90:	194003cc 	andi	r5,r3,15
   35f94:	2800021e 	bne	r5,zero,35fa0 <__lo0bits+0x58>
   35f98:	1806d13a 	srli	r3,r3,4
   35f9c:	10800104 	addi	r2,r2,4
   35fa0:	194000cc 	andi	r5,r3,3
   35fa4:	2800021e 	bne	r5,zero,35fb0 <__lo0bits+0x68>
   35fa8:	1806d0ba 	srli	r3,r3,2
   35fac:	10800084 	addi	r2,r2,2
   35fb0:	1940004c 	andi	r5,r3,1
   35fb4:	2800081e 	bne	r5,zero,35fd8 <__lo0bits+0x90>
   35fb8:	1806d07a 	srli	r3,r3,1
   35fbc:	1800051e 	bne	r3,zero,35fd4 <__lo0bits+0x8c>
   35fc0:	00800804 	movi	r2,32
   35fc4:	f800283a 	ret
   35fc8:	1806d43a 	srli	r3,r3,16
   35fcc:	00800404 	movi	r2,16
   35fd0:	003feb06 	br	35f80 <__lo0bits+0x38>
   35fd4:	10800044 	addi	r2,r2,1
   35fd8:	20c00015 	stw	r3,0(r4)
   35fdc:	f800283a 	ret
   35fe0:	0005883a 	mov	r2,zero
   35fe4:	f800283a 	ret
   35fe8:	1806d07a 	srli	r3,r3,1
   35fec:	00800044 	movi	r2,1
   35ff0:	20c00015 	stw	r3,0(r4)
   35ff4:	f800283a 	ret

00035ff8 <__i2b>:
   35ff8:	defffd04 	addi	sp,sp,-12
   35ffc:	dc000015 	stw	r16,0(sp)
   36000:	04000044 	movi	r16,1
   36004:	dc400115 	stw	r17,4(sp)
   36008:	2823883a 	mov	r17,r5
   3600c:	800b883a 	mov	r5,r16
   36010:	dfc00215 	stw	ra,8(sp)
   36014:	0035bc80 	call	35bc8 <_Balloc>
   36018:	14400515 	stw	r17,20(r2)
   3601c:	14000415 	stw	r16,16(r2)
   36020:	dfc00217 	ldw	ra,8(sp)
   36024:	dc400117 	ldw	r17,4(sp)
   36028:	dc000017 	ldw	r16,0(sp)
   3602c:	dec00304 	addi	sp,sp,12
   36030:	f800283a 	ret

00036034 <__multiply>:
   36034:	defff004 	addi	sp,sp,-64
   36038:	dc800815 	stw	r18,32(sp)
   3603c:	dc400715 	stw	r17,28(sp)
   36040:	34800417 	ldw	r18,16(r6)
   36044:	2c400417 	ldw	r17,16(r5)
   36048:	ddc00d15 	stw	r23,52(sp)
   3604c:	dc000615 	stw	r16,24(sp)
   36050:	dfc00f15 	stw	ra,60(sp)
   36054:	df000e15 	stw	fp,56(sp)
   36058:	dd800c15 	stw	r22,48(sp)
   3605c:	dd400b15 	stw	r21,44(sp)
   36060:	dd000a15 	stw	r20,40(sp)
   36064:	dcc00915 	stw	r19,36(sp)
   36068:	2821883a 	mov	r16,r5
   3606c:	302f883a 	mov	r23,r6
   36070:	8c80050e 	bge	r17,r18,36088 <__multiply+0x54>
   36074:	8807883a 	mov	r3,r17
   36078:	3021883a 	mov	r16,r6
   3607c:	9023883a 	mov	r17,r18
   36080:	282f883a 	mov	r23,r5
   36084:	1825883a 	mov	r18,r3
   36088:	80800217 	ldw	r2,8(r16)
   3608c:	8c87883a 	add	r3,r17,r18
   36090:	d8c00115 	stw	r3,4(sp)
   36094:	81400117 	ldw	r5,4(r16)
   36098:	10c0010e 	bge	r2,r3,360a0 <__multiply+0x6c>
   3609c:	29400044 	addi	r5,r5,1
   360a0:	0035bc80 	call	35bc8 <_Balloc>
   360a4:	d8c00117 	ldw	r3,4(sp)
   360a8:	d8800515 	stw	r2,20(sp)
   360ac:	14c00504 	addi	r19,r2,20
   360b0:	1d400144 	addi	r21,r3,5
   360b4:	ad6b883a 	add	r21,r21,r21
   360b8:	ad6b883a 	add	r21,r21,r21
   360bc:	156b883a 	add	r21,r2,r21
   360c0:	dd400215 	stw	r21,8(sp)
   360c4:	9805883a 	mov	r2,r19
   360c8:	9d40042e 	bgeu	r19,r21,360dc <__multiply+0xa8>
   360cc:	d8c00217 	ldw	r3,8(sp)
   360d0:	10000015 	stw	zero,0(r2)
   360d4:	10800104 	addi	r2,r2,4
   360d8:	10fffc36 	bltu	r2,r3,360cc <__multiply+0x98>
   360dc:	94800144 	addi	r18,r18,5
   360e0:	94a5883a 	add	r18,r18,r18
   360e4:	94ad883a 	add	r22,r18,r18
   360e8:	8c400144 	addi	r17,r17,5
   360ec:	8c63883a 	add	r17,r17,r17
   360f0:	bdad883a 	add	r22,r23,r22
   360f4:	80c00504 	addi	r3,r16,20
   360f8:	8c63883a 	add	r17,r17,r17
   360fc:	bc800504 	addi	r18,r23,20
   36100:	dd800315 	stw	r22,12(sp)
   36104:	d8c00415 	stw	r3,16(sp)
   36108:	dcc00015 	stw	r19,0(sp)
   3610c:	8463883a 	add	r17,r16,r17
   36110:	9580412e 	bgeu	r18,r22,36218 <__multiply+0x1e4>
   36114:	90800017 	ldw	r2,0(r18)
   36118:	173fffcc 	andi	fp,r2,65535
   3611c:	e0001a26 	beq	fp,zero,36188 <__multiply+0x154>
   36120:	dd000017 	ldw	r20,0(sp)
   36124:	dd800417 	ldw	r22,16(sp)
   36128:	002b883a 	mov	r21,zero
   3612c:	b4c00017 	ldw	r19,0(r22)
   36130:	a4000017 	ldw	r16,0(r20)
   36134:	e00b883a 	mov	r5,fp
   36138:	993fffcc 	andi	r4,r19,65535
   3613c:	00394380 	call	39438 <__mulsi3>
   36140:	9808d43a 	srli	r4,r19,16
   36144:	817fffcc 	andi	r5,r16,65535
   36148:	1145883a 	add	r2,r2,r5
   3614c:	e00b883a 	mov	r5,fp
   36150:	1567883a 	add	r19,r2,r21
   36154:	8020d43a 	srli	r16,r16,16
   36158:	00394380 	call	39438 <__mulsi3>
   3615c:	9808d43a 	srli	r4,r19,16
   36160:	1405883a 	add	r2,r2,r16
   36164:	a4c0000d 	sth	r19,0(r20)
   36168:	110f883a 	add	r7,r2,r4
   3616c:	a1c0008d 	sth	r7,2(r20)
   36170:	b5800104 	addi	r22,r22,4
   36174:	382ad43a 	srli	r21,r7,16
   36178:	a5000104 	addi	r20,r20,4
   3617c:	b47feb36 	bltu	r22,r17,3612c <__multiply+0xf8>
   36180:	a5400015 	stw	r21,0(r20)
   36184:	90800017 	ldw	r2,0(r18)
   36188:	1038d43a 	srli	fp,r2,16
   3618c:	e0001c26 	beq	fp,zero,36200 <__multiply+0x1cc>
   36190:	d8c00017 	ldw	r3,0(sp)
   36194:	dd000417 	ldw	r20,16(sp)
   36198:	002b883a 	mov	r21,zero
   3619c:	1d800017 	ldw	r22,0(r3)
   361a0:	182f883a 	mov	r23,r3
   361a4:	b021883a 	mov	r16,r22
   361a8:	a4c00017 	ldw	r19,0(r20)
   361ac:	8020d43a 	srli	r16,r16,16
   361b0:	e00b883a 	mov	r5,fp
   361b4:	993fffcc 	andi	r4,r19,65535
   361b8:	00394380 	call	39438 <__mulsi3>
   361bc:	1405883a 	add	r2,r2,r16
   361c0:	9808d43a 	srli	r4,r19,16
   361c4:	156b883a 	add	r21,r2,r21
   361c8:	bdc00104 	addi	r23,r23,4
   361cc:	bdbfff0d 	sth	r22,-4(r23)
   361d0:	bd7fff8d 	sth	r21,-2(r23)
   361d4:	bc000017 	ldw	r16,0(r23)
   361d8:	e00b883a 	mov	r5,fp
   361dc:	00394380 	call	39438 <__mulsi3>
   361e0:	a80ed43a 	srli	r7,r21,16
   361e4:	813fffcc 	andi	r4,r16,65535
   361e8:	2085883a 	add	r2,r4,r2
   361ec:	11ed883a 	add	r22,r2,r7
   361f0:	a5000104 	addi	r20,r20,4
   361f4:	b02ad43a 	srli	r21,r22,16
   361f8:	a47feb36 	bltu	r20,r17,361a8 <__multiply+0x174>
   361fc:	bd800015 	stw	r22,0(r23)
   36200:	d8c00017 	ldw	r3,0(sp)
   36204:	94800104 	addi	r18,r18,4
   36208:	18c00104 	addi	r3,r3,4
   3620c:	d8c00015 	stw	r3,0(sp)
   36210:	d8c00317 	ldw	r3,12(sp)
   36214:	90ffbf36 	bltu	r18,r3,36114 <__multiply+0xe0>
   36218:	d8c00117 	ldw	r3,4(sp)
   3621c:	00c00c0e 	bge	zero,r3,36250 <__multiply+0x21c>
   36220:	d8c00217 	ldw	r3,8(sp)
   36224:	18bfff17 	ldw	r2,-4(r3)
   36228:	1d7fff04 	addi	r21,r3,-4
   3622c:	10000326 	beq	r2,zero,3623c <__multiply+0x208>
   36230:	00000706 	br	36250 <__multiply+0x21c>
   36234:	a8800017 	ldw	r2,0(r21)
   36238:	1000051e 	bne	r2,zero,36250 <__multiply+0x21c>
   3623c:	d8c00117 	ldw	r3,4(sp)
   36240:	ad7fff04 	addi	r21,r21,-4
   36244:	18ffffc4 	addi	r3,r3,-1
   36248:	d8c00115 	stw	r3,4(sp)
   3624c:	183ff91e 	bne	r3,zero,36234 <__multiply+0x200>
   36250:	d8800517 	ldw	r2,20(sp)
   36254:	d8c00117 	ldw	r3,4(sp)
   36258:	10c00415 	stw	r3,16(r2)
   3625c:	dfc00f17 	ldw	ra,60(sp)
   36260:	df000e17 	ldw	fp,56(sp)
   36264:	ddc00d17 	ldw	r23,52(sp)
   36268:	dd800c17 	ldw	r22,48(sp)
   3626c:	dd400b17 	ldw	r21,44(sp)
   36270:	dd000a17 	ldw	r20,40(sp)
   36274:	dcc00917 	ldw	r19,36(sp)
   36278:	dc800817 	ldw	r18,32(sp)
   3627c:	dc400717 	ldw	r17,28(sp)
   36280:	dc000617 	ldw	r16,24(sp)
   36284:	dec01004 	addi	sp,sp,64
   36288:	f800283a 	ret

0003628c <__pow5mult>:
   3628c:	defffb04 	addi	sp,sp,-20
   36290:	dcc00315 	stw	r19,12(sp)
   36294:	dc800215 	stw	r18,8(sp)
   36298:	dc000015 	stw	r16,0(sp)
   3629c:	dfc00415 	stw	ra,16(sp)
   362a0:	dc400115 	stw	r17,4(sp)
   362a4:	308000cc 	andi	r2,r6,3
   362a8:	3021883a 	mov	r16,r6
   362ac:	2027883a 	mov	r19,r4
   362b0:	2825883a 	mov	r18,r5
   362b4:	10002e1e 	bne	r2,zero,36370 <__pow5mult+0xe4>
   362b8:	8021d0ba 	srai	r16,r16,2
   362bc:	80001a26 	beq	r16,zero,36328 <__pow5mult+0x9c>
   362c0:	9c401217 	ldw	r17,72(r19)
   362c4:	8800061e 	bne	r17,zero,362e0 <__pow5mult+0x54>
   362c8:	00003406 	br	3639c <__pow5mult+0x110>
   362cc:	8021d07a 	srai	r16,r16,1
   362d0:	80001526 	beq	r16,zero,36328 <__pow5mult+0x9c>
   362d4:	88c00017 	ldw	r3,0(r17)
   362d8:	18001b26 	beq	r3,zero,36348 <__pow5mult+0xbc>
   362dc:	1823883a 	mov	r17,r3
   362e0:	80c0004c 	andi	r3,r16,1
   362e4:	183ff926 	beq	r3,zero,362cc <__pow5mult+0x40>
   362e8:	900b883a 	mov	r5,r18
   362ec:	880d883a 	mov	r6,r17
   362f0:	9809883a 	mov	r4,r19
   362f4:	00360340 	call	36034 <__multiply>
   362f8:	90001b26 	beq	r18,zero,36368 <__pow5mult+0xdc>
   362fc:	91000117 	ldw	r4,4(r18)
   36300:	98c01317 	ldw	r3,76(r19)
   36304:	8021d07a 	srai	r16,r16,1
   36308:	2109883a 	add	r4,r4,r4
   3630c:	2109883a 	add	r4,r4,r4
   36310:	1907883a 	add	r3,r3,r4
   36314:	19000017 	ldw	r4,0(r3)
   36318:	91000015 	stw	r4,0(r18)
   3631c:	1c800015 	stw	r18,0(r3)
   36320:	1025883a 	mov	r18,r2
   36324:	803feb1e 	bne	r16,zero,362d4 <__pow5mult+0x48>
   36328:	9005883a 	mov	r2,r18
   3632c:	dfc00417 	ldw	ra,16(sp)
   36330:	dcc00317 	ldw	r19,12(sp)
   36334:	dc800217 	ldw	r18,8(sp)
   36338:	dc400117 	ldw	r17,4(sp)
   3633c:	dc000017 	ldw	r16,0(sp)
   36340:	dec00504 	addi	sp,sp,20
   36344:	f800283a 	ret
   36348:	880b883a 	mov	r5,r17
   3634c:	880d883a 	mov	r6,r17
   36350:	9809883a 	mov	r4,r19
   36354:	00360340 	call	36034 <__multiply>
   36358:	88800015 	stw	r2,0(r17)
   3635c:	10000015 	stw	zero,0(r2)
   36360:	1023883a 	mov	r17,r2
   36364:	003fde06 	br	362e0 <__pow5mult+0x54>
   36368:	1025883a 	mov	r18,r2
   3636c:	003fd706 	br	362cc <__pow5mult+0x40>
   36370:	10bfffc4 	addi	r2,r2,-1
   36374:	1085883a 	add	r2,r2,r2
   36378:	00c00034 	movhi	r3,0
   3637c:	18c08804 	addi	r3,r3,544
   36380:	1085883a 	add	r2,r2,r2
   36384:	1885883a 	add	r2,r3,r2
   36388:	11800017 	ldw	r6,0(r2)
   3638c:	000f883a 	mov	r7,zero
   36390:	0035c980 	call	35c98 <__multadd>
   36394:	1025883a 	mov	r18,r2
   36398:	003fc706 	br	362b8 <__pow5mult+0x2c>
   3639c:	9809883a 	mov	r4,r19
   363a0:	01409c44 	movi	r5,625
   363a4:	0035ff80 	call	35ff8 <__i2b>
   363a8:	98801215 	stw	r2,72(r19)
   363ac:	1023883a 	mov	r17,r2
   363b0:	10000015 	stw	zero,0(r2)
   363b4:	003fca06 	br	362e0 <__pow5mult+0x54>

000363b8 <__lshift>:
   363b8:	defff904 	addi	sp,sp,-28
   363bc:	dd400515 	stw	r21,20(sp)
   363c0:	dc400115 	stw	r17,4(sp)
   363c4:	2d400417 	ldw	r21,16(r5)
   363c8:	3023d17a 	srai	r17,r6,5
   363cc:	28800217 	ldw	r2,8(r5)
   363d0:	dd000415 	stw	r20,16(sp)
   363d4:	8d6b883a 	add	r21,r17,r21
   363d8:	dcc00315 	stw	r19,12(sp)
   363dc:	dc800215 	stw	r18,8(sp)
   363e0:	dc000015 	stw	r16,0(sp)
   363e4:	dfc00615 	stw	ra,24(sp)
   363e8:	ac000044 	addi	r16,r21,1
   363ec:	2825883a 	mov	r18,r5
   363f0:	3029883a 	mov	r20,r6
   363f4:	2027883a 	mov	r19,r4
   363f8:	29400117 	ldw	r5,4(r5)
   363fc:	1400030e 	bge	r2,r16,3640c <__lshift+0x54>
   36400:	1085883a 	add	r2,r2,r2
   36404:	29400044 	addi	r5,r5,1
   36408:	143ffd16 	blt	r2,r16,36400 <__lshift+0x48>
   3640c:	9809883a 	mov	r4,r19
   36410:	0035bc80 	call	35bc8 <_Balloc>
   36414:	10c00504 	addi	r3,r2,20
   36418:	0440090e 	bge	zero,r17,36440 <__lshift+0x88>
   3641c:	000f883a 	mov	r7,zero
   36420:	18000015 	stw	zero,0(r3)
   36424:	39c00044 	addi	r7,r7,1
   36428:	18c00104 	addi	r3,r3,4
   3642c:	3c7ffc1e 	bne	r7,r17,36420 <__lshift+0x68>
   36430:	38c00144 	addi	r3,r7,5
   36434:	18c7883a 	add	r3,r3,r3
   36438:	18c7883a 	add	r3,r3,r3
   3643c:	10c7883a 	add	r3,r2,r3
   36440:	92000417 	ldw	r8,16(r18)
   36444:	a18007cc 	andi	r6,r20,31
   36448:	91c00504 	addi	r7,r18,20
   3644c:	42000144 	addi	r8,r8,5
   36450:	4211883a 	add	r8,r8,r8
   36454:	4211883a 	add	r8,r8,r8
   36458:	9211883a 	add	r8,r18,r8
   3645c:	30002226 	beq	r6,zero,364e8 <__lshift+0x130>
   36460:	02800804 	movi	r10,32
   36464:	5195c83a 	sub	r10,r10,r6
   36468:	000b883a 	mov	r5,zero
   3646c:	3a400017 	ldw	r9,0(r7)
   36470:	18c00104 	addi	r3,r3,4
   36474:	39c00104 	addi	r7,r7,4
   36478:	4992983a 	sll	r9,r9,r6
   3647c:	2a4ab03a 	or	r5,r5,r9
   36480:	197fff15 	stw	r5,-4(r3)
   36484:	397fff17 	ldw	r5,-4(r7)
   36488:	2a8ad83a 	srl	r5,r5,r10
   3648c:	3a3ff736 	bltu	r7,r8,3646c <__lshift+0xb4>
   36490:	19400015 	stw	r5,0(r3)
   36494:	28000126 	beq	r5,zero,3649c <__lshift+0xe4>
   36498:	ac000084 	addi	r16,r21,2
   3649c:	91000117 	ldw	r4,4(r18)
   364a0:	98c01317 	ldw	r3,76(r19)
   364a4:	843fffc4 	addi	r16,r16,-1
   364a8:	2109883a 	add	r4,r4,r4
   364ac:	2109883a 	add	r4,r4,r4
   364b0:	1907883a 	add	r3,r3,r4
   364b4:	19000017 	ldw	r4,0(r3)
   364b8:	14000415 	stw	r16,16(r2)
   364bc:	91000015 	stw	r4,0(r18)
   364c0:	1c800015 	stw	r18,0(r3)
   364c4:	dfc00617 	ldw	ra,24(sp)
   364c8:	dd400517 	ldw	r21,20(sp)
   364cc:	dd000417 	ldw	r20,16(sp)
   364d0:	dcc00317 	ldw	r19,12(sp)
   364d4:	dc800217 	ldw	r18,8(sp)
   364d8:	dc400117 	ldw	r17,4(sp)
   364dc:	dc000017 	ldw	r16,0(sp)
   364e0:	dec00704 	addi	sp,sp,28
   364e4:	f800283a 	ret
   364e8:	39400017 	ldw	r5,0(r7)
   364ec:	18c00104 	addi	r3,r3,4
   364f0:	39c00104 	addi	r7,r7,4
   364f4:	197fff15 	stw	r5,-4(r3)
   364f8:	3a3fe82e 	bgeu	r7,r8,3649c <__lshift+0xe4>
   364fc:	39400017 	ldw	r5,0(r7)
   36500:	18c00104 	addi	r3,r3,4
   36504:	39c00104 	addi	r7,r7,4
   36508:	197fff15 	stw	r5,-4(r3)
   3650c:	3a3ff636 	bltu	r7,r8,364e8 <__lshift+0x130>
   36510:	003fe206 	br	3649c <__lshift+0xe4>

00036514 <__mcmp>:
   36514:	20800417 	ldw	r2,16(r4)
   36518:	28c00417 	ldw	r3,16(r5)
   3651c:	10c5c83a 	sub	r2,r2,r3
   36520:	10000f1e 	bne	r2,zero,36560 <__mcmp+0x4c>
   36524:	18c00144 	addi	r3,r3,5
   36528:	18c7883a 	add	r3,r3,r3
   3652c:	18c7883a 	add	r3,r3,r3
   36530:	21c00504 	addi	r7,r4,20
   36534:	28cb883a 	add	r5,r5,r3
   36538:	20c9883a 	add	r4,r4,r3
   3653c:	213fff04 	addi	r4,r4,-4
   36540:	297fff04 	addi	r5,r5,-4
   36544:	21800017 	ldw	r6,0(r4)
   36548:	28c00017 	ldw	r3,0(r5)
   3654c:	30c0021e 	bne	r6,r3,36558 <__mcmp+0x44>
   36550:	393ffa36 	bltu	r7,r4,3653c <__mcmp+0x28>
   36554:	f800283a 	ret
   36558:	30c00236 	bltu	r6,r3,36564 <__mcmp+0x50>
   3655c:	00800044 	movi	r2,1
   36560:	f800283a 	ret
   36564:	00bfffc4 	movi	r2,-1
   36568:	f800283a 	ret

0003656c <__mdiff>:
   3656c:	defffb04 	addi	sp,sp,-20
   36570:	dc000015 	stw	r16,0(sp)
   36574:	2821883a 	mov	r16,r5
   36578:	dc800215 	stw	r18,8(sp)
   3657c:	300b883a 	mov	r5,r6
   36580:	2025883a 	mov	r18,r4
   36584:	8009883a 	mov	r4,r16
   36588:	dc400115 	stw	r17,4(sp)
   3658c:	dfc00415 	stw	ra,16(sp)
   36590:	dcc00315 	stw	r19,12(sp)
   36594:	3023883a 	mov	r17,r6
   36598:	00365140 	call	36514 <__mcmp>
   3659c:	10005026 	beq	r2,zero,366e0 <__mdiff+0x174>
   365a0:	10004a16 	blt	r2,zero,366cc <__mdiff+0x160>
   365a4:	0027883a 	mov	r19,zero
   365a8:	81400117 	ldw	r5,4(r16)
   365ac:	9009883a 	mov	r4,r18
   365b0:	0035bc80 	call	35bc8 <_Balloc>
   365b4:	82400417 	ldw	r9,16(r16)
   365b8:	89800417 	ldw	r6,16(r17)
   365bc:	14c00315 	stw	r19,12(r2)
   365c0:	4b800144 	addi	r14,r9,5
   365c4:	31800144 	addi	r6,r6,5
   365c8:	739d883a 	add	r14,r14,r14
   365cc:	318d883a 	add	r6,r6,r6
   365d0:	739d883a 	add	r14,r14,r14
   365d4:	318d883a 	add	r6,r6,r6
   365d8:	81c00504 	addi	r7,r16,20
   365dc:	839d883a 	add	r14,r16,r14
   365e0:	8a000504 	addi	r8,r17,20
   365e4:	898d883a 	add	r6,r17,r6
   365e8:	10c00504 	addi	r3,r2,20
   365ec:	0009883a 	mov	r4,zero
   365f0:	3b000017 	ldw	r12,0(r7)
   365f4:	42c00017 	ldw	r11,0(r8)
   365f8:	42000104 	addi	r8,r8,4
   365fc:	62bfffcc 	andi	r10,r12,65535
   36600:	5b7fffcc 	andi	r13,r11,65535
   36604:	5109883a 	add	r4,r10,r4
   36608:	2355c83a 	sub	r10,r4,r13
   3660c:	5816d43a 	srli	r11,r11,16
   36610:	6008d43a 	srli	r4,r12,16
   36614:	501bd43a 	srai	r13,r10,16
   36618:	1a80000d 	sth	r10,0(r3)
   3661c:	22c9c83a 	sub	r4,r4,r11
   36620:	2349883a 	add	r4,r4,r13
   36624:	1900008d 	sth	r4,2(r3)
   36628:	39c00104 	addi	r7,r7,4
   3662c:	2009d43a 	srai	r4,r4,16
   36630:	18c00104 	addi	r3,r3,4
   36634:	41bfee36 	bltu	r8,r6,365f0 <__mdiff+0x84>
   36638:	180b883a 	mov	r5,r3
   3663c:	3815883a 	mov	r10,r7
   36640:	3b80132e 	bgeu	r7,r14,36690 <__mdiff+0x124>
   36644:	3a000017 	ldw	r8,0(r7)
   36648:	18c00104 	addi	r3,r3,4
   3664c:	39c00104 	addi	r7,r7,4
   36650:	41bfffcc 	andi	r6,r8,65535
   36654:	310d883a 	add	r6,r6,r4
   36658:	3009d43a 	srai	r4,r6,16
   3665c:	4010d43a 	srli	r8,r8,16
   36660:	19bfff0d 	sth	r6,-4(r3)
   36664:	2209883a 	add	r4,r4,r8
   36668:	193fff8d 	sth	r4,-2(r3)
   3666c:	2009d43a 	srai	r4,r4,16
   36670:	3bbff436 	bltu	r7,r14,36644 <__mdiff+0xd8>
   36674:	0286303a 	nor	r3,zero,r10
   36678:	1b87883a 	add	r3,r3,r14
   3667c:	1806d0ba 	srli	r3,r3,2
   36680:	18c00044 	addi	r3,r3,1
   36684:	18c7883a 	add	r3,r3,r3
   36688:	18c7883a 	add	r3,r3,r3
   3668c:	28c7883a 	add	r3,r5,r3
   36690:	193fff17 	ldw	r4,-4(r3)
   36694:	18ffff04 	addi	r3,r3,-4
   36698:	2000041e 	bne	r4,zero,366ac <__mdiff+0x140>
   3669c:	18ffff04 	addi	r3,r3,-4
   366a0:	19000017 	ldw	r4,0(r3)
   366a4:	4a7fffc4 	addi	r9,r9,-1
   366a8:	203ffc26 	beq	r4,zero,3669c <__mdiff+0x130>
   366ac:	12400415 	stw	r9,16(r2)
   366b0:	dfc00417 	ldw	ra,16(sp)
   366b4:	dcc00317 	ldw	r19,12(sp)
   366b8:	dc800217 	ldw	r18,8(sp)
   366bc:	dc400117 	ldw	r17,4(sp)
   366c0:	dc000017 	ldw	r16,0(sp)
   366c4:	dec00504 	addi	sp,sp,20
   366c8:	f800283a 	ret
   366cc:	8005883a 	mov	r2,r16
   366d0:	04c00044 	movi	r19,1
   366d4:	8821883a 	mov	r16,r17
   366d8:	1023883a 	mov	r17,r2
   366dc:	003fb206 	br	365a8 <__mdiff+0x3c>
   366e0:	9009883a 	mov	r4,r18
   366e4:	000b883a 	mov	r5,zero
   366e8:	0035bc80 	call	35bc8 <_Balloc>
   366ec:	00c00044 	movi	r3,1
   366f0:	10c00415 	stw	r3,16(r2)
   366f4:	10000515 	stw	zero,20(r2)
   366f8:	dfc00417 	ldw	ra,16(sp)
   366fc:	dcc00317 	ldw	r19,12(sp)
   36700:	dc800217 	ldw	r18,8(sp)
   36704:	dc400117 	ldw	r17,4(sp)
   36708:	dc000017 	ldw	r16,0(sp)
   3670c:	dec00504 	addi	sp,sp,20
   36710:	f800283a 	ret

00036714 <__ulp>:
   36714:	295ffc2c 	andhi	r5,r5,32752
   36718:	00bf3034 	movhi	r2,64704
   3671c:	2887883a 	add	r3,r5,r2
   36720:	00c0020e 	bge	zero,r3,3672c <__ulp+0x18>
   36724:	0005883a 	mov	r2,zero
   36728:	f800283a 	ret
   3672c:	00c7c83a 	sub	r3,zero,r3
   36730:	1805d53a 	srai	r2,r3,20
   36734:	00c004c4 	movi	r3,19
   36738:	18800a0e 	bge	r3,r2,36764 <__ulp+0x50>
   3673c:	01000c84 	movi	r4,50
   36740:	0007883a 	mov	r3,zero
   36744:	20800516 	blt	r4,r2,3675c <__ulp+0x48>
   36748:	01000cc4 	movi	r4,51
   3674c:	2085c83a 	sub	r2,r4,r2
   36750:	01000044 	movi	r4,1
   36754:	2084983a 	sll	r2,r4,r2
   36758:	f800283a 	ret
   3675c:	00800044 	movi	r2,1
   36760:	f800283a 	ret
   36764:	00c00234 	movhi	r3,8
   36768:	1887d83a 	sra	r3,r3,r2
   3676c:	0005883a 	mov	r2,zero
   36770:	f800283a 	ret

00036774 <__b2d>:
   36774:	defffa04 	addi	sp,sp,-24
   36778:	dc000015 	stw	r16,0(sp)
   3677c:	24000417 	ldw	r16,16(r4)
   36780:	dc400115 	stw	r17,4(sp)
   36784:	dcc00315 	stw	r19,12(sp)
   36788:	84000144 	addi	r16,r16,5
   3678c:	8421883a 	add	r16,r16,r16
   36790:	8421883a 	add	r16,r16,r16
   36794:	2421883a 	add	r16,r4,r16
   36798:	847fff17 	ldw	r17,-4(r16)
   3679c:	24c00504 	addi	r19,r4,20
   367a0:	dd000415 	stw	r20,16(sp)
   367a4:	8809883a 	mov	r4,r17
   367a8:	dc800215 	stw	r18,8(sp)
   367ac:	2829883a 	mov	r20,r5
   367b0:	dfc00515 	stw	ra,20(sp)
   367b4:	0035ee00 	call	35ee0 <__hi0bits>
   367b8:	00c00804 	movi	r3,32
   367bc:	1887c83a 	sub	r3,r3,r2
   367c0:	a0c00015 	stw	r3,0(r20)
   367c4:	00c00284 	movi	r3,10
   367c8:	84bfff04 	addi	r18,r16,-4
   367cc:	18801216 	blt	r3,r2,36818 <__b2d+0xa4>
   367d0:	010002c4 	movi	r4,11
   367d4:	2089c83a 	sub	r4,r4,r2
   367d8:	8906d83a 	srl	r3,r17,r4
   367dc:	18cffc34 	orhi	r3,r3,16368
   367e0:	9c80322e 	bgeu	r19,r18,368ac <__b2d+0x138>
   367e4:	817ffe17 	ldw	r5,-8(r16)
   367e8:	2908d83a 	srl	r4,r5,r4
   367ec:	10800544 	addi	r2,r2,21
   367f0:	88a2983a 	sll	r17,r17,r2
   367f4:	2444b03a 	or	r2,r4,r17
   367f8:	dfc00517 	ldw	ra,20(sp)
   367fc:	dd000417 	ldw	r20,16(sp)
   36800:	dcc00317 	ldw	r19,12(sp)
   36804:	dc800217 	ldw	r18,8(sp)
   36808:	dc400117 	ldw	r17,4(sp)
   3680c:	dc000017 	ldw	r16,0(sp)
   36810:	dec00604 	addi	sp,sp,24
   36814:	f800283a 	ret
   36818:	9c801636 	bltu	r19,r18,36874 <__b2d+0x100>
   3681c:	113ffd44 	addi	r4,r2,-11
   36820:	000b883a 	mov	r5,zero
   36824:	20001726 	beq	r4,zero,36884 <__b2d+0x110>
   36828:	00c00ac4 	movi	r3,43
   3682c:	1885c83a 	sub	r2,r3,r2
   36830:	8906983a 	sll	r3,r17,r4
   36834:	288cd83a 	srl	r6,r5,r2
   36838:	18cffc34 	orhi	r3,r3,16368
   3683c:	1986b03a 	or	r3,r3,r6
   36840:	9c801c2e 	bgeu	r19,r18,368b4 <__b2d+0x140>
   36844:	91bfff17 	ldw	r6,-4(r18)
   36848:	3084d83a 	srl	r2,r6,r2
   3684c:	2908983a 	sll	r4,r5,r4
   36850:	1104b03a 	or	r2,r2,r4
   36854:	dfc00517 	ldw	ra,20(sp)
   36858:	dd000417 	ldw	r20,16(sp)
   3685c:	dcc00317 	ldw	r19,12(sp)
   36860:	dc800217 	ldw	r18,8(sp)
   36864:	dc400117 	ldw	r17,4(sp)
   36868:	dc000017 	ldw	r16,0(sp)
   3686c:	dec00604 	addi	sp,sp,24
   36870:	f800283a 	ret
   36874:	113ffd44 	addi	r4,r2,-11
   36878:	84bffe04 	addi	r18,r16,-8
   3687c:	817ffe17 	ldw	r5,-8(r16)
   36880:	203fe91e 	bne	r4,zero,36828 <__b2d+0xb4>
   36884:	88cffc34 	orhi	r3,r17,16368
   36888:	2805883a 	mov	r2,r5
   3688c:	dfc00517 	ldw	ra,20(sp)
   36890:	dd000417 	ldw	r20,16(sp)
   36894:	dcc00317 	ldw	r19,12(sp)
   36898:	dc800217 	ldw	r18,8(sp)
   3689c:	dc400117 	ldw	r17,4(sp)
   368a0:	dc000017 	ldw	r16,0(sp)
   368a4:	dec00604 	addi	sp,sp,24
   368a8:	f800283a 	ret
   368ac:	0009883a 	mov	r4,zero
   368b0:	003fce06 	br	367ec <__b2d+0x78>
   368b4:	0005883a 	mov	r2,zero
   368b8:	003fe406 	br	3684c <__b2d+0xd8>

000368bc <__d2b>:
   368bc:	defff804 	addi	sp,sp,-32
   368c0:	dc400315 	stw	r17,12(sp)
   368c4:	3023883a 	mov	r17,r6
   368c8:	dc800415 	stw	r18,16(sp)
   368cc:	8824907a 	slli	r18,r17,1
   368d0:	dcc00515 	stw	r19,20(sp)
   368d4:	2827883a 	mov	r19,r5
   368d8:	9024d57a 	srli	r18,r18,21
   368dc:	01400044 	movi	r5,1
   368e0:	dd000615 	stw	r20,24(sp)
   368e4:	dc000215 	stw	r16,8(sp)
   368e8:	dfc00715 	stw	ra,28(sp)
   368ec:	3829883a 	mov	r20,r7
   368f0:	0035bc80 	call	35bc8 <_Balloc>
   368f4:	1021883a 	mov	r16,r2
   368f8:	00800434 	movhi	r2,16
   368fc:	10bfffc4 	addi	r2,r2,-1
   36900:	88a2703a 	and	r17,r17,r2
   36904:	90000126 	beq	r18,zero,3690c <__d2b+0x50>
   36908:	8c400434 	orhi	r17,r17,16
   3690c:	dc400015 	stw	r17,0(sp)
   36910:	98002226 	beq	r19,zero,3699c <__d2b+0xe0>
   36914:	d9000104 	addi	r4,sp,4
   36918:	dcc00115 	stw	r19,4(sp)
   3691c:	0035f480 	call	35f48 <__lo0bits>
   36920:	d8c00017 	ldw	r3,0(sp)
   36924:	10002d1e 	bne	r2,zero,369dc <__d2b+0x120>
   36928:	d9000117 	ldw	r4,4(sp)
   3692c:	81000515 	stw	r4,20(r16)
   36930:	1823003a 	cmpeq	r17,r3,zero
   36934:	01000084 	movi	r4,2
   36938:	2463c83a 	sub	r17,r4,r17
   3693c:	80c00615 	stw	r3,24(r16)
   36940:	84400415 	stw	r17,16(r16)
   36944:	90001d1e 	bne	r18,zero,369bc <__d2b+0x100>
   36948:	88c00104 	addi	r3,r17,4
   3694c:	18c7883a 	add	r3,r3,r3
   36950:	18c7883a 	add	r3,r3,r3
   36954:	80c7883a 	add	r3,r16,r3
   36958:	19000017 	ldw	r4,0(r3)
   3695c:	10bef384 	addi	r2,r2,-1074
   36960:	a0800015 	stw	r2,0(r20)
   36964:	0035ee00 	call	35ee0 <__hi0bits>
   36968:	8822917a 	slli	r17,r17,5
   3696c:	d8c00817 	ldw	r3,32(sp)
   36970:	8885c83a 	sub	r2,r17,r2
   36974:	18800015 	stw	r2,0(r3)
   36978:	8005883a 	mov	r2,r16
   3697c:	dfc00717 	ldw	ra,28(sp)
   36980:	dd000617 	ldw	r20,24(sp)
   36984:	dcc00517 	ldw	r19,20(sp)
   36988:	dc800417 	ldw	r18,16(sp)
   3698c:	dc400317 	ldw	r17,12(sp)
   36990:	dc000217 	ldw	r16,8(sp)
   36994:	dec00804 	addi	sp,sp,32
   36998:	f800283a 	ret
   3699c:	d809883a 	mov	r4,sp
   369a0:	0035f480 	call	35f48 <__lo0bits>
   369a4:	d8c00017 	ldw	r3,0(sp)
   369a8:	04400044 	movi	r17,1
   369ac:	84400415 	stw	r17,16(r16)
   369b0:	80c00515 	stw	r3,20(r16)
   369b4:	10800804 	addi	r2,r2,32
   369b8:	903fe326 	beq	r18,zero,36948 <__d2b+0x8c>
   369bc:	00c00d44 	movi	r3,53
   369c0:	94bef344 	addi	r18,r18,-1075
   369c4:	90a5883a 	add	r18,r18,r2
   369c8:	1885c83a 	sub	r2,r3,r2
   369cc:	d8c00817 	ldw	r3,32(sp)
   369d0:	a4800015 	stw	r18,0(r20)
   369d4:	18800015 	stw	r2,0(r3)
   369d8:	003fe706 	br	36978 <__d2b+0xbc>
   369dc:	01000804 	movi	r4,32
   369e0:	2089c83a 	sub	r4,r4,r2
   369e4:	1908983a 	sll	r4,r3,r4
   369e8:	d9400117 	ldw	r5,4(sp)
   369ec:	1886d83a 	srl	r3,r3,r2
   369f0:	2148b03a 	or	r4,r4,r5
   369f4:	81000515 	stw	r4,20(r16)
   369f8:	d8c00015 	stw	r3,0(sp)
   369fc:	003fcc06 	br	36930 <__d2b+0x74>

00036a00 <__ratio>:
   36a00:	defff904 	addi	sp,sp,-28
   36a04:	dc400315 	stw	r17,12(sp)
   36a08:	2823883a 	mov	r17,r5
   36a0c:	d9400104 	addi	r5,sp,4
   36a10:	dfc00615 	stw	ra,24(sp)
   36a14:	dcc00515 	stw	r19,20(sp)
   36a18:	dc800415 	stw	r18,16(sp)
   36a1c:	2027883a 	mov	r19,r4
   36a20:	dc000215 	stw	r16,8(sp)
   36a24:	00367740 	call	36774 <__b2d>
   36a28:	8809883a 	mov	r4,r17
   36a2c:	d80b883a 	mov	r5,sp
   36a30:	1025883a 	mov	r18,r2
   36a34:	1821883a 	mov	r16,r3
   36a38:	00367740 	call	36774 <__b2d>
   36a3c:	99400417 	ldw	r5,16(r19)
   36a40:	89000417 	ldw	r4,16(r17)
   36a44:	d9800117 	ldw	r6,4(sp)
   36a48:	2909c83a 	sub	r4,r5,r4
   36a4c:	d9400017 	ldw	r5,0(sp)
   36a50:	2008917a 	slli	r4,r4,5
   36a54:	314bc83a 	sub	r5,r6,r5
   36a58:	290b883a 	add	r5,r5,r4
   36a5c:	01400e0e 	bge	zero,r5,36a98 <__ratio+0x98>
   36a60:	280a953a 	slli	r5,r5,20
   36a64:	2c21883a 	add	r16,r5,r16
   36a68:	9009883a 	mov	r4,r18
   36a6c:	800b883a 	mov	r5,r16
   36a70:	100d883a 	mov	r6,r2
   36a74:	180f883a 	mov	r7,r3
   36a78:	0038cb40 	call	38cb4 <__divdf3>
   36a7c:	dfc00617 	ldw	ra,24(sp)
   36a80:	dcc00517 	ldw	r19,20(sp)
   36a84:	dc800417 	ldw	r18,16(sp)
   36a88:	dc400317 	ldw	r17,12(sp)
   36a8c:	dc000217 	ldw	r16,8(sp)
   36a90:	dec00704 	addi	sp,sp,28
   36a94:	f800283a 	ret
   36a98:	280a953a 	slli	r5,r5,20
   36a9c:	1947c83a 	sub	r3,r3,r5
   36aa0:	003ff106 	br	36a68 <__ratio+0x68>

00036aa4 <_mprec_log10>:
   36aa4:	defffe04 	addi	sp,sp,-8
   36aa8:	dc000015 	stw	r16,0(sp)
   36aac:	dfc00115 	stw	ra,4(sp)
   36ab0:	008005c4 	movi	r2,23
   36ab4:	2021883a 	mov	r16,r4
   36ab8:	11000d0e 	bge	r2,r4,36af0 <_mprec_log10+0x4c>
   36abc:	0005883a 	mov	r2,zero
   36ac0:	00cffc34 	movhi	r3,16368
   36ac4:	843fffc4 	addi	r16,r16,-1
   36ac8:	1009883a 	mov	r4,r2
   36acc:	180b883a 	mov	r5,r3
   36ad0:	000d883a 	mov	r6,zero
   36ad4:	01d00934 	movhi	r7,16420
   36ad8:	00389d00 	call	389d0 <__muldf3>
   36adc:	803ff91e 	bne	r16,zero,36ac4 <_mprec_log10+0x20>
   36ae0:	dfc00117 	ldw	ra,4(sp)
   36ae4:	dc000017 	ldw	r16,0(sp)
   36ae8:	dec00204 	addi	sp,sp,8
   36aec:	f800283a 	ret
   36af0:	202090fa 	slli	r16,r4,3
   36af4:	00800034 	movhi	r2,0
   36af8:	10805604 	addi	r2,r2,344
   36afc:	1421883a 	add	r16,r2,r16
   36b00:	80800017 	ldw	r2,0(r16)
   36b04:	80c00117 	ldw	r3,4(r16)
   36b08:	dfc00117 	ldw	ra,4(sp)
   36b0c:	dc000017 	ldw	r16,0(sp)
   36b10:	dec00204 	addi	sp,sp,8
   36b14:	f800283a 	ret

00036b18 <__copybits>:
   36b18:	297fffc4 	addi	r5,r5,-1
   36b1c:	31c00417 	ldw	r7,16(r6)
   36b20:	2811d17a 	srai	r8,r5,5
   36b24:	30800504 	addi	r2,r6,20
   36b28:	39c00144 	addi	r7,r7,5
   36b2c:	42000044 	addi	r8,r8,1
   36b30:	39cf883a 	add	r7,r7,r7
   36b34:	4211883a 	add	r8,r8,r8
   36b38:	39cf883a 	add	r7,r7,r7
   36b3c:	4211883a 	add	r8,r8,r8
   36b40:	31cf883a 	add	r7,r6,r7
   36b44:	2211883a 	add	r8,r4,r8
   36b48:	11c00d2e 	bgeu	r2,r7,36b80 <__copybits+0x68>
   36b4c:	2007883a 	mov	r3,r4
   36b50:	11400017 	ldw	r5,0(r2)
   36b54:	18c00104 	addi	r3,r3,4
   36b58:	10800104 	addi	r2,r2,4
   36b5c:	197fff15 	stw	r5,-4(r3)
   36b60:	11fffb36 	bltu	r2,r7,36b50 <__copybits+0x38>
   36b64:	3985c83a 	sub	r2,r7,r6
   36b68:	10bffac4 	addi	r2,r2,-21
   36b6c:	1004d0ba 	srli	r2,r2,2
   36b70:	10800044 	addi	r2,r2,1
   36b74:	1085883a 	add	r2,r2,r2
   36b78:	1085883a 	add	r2,r2,r2
   36b7c:	2089883a 	add	r4,r4,r2
   36b80:	2200032e 	bgeu	r4,r8,36b90 <__copybits+0x78>
   36b84:	20000015 	stw	zero,0(r4)
   36b88:	21000104 	addi	r4,r4,4
   36b8c:	223ffd36 	bltu	r4,r8,36b84 <__copybits+0x6c>
   36b90:	f800283a 	ret

00036b94 <__any_on>:
   36b94:	21800417 	ldw	r6,16(r4)
   36b98:	2805d17a 	srai	r2,r5,5
   36b9c:	20c00504 	addi	r3,r4,20
   36ba0:	30800f0e 	bge	r6,r2,36be0 <__any_on+0x4c>
   36ba4:	3005883a 	mov	r2,r6
   36ba8:	10800144 	addi	r2,r2,5
   36bac:	1085883a 	add	r2,r2,r2
   36bb0:	1085883a 	add	r2,r2,r2
   36bb4:	2089883a 	add	r4,r4,r2
   36bb8:	1900152e 	bgeu	r3,r4,36c10 <__any_on+0x7c>
   36bbc:	20bfff17 	ldw	r2,-4(r4)
   36bc0:	213fff04 	addi	r4,r4,-4
   36bc4:	1000041e 	bne	r2,zero,36bd8 <__any_on+0x44>
   36bc8:	1900112e 	bgeu	r3,r4,36c10 <__any_on+0x7c>
   36bcc:	213fff04 	addi	r4,r4,-4
   36bd0:	20800017 	ldw	r2,0(r4)
   36bd4:	103ffc26 	beq	r2,zero,36bc8 <__any_on+0x34>
   36bd8:	00800044 	movi	r2,1
   36bdc:	f800283a 	ret
   36be0:	11bff10e 	bge	r2,r6,36ba8 <__any_on+0x14>
   36be4:	294007cc 	andi	r5,r5,31
   36be8:	283fef26 	beq	r5,zero,36ba8 <__any_on+0x14>
   36bec:	11800144 	addi	r6,r2,5
   36bf0:	318d883a 	add	r6,r6,r6
   36bf4:	318d883a 	add	r6,r6,r6
   36bf8:	218d883a 	add	r6,r4,r6
   36bfc:	31800017 	ldw	r6,0(r6)
   36c00:	314ed83a 	srl	r7,r6,r5
   36c04:	394a983a 	sll	r5,r7,r5
   36c08:	29bff31e 	bne	r5,r6,36bd8 <__any_on+0x44>
   36c0c:	003fe606 	br	36ba8 <__any_on+0x14>
   36c10:	0005883a 	mov	r2,zero
   36c14:	f800283a 	ret

00036c18 <_realloc_r>:
   36c18:	defff504 	addi	sp,sp,-44
   36c1c:	dd400615 	stw	r21,24(sp)
   36c20:	dc800315 	stw	r18,12(sp)
   36c24:	dc000115 	stw	r16,4(sp)
   36c28:	dfc00a15 	stw	ra,40(sp)
   36c2c:	df000915 	stw	fp,36(sp)
   36c30:	ddc00815 	stw	r23,32(sp)
   36c34:	dd800715 	stw	r22,28(sp)
   36c38:	dd000515 	stw	r20,20(sp)
   36c3c:	dcc00415 	stw	r19,16(sp)
   36c40:	dc400215 	stw	r17,8(sp)
   36c44:	2821883a 	mov	r16,r5
   36c48:	202b883a 	mov	r21,r4
   36c4c:	3025883a 	mov	r18,r6
   36c50:	28009626 	beq	r5,zero,36eac <_realloc_r+0x294>
   36c54:	003a0600 	call	3a060 <__malloc_lock>
   36c58:	80bfff17 	ldw	r2,-4(r16)
   36c5c:	04ffff04 	movi	r19,-4
   36c60:	90c002c4 	addi	r3,r18,11
   36c64:	01000584 	movi	r4,22
   36c68:	85bffe04 	addi	r22,r16,-8
   36c6c:	14e6703a 	and	r19,r2,r19
   36c70:	20c0372e 	bgeu	r4,r3,36d50 <_realloc_r+0x138>
   36c74:	047ffe04 	movi	r17,-8
   36c78:	1c62703a 	and	r17,r3,r17
   36c7c:	8807883a 	mov	r3,r17
   36c80:	88005a16 	blt	r17,zero,36dec <_realloc_r+0x1d4>
   36c84:	8c805936 	bltu	r17,r18,36dec <_realloc_r+0x1d4>
   36c88:	98c0340e 	bge	r19,r3,36d5c <_realloc_r+0x144>
   36c8c:	07000034 	movhi	fp,0
   36c90:	e701de04 	addi	fp,fp,1912
   36c94:	e1400217 	ldw	r5,8(fp)
   36c98:	b4c9883a 	add	r4,r22,r19
   36c9c:	29009026 	beq	r5,r4,36ee0 <_realloc_r+0x2c8>
   36ca0:	21800117 	ldw	r6,4(r4)
   36ca4:	01ffff84 	movi	r7,-2
   36ca8:	31ce703a 	and	r7,r6,r7
   36cac:	21cf883a 	add	r7,r4,r7
   36cb0:	39c00117 	ldw	r7,4(r7)
   36cb4:	39c0004c 	andi	r7,r7,1
   36cb8:	38004326 	beq	r7,zero,36dc8 <_realloc_r+0x1b0>
   36cbc:	000d883a 	mov	r6,zero
   36cc0:	0009883a 	mov	r4,zero
   36cc4:	1080004c 	andi	r2,r2,1
   36cc8:	10005a1e 	bne	r2,zero,36e34 <_realloc_r+0x21c>
   36ccc:	85fffe17 	ldw	r23,-8(r16)
   36cd0:	00bfff04 	movi	r2,-4
   36cd4:	b5efc83a 	sub	r23,r22,r23
   36cd8:	b9c00117 	ldw	r7,4(r23)
   36cdc:	388e703a 	and	r7,r7,r2
   36ce0:	3ccf883a 	add	r7,r7,r19
   36ce4:	20005226 	beq	r4,zero,36e30 <_realloc_r+0x218>
   36ce8:	31e9883a 	add	r20,r6,r7
   36cec:	2140c726 	beq	r4,r5,3700c <_realloc_r+0x3f4>
   36cf0:	a0c04f16 	blt	r20,r3,36e30 <_realloc_r+0x218>
   36cf4:	20800317 	ldw	r2,12(r4)
   36cf8:	20c00217 	ldw	r3,8(r4)
   36cfc:	99bfff04 	addi	r6,r19,-4
   36d00:	01000904 	movi	r4,36
   36d04:	18800315 	stw	r2,12(r3)
   36d08:	10c00215 	stw	r3,8(r2)
   36d0c:	b8c00217 	ldw	r3,8(r23)
   36d10:	b8800317 	ldw	r2,12(r23)
   36d14:	bc800204 	addi	r18,r23,8
   36d18:	18800315 	stw	r2,12(r3)
   36d1c:	10c00215 	stw	r3,8(r2)
   36d20:	2180ed36 	bltu	r4,r6,370d8 <_realloc_r+0x4c0>
   36d24:	008004c4 	movi	r2,19
   36d28:	11809b2e 	bgeu	r2,r6,36f98 <_realloc_r+0x380>
   36d2c:	80800017 	ldw	r2,0(r16)
   36d30:	b8800215 	stw	r2,8(r23)
   36d34:	80800117 	ldw	r2,4(r16)
   36d38:	b8800315 	stw	r2,12(r23)
   36d3c:	008006c4 	movi	r2,27
   36d40:	1180f936 	bltu	r2,r6,37128 <_realloc_r+0x510>
   36d44:	b8800404 	addi	r2,r23,16
   36d48:	80c00204 	addi	r3,r16,8
   36d4c:	00009406 	br	36fa0 <_realloc_r+0x388>
   36d50:	00c00404 	movi	r3,16
   36d54:	1823883a 	mov	r17,r3
   36d58:	003fca06 	br	36c84 <_realloc_r+0x6c>
   36d5c:	9829883a 	mov	r20,r19
   36d60:	a447c83a 	sub	r3,r20,r17
   36d64:	010003c4 	movi	r4,15
   36d68:	1080004c 	andi	r2,r2,1
   36d6c:	20c02336 	bltu	r4,r3,36dfc <_realloc_r+0x1e4>
   36d70:	1504b03a 	or	r2,r2,r20
   36d74:	b0800115 	stw	r2,4(r22)
   36d78:	b52d883a 	add	r22,r22,r20
   36d7c:	b0800117 	ldw	r2,4(r22)
   36d80:	10800054 	ori	r2,r2,1
   36d84:	b0800115 	stw	r2,4(r22)
   36d88:	a809883a 	mov	r4,r21
   36d8c:	003a0800 	call	3a080 <__malloc_unlock>
   36d90:	8025883a 	mov	r18,r16
   36d94:	9005883a 	mov	r2,r18
   36d98:	dfc00a17 	ldw	ra,40(sp)
   36d9c:	df000917 	ldw	fp,36(sp)
   36da0:	ddc00817 	ldw	r23,32(sp)
   36da4:	dd800717 	ldw	r22,28(sp)
   36da8:	dd400617 	ldw	r21,24(sp)
   36dac:	dd000517 	ldw	r20,20(sp)
   36db0:	dcc00417 	ldw	r19,16(sp)
   36db4:	dc800317 	ldw	r18,12(sp)
   36db8:	dc400217 	ldw	r17,8(sp)
   36dbc:	dc000117 	ldw	r16,4(sp)
   36dc0:	dec00b04 	addi	sp,sp,44
   36dc4:	f800283a 	ret
   36dc8:	01ffff04 	movi	r7,-4
   36dcc:	31cc703a 	and	r6,r6,r7
   36dd0:	34e9883a 	add	r20,r6,r19
   36dd4:	a0ffbb16 	blt	r20,r3,36cc4 <_realloc_r+0xac>
   36dd8:	20c00317 	ldw	r3,12(r4)
   36ddc:	21000217 	ldw	r4,8(r4)
   36de0:	20c00315 	stw	r3,12(r4)
   36de4:	19000215 	stw	r4,8(r3)
   36de8:	003fdd06 	br	36d60 <_realloc_r+0x148>
   36dec:	00800304 	movi	r2,12
   36df0:	a8800015 	stw	r2,0(r21)
   36df4:	0025883a 	mov	r18,zero
   36df8:	003fe606 	br	36d94 <_realloc_r+0x17c>
   36dfc:	1444b03a 	or	r2,r2,r17
   36e00:	b0800115 	stw	r2,4(r22)
   36e04:	b44b883a 	add	r5,r22,r17
   36e08:	18800054 	ori	r2,r3,1
   36e0c:	28800115 	stw	r2,4(r5)
   36e10:	28c7883a 	add	r3,r5,r3
   36e14:	18800117 	ldw	r2,4(r3)
   36e18:	a809883a 	mov	r4,r21
   36e1c:	29400204 	addi	r5,r5,8
   36e20:	10800054 	ori	r2,r2,1
   36e24:	18800115 	stw	r2,4(r3)
   36e28:	003440c0 	call	3440c <_free_r>
   36e2c:	003fd606 	br	36d88 <_realloc_r+0x170>
   36e30:	38c0330e 	bge	r7,r3,36f00 <_realloc_r+0x2e8>
   36e34:	900b883a 	mov	r5,r18
   36e38:	a809883a 	mov	r4,r21
   36e3c:	0034fa40 	call	34fa4 <_malloc_r>
   36e40:	1025883a 	mov	r18,r2
   36e44:	10001626 	beq	r2,zero,36ea0 <_realloc_r+0x288>
   36e48:	80bfff17 	ldw	r2,-4(r16)
   36e4c:	00ffff84 	movi	r3,-2
   36e50:	913ffe04 	addi	r4,r18,-8
   36e54:	10c6703a 	and	r3,r2,r3
   36e58:	b0c7883a 	add	r3,r22,r3
   36e5c:	20c09926 	beq	r4,r3,370c4 <_realloc_r+0x4ac>
   36e60:	99bfff04 	addi	r6,r19,-4
   36e64:	00800904 	movi	r2,36
   36e68:	11806436 	bltu	r2,r6,36ffc <_realloc_r+0x3e4>
   36e6c:	00c004c4 	movi	r3,19
   36e70:	19804036 	bltu	r3,r6,36f74 <_realloc_r+0x35c>
   36e74:	9005883a 	mov	r2,r18
   36e78:	8007883a 	mov	r3,r16
   36e7c:	19000017 	ldw	r4,0(r3)
   36e80:	11000015 	stw	r4,0(r2)
   36e84:	19000117 	ldw	r4,4(r3)
   36e88:	11000115 	stw	r4,4(r2)
   36e8c:	18c00217 	ldw	r3,8(r3)
   36e90:	10c00215 	stw	r3,8(r2)
   36e94:	a809883a 	mov	r4,r21
   36e98:	800b883a 	mov	r5,r16
   36e9c:	003440c0 	call	3440c <_free_r>
   36ea0:	a809883a 	mov	r4,r21
   36ea4:	003a0800 	call	3a080 <__malloc_unlock>
   36ea8:	003fba06 	br	36d94 <_realloc_r+0x17c>
   36eac:	300b883a 	mov	r5,r6
   36eb0:	dfc00a17 	ldw	ra,40(sp)
   36eb4:	df000917 	ldw	fp,36(sp)
   36eb8:	ddc00817 	ldw	r23,32(sp)
   36ebc:	dd800717 	ldw	r22,28(sp)
   36ec0:	dd400617 	ldw	r21,24(sp)
   36ec4:	dd000517 	ldw	r20,20(sp)
   36ec8:	dcc00417 	ldw	r19,16(sp)
   36ecc:	dc800317 	ldw	r18,12(sp)
   36ed0:	dc400217 	ldw	r17,8(sp)
   36ed4:	dc000117 	ldw	r16,4(sp)
   36ed8:	dec00b04 	addi	sp,sp,44
   36edc:	0034fa41 	jmpi	34fa4 <_malloc_r>
   36ee0:	29800117 	ldw	r6,4(r5)
   36ee4:	013fff04 	movi	r4,-4
   36ee8:	89c00404 	addi	r7,r17,16
   36eec:	310c703a 	and	r6,r6,r4
   36ef0:	34c9883a 	add	r4,r6,r19
   36ef4:	21c0340e 	bge	r4,r7,36fc8 <_realloc_r+0x3b0>
   36ef8:	2809883a 	mov	r4,r5
   36efc:	003f7106 	br	36cc4 <_realloc_r+0xac>
   36f00:	b8800317 	ldw	r2,12(r23)
   36f04:	b8c00217 	ldw	r3,8(r23)
   36f08:	99bfff04 	addi	r6,r19,-4
   36f0c:	01000904 	movi	r4,36
   36f10:	18800315 	stw	r2,12(r3)
   36f14:	10c00215 	stw	r3,8(r2)
   36f18:	bc800204 	addi	r18,r23,8
   36f1c:	21807836 	bltu	r4,r6,37100 <_realloc_r+0x4e8>
   36f20:	008004c4 	movi	r2,19
   36f24:	1180732e 	bgeu	r2,r6,370f4 <_realloc_r+0x4dc>
   36f28:	80800017 	ldw	r2,0(r16)
   36f2c:	b8800215 	stw	r2,8(r23)
   36f30:	80800117 	ldw	r2,4(r16)
   36f34:	b8800315 	stw	r2,12(r23)
   36f38:	008006c4 	movi	r2,27
   36f3c:	11808936 	bltu	r2,r6,37164 <_realloc_r+0x54c>
   36f40:	b8800404 	addi	r2,r23,16
   36f44:	80c00204 	addi	r3,r16,8
   36f48:	19000017 	ldw	r4,0(r3)
   36f4c:	9021883a 	mov	r16,r18
   36f50:	3829883a 	mov	r20,r7
   36f54:	11000015 	stw	r4,0(r2)
   36f58:	19000117 	ldw	r4,4(r3)
   36f5c:	b82d883a 	mov	r22,r23
   36f60:	11000115 	stw	r4,4(r2)
   36f64:	18c00217 	ldw	r3,8(r3)
   36f68:	10c00215 	stw	r3,8(r2)
   36f6c:	b8800117 	ldw	r2,4(r23)
   36f70:	003f7b06 	br	36d60 <_realloc_r+0x148>
   36f74:	80c00017 	ldw	r3,0(r16)
   36f78:	90c00015 	stw	r3,0(r18)
   36f7c:	80c00117 	ldw	r3,4(r16)
   36f80:	90c00115 	stw	r3,4(r18)
   36f84:	00c006c4 	movi	r3,27
   36f88:	19804636 	bltu	r3,r6,370a4 <_realloc_r+0x48c>
   36f8c:	90800204 	addi	r2,r18,8
   36f90:	80c00204 	addi	r3,r16,8
   36f94:	003fb906 	br	36e7c <_realloc_r+0x264>
   36f98:	9005883a 	mov	r2,r18
   36f9c:	8007883a 	mov	r3,r16
   36fa0:	19000017 	ldw	r4,0(r3)
   36fa4:	9021883a 	mov	r16,r18
   36fa8:	b82d883a 	mov	r22,r23
   36fac:	11000015 	stw	r4,0(r2)
   36fb0:	19000117 	ldw	r4,4(r3)
   36fb4:	11000115 	stw	r4,4(r2)
   36fb8:	18c00217 	ldw	r3,8(r3)
   36fbc:	10c00215 	stw	r3,8(r2)
   36fc0:	b8800117 	ldw	r2,4(r23)
   36fc4:	003f6606 	br	36d60 <_realloc_r+0x148>
   36fc8:	2445c83a 	sub	r2,r4,r17
   36fcc:	b46d883a 	add	r22,r22,r17
   36fd0:	10800054 	ori	r2,r2,1
   36fd4:	b0800115 	stw	r2,4(r22)
   36fd8:	80bfff17 	ldw	r2,-4(r16)
   36fdc:	a809883a 	mov	r4,r21
   36fe0:	e5800215 	stw	r22,8(fp)
   36fe4:	1080004c 	andi	r2,r2,1
   36fe8:	88a2b03a 	or	r17,r17,r2
   36fec:	847fff15 	stw	r17,-4(r16)
   36ff0:	003a0800 	call	3a080 <__malloc_unlock>
   36ff4:	8025883a 	mov	r18,r16
   36ff8:	003f6606 	br	36d94 <_realloc_r+0x17c>
   36ffc:	9009883a 	mov	r4,r18
   37000:	800b883a 	mov	r5,r16
   37004:	00359600 	call	35960 <memmove>
   37008:	003fa206 	br	36e94 <_realloc_r+0x27c>
   3700c:	88800404 	addi	r2,r17,16
   37010:	a0bf8716 	blt	r20,r2,36e30 <_realloc_r+0x218>
   37014:	b8800317 	ldw	r2,12(r23)
   37018:	b8c00217 	ldw	r3,8(r23)
   3701c:	99bfff04 	addi	r6,r19,-4
   37020:	01000904 	movi	r4,36
   37024:	18800315 	stw	r2,12(r3)
   37028:	10c00215 	stw	r3,8(r2)
   3702c:	bc800204 	addi	r18,r23,8
   37030:	21806536 	bltu	r4,r6,371c8 <_realloc_r+0x5b0>
   37034:	008004c4 	movi	r2,19
   37038:	1180592e 	bgeu	r2,r6,371a0 <_realloc_r+0x588>
   3703c:	80800017 	ldw	r2,0(r16)
   37040:	b8800215 	stw	r2,8(r23)
   37044:	80800117 	ldw	r2,4(r16)
   37048:	b8800315 	stw	r2,12(r23)
   3704c:	008006c4 	movi	r2,27
   37050:	11806136 	bltu	r2,r6,371d8 <_realloc_r+0x5c0>
   37054:	b8800404 	addi	r2,r23,16
   37058:	80c00204 	addi	r3,r16,8
   3705c:	19000017 	ldw	r4,0(r3)
   37060:	11000015 	stw	r4,0(r2)
   37064:	19000117 	ldw	r4,4(r3)
   37068:	11000115 	stw	r4,4(r2)
   3706c:	18c00217 	ldw	r3,8(r3)
   37070:	10c00215 	stw	r3,8(r2)
   37074:	a447c83a 	sub	r3,r20,r17
   37078:	bc45883a 	add	r2,r23,r17
   3707c:	18c00054 	ori	r3,r3,1
   37080:	10c00115 	stw	r3,4(r2)
   37084:	b8c00117 	ldw	r3,4(r23)
   37088:	e0800215 	stw	r2,8(fp)
   3708c:	a809883a 	mov	r4,r21
   37090:	1880004c 	andi	r2,r3,1
   37094:	88a2b03a 	or	r17,r17,r2
   37098:	bc400115 	stw	r17,4(r23)
   3709c:	003a0800 	call	3a080 <__malloc_unlock>
   370a0:	003f3c06 	br	36d94 <_realloc_r+0x17c>
   370a4:	80c00217 	ldw	r3,8(r16)
   370a8:	90c00215 	stw	r3,8(r18)
   370ac:	80c00317 	ldw	r3,12(r16)
   370b0:	90c00315 	stw	r3,12(r18)
   370b4:	30802426 	beq	r6,r2,37148 <_realloc_r+0x530>
   370b8:	90800404 	addi	r2,r18,16
   370bc:	80c00404 	addi	r3,r16,16
   370c0:	003f6e06 	br	36e7c <_realloc_r+0x264>
   370c4:	953fff17 	ldw	r20,-4(r18)
   370c8:	00ffff04 	movi	r3,-4
   370cc:	a0e8703a 	and	r20,r20,r3
   370d0:	a4e9883a 	add	r20,r20,r19
   370d4:	003f2206 	br	36d60 <_realloc_r+0x148>
   370d8:	800b883a 	mov	r5,r16
   370dc:	9009883a 	mov	r4,r18
   370e0:	00359600 	call	35960 <memmove>
   370e4:	9021883a 	mov	r16,r18
   370e8:	b8800117 	ldw	r2,4(r23)
   370ec:	b82d883a 	mov	r22,r23
   370f0:	003f1b06 	br	36d60 <_realloc_r+0x148>
   370f4:	9005883a 	mov	r2,r18
   370f8:	8007883a 	mov	r3,r16
   370fc:	003f9206 	br	36f48 <_realloc_r+0x330>
   37100:	800b883a 	mov	r5,r16
   37104:	9009883a 	mov	r4,r18
   37108:	d9c00015 	stw	r7,0(sp)
   3710c:	00359600 	call	35960 <memmove>
   37110:	d9c00017 	ldw	r7,0(sp)
   37114:	9021883a 	mov	r16,r18
   37118:	b8800117 	ldw	r2,4(r23)
   3711c:	3829883a 	mov	r20,r7
   37120:	b82d883a 	mov	r22,r23
   37124:	003f0e06 	br	36d60 <_realloc_r+0x148>
   37128:	80800217 	ldw	r2,8(r16)
   3712c:	b8800415 	stw	r2,16(r23)
   37130:	80800317 	ldw	r2,12(r16)
   37134:	b8800515 	stw	r2,20(r23)
   37138:	31001226 	beq	r6,r4,37184 <_realloc_r+0x56c>
   3713c:	b8800604 	addi	r2,r23,24
   37140:	80c00404 	addi	r3,r16,16
   37144:	003f9606 	br	36fa0 <_realloc_r+0x388>
   37148:	81000417 	ldw	r4,16(r16)
   3714c:	90800604 	addi	r2,r18,24
   37150:	80c00604 	addi	r3,r16,24
   37154:	91000415 	stw	r4,16(r18)
   37158:	81000517 	ldw	r4,20(r16)
   3715c:	91000515 	stw	r4,20(r18)
   37160:	003f4606 	br	36e7c <_realloc_r+0x264>
   37164:	80800217 	ldw	r2,8(r16)
   37168:	b8800415 	stw	r2,16(r23)
   3716c:	80800317 	ldw	r2,12(r16)
   37170:	b8800515 	stw	r2,20(r23)
   37174:	31000d26 	beq	r6,r4,371ac <_realloc_r+0x594>
   37178:	b8800604 	addi	r2,r23,24
   3717c:	80c00404 	addi	r3,r16,16
   37180:	003f7106 	br	36f48 <_realloc_r+0x330>
   37184:	81000417 	ldw	r4,16(r16)
   37188:	b8800804 	addi	r2,r23,32
   3718c:	80c00604 	addi	r3,r16,24
   37190:	b9000615 	stw	r4,24(r23)
   37194:	81000517 	ldw	r4,20(r16)
   37198:	b9000715 	stw	r4,28(r23)
   3719c:	003f8006 	br	36fa0 <_realloc_r+0x388>
   371a0:	9005883a 	mov	r2,r18
   371a4:	8007883a 	mov	r3,r16
   371a8:	003fac06 	br	3705c <_realloc_r+0x444>
   371ac:	81000417 	ldw	r4,16(r16)
   371b0:	b8800804 	addi	r2,r23,32
   371b4:	80c00604 	addi	r3,r16,24
   371b8:	b9000615 	stw	r4,24(r23)
   371bc:	81000517 	ldw	r4,20(r16)
   371c0:	b9000715 	stw	r4,28(r23)
   371c4:	003f6006 	br	36f48 <_realloc_r+0x330>
   371c8:	9009883a 	mov	r4,r18
   371cc:	800b883a 	mov	r5,r16
   371d0:	00359600 	call	35960 <memmove>
   371d4:	003fa706 	br	37074 <_realloc_r+0x45c>
   371d8:	80800217 	ldw	r2,8(r16)
   371dc:	b8800415 	stw	r2,16(r23)
   371e0:	80800317 	ldw	r2,12(r16)
   371e4:	b8800515 	stw	r2,20(r23)
   371e8:	31000326 	beq	r6,r4,371f8 <_realloc_r+0x5e0>
   371ec:	b8800604 	addi	r2,r23,24
   371f0:	80c00404 	addi	r3,r16,16
   371f4:	003f9906 	br	3705c <_realloc_r+0x444>
   371f8:	81000417 	ldw	r4,16(r16)
   371fc:	b8800804 	addi	r2,r23,32
   37200:	80c00604 	addi	r3,r16,24
   37204:	b9000615 	stw	r4,24(r23)
   37208:	81000517 	ldw	r4,20(r16)
   3720c:	b9000715 	stw	r4,28(r23)
   37210:	003f9206 	br	3705c <_realloc_r+0x444>

00037214 <__isinfd>:
   37214:	0105c83a 	sub	r2,zero,r4
   37218:	1108b03a 	or	r4,r2,r4
   3721c:	2004d7fa 	srli	r2,r4,31
   37220:	00e00034 	movhi	r3,32768
   37224:	18ffffc4 	addi	r3,r3,-1
   37228:	28ca703a 	and	r5,r5,r3
   3722c:	1144b03a 	or	r2,r2,r5
   37230:	00dffc34 	movhi	r3,32752
   37234:	1885c83a 	sub	r2,r3,r2
   37238:	0087c83a 	sub	r3,zero,r2
   3723c:	1884b03a 	or	r2,r3,r2
   37240:	1005d7fa 	srai	r2,r2,31
   37244:	10800044 	addi	r2,r2,1
   37248:	f800283a 	ret

0003724c <__isnand>:
   3724c:	0105c83a 	sub	r2,zero,r4
   37250:	1108b03a 	or	r4,r2,r4
   37254:	2004d7fa 	srli	r2,r4,31
   37258:	00e00034 	movhi	r3,32768
   3725c:	18ffffc4 	addi	r3,r3,-1
   37260:	28ca703a 	and	r5,r5,r3
   37264:	1144b03a 	or	r2,r2,r5
   37268:	00dffc34 	movhi	r3,32752
   3726c:	1885c83a 	sub	r2,r3,r2
   37270:	1004d7fa 	srli	r2,r2,31
   37274:	f800283a 	ret

00037278 <_sbrk_r>:
   37278:	defffd04 	addi	sp,sp,-12
   3727c:	dc400115 	stw	r17,4(sp)
   37280:	dc000015 	stw	r16,0(sp)
   37284:	2023883a 	mov	r17,r4
   37288:	04000034 	movhi	r16,0
   3728c:	84077704 	addi	r16,r16,7644
   37290:	2809883a 	mov	r4,r5
   37294:	dfc00215 	stw	ra,8(sp)
   37298:	80000015 	stw	zero,0(r16)
   3729c:	003a2640 	call	3a264 <sbrk>
   372a0:	00ffffc4 	movi	r3,-1
   372a4:	10c00526 	beq	r2,r3,372bc <_sbrk_r+0x44>
   372a8:	dfc00217 	ldw	ra,8(sp)
   372ac:	dc400117 	ldw	r17,4(sp)
   372b0:	dc000017 	ldw	r16,0(sp)
   372b4:	dec00304 	addi	sp,sp,12
   372b8:	f800283a 	ret
   372bc:	80c00017 	ldw	r3,0(r16)
   372c0:	183ff926 	beq	r3,zero,372a8 <_sbrk_r+0x30>
   372c4:	88c00015 	stw	r3,0(r17)
   372c8:	dfc00217 	ldw	ra,8(sp)
   372cc:	dc400117 	ldw	r17,4(sp)
   372d0:	dc000017 	ldw	r16,0(sp)
   372d4:	dec00304 	addi	sp,sp,12
   372d8:	f800283a 	ret

000372dc <__sread>:
   372dc:	defffe04 	addi	sp,sp,-8
   372e0:	dc000015 	stw	r16,0(sp)
   372e4:	2821883a 	mov	r16,r5
   372e8:	2940038f 	ldh	r5,14(r5)
   372ec:	dfc00115 	stw	ra,4(sp)
   372f0:	00378e40 	call	378e4 <_read_r>
   372f4:	10000716 	blt	r2,zero,37314 <__sread+0x38>
   372f8:	80c01417 	ldw	r3,80(r16)
   372fc:	1887883a 	add	r3,r3,r2
   37300:	80c01415 	stw	r3,80(r16)
   37304:	dfc00117 	ldw	ra,4(sp)
   37308:	dc000017 	ldw	r16,0(sp)
   3730c:	dec00204 	addi	sp,sp,8
   37310:	f800283a 	ret
   37314:	80c0030b 	ldhu	r3,12(r16)
   37318:	18fbffcc 	andi	r3,r3,61439
   3731c:	80c0030d 	sth	r3,12(r16)
   37320:	dfc00117 	ldw	ra,4(sp)
   37324:	dc000017 	ldw	r16,0(sp)
   37328:	dec00204 	addi	sp,sp,8
   3732c:	f800283a 	ret

00037330 <__swrite>:
   37330:	2880030b 	ldhu	r2,12(r5)
   37334:	defffb04 	addi	sp,sp,-20
   37338:	dcc00315 	stw	r19,12(sp)
   3733c:	10c0400c 	andi	r3,r2,256
   37340:	18ffffcc 	andi	r3,r3,65535
   37344:	18e0001c 	xori	r3,r3,32768
   37348:	dc800215 	stw	r18,8(sp)
   3734c:	dc400115 	stw	r17,4(sp)
   37350:	dc000015 	stw	r16,0(sp)
   37354:	dfc00415 	stw	ra,16(sp)
   37358:	18e00004 	addi	r3,r3,-32768
   3735c:	2821883a 	mov	r16,r5
   37360:	2027883a 	mov	r19,r4
   37364:	3025883a 	mov	r18,r6
   37368:	3823883a 	mov	r17,r7
   3736c:	18000526 	beq	r3,zero,37384 <__swrite+0x54>
   37370:	2940038f 	ldh	r5,14(r5)
   37374:	000d883a 	mov	r6,zero
   37378:	01c00084 	movi	r7,2
   3737c:	00378780 	call	37878 <_lseek_r>
   37380:	8080030b 	ldhu	r2,12(r16)
   37384:	8140038f 	ldh	r5,14(r16)
   37388:	10bbffcc 	andi	r2,r2,61439
   3738c:	9809883a 	mov	r4,r19
   37390:	900d883a 	mov	r6,r18
   37394:	880f883a 	mov	r7,r17
   37398:	8080030d 	sth	r2,12(r16)
   3739c:	dfc00417 	ldw	ra,16(sp)
   373a0:	dcc00317 	ldw	r19,12(sp)
   373a4:	dc800217 	ldw	r18,8(sp)
   373a8:	dc400117 	ldw	r17,4(sp)
   373ac:	dc000017 	ldw	r16,0(sp)
   373b0:	dec00504 	addi	sp,sp,20
   373b4:	00374c01 	jmpi	374c0 <_write_r>

000373b8 <__sseek>:
   373b8:	defffe04 	addi	sp,sp,-8
   373bc:	dc000015 	stw	r16,0(sp)
   373c0:	2821883a 	mov	r16,r5
   373c4:	2940038f 	ldh	r5,14(r5)
   373c8:	dfc00115 	stw	ra,4(sp)
   373cc:	00378780 	call	37878 <_lseek_r>
   373d0:	00ffffc4 	movi	r3,-1
   373d4:	10c00826 	beq	r2,r3,373f8 <__sseek+0x40>
   373d8:	80c0030b 	ldhu	r3,12(r16)
   373dc:	80801415 	stw	r2,80(r16)
   373e0:	18c40014 	ori	r3,r3,4096
   373e4:	80c0030d 	sth	r3,12(r16)
   373e8:	dfc00117 	ldw	ra,4(sp)
   373ec:	dc000017 	ldw	r16,0(sp)
   373f0:	dec00204 	addi	sp,sp,8
   373f4:	f800283a 	ret
   373f8:	80c0030b 	ldhu	r3,12(r16)
   373fc:	18fbffcc 	andi	r3,r3,61439
   37400:	80c0030d 	sth	r3,12(r16)
   37404:	dfc00117 	ldw	ra,4(sp)
   37408:	dc000017 	ldw	r16,0(sp)
   3740c:	dec00204 	addi	sp,sp,8
   37410:	f800283a 	ret

00037414 <__sclose>:
   37414:	2940038f 	ldh	r5,14(r5)
   37418:	00375f81 	jmpi	375f8 <_close_r>

0003741c <strcmp>:
   3741c:	2904b03a 	or	r2,r5,r4
   37420:	108000cc 	andi	r2,r2,3
   37424:	1000171e 	bne	r2,zero,37484 <strcmp+0x68>
   37428:	20800017 	ldw	r2,0(r4)
   3742c:	28c00017 	ldw	r3,0(r5)
   37430:	10c0141e 	bne	r2,r3,37484 <strcmp+0x68>
   37434:	027fbff4 	movhi	r9,65279
   37438:	4a7fbfc4 	addi	r9,r9,-257
   3743c:	1247883a 	add	r3,r2,r9
   37440:	0084303a 	nor	r2,zero,r2
   37444:	1884703a 	and	r2,r3,r2
   37448:	02202074 	movhi	r8,32897
   3744c:	42202004 	addi	r8,r8,-32640
   37450:	1204703a 	and	r2,r2,r8
   37454:	10000226 	beq	r2,zero,37460 <strcmp+0x44>
   37458:	00001706 	br	374b8 <strcmp+0x9c>
   3745c:	3000161e 	bne	r6,zero,374b8 <strcmp+0x9c>
   37460:	21000104 	addi	r4,r4,4
   37464:	20800017 	ldw	r2,0(r4)
   37468:	29400104 	addi	r5,r5,4
   3746c:	28c00017 	ldw	r3,0(r5)
   37470:	124f883a 	add	r7,r2,r9
   37474:	008c303a 	nor	r6,zero,r2
   37478:	398c703a 	and	r6,r7,r6
   3747c:	320c703a 	and	r6,r6,r8
   37480:	10fff626 	beq	r2,r3,3745c <strcmp+0x40>
   37484:	20800007 	ldb	r2,0(r4)
   37488:	1000051e 	bne	r2,zero,374a0 <strcmp+0x84>
   3748c:	00000606 	br	374a8 <strcmp+0x8c>
   37490:	21000044 	addi	r4,r4,1
   37494:	20800007 	ldb	r2,0(r4)
   37498:	29400044 	addi	r5,r5,1
   3749c:	10000226 	beq	r2,zero,374a8 <strcmp+0x8c>
   374a0:	28c00007 	ldb	r3,0(r5)
   374a4:	10fffa26 	beq	r2,r3,37490 <strcmp+0x74>
   374a8:	20c00003 	ldbu	r3,0(r4)
   374ac:	28800003 	ldbu	r2,0(r5)
   374b0:	1885c83a 	sub	r2,r3,r2
   374b4:	f800283a 	ret
   374b8:	0005883a 	mov	r2,zero
   374bc:	f800283a 	ret

000374c0 <_write_r>:
   374c0:	defffd04 	addi	sp,sp,-12
   374c4:	dc400115 	stw	r17,4(sp)
   374c8:	dc000015 	stw	r16,0(sp)
   374cc:	2023883a 	mov	r17,r4
   374d0:	04000034 	movhi	r16,0
   374d4:	84077704 	addi	r16,r16,7644
   374d8:	2809883a 	mov	r4,r5
   374dc:	300b883a 	mov	r5,r6
   374e0:	380d883a 	mov	r6,r7
   374e4:	dfc00215 	stw	ra,8(sp)
   374e8:	80000015 	stw	zero,0(r16)
   374ec:	003a3640 	call	3a364 <write>
   374f0:	00ffffc4 	movi	r3,-1
   374f4:	10c00526 	beq	r2,r3,3750c <_write_r+0x4c>
   374f8:	dfc00217 	ldw	ra,8(sp)
   374fc:	dc400117 	ldw	r17,4(sp)
   37500:	dc000017 	ldw	r16,0(sp)
   37504:	dec00304 	addi	sp,sp,12
   37508:	f800283a 	ret
   3750c:	80c00017 	ldw	r3,0(r16)
   37510:	183ff926 	beq	r3,zero,374f8 <_write_r+0x38>
   37514:	88c00015 	stw	r3,0(r17)
   37518:	dfc00217 	ldw	ra,8(sp)
   3751c:	dc400117 	ldw	r17,4(sp)
   37520:	dc000017 	ldw	r16,0(sp)
   37524:	dec00304 	addi	sp,sp,12
   37528:	f800283a 	ret

0003752c <_calloc_r>:
   3752c:	defffe04 	addi	sp,sp,-8
   37530:	dc000015 	stw	r16,0(sp)
   37534:	2021883a 	mov	r16,r4
   37538:	3009883a 	mov	r4,r6
   3753c:	dfc00115 	stw	ra,4(sp)
   37540:	00394380 	call	39438 <__mulsi3>
   37544:	8009883a 	mov	r4,r16
   37548:	100b883a 	mov	r5,r2
   3754c:	0034fa40 	call	34fa4 <_malloc_r>
   37550:	1021883a 	mov	r16,r2
   37554:	10000c26 	beq	r2,zero,37588 <_calloc_r+0x5c>
   37558:	11bfff17 	ldw	r6,-4(r2)
   3755c:	00ffff04 	movi	r3,-4
   37560:	00800904 	movi	r2,36
   37564:	30cc703a 	and	r6,r6,r3
   37568:	30cd883a 	add	r6,r6,r3
   3756c:	11801436 	bltu	r2,r6,375c0 <_calloc_r+0x94>
   37570:	00c004c4 	movi	r3,19
   37574:	19800936 	bltu	r3,r6,3759c <_calloc_r+0x70>
   37578:	8005883a 	mov	r2,r16
   3757c:	10000015 	stw	zero,0(r2)
   37580:	10000115 	stw	zero,4(r2)
   37584:	10000215 	stw	zero,8(r2)
   37588:	8005883a 	mov	r2,r16
   3758c:	dfc00117 	ldw	ra,4(sp)
   37590:	dc000017 	ldw	r16,0(sp)
   37594:	dec00204 	addi	sp,sp,8
   37598:	f800283a 	ret
   3759c:	80000015 	stw	zero,0(r16)
   375a0:	80000115 	stw	zero,4(r16)
   375a4:	00c006c4 	movi	r3,27
   375a8:	19800d2e 	bgeu	r3,r6,375e0 <_calloc_r+0xb4>
   375ac:	80000215 	stw	zero,8(r16)
   375b0:	80000315 	stw	zero,12(r16)
   375b4:	30800c26 	beq	r6,r2,375e8 <_calloc_r+0xbc>
   375b8:	80800404 	addi	r2,r16,16
   375bc:	003fef06 	br	3757c <_calloc_r+0x50>
   375c0:	8009883a 	mov	r4,r16
   375c4:	000b883a 	mov	r5,zero
   375c8:	0035aec0 	call	35aec <memset>
   375cc:	8005883a 	mov	r2,r16
   375d0:	dfc00117 	ldw	ra,4(sp)
   375d4:	dc000017 	ldw	r16,0(sp)
   375d8:	dec00204 	addi	sp,sp,8
   375dc:	f800283a 	ret
   375e0:	80800204 	addi	r2,r16,8
   375e4:	003fe506 	br	3757c <_calloc_r+0x50>
   375e8:	80000415 	stw	zero,16(r16)
   375ec:	80000515 	stw	zero,20(r16)
   375f0:	80800604 	addi	r2,r16,24
   375f4:	003fe106 	br	3757c <_calloc_r+0x50>

000375f8 <_close_r>:
   375f8:	defffd04 	addi	sp,sp,-12
   375fc:	dc400115 	stw	r17,4(sp)
   37600:	dc000015 	stw	r16,0(sp)
   37604:	2023883a 	mov	r17,r4
   37608:	04000034 	movhi	r16,0
   3760c:	84077704 	addi	r16,r16,7644
   37610:	2809883a 	mov	r4,r5
   37614:	dfc00215 	stw	ra,8(sp)
   37618:	80000015 	stw	zero,0(r16)
   3761c:	0039aec0 	call	39aec <close>
   37620:	00ffffc4 	movi	r3,-1
   37624:	10c00526 	beq	r2,r3,3763c <_close_r+0x44>
   37628:	dfc00217 	ldw	ra,8(sp)
   3762c:	dc400117 	ldw	r17,4(sp)
   37630:	dc000017 	ldw	r16,0(sp)
   37634:	dec00304 	addi	sp,sp,12
   37638:	f800283a 	ret
   3763c:	80c00017 	ldw	r3,0(r16)
   37640:	183ff926 	beq	r3,zero,37628 <_close_r+0x30>
   37644:	88c00015 	stw	r3,0(r17)
   37648:	dfc00217 	ldw	ra,8(sp)
   3764c:	dc400117 	ldw	r17,4(sp)
   37650:	dc000017 	ldw	r16,0(sp)
   37654:	dec00304 	addi	sp,sp,12
   37658:	f800283a 	ret

0003765c <_fclose_r>:
   3765c:	defffc04 	addi	sp,sp,-16
   37660:	dc400115 	stw	r17,4(sp)
   37664:	dc000015 	stw	r16,0(sp)
   37668:	dfc00315 	stw	ra,12(sp)
   3766c:	dc800215 	stw	r18,8(sp)
   37670:	2821883a 	mov	r16,r5
   37674:	2023883a 	mov	r17,r4
   37678:	28003426 	beq	r5,zero,3774c <_fclose_r+0xf0>
   3767c:	00342900 	call	34290 <__sfp_lock_acquire>
   37680:	88000226 	beq	r17,zero,3768c <_fclose_r+0x30>
   37684:	88800e17 	ldw	r2,56(r17)
   37688:	10003826 	beq	r2,zero,3776c <_fclose_r+0x110>
   3768c:	8080030f 	ldh	r2,12(r16)
   37690:	10002526 	beq	r2,zero,37728 <_fclose_r+0xcc>
   37694:	8809883a 	mov	r4,r17
   37698:	800b883a 	mov	r5,r16
   3769c:	0033dcc0 	call	33dcc <_fflush_r>
   376a0:	1025883a 	mov	r18,r2
   376a4:	80800b17 	ldw	r2,44(r16)
   376a8:	10000426 	beq	r2,zero,376bc <_fclose_r+0x60>
   376ac:	81400717 	ldw	r5,28(r16)
   376b0:	8809883a 	mov	r4,r17
   376b4:	103ee83a 	callr	r2
   376b8:	10003516 	blt	r2,zero,37790 <_fclose_r+0x134>
   376bc:	8080030b 	ldhu	r2,12(r16)
   376c0:	1080200c 	andi	r2,r2,128
   376c4:	10bfffcc 	andi	r2,r2,65535
   376c8:	10a0001c 	xori	r2,r2,32768
   376cc:	10a00004 	addi	r2,r2,-32768
   376d0:	10002b1e 	bne	r2,zero,37780 <_fclose_r+0x124>
   376d4:	81400c17 	ldw	r5,48(r16)
   376d8:	28000526 	beq	r5,zero,376f0 <_fclose_r+0x94>
   376dc:	80801004 	addi	r2,r16,64
   376e0:	28800226 	beq	r5,r2,376ec <_fclose_r+0x90>
   376e4:	8809883a 	mov	r4,r17
   376e8:	003440c0 	call	3440c <_free_r>
   376ec:	80000c15 	stw	zero,48(r16)
   376f0:	81401117 	ldw	r5,68(r16)
   376f4:	28000326 	beq	r5,zero,37704 <_fclose_r+0xa8>
   376f8:	8809883a 	mov	r4,r17
   376fc:	003440c0 	call	3440c <_free_r>
   37700:	80001115 	stw	zero,68(r16)
   37704:	8000030d 	sth	zero,12(r16)
   37708:	00342940 	call	34294 <__sfp_lock_release>
   3770c:	9005883a 	mov	r2,r18
   37710:	dfc00317 	ldw	ra,12(sp)
   37714:	dc800217 	ldw	r18,8(sp)
   37718:	dc400117 	ldw	r17,4(sp)
   3771c:	dc000017 	ldw	r16,0(sp)
   37720:	dec00404 	addi	sp,sp,16
   37724:	f800283a 	ret
   37728:	00342940 	call	34294 <__sfp_lock_release>
   3772c:	0025883a 	mov	r18,zero
   37730:	9005883a 	mov	r2,r18
   37734:	dfc00317 	ldw	ra,12(sp)
   37738:	dc800217 	ldw	r18,8(sp)
   3773c:	dc400117 	ldw	r17,4(sp)
   37740:	dc000017 	ldw	r16,0(sp)
   37744:	dec00404 	addi	sp,sp,16
   37748:	f800283a 	ret
   3774c:	0025883a 	mov	r18,zero
   37750:	9005883a 	mov	r2,r18
   37754:	dfc00317 	ldw	ra,12(sp)
   37758:	dc800217 	ldw	r18,8(sp)
   3775c:	dc400117 	ldw	r17,4(sp)
   37760:	dc000017 	ldw	r16,0(sp)
   37764:	dec00404 	addi	sp,sp,16
   37768:	f800283a 	ret
   3776c:	8809883a 	mov	r4,r17
   37770:	00340880 	call	34088 <__sinit>
   37774:	8080030f 	ldh	r2,12(r16)
   37778:	103fc61e 	bne	r2,zero,37694 <_fclose_r+0x38>
   3777c:	003fea06 	br	37728 <_fclose_r+0xcc>
   37780:	81400417 	ldw	r5,16(r16)
   37784:	8809883a 	mov	r4,r17
   37788:	003440c0 	call	3440c <_free_r>
   3778c:	003fd106 	br	376d4 <_fclose_r+0x78>
   37790:	04bfffc4 	movi	r18,-1
   37794:	003fc906 	br	376bc <_fclose_r+0x60>

00037798 <fclose>:
   37798:	00800034 	movhi	r2,0
   3779c:	10876304 	addi	r2,r2,7564
   377a0:	200b883a 	mov	r5,r4
   377a4:	11000017 	ldw	r4,0(r2)
   377a8:	003765c1 	jmpi	3765c <_fclose_r>

000377ac <_fstat_r>:
   377ac:	defffd04 	addi	sp,sp,-12
   377b0:	dc400115 	stw	r17,4(sp)
   377b4:	dc000015 	stw	r16,0(sp)
   377b8:	2023883a 	mov	r17,r4
   377bc:	04000034 	movhi	r16,0
   377c0:	84077704 	addi	r16,r16,7644
   377c4:	2809883a 	mov	r4,r5
   377c8:	300b883a 	mov	r5,r6
   377cc:	dfc00215 	stw	ra,8(sp)
   377d0:	80000015 	stw	zero,0(r16)
   377d4:	0039c340 	call	39c34 <fstat>
   377d8:	00ffffc4 	movi	r3,-1
   377dc:	10c00526 	beq	r2,r3,377f4 <_fstat_r+0x48>
   377e0:	dfc00217 	ldw	ra,8(sp)
   377e4:	dc400117 	ldw	r17,4(sp)
   377e8:	dc000017 	ldw	r16,0(sp)
   377ec:	dec00304 	addi	sp,sp,12
   377f0:	f800283a 	ret
   377f4:	80c00017 	ldw	r3,0(r16)
   377f8:	183ff926 	beq	r3,zero,377e0 <_fstat_r+0x34>
   377fc:	88c00015 	stw	r3,0(r17)
   37800:	dfc00217 	ldw	ra,8(sp)
   37804:	dc400117 	ldw	r17,4(sp)
   37808:	dc000017 	ldw	r16,0(sp)
   3780c:	dec00304 	addi	sp,sp,12
   37810:	f800283a 	ret

00037814 <_isatty_r>:
   37814:	defffd04 	addi	sp,sp,-12
   37818:	dc400115 	stw	r17,4(sp)
   3781c:	dc000015 	stw	r16,0(sp)
   37820:	2023883a 	mov	r17,r4
   37824:	04000034 	movhi	r16,0
   37828:	84077704 	addi	r16,r16,7644
   3782c:	2809883a 	mov	r4,r5
   37830:	dfc00215 	stw	ra,8(sp)
   37834:	80000015 	stw	zero,0(r16)
   37838:	0039d340 	call	39d34 <isatty>
   3783c:	00ffffc4 	movi	r3,-1
   37840:	10c00526 	beq	r2,r3,37858 <_isatty_r+0x44>
   37844:	dfc00217 	ldw	ra,8(sp)
   37848:	dc400117 	ldw	r17,4(sp)
   3784c:	dc000017 	ldw	r16,0(sp)
   37850:	dec00304 	addi	sp,sp,12
   37854:	f800283a 	ret
   37858:	80c00017 	ldw	r3,0(r16)
   3785c:	183ff926 	beq	r3,zero,37844 <_isatty_r+0x30>
   37860:	88c00015 	stw	r3,0(r17)
   37864:	dfc00217 	ldw	ra,8(sp)
   37868:	dc400117 	ldw	r17,4(sp)
   3786c:	dc000017 	ldw	r16,0(sp)
   37870:	dec00304 	addi	sp,sp,12
   37874:	f800283a 	ret

00037878 <_lseek_r>:
   37878:	defffd04 	addi	sp,sp,-12
   3787c:	dc400115 	stw	r17,4(sp)
   37880:	dc000015 	stw	r16,0(sp)
   37884:	2023883a 	mov	r17,r4
   37888:	04000034 	movhi	r16,0
   3788c:	84077704 	addi	r16,r16,7644
   37890:	2809883a 	mov	r4,r5
   37894:	300b883a 	mov	r5,r6
   37898:	380d883a 	mov	r6,r7
   3789c:	dfc00215 	stw	ra,8(sp)
   378a0:	80000015 	stw	zero,0(r16)
   378a4:	0039f140 	call	39f14 <lseek>
   378a8:	00ffffc4 	movi	r3,-1
   378ac:	10c00526 	beq	r2,r3,378c4 <_lseek_r+0x4c>
   378b0:	dfc00217 	ldw	ra,8(sp)
   378b4:	dc400117 	ldw	r17,4(sp)
   378b8:	dc000017 	ldw	r16,0(sp)
   378bc:	dec00304 	addi	sp,sp,12
   378c0:	f800283a 	ret
   378c4:	80c00017 	ldw	r3,0(r16)
   378c8:	183ff926 	beq	r3,zero,378b0 <_lseek_r+0x38>
   378cc:	88c00015 	stw	r3,0(r17)
   378d0:	dfc00217 	ldw	ra,8(sp)
   378d4:	dc400117 	ldw	r17,4(sp)
   378d8:	dc000017 	ldw	r16,0(sp)
   378dc:	dec00304 	addi	sp,sp,12
   378e0:	f800283a 	ret

000378e4 <_read_r>:
   378e4:	defffd04 	addi	sp,sp,-12
   378e8:	dc400115 	stw	r17,4(sp)
   378ec:	dc000015 	stw	r16,0(sp)
   378f0:	2023883a 	mov	r17,r4
   378f4:	04000034 	movhi	r16,0
   378f8:	84077704 	addi	r16,r16,7644
   378fc:	2809883a 	mov	r4,r5
   37900:	300b883a 	mov	r5,r6
   37904:	380d883a 	mov	r6,r7
   37908:	dfc00215 	stw	ra,8(sp)
   3790c:	80000015 	stw	zero,0(r16)
   37910:	003a0f00 	call	3a0f0 <read>
   37914:	00ffffc4 	movi	r3,-1
   37918:	10c00526 	beq	r2,r3,37930 <_read_r+0x4c>
   3791c:	dfc00217 	ldw	ra,8(sp)
   37920:	dc400117 	ldw	r17,4(sp)
   37924:	dc000017 	ldw	r16,0(sp)
   37928:	dec00304 	addi	sp,sp,12
   3792c:	f800283a 	ret
   37930:	80c00017 	ldw	r3,0(r16)
   37934:	183ff926 	beq	r3,zero,3791c <_read_r+0x38>
   37938:	88c00015 	stw	r3,0(r17)
   3793c:	dfc00217 	ldw	ra,8(sp)
   37940:	dc400117 	ldw	r17,4(sp)
   37944:	dc000017 	ldw	r16,0(sp)
   37948:	dec00304 	addi	sp,sp,12
   3794c:	f800283a 	ret

00037950 <__udivdi3>:
   37950:	defff504 	addi	sp,sp,-44
   37954:	dd000515 	stw	r20,20(sp)
   37958:	dcc00415 	stw	r19,16(sp)
   3795c:	dc800315 	stw	r18,12(sp)
   37960:	dc400215 	stw	r17,8(sp)
   37964:	dc000115 	stw	r16,4(sp)
   37968:	dfc00a15 	stw	ra,40(sp)
   3796c:	df000915 	stw	fp,36(sp)
   37970:	ddc00815 	stw	r23,32(sp)
   37974:	dd800715 	stw	r22,28(sp)
   37978:	dd400615 	stw	r21,24(sp)
   3797c:	2025883a 	mov	r18,r4
   37980:	2823883a 	mov	r17,r5
   37984:	3021883a 	mov	r16,r6
   37988:	2027883a 	mov	r19,r4
   3798c:	2829883a 	mov	r20,r5
   37990:	3800451e 	bne	r7,zero,37aa8 <__udivdi3+0x158>
   37994:	2980652e 	bgeu	r5,r6,37b2c <__udivdi3+0x1dc>
   37998:	00bfffd4 	movui	r2,65535
   3799c:	1180b436 	bltu	r2,r6,37c70 <__udivdi3+0x320>
   379a0:	00803fc4 	movi	r2,255
   379a4:	11816636 	bltu	r2,r6,37f40 <__udivdi3+0x5f0>
   379a8:	0005883a 	mov	r2,zero
   379ac:	0007883a 	mov	r3,zero
   379b0:	3084d83a 	srl	r2,r6,r2
   379b4:	01000034 	movhi	r4,0
   379b8:	21009004 	addi	r4,r4,576
   379bc:	2085883a 	add	r2,r4,r2
   379c0:	10800003 	ldbu	r2,0(r2)
   379c4:	10c7883a 	add	r3,r2,r3
   379c8:	00800804 	movi	r2,32
   379cc:	10c5c83a 	sub	r2,r2,r3
   379d0:	10000526 	beq	r2,zero,379e8 <__udivdi3+0x98>
   379d4:	88a2983a 	sll	r17,r17,r2
   379d8:	90c6d83a 	srl	r3,r18,r3
   379dc:	30a0983a 	sll	r16,r6,r2
   379e0:	90a6983a 	sll	r19,r18,r2
   379e4:	88e8b03a 	or	r20,r17,r3
   379e8:	8022d43a 	srli	r17,r16,16
   379ec:	a009883a 	mov	r4,r20
   379f0:	857fffcc 	andi	r21,r16,65535
   379f4:	880b883a 	mov	r5,r17
   379f8:	00394300 	call	39430 <__umodsi3>
   379fc:	a009883a 	mov	r4,r20
   37a00:	880b883a 	mov	r5,r17
   37a04:	102d883a 	mov	r22,r2
   37a08:	00394280 	call	39428 <__udivsi3>
   37a0c:	1009883a 	mov	r4,r2
   37a10:	a80b883a 	mov	r5,r21
   37a14:	1025883a 	mov	r18,r2
   37a18:	00394380 	call	39438 <__mulsi3>
   37a1c:	1009883a 	mov	r4,r2
   37a20:	b006943a 	slli	r3,r22,16
   37a24:	9804d43a 	srli	r2,r19,16
   37a28:	1886b03a 	or	r3,r3,r2
   37a2c:	1900052e 	bgeu	r3,r4,37a44 <__udivdi3+0xf4>
   37a30:	1c07883a 	add	r3,r3,r16
   37a34:	90bfffc4 	addi	r2,r18,-1
   37a38:	1c000136 	bltu	r3,r16,37a40 <__udivdi3+0xf0>
   37a3c:	19015536 	bltu	r3,r4,37f94 <__udivdi3+0x644>
   37a40:	1025883a 	mov	r18,r2
   37a44:	1929c83a 	sub	r20,r3,r4
   37a48:	880b883a 	mov	r5,r17
   37a4c:	a009883a 	mov	r4,r20
   37a50:	00394300 	call	39430 <__umodsi3>
   37a54:	102d883a 	mov	r22,r2
   37a58:	880b883a 	mov	r5,r17
   37a5c:	a009883a 	mov	r4,r20
   37a60:	b02c943a 	slli	r22,r22,16
   37a64:	00394280 	call	39428 <__udivsi3>
   37a68:	1009883a 	mov	r4,r2
   37a6c:	a80b883a 	mov	r5,r21
   37a70:	9cffffcc 	andi	r19,r19,65535
   37a74:	1023883a 	mov	r17,r2
   37a78:	b4e6b03a 	or	r19,r22,r19
   37a7c:	00394380 	call	39438 <__mulsi3>
   37a80:	9880052e 	bgeu	r19,r2,37a98 <__udivdi3+0x148>
   37a84:	9c27883a 	add	r19,r19,r16
   37a88:	88ffffc4 	addi	r3,r17,-1
   37a8c:	9c011436 	bltu	r19,r16,37ee0 <__udivdi3+0x590>
   37a90:	9881132e 	bgeu	r19,r2,37ee0 <__udivdi3+0x590>
   37a94:	8c7fff84 	addi	r17,r17,-2
   37a98:	9004943a 	slli	r2,r18,16
   37a9c:	0007883a 	mov	r3,zero
   37aa0:	8884b03a 	or	r2,r17,r2
   37aa4:	00001506 	br	37afc <__udivdi3+0x1ac>
   37aa8:	29c06a36 	bltu	r5,r7,37c54 <__udivdi3+0x304>
   37aac:	00bfffd4 	movui	r2,65535
   37ab0:	11c06a2e 	bgeu	r2,r7,37c5c <__udivdi3+0x30c>
   37ab4:	00804034 	movhi	r2,256
   37ab8:	10bfffc4 	addi	r2,r2,-1
   37abc:	11c11436 	bltu	r2,r7,37f10 <__udivdi3+0x5c0>
   37ac0:	00c00404 	movi	r3,16
   37ac4:	180b883a 	mov	r5,r3
   37ac8:	38c6d83a 	srl	r3,r7,r3
   37acc:	01000034 	movhi	r4,0
   37ad0:	21009004 	addi	r4,r4,576
   37ad4:	04000804 	movi	r16,32
   37ad8:	20c7883a 	add	r3,r4,r3
   37adc:	18800003 	ldbu	r2,0(r3)
   37ae0:	1145883a 	add	r2,r2,r5
   37ae4:	80a1c83a 	sub	r16,r16,r2
   37ae8:	80006e1e 	bne	r16,zero,37ca4 <__udivdi3+0x354>
   37aec:	0007883a 	mov	r3,zero
   37af0:	3c406a36 	bltu	r7,r17,37c9c <__udivdi3+0x34c>
   37af4:	9180692e 	bgeu	r18,r6,37c9c <__udivdi3+0x34c>
   37af8:	0005883a 	mov	r2,zero
   37afc:	dfc00a17 	ldw	ra,40(sp)
   37b00:	df000917 	ldw	fp,36(sp)
   37b04:	ddc00817 	ldw	r23,32(sp)
   37b08:	dd800717 	ldw	r22,28(sp)
   37b0c:	dd400617 	ldw	r21,24(sp)
   37b10:	dd000517 	ldw	r20,20(sp)
   37b14:	dcc00417 	ldw	r19,16(sp)
   37b18:	dc800317 	ldw	r18,12(sp)
   37b1c:	dc400217 	ldw	r17,8(sp)
   37b20:	dc000117 	ldw	r16,4(sp)
   37b24:	dec00b04 	addi	sp,sp,44
   37b28:	f800283a 	ret
   37b2c:	3000041e 	bne	r6,zero,37b40 <__udivdi3+0x1f0>
   37b30:	01000044 	movi	r4,1
   37b34:	000b883a 	mov	r5,zero
   37b38:	00394280 	call	39428 <__udivsi3>
   37b3c:	1021883a 	mov	r16,r2
   37b40:	00bfffd4 	movui	r2,65535
   37b44:	1400502e 	bgeu	r2,r16,37c88 <__udivdi3+0x338>
   37b48:	00804034 	movhi	r2,256
   37b4c:	10bfffc4 	addi	r2,r2,-1
   37b50:	1400f536 	bltu	r2,r16,37f28 <__udivdi3+0x5d8>
   37b54:	00800404 	movi	r2,16
   37b58:	1007883a 	mov	r3,r2
   37b5c:	8084d83a 	srl	r2,r16,r2
   37b60:	01000034 	movhi	r4,0
   37b64:	21009004 	addi	r4,r4,576
   37b68:	2085883a 	add	r2,r4,r2
   37b6c:	10800003 	ldbu	r2,0(r2)
   37b70:	10c7883a 	add	r3,r2,r3
   37b74:	00800804 	movi	r2,32
   37b78:	10c5c83a 	sub	r2,r2,r3
   37b7c:	1000a01e 	bne	r2,zero,37e00 <__udivdi3+0x4b0>
   37b80:	8028d43a 	srli	r20,r16,16
   37b84:	8c23c83a 	sub	r17,r17,r16
   37b88:	857fffcc 	andi	r21,r16,65535
   37b8c:	00c00044 	movi	r3,1
   37b90:	8809883a 	mov	r4,r17
   37b94:	a00b883a 	mov	r5,r20
   37b98:	d8c00015 	stw	r3,0(sp)
   37b9c:	00394300 	call	39430 <__umodsi3>
   37ba0:	8809883a 	mov	r4,r17
   37ba4:	a00b883a 	mov	r5,r20
   37ba8:	102d883a 	mov	r22,r2
   37bac:	00394280 	call	39428 <__udivsi3>
   37bb0:	1009883a 	mov	r4,r2
   37bb4:	a80b883a 	mov	r5,r21
   37bb8:	1025883a 	mov	r18,r2
   37bbc:	00394380 	call	39438 <__mulsi3>
   37bc0:	1009883a 	mov	r4,r2
   37bc4:	b00c943a 	slli	r6,r22,16
   37bc8:	9804d43a 	srli	r2,r19,16
   37bcc:	d8c00017 	ldw	r3,0(sp)
   37bd0:	308cb03a 	or	r6,r6,r2
   37bd4:	3100052e 	bgeu	r6,r4,37bec <__udivdi3+0x29c>
   37bd8:	340d883a 	add	r6,r6,r16
   37bdc:	90bfffc4 	addi	r2,r18,-1
   37be0:	34000136 	bltu	r6,r16,37be8 <__udivdi3+0x298>
   37be4:	3100e836 	bltu	r6,r4,37f88 <__udivdi3+0x638>
   37be8:	1025883a 	mov	r18,r2
   37bec:	3123c83a 	sub	r17,r6,r4
   37bf0:	8809883a 	mov	r4,r17
   37bf4:	a00b883a 	mov	r5,r20
   37bf8:	d8c00015 	stw	r3,0(sp)
   37bfc:	00394300 	call	39430 <__umodsi3>
   37c00:	102d883a 	mov	r22,r2
   37c04:	8809883a 	mov	r4,r17
   37c08:	a00b883a 	mov	r5,r20
   37c0c:	b02c943a 	slli	r22,r22,16
   37c10:	00394280 	call	39428 <__udivsi3>
   37c14:	1009883a 	mov	r4,r2
   37c18:	a80b883a 	mov	r5,r21
   37c1c:	9cffffcc 	andi	r19,r19,65535
   37c20:	1023883a 	mov	r17,r2
   37c24:	b4e6b03a 	or	r19,r22,r19
   37c28:	00394380 	call	39438 <__mulsi3>
   37c2c:	d8c00017 	ldw	r3,0(sp)
   37c30:	9880052e 	bgeu	r19,r2,37c48 <__udivdi3+0x2f8>
   37c34:	9c27883a 	add	r19,r19,r16
   37c38:	893fffc4 	addi	r4,r17,-1
   37c3c:	9c00aa36 	bltu	r19,r16,37ee8 <__udivdi3+0x598>
   37c40:	9880a92e 	bgeu	r19,r2,37ee8 <__udivdi3+0x598>
   37c44:	8c7fff84 	addi	r17,r17,-2
   37c48:	9004943a 	slli	r2,r18,16
   37c4c:	8884b03a 	or	r2,r17,r2
   37c50:	003faa06 	br	37afc <__udivdi3+0x1ac>
   37c54:	0007883a 	mov	r3,zero
   37c58:	003fa706 	br	37af8 <__udivdi3+0x1a8>
   37c5c:	00803fc4 	movi	r2,255
   37c60:	11c0ae36 	bltu	r2,r7,37f1c <__udivdi3+0x5cc>
   37c64:	0007883a 	mov	r3,zero
   37c68:	000b883a 	mov	r5,zero
   37c6c:	003f9606 	br	37ac8 <__udivdi3+0x178>
   37c70:	00804034 	movhi	r2,256
   37c74:	10bfffc4 	addi	r2,r2,-1
   37c78:	1180ae36 	bltu	r2,r6,37f34 <__udivdi3+0x5e4>
   37c7c:	00800404 	movi	r2,16
   37c80:	1007883a 	mov	r3,r2
   37c84:	003f4a06 	br	379b0 <__udivdi3+0x60>
   37c88:	00803fc4 	movi	r2,255
   37c8c:	1400af36 	bltu	r2,r16,37f4c <__udivdi3+0x5fc>
   37c90:	0005883a 	mov	r2,zero
   37c94:	0007883a 	mov	r3,zero
   37c98:	003fb006 	br	37b5c <__udivdi3+0x20c>
   37c9c:	00800044 	movi	r2,1
   37ca0:	003f9606 	br	37afc <__udivdi3+0x1ac>
   37ca4:	3c0e983a 	sll	r7,r7,r16
   37ca8:	3086d83a 	srl	r3,r6,r2
   37cac:	88aed83a 	srl	r23,r17,r2
   37cb0:	9084d83a 	srl	r2,r18,r2
   37cb4:	38e6b03a 	or	r19,r7,r3
   37cb8:	9828d43a 	srli	r20,r19,16
   37cbc:	8c22983a 	sll	r17,r17,r16
   37cc0:	b809883a 	mov	r4,r23
   37cc4:	a00b883a 	mov	r5,r20
   37cc8:	342a983a 	sll	r21,r6,r16
   37ccc:	88a2b03a 	or	r17,r17,r2
   37cd0:	00394300 	call	39430 <__umodsi3>
   37cd4:	b809883a 	mov	r4,r23
   37cd8:	a00b883a 	mov	r5,r20
   37cdc:	1039883a 	mov	fp,r2
   37ce0:	9dbfffcc 	andi	r22,r19,65535
   37ce4:	00394280 	call	39428 <__udivsi3>
   37ce8:	1009883a 	mov	r4,r2
   37cec:	b00b883a 	mov	r5,r22
   37cf0:	102f883a 	mov	r23,r2
   37cf4:	00394380 	call	39438 <__mulsi3>
   37cf8:	1009883a 	mov	r4,r2
   37cfc:	e00e943a 	slli	r7,fp,16
   37d00:	8804d43a 	srli	r2,r17,16
   37d04:	388eb03a 	or	r7,r7,r2
   37d08:	3900042e 	bgeu	r7,r4,37d1c <__udivdi3+0x3cc>
   37d0c:	3ccf883a 	add	r7,r7,r19
   37d10:	b8bfffc4 	addi	r2,r23,-1
   37d14:	3cc0942e 	bgeu	r7,r19,37f68 <__udivdi3+0x618>
   37d18:	102f883a 	mov	r23,r2
   37d1c:	3939c83a 	sub	fp,r7,r4
   37d20:	a00b883a 	mov	r5,r20
   37d24:	e009883a 	mov	r4,fp
   37d28:	00394300 	call	39430 <__umodsi3>
   37d2c:	a00b883a 	mov	r5,r20
   37d30:	e009883a 	mov	r4,fp
   37d34:	d8800015 	stw	r2,0(sp)
   37d38:	00394280 	call	39428 <__udivsi3>
   37d3c:	1009883a 	mov	r4,r2
   37d40:	b00b883a 	mov	r5,r22
   37d44:	1029883a 	mov	r20,r2
   37d48:	00394380 	call	39438 <__mulsi3>
   37d4c:	d8c00017 	ldw	r3,0(sp)
   37d50:	8c7fffcc 	andi	r17,r17,65535
   37d54:	1806943a 	slli	r3,r3,16
   37d58:	1c46b03a 	or	r3,r3,r17
   37d5c:	1880042e 	bgeu	r3,r2,37d70 <__udivdi3+0x420>
   37d60:	1cc7883a 	add	r3,r3,r19
   37d64:	a13fffc4 	addi	r4,r20,-1
   37d68:	1cc07b2e 	bgeu	r3,r19,37f58 <__udivdi3+0x608>
   37d6c:	2029883a 	mov	r20,r4
   37d70:	b82e943a 	slli	r23,r23,16
   37d74:	a822d43a 	srli	r17,r21,16
   37d78:	ad7fffcc 	andi	r21,r21,65535
   37d7c:	a5e8b03a 	or	r20,r20,r23
   37d80:	a5bfffcc 	andi	r22,r20,65535
   37d84:	b009883a 	mov	r4,r22
   37d88:	a80b883a 	mov	r5,r21
   37d8c:	18afc83a 	sub	r23,r3,r2
   37d90:	a026d43a 	srli	r19,r20,16
   37d94:	00394380 	call	39438 <__mulsi3>
   37d98:	b009883a 	mov	r4,r22
   37d9c:	880b883a 	mov	r5,r17
   37da0:	1039883a 	mov	fp,r2
   37da4:	00394380 	call	39438 <__mulsi3>
   37da8:	a80b883a 	mov	r5,r21
   37dac:	9809883a 	mov	r4,r19
   37db0:	102d883a 	mov	r22,r2
   37db4:	00394380 	call	39438 <__mulsi3>
   37db8:	9809883a 	mov	r4,r19
   37dbc:	880b883a 	mov	r5,r17
   37dc0:	102b883a 	mov	r21,r2
   37dc4:	00394380 	call	39438 <__mulsi3>
   37dc8:	100b883a 	mov	r5,r2
   37dcc:	e004d43a 	srli	r2,fp,16
   37dd0:	ad89883a 	add	r4,r21,r22
   37dd4:	2089883a 	add	r4,r4,r2
   37dd8:	2540022e 	bgeu	r4,r21,37de4 <__udivdi3+0x494>
   37ddc:	00800074 	movhi	r2,1
   37de0:	288b883a 	add	r5,r5,r2
   37de4:	2004d43a 	srli	r2,r4,16
   37de8:	288b883a 	add	r5,r5,r2
   37dec:	b9404536 	bltu	r23,r5,37f04 <__udivdi3+0x5b4>
   37df0:	b9403f26 	beq	r23,r5,37ef0 <__udivdi3+0x5a0>
   37df4:	a005883a 	mov	r2,r20
   37df8:	0007883a 	mov	r3,zero
   37dfc:	003f3f06 	br	37afc <__udivdi3+0x1ac>
   37e00:	80a0983a 	sll	r16,r16,r2
   37e04:	88eed83a 	srl	r23,r17,r3
   37e08:	90c6d83a 	srl	r3,r18,r3
   37e0c:	8028d43a 	srli	r20,r16,16
   37e10:	88a2983a 	sll	r17,r17,r2
   37e14:	b809883a 	mov	r4,r23
   37e18:	a00b883a 	mov	r5,r20
   37e1c:	88ecb03a 	or	r22,r17,r3
   37e20:	90a6983a 	sll	r19,r18,r2
   37e24:	00394300 	call	39430 <__umodsi3>
   37e28:	b809883a 	mov	r4,r23
   37e2c:	a00b883a 	mov	r5,r20
   37e30:	1023883a 	mov	r17,r2
   37e34:	857fffcc 	andi	r21,r16,65535
   37e38:	00394280 	call	39428 <__udivsi3>
   37e3c:	1009883a 	mov	r4,r2
   37e40:	a80b883a 	mov	r5,r21
   37e44:	102f883a 	mov	r23,r2
   37e48:	00394380 	call	39438 <__mulsi3>
   37e4c:	1009883a 	mov	r4,r2
   37e50:	880a943a 	slli	r5,r17,16
   37e54:	b004d43a 	srli	r2,r22,16
   37e58:	288ab03a 	or	r5,r5,r2
   37e5c:	2900062e 	bgeu	r5,r4,37e78 <__udivdi3+0x528>
   37e60:	2c0b883a 	add	r5,r5,r16
   37e64:	b8bfffc4 	addi	r2,r23,-1
   37e68:	2c004536 	bltu	r5,r16,37f80 <__udivdi3+0x630>
   37e6c:	2900442e 	bgeu	r5,r4,37f80 <__udivdi3+0x630>
   37e70:	bdffff84 	addi	r23,r23,-2
   37e74:	2c0b883a 	add	r5,r5,r16
   37e78:	2925c83a 	sub	r18,r5,r4
   37e7c:	9009883a 	mov	r4,r18
   37e80:	a00b883a 	mov	r5,r20
   37e84:	00394300 	call	39430 <__umodsi3>
   37e88:	1023883a 	mov	r17,r2
   37e8c:	9009883a 	mov	r4,r18
   37e90:	a00b883a 	mov	r5,r20
   37e94:	8822943a 	slli	r17,r17,16
   37e98:	00394280 	call	39428 <__udivsi3>
   37e9c:	1009883a 	mov	r4,r2
   37ea0:	a80b883a 	mov	r5,r21
   37ea4:	b5bfffcc 	andi	r22,r22,65535
   37ea8:	1025883a 	mov	r18,r2
   37eac:	8da2b03a 	or	r17,r17,r22
   37eb0:	00394380 	call	39438 <__mulsi3>
   37eb4:	8880062e 	bgeu	r17,r2,37ed0 <__udivdi3+0x580>
   37eb8:	8c23883a 	add	r17,r17,r16
   37ebc:	90ffffc4 	addi	r3,r18,-1
   37ec0:	8c002d36 	bltu	r17,r16,37f78 <__udivdi3+0x628>
   37ec4:	88802c2e 	bgeu	r17,r2,37f78 <__udivdi3+0x628>
   37ec8:	94bfff84 	addi	r18,r18,-2
   37ecc:	8c23883a 	add	r17,r17,r16
   37ed0:	b806943a 	slli	r3,r23,16
   37ed4:	88a3c83a 	sub	r17,r17,r2
   37ed8:	90c6b03a 	or	r3,r18,r3
   37edc:	003f2c06 	br	37b90 <__udivdi3+0x240>
   37ee0:	1823883a 	mov	r17,r3
   37ee4:	003eec06 	br	37a98 <__udivdi3+0x148>
   37ee8:	2023883a 	mov	r17,r4
   37eec:	003f5606 	br	37c48 <__udivdi3+0x2f8>
   37ef0:	2008943a 	slli	r4,r4,16
   37ef4:	9420983a 	sll	r16,r18,r16
   37ef8:	e73fffcc 	andi	fp,fp,65535
   37efc:	2709883a 	add	r4,r4,fp
   37f00:	813fbc2e 	bgeu	r16,r4,37df4 <__udivdi3+0x4a4>
   37f04:	a0bfffc4 	addi	r2,r20,-1
   37f08:	0007883a 	mov	r3,zero
   37f0c:	003efb06 	br	37afc <__udivdi3+0x1ac>
   37f10:	00c00604 	movi	r3,24
   37f14:	180b883a 	mov	r5,r3
   37f18:	003eeb06 	br	37ac8 <__udivdi3+0x178>
   37f1c:	00c00204 	movi	r3,8
   37f20:	180b883a 	mov	r5,r3
   37f24:	003ee806 	br	37ac8 <__udivdi3+0x178>
   37f28:	00800604 	movi	r2,24
   37f2c:	1007883a 	mov	r3,r2
   37f30:	003f0a06 	br	37b5c <__udivdi3+0x20c>
   37f34:	00800604 	movi	r2,24
   37f38:	1007883a 	mov	r3,r2
   37f3c:	003e9c06 	br	379b0 <__udivdi3+0x60>
   37f40:	00800204 	movi	r2,8
   37f44:	1007883a 	mov	r3,r2
   37f48:	003e9906 	br	379b0 <__udivdi3+0x60>
   37f4c:	00800204 	movi	r2,8
   37f50:	1007883a 	mov	r3,r2
   37f54:	003f0106 	br	37b5c <__udivdi3+0x20c>
   37f58:	18bf842e 	bgeu	r3,r2,37d6c <__udivdi3+0x41c>
   37f5c:	a53fff84 	addi	r20,r20,-2
   37f60:	1cc7883a 	add	r3,r3,r19
   37f64:	003f8206 	br	37d70 <__udivdi3+0x420>
   37f68:	393f6b2e 	bgeu	r7,r4,37d18 <__udivdi3+0x3c8>
   37f6c:	bdffff84 	addi	r23,r23,-2
   37f70:	3ccf883a 	add	r7,r7,r19
   37f74:	003f6906 	br	37d1c <__udivdi3+0x3cc>
   37f78:	1825883a 	mov	r18,r3
   37f7c:	003fd406 	br	37ed0 <__udivdi3+0x580>
   37f80:	102f883a 	mov	r23,r2
   37f84:	003fbc06 	br	37e78 <__udivdi3+0x528>
   37f88:	94bfff84 	addi	r18,r18,-2
   37f8c:	340d883a 	add	r6,r6,r16
   37f90:	003f1606 	br	37bec <__udivdi3+0x29c>
   37f94:	94bfff84 	addi	r18,r18,-2
   37f98:	1c07883a 	add	r3,r3,r16
   37f9c:	003ea906 	br	37a44 <__udivdi3+0xf4>

00037fa0 <__umoddi3>:
   37fa0:	defff304 	addi	sp,sp,-52
   37fa4:	dd000715 	stw	r20,28(sp)
   37fa8:	dcc00615 	stw	r19,24(sp)
   37fac:	dc800515 	stw	r18,20(sp)
   37fb0:	dc400415 	stw	r17,16(sp)
   37fb4:	dc000315 	stw	r16,12(sp)
   37fb8:	dfc00c15 	stw	ra,48(sp)
   37fbc:	df000b15 	stw	fp,44(sp)
   37fc0:	ddc00a15 	stw	r23,40(sp)
   37fc4:	dd800915 	stw	r22,36(sp)
   37fc8:	dd400815 	stw	r21,32(sp)
   37fcc:	2025883a 	mov	r18,r4
   37fd0:	2823883a 	mov	r17,r5
   37fd4:	3021883a 	mov	r16,r6
   37fd8:	2027883a 	mov	r19,r4
   37fdc:	2829883a 	mov	r20,r5
   37fe0:	38003a1e 	bne	r7,zero,380cc <__umoddi3+0x12c>
   37fe4:	2980522e 	bgeu	r5,r6,38130 <__umoddi3+0x190>
   37fe8:	00bfffd4 	movui	r2,65535
   37fec:	1180a436 	bltu	r2,r6,38280 <__umoddi3+0x2e0>
   37ff0:	00803fc4 	movi	r2,255
   37ff4:	11816036 	bltu	r2,r6,38578 <__umoddi3+0x5d8>
   37ff8:	0005883a 	mov	r2,zero
   37ffc:	0009883a 	mov	r4,zero
   38000:	3084d83a 	srl	r2,r6,r2
   38004:	00c00034 	movhi	r3,0
   38008:	18c09004 	addi	r3,r3,576
   3800c:	05400804 	movi	r21,32
   38010:	1885883a 	add	r2,r3,r2
   38014:	10800003 	ldbu	r2,0(r2)
   38018:	1109883a 	add	r4,r2,r4
   3801c:	a92bc83a 	sub	r21,r21,r4
   38020:	a8010e26 	beq	r21,zero,3845c <__umoddi3+0x4bc>
   38024:	8d62983a 	sll	r17,r17,r21
   38028:	9108d83a 	srl	r4,r18,r4
   3802c:	3560983a 	sll	r16,r6,r21
   38030:	9566983a 	sll	r19,r18,r21
   38034:	8928b03a 	or	r20,r17,r4
   38038:	8022d43a 	srli	r17,r16,16
   3803c:	a009883a 	mov	r4,r20
   38040:	84bfffcc 	andi	r18,r16,65535
   38044:	880b883a 	mov	r5,r17
   38048:	00394300 	call	39430 <__umodsi3>
   3804c:	a009883a 	mov	r4,r20
   38050:	880b883a 	mov	r5,r17
   38054:	102d883a 	mov	r22,r2
   38058:	00394280 	call	39428 <__udivsi3>
   3805c:	1009883a 	mov	r4,r2
   38060:	900b883a 	mov	r5,r18
   38064:	00394380 	call	39438 <__mulsi3>
   38068:	1009883a 	mov	r4,r2
   3806c:	b006943a 	slli	r3,r22,16
   38070:	9804d43a 	srli	r2,r19,16
   38074:	1886b03a 	or	r3,r3,r2
   38078:	1900042e 	bgeu	r3,r4,3808c <__umoddi3+0xec>
   3807c:	1c07883a 	add	r3,r3,r16
   38080:	1c000236 	bltu	r3,r16,3808c <__umoddi3+0xec>
   38084:	1900012e 	bgeu	r3,r4,3808c <__umoddi3+0xec>
   38088:	1c07883a 	add	r3,r3,r16
   3808c:	1929c83a 	sub	r20,r3,r4
   38090:	a009883a 	mov	r4,r20
   38094:	880b883a 	mov	r5,r17
   38098:	00394300 	call	39430 <__umodsi3>
   3809c:	102d883a 	mov	r22,r2
   380a0:	a009883a 	mov	r4,r20
   380a4:	880b883a 	mov	r5,r17
   380a8:	b02c943a 	slli	r22,r22,16
   380ac:	00394280 	call	39428 <__udivsi3>
   380b0:	1009883a 	mov	r4,r2
   380b4:	900b883a 	mov	r5,r18
   380b8:	9cffffcc 	andi	r19,r19,65535
   380bc:	00394380 	call	39438 <__mulsi3>
   380c0:	b4e6b03a 	or	r19,r22,r19
   380c4:	9880572e 	bgeu	r19,r2,38224 <__umoddi3+0x284>
   380c8:	00005206 	br	38214 <__umoddi3+0x274>
   380cc:	29c05936 	bltu	r5,r7,38234 <__umoddi3+0x294>
   380d0:	00bfffd4 	movui	r2,65535
   380d4:	11c0652e 	bgeu	r2,r7,3826c <__umoddi3+0x2cc>
   380d8:	00804034 	movhi	r2,256
   380dc:	10bfffc4 	addi	r2,r2,-1
   380e0:	11c11936 	bltu	r2,r7,38548 <__umoddi3+0x5a8>
   380e4:	00c00404 	movi	r3,16
   380e8:	1827883a 	mov	r19,r3
   380ec:	38c6d83a 	srl	r3,r7,r3
   380f0:	01000034 	movhi	r4,0
   380f4:	21009004 	addi	r4,r4,576
   380f8:	04000804 	movi	r16,32
   380fc:	20c7883a 	add	r3,r4,r3
   38100:	18800003 	ldbu	r2,0(r3)
   38104:	14e7883a 	add	r19,r2,r19
   38108:	84e1c83a 	sub	r16,r16,r19
   3810c:	8000671e 	bne	r16,zero,382ac <__umoddi3+0x30c>
   38110:	3c400136 	bltu	r7,r17,38118 <__umoddi3+0x178>
   38114:	91812536 	bltu	r18,r6,385ac <__umoddi3+0x60c>
   38118:	9185c83a 	sub	r2,r18,r6
   3811c:	89e3c83a 	sub	r17,r17,r7
   38120:	90a5803a 	cmpltu	r18,r18,r2
   38124:	8ca9c83a 	sub	r20,r17,r18
   38128:	a007883a 	mov	r3,r20
   3812c:	00004306 	br	3823c <__umoddi3+0x29c>
   38130:	3000041e 	bne	r6,zero,38144 <__umoddi3+0x1a4>
   38134:	01000044 	movi	r4,1
   38138:	000b883a 	mov	r5,zero
   3813c:	00394280 	call	39428 <__udivsi3>
   38140:	1021883a 	mov	r16,r2
   38144:	00bfffd4 	movui	r2,65535
   38148:	1400532e 	bgeu	r2,r16,38298 <__umoddi3+0x2f8>
   3814c:	00804034 	movhi	r2,256
   38150:	10bfffc4 	addi	r2,r2,-1
   38154:	14010536 	bltu	r2,r16,3856c <__umoddi3+0x5cc>
   38158:	00800404 	movi	r2,16
   3815c:	1007883a 	mov	r3,r2
   38160:	8084d83a 	srl	r2,r16,r2
   38164:	01000034 	movhi	r4,0
   38168:	21009004 	addi	r4,r4,576
   3816c:	05400804 	movi	r21,32
   38170:	2085883a 	add	r2,r4,r2
   38174:	10800003 	ldbu	r2,0(r2)
   38178:	10c7883a 	add	r3,r2,r3
   3817c:	a8ebc83a 	sub	r21,r21,r3
   38180:	a800b81e 	bne	r21,zero,38464 <__umoddi3+0x4c4>
   38184:	8028d43a 	srli	r20,r16,16
   38188:	8c23c83a 	sub	r17,r17,r16
   3818c:	85bfffcc 	andi	r22,r16,65535
   38190:	8809883a 	mov	r4,r17
   38194:	a00b883a 	mov	r5,r20
   38198:	00394300 	call	39430 <__umodsi3>
   3819c:	8809883a 	mov	r4,r17
   381a0:	a00b883a 	mov	r5,r20
   381a4:	1025883a 	mov	r18,r2
   381a8:	00394280 	call	39428 <__udivsi3>
   381ac:	1009883a 	mov	r4,r2
   381b0:	b00b883a 	mov	r5,r22
   381b4:	00394380 	call	39438 <__mulsi3>
   381b8:	1009883a 	mov	r4,r2
   381bc:	9006943a 	slli	r3,r18,16
   381c0:	9804d43a 	srli	r2,r19,16
   381c4:	1886b03a 	or	r3,r3,r2
   381c8:	1900032e 	bgeu	r3,r4,381d8 <__umoddi3+0x238>
   381cc:	1c07883a 	add	r3,r3,r16
   381d0:	1c000136 	bltu	r3,r16,381d8 <__umoddi3+0x238>
   381d4:	1900f336 	bltu	r3,r4,385a4 <__umoddi3+0x604>
   381d8:	1923c83a 	sub	r17,r3,r4
   381dc:	8809883a 	mov	r4,r17
   381e0:	a00b883a 	mov	r5,r20
   381e4:	00394300 	call	39430 <__umodsi3>
   381e8:	102f883a 	mov	r23,r2
   381ec:	8809883a 	mov	r4,r17
   381f0:	a00b883a 	mov	r5,r20
   381f4:	b82e943a 	slli	r23,r23,16
   381f8:	00394280 	call	39428 <__udivsi3>
   381fc:	1009883a 	mov	r4,r2
   38200:	b00b883a 	mov	r5,r22
   38204:	9cffffcc 	andi	r19,r19,65535
   38208:	00394380 	call	39438 <__mulsi3>
   3820c:	bce6b03a 	or	r19,r23,r19
   38210:	9880042e 	bgeu	r19,r2,38224 <__umoddi3+0x284>
   38214:	9c27883a 	add	r19,r19,r16
   38218:	9c000236 	bltu	r19,r16,38224 <__umoddi3+0x284>
   3821c:	9880012e 	bgeu	r19,r2,38224 <__umoddi3+0x284>
   38220:	9c27883a 	add	r19,r19,r16
   38224:	9885c83a 	sub	r2,r19,r2
   38228:	1544d83a 	srl	r2,r2,r21
   3822c:	0007883a 	mov	r3,zero
   38230:	00000206 	br	3823c <__umoddi3+0x29c>
   38234:	2005883a 	mov	r2,r4
   38238:	2807883a 	mov	r3,r5
   3823c:	dfc00c17 	ldw	ra,48(sp)
   38240:	df000b17 	ldw	fp,44(sp)
   38244:	ddc00a17 	ldw	r23,40(sp)
   38248:	dd800917 	ldw	r22,36(sp)
   3824c:	dd400817 	ldw	r21,32(sp)
   38250:	dd000717 	ldw	r20,28(sp)
   38254:	dcc00617 	ldw	r19,24(sp)
   38258:	dc800517 	ldw	r18,20(sp)
   3825c:	dc400417 	ldw	r17,16(sp)
   38260:	dc000317 	ldw	r16,12(sp)
   38264:	dec00d04 	addi	sp,sp,52
   38268:	f800283a 	ret
   3826c:	00803fc4 	movi	r2,255
   38270:	11c0b236 	bltu	r2,r7,3853c <__umoddi3+0x59c>
   38274:	0007883a 	mov	r3,zero
   38278:	0027883a 	mov	r19,zero
   3827c:	003f9b06 	br	380ec <__umoddi3+0x14c>
   38280:	00804034 	movhi	r2,256
   38284:	10bfffc4 	addi	r2,r2,-1
   38288:	1180b236 	bltu	r2,r6,38554 <__umoddi3+0x5b4>
   3828c:	00800404 	movi	r2,16
   38290:	1009883a 	mov	r4,r2
   38294:	003f5a06 	br	38000 <__umoddi3+0x60>
   38298:	00803fc4 	movi	r2,255
   3829c:	1400b036 	bltu	r2,r16,38560 <__umoddi3+0x5c0>
   382a0:	0005883a 	mov	r2,zero
   382a4:	0007883a 	mov	r3,zero
   382a8:	003fad06 	br	38160 <__umoddi3+0x1c0>
   382ac:	34c4d83a 	srl	r2,r6,r19
   382b0:	3c0e983a 	sll	r7,r7,r16
   382b4:	8cf8d83a 	srl	fp,r17,r19
   382b8:	8c22983a 	sll	r17,r17,r16
   382bc:	38a8b03a 	or	r20,r7,r2
   382c0:	a02ad43a 	srli	r21,r20,16
   382c4:	94c4d83a 	srl	r2,r18,r19
   382c8:	e009883a 	mov	r4,fp
   382cc:	a80b883a 	mov	r5,r21
   382d0:	342c983a 	sll	r22,r6,r16
   382d4:	88a2b03a 	or	r17,r17,r2
   382d8:	00394300 	call	39430 <__umodsi3>
   382dc:	e009883a 	mov	r4,fp
   382e0:	a80b883a 	mov	r5,r21
   382e4:	a5ffffcc 	andi	r23,r20,65535
   382e8:	d8800215 	stw	r2,8(sp)
   382ec:	00394280 	call	39428 <__udivsi3>
   382f0:	1009883a 	mov	r4,r2
   382f4:	b80b883a 	mov	r5,r23
   382f8:	1039883a 	mov	fp,r2
   382fc:	00394380 	call	39438 <__mulsi3>
   38300:	d8c00217 	ldw	r3,8(sp)
   38304:	1009883a 	mov	r4,r2
   38308:	8804d43a 	srli	r2,r17,16
   3830c:	1806943a 	slli	r3,r3,16
   38310:	9424983a 	sll	r18,r18,r16
   38314:	1886b03a 	or	r3,r3,r2
   38318:	1900042e 	bgeu	r3,r4,3832c <__umoddi3+0x38c>
   3831c:	1d07883a 	add	r3,r3,r20
   38320:	e0bfffc4 	addi	r2,fp,-1
   38324:	1d009b2e 	bgeu	r3,r20,38594 <__umoddi3+0x5f4>
   38328:	1039883a 	mov	fp,r2
   3832c:	1907c83a 	sub	r3,r3,r4
   38330:	1809883a 	mov	r4,r3
   38334:	a80b883a 	mov	r5,r21
   38338:	d8c00215 	stw	r3,8(sp)
   3833c:	00394300 	call	39430 <__umodsi3>
   38340:	d8c00217 	ldw	r3,8(sp)
   38344:	a80b883a 	mov	r5,r21
   38348:	d8800015 	stw	r2,0(sp)
   3834c:	1809883a 	mov	r4,r3
   38350:	00394280 	call	39428 <__udivsi3>
   38354:	1009883a 	mov	r4,r2
   38358:	b80b883a 	mov	r5,r23
   3835c:	102b883a 	mov	r21,r2
   38360:	00394380 	call	39438 <__mulsi3>
   38364:	d9c00017 	ldw	r7,0(sp)
   38368:	8c7fffcc 	andi	r17,r17,65535
   3836c:	380e943a 	slli	r7,r7,16
   38370:	3c4eb03a 	or	r7,r7,r17
   38374:	3880042e 	bgeu	r7,r2,38388 <__umoddi3+0x3e8>
   38378:	3d0f883a 	add	r7,r7,r20
   3837c:	a8ffffc4 	addi	r3,r21,-1
   38380:	3d00802e 	bgeu	r7,r20,38584 <__umoddi3+0x5e4>
   38384:	182b883a 	mov	r21,r3
   38388:	e038943a 	slli	fp,fp,16
   3838c:	b010d43a 	srli	r8,r22,16
   38390:	b1bfffcc 	andi	r6,r22,65535
   38394:	af2ab03a 	or	r21,r21,fp
   38398:	a82ed43a 	srli	r23,r21,16
   3839c:	ad7fffcc 	andi	r21,r21,65535
   383a0:	300b883a 	mov	r5,r6
   383a4:	a809883a 	mov	r4,r21
   383a8:	38a3c83a 	sub	r17,r7,r2
   383ac:	d9800115 	stw	r6,4(sp)
   383b0:	da000015 	stw	r8,0(sp)
   383b4:	00394380 	call	39438 <__mulsi3>
   383b8:	da000017 	ldw	r8,0(sp)
   383bc:	a809883a 	mov	r4,r21
   383c0:	1039883a 	mov	fp,r2
   383c4:	400b883a 	mov	r5,r8
   383c8:	da000215 	stw	r8,8(sp)
   383cc:	00394380 	call	39438 <__mulsi3>
   383d0:	d9800117 	ldw	r6,4(sp)
   383d4:	b809883a 	mov	r4,r23
   383d8:	d8800015 	stw	r2,0(sp)
   383dc:	300b883a 	mov	r5,r6
   383e0:	00394380 	call	39438 <__mulsi3>
   383e4:	d8c00217 	ldw	r3,8(sp)
   383e8:	b809883a 	mov	r4,r23
   383ec:	102b883a 	mov	r21,r2
   383f0:	180b883a 	mov	r5,r3
   383f4:	00394380 	call	39438 <__mulsi3>
   383f8:	d9c00017 	ldw	r7,0(sp)
   383fc:	1007883a 	mov	r3,r2
   38400:	e004d43a 	srli	r2,fp,16
   38404:	a9c9883a 	add	r4,r21,r7
   38408:	2089883a 	add	r4,r4,r2
   3840c:	2540022e 	bgeu	r4,r21,38418 <__umoddi3+0x478>
   38410:	00800074 	movhi	r2,1
   38414:	1887883a 	add	r3,r3,r2
   38418:	2004d43a 	srli	r2,r4,16
   3841c:	2008943a 	slli	r4,r4,16
   38420:	e73fffcc 	andi	fp,fp,65535
   38424:	1887883a 	add	r3,r3,r2
   38428:	2709883a 	add	r4,r4,fp
   3842c:	88c03d36 	bltu	r17,r3,38524 <__umoddi3+0x584>
   38430:	88c06126 	beq	r17,r3,385b8 <__umoddi3+0x618>
   38434:	88c7c83a 	sub	r3,r17,r3
   38438:	202d883a 	mov	r22,r4
   3843c:	95adc83a 	sub	r22,r18,r22
   38440:	95a5803a 	cmpltu	r18,r18,r22
   38444:	1c87c83a 	sub	r3,r3,r18
   38448:	1cc4983a 	sll	r2,r3,r19
   3844c:	b42cd83a 	srl	r22,r22,r16
   38450:	1c06d83a 	srl	r3,r3,r16
   38454:	1584b03a 	or	r2,r2,r22
   38458:	003f7806 	br	3823c <__umoddi3+0x29c>
   3845c:	002b883a 	mov	r21,zero
   38460:	003ef506 	br	38038 <__umoddi3+0x98>
   38464:	8560983a 	sll	r16,r16,r21
   38468:	88e6d83a 	srl	r19,r17,r3
   3846c:	90c6d83a 	srl	r3,r18,r3
   38470:	8028d43a 	srli	r20,r16,16
   38474:	8d62983a 	sll	r17,r17,r21
   38478:	9809883a 	mov	r4,r19
   3847c:	a00b883a 	mov	r5,r20
   38480:	88eeb03a 	or	r23,r17,r3
   38484:	00394300 	call	39430 <__umodsi3>
   38488:	9809883a 	mov	r4,r19
   3848c:	a00b883a 	mov	r5,r20
   38490:	1023883a 	mov	r17,r2
   38494:	85bfffcc 	andi	r22,r16,65535
   38498:	00394280 	call	39428 <__udivsi3>
   3849c:	1009883a 	mov	r4,r2
   384a0:	b00b883a 	mov	r5,r22
   384a4:	00394380 	call	39438 <__mulsi3>
   384a8:	1007883a 	mov	r3,r2
   384ac:	8808943a 	slli	r4,r17,16
   384b0:	b804d43a 	srli	r2,r23,16
   384b4:	9566983a 	sll	r19,r18,r21
   384b8:	2088b03a 	or	r4,r4,r2
   384bc:	20c0042e 	bgeu	r4,r3,384d0 <__umoddi3+0x530>
   384c0:	2409883a 	add	r4,r4,r16
   384c4:	24000236 	bltu	r4,r16,384d0 <__umoddi3+0x530>
   384c8:	20c0012e 	bgeu	r4,r3,384d0 <__umoddi3+0x530>
   384cc:	2409883a 	add	r4,r4,r16
   384d0:	20e5c83a 	sub	r18,r4,r3
   384d4:	9009883a 	mov	r4,r18
   384d8:	a00b883a 	mov	r5,r20
   384dc:	00394300 	call	39430 <__umodsi3>
   384e0:	1023883a 	mov	r17,r2
   384e4:	9009883a 	mov	r4,r18
   384e8:	a00b883a 	mov	r5,r20
   384ec:	8822943a 	slli	r17,r17,16
   384f0:	00394280 	call	39428 <__udivsi3>
   384f4:	1009883a 	mov	r4,r2
   384f8:	b00b883a 	mov	r5,r22
   384fc:	bdffffcc 	andi	r23,r23,65535
   38500:	00394380 	call	39438 <__mulsi3>
   38504:	8de2b03a 	or	r17,r17,r23
   38508:	8880042e 	bgeu	r17,r2,3851c <__umoddi3+0x57c>
   3850c:	8c23883a 	add	r17,r17,r16
   38510:	8c000236 	bltu	r17,r16,3851c <__umoddi3+0x57c>
   38514:	8880012e 	bgeu	r17,r2,3851c <__umoddi3+0x57c>
   38518:	8c23883a 	add	r17,r17,r16
   3851c:	88a3c83a 	sub	r17,r17,r2
   38520:	003f1b06 	br	38190 <__umoddi3+0x1f0>
   38524:	25adc83a 	sub	r22,r4,r22
   38528:	1d07c83a 	sub	r3,r3,r20
   3852c:	2589803a 	cmpltu	r4,r4,r22
   38530:	1907c83a 	sub	r3,r3,r4
   38534:	88c7c83a 	sub	r3,r17,r3
   38538:	003fc006 	br	3843c <__umoddi3+0x49c>
   3853c:	00c00204 	movi	r3,8
   38540:	1827883a 	mov	r19,r3
   38544:	003ee906 	br	380ec <__umoddi3+0x14c>
   38548:	00c00604 	movi	r3,24
   3854c:	1827883a 	mov	r19,r3
   38550:	003ee606 	br	380ec <__umoddi3+0x14c>
   38554:	00800604 	movi	r2,24
   38558:	1009883a 	mov	r4,r2
   3855c:	003ea806 	br	38000 <__umoddi3+0x60>
   38560:	00800204 	movi	r2,8
   38564:	1007883a 	mov	r3,r2
   38568:	003efd06 	br	38160 <__umoddi3+0x1c0>
   3856c:	00800604 	movi	r2,24
   38570:	1007883a 	mov	r3,r2
   38574:	003efa06 	br	38160 <__umoddi3+0x1c0>
   38578:	00800204 	movi	r2,8
   3857c:	1009883a 	mov	r4,r2
   38580:	003e9f06 	br	38000 <__umoddi3+0x60>
   38584:	38bf7f2e 	bgeu	r7,r2,38384 <__umoddi3+0x3e4>
   38588:	ad7fff84 	addi	r21,r21,-2
   3858c:	3d0f883a 	add	r7,r7,r20
   38590:	003f7d06 	br	38388 <__umoddi3+0x3e8>
   38594:	193f642e 	bgeu	r3,r4,38328 <__umoddi3+0x388>
   38598:	e73fff84 	addi	fp,fp,-2
   3859c:	1d07883a 	add	r3,r3,r20
   385a0:	003f6206 	br	3832c <__umoddi3+0x38c>
   385a4:	1c07883a 	add	r3,r3,r16
   385a8:	003f0b06 	br	381d8 <__umoddi3+0x238>
   385ac:	9005883a 	mov	r2,r18
   385b0:	a007883a 	mov	r3,r20
   385b4:	003f2106 	br	3823c <__umoddi3+0x29c>
   385b8:	913fda36 	bltu	r18,r4,38524 <__umoddi3+0x584>
   385bc:	202d883a 	mov	r22,r4
   385c0:	0007883a 	mov	r3,zero
   385c4:	003f9d06 	br	3843c <__umoddi3+0x49c>

000385c8 <_fpadd_parts>:
   385c8:	2005883a 	mov	r2,r4
   385cc:	21000017 	ldw	r4,0(r4)
   385d0:	01c00044 	movi	r7,1
   385d4:	3900622e 	bgeu	r7,r4,38760 <_fpadd_parts+0x198>
   385d8:	28c00017 	ldw	r3,0(r5)
   385dc:	38c05f2e 	bgeu	r7,r3,3875c <_fpadd_parts+0x194>
   385e0:	01c00104 	movi	r7,4
   385e4:	21c0c626 	beq	r4,r7,38900 <_fpadd_parts+0x338>
   385e8:	19c05c26 	beq	r3,r7,3875c <_fpadd_parts+0x194>
   385ec:	01c00084 	movi	r7,2
   385f0:	19c06b26 	beq	r3,r7,387a0 <_fpadd_parts+0x1d8>
   385f4:	21c05926 	beq	r4,r7,3875c <_fpadd_parts+0x194>
   385f8:	11c00217 	ldw	r7,8(r2)
   385fc:	2ac00217 	ldw	r11,8(r5)
   38600:	13000317 	ldw	r12,12(r2)
   38604:	13400417 	ldw	r13,16(r2)
   38608:	3ac9c83a 	sub	r4,r7,r11
   3860c:	2a000317 	ldw	r8,12(r5)
   38610:	2a400417 	ldw	r9,16(r5)
   38614:	2015883a 	mov	r10,r4
   38618:	20007516 	blt	r4,zero,387f0 <_fpadd_parts+0x228>
   3861c:	00c00fc4 	movi	r3,63
   38620:	1a805016 	blt	r3,r10,38764 <_fpadd_parts+0x19c>
   38624:	0100870e 	bge	zero,r4,38844 <_fpadd_parts+0x27c>
   38628:	50fff804 	addi	r3,r10,-32
   3862c:	18009916 	blt	r3,zero,38894 <_fpadd_parts+0x2cc>
   38630:	48d6d83a 	srl	r11,r9,r3
   38634:	001d883a 	mov	r14,zero
   38638:	18009e16 	blt	r3,zero,388b4 <_fpadd_parts+0x2ec>
   3863c:	01000044 	movi	r4,1
   38640:	20c6983a 	sll	r3,r4,r3
   38644:	0015883a 	mov	r10,zero
   38648:	513fffc4 	addi	r4,r10,-1
   3864c:	2295403a 	cmpgeu	r10,r4,r10
   38650:	1a87c83a 	sub	r3,r3,r10
   38654:	1a52703a 	and	r9,r3,r9
   38658:	2210703a 	and	r8,r4,r8
   3865c:	4250b03a 	or	r8,r8,r9
   38660:	4010c03a 	cmpne	r8,r8,zero
   38664:	42d0b03a 	or	r8,r8,r11
   38668:	7013883a 	mov	r9,r14
   3866c:	11000117 	ldw	r4,4(r2)
   38670:	28800117 	ldw	r2,4(r5)
   38674:	20804126 	beq	r4,r2,3877c <_fpadd_parts+0x1b4>
   38678:	20006326 	beq	r4,zero,38808 <_fpadd_parts+0x240>
   3867c:	4305c83a 	sub	r2,r8,r12
   38680:	4091803a 	cmpltu	r8,r8,r2
   38684:	4b47c83a 	sub	r3,r9,r13
   38688:	1a07c83a 	sub	r3,r3,r8
   3868c:	18006316 	blt	r3,zero,3881c <_fpadd_parts+0x254>
   38690:	30000115 	stw	zero,4(r6)
   38694:	31c00215 	stw	r7,8(r6)
   38698:	30800315 	stw	r2,12(r6)
   3869c:	30c00415 	stw	r3,16(r6)
   386a0:	11ffffc4 	addi	r7,r2,-1
   386a4:	388b403a 	cmpgeu	r5,r7,r2
   386a8:	194bc83a 	sub	r5,r3,r5
   386ac:	01040034 	movhi	r4,4096
   386b0:	213fffc4 	addi	r4,r4,-1
   386b4:	21401736 	bltu	r4,r5,38714 <_fpadd_parts+0x14c>
   386b8:	29008226 	beq	r5,r4,388c4 <_fpadd_parts+0x2fc>
   386bc:	31400217 	ldw	r5,8(r6)
   386c0:	02840034 	movhi	r10,4096
   386c4:	52bfffc4 	addi	r10,r10,-1
   386c8:	033fff84 	movi	r12,-2
   386cc:	297fffc4 	addi	r5,r5,-1
   386d0:	00000106 	br	386d8 <_fpadd_parts+0x110>
   386d4:	3a804a26 	beq	r7,r10,38800 <_fpadd_parts+0x238>
   386d8:	1089883a 	add	r4,r2,r2
   386dc:	2091803a 	cmpltu	r8,r4,r2
   386e0:	18c7883a 	add	r3,r3,r3
   386e4:	227fffc4 	addi	r9,r4,-1
   386e8:	40d1883a 	add	r8,r8,r3
   386ec:	490f403a 	cmpgeu	r7,r9,r4
   386f0:	41cfc83a 	sub	r7,r8,r7
   386f4:	2817883a 	mov	r11,r5
   386f8:	2005883a 	mov	r2,r4
   386fc:	4007883a 	mov	r3,r8
   38700:	297fffc4 	addi	r5,r5,-1
   38704:	51fff32e 	bgeu	r10,r7,386d4 <_fpadd_parts+0x10c>
   38708:	31000315 	stw	r4,12(r6)
   3870c:	32000415 	stw	r8,16(r6)
   38710:	32c00215 	stw	r11,8(r6)
   38714:	010000c4 	movi	r4,3
   38718:	31000015 	stw	r4,0(r6)
   3871c:	01080034 	movhi	r4,8192
   38720:	213fffc4 	addi	r4,r4,-1
   38724:	20c00b2e 	bgeu	r4,r3,38754 <_fpadd_parts+0x18c>
   38728:	180e97fa 	slli	r7,r3,31
   3872c:	1008d07a 	srli	r4,r2,1
   38730:	31400217 	ldw	r5,8(r6)
   38734:	1806d07a 	srli	r3,r3,1
   38738:	1080004c 	andi	r2,r2,1
   3873c:	3908b03a 	or	r4,r7,r4
   38740:	1108b03a 	or	r4,r2,r4
   38744:	29400044 	addi	r5,r5,1
   38748:	31000315 	stw	r4,12(r6)
   3874c:	30c00415 	stw	r3,16(r6)
   38750:	31400215 	stw	r5,8(r6)
   38754:	3005883a 	mov	r2,r6
   38758:	f800283a 	ret
   3875c:	2805883a 	mov	r2,r5
   38760:	f800283a 	ret
   38764:	59c01e0e 	bge	r11,r7,387e0 <_fpadd_parts+0x218>
   38768:	11000117 	ldw	r4,4(r2)
   3876c:	28800117 	ldw	r2,4(r5)
   38770:	0011883a 	mov	r8,zero
   38774:	0013883a 	mov	r9,zero
   38778:	20bfbf1e 	bne	r4,r2,38678 <_fpadd_parts+0xb0>
   3877c:	4305883a 	add	r2,r8,r12
   38780:	1207803a 	cmpltu	r3,r2,r8
   38784:	4b53883a 	add	r9,r9,r13
   38788:	1a47883a 	add	r3,r3,r9
   3878c:	31000115 	stw	r4,4(r6)
   38790:	31c00215 	stw	r7,8(r6)
   38794:	30800315 	stw	r2,12(r6)
   38798:	30c00415 	stw	r3,16(r6)
   3879c:	003fdd06 	br	38714 <_fpadd_parts+0x14c>
   387a0:	20ffef1e 	bne	r4,r3,38760 <_fpadd_parts+0x198>
   387a4:	31000015 	stw	r4,0(r6)
   387a8:	10c00117 	ldw	r3,4(r2)
   387ac:	30c00115 	stw	r3,4(r6)
   387b0:	10c00217 	ldw	r3,8(r2)
   387b4:	11000117 	ldw	r4,4(r2)
   387b8:	29400117 	ldw	r5,4(r5)
   387bc:	30c00215 	stw	r3,8(r6)
   387c0:	10c00317 	ldw	r3,12(r2)
   387c4:	2908703a 	and	r4,r5,r4
   387c8:	30c00315 	stw	r3,12(r6)
   387cc:	10c00417 	ldw	r3,16(r2)
   387d0:	31000115 	stw	r4,4(r6)
   387d4:	3005883a 	mov	r2,r6
   387d8:	30c00415 	stw	r3,16(r6)
   387dc:	f800283a 	ret
   387e0:	580f883a 	mov	r7,r11
   387e4:	0019883a 	mov	r12,zero
   387e8:	001b883a 	mov	r13,zero
   387ec:	003f9f06 	br	3866c <_fpadd_parts+0xa4>
   387f0:	0115c83a 	sub	r10,zero,r4
   387f4:	00c00fc4 	movi	r3,63
   387f8:	1abfda16 	blt	r3,r10,38764 <_fpadd_parts+0x19c>
   387fc:	003f8906 	br	38624 <_fpadd_parts+0x5c>
   38800:	627fb52e 	bgeu	r12,r9,386d8 <_fpadd_parts+0x110>
   38804:	003fc006 	br	38708 <_fpadd_parts+0x140>
   38808:	6205c83a 	sub	r2,r12,r8
   3880c:	6099803a 	cmpltu	r12,r12,r2
   38810:	6a47c83a 	sub	r3,r13,r9
   38814:	1b07c83a 	sub	r3,r3,r12
   38818:	183f9d0e 	bge	r3,zero,38690 <_fpadd_parts+0xc8>
   3881c:	0085c83a 	sub	r2,zero,r2
   38820:	1008c03a 	cmpne	r4,r2,zero
   38824:	00c7c83a 	sub	r3,zero,r3
   38828:	1907c83a 	sub	r3,r3,r4
   3882c:	01000044 	movi	r4,1
   38830:	31000115 	stw	r4,4(r6)
   38834:	31c00215 	stw	r7,8(r6)
   38838:	30800315 	stw	r2,12(r6)
   3883c:	30c00415 	stw	r3,16(r6)
   38840:	003f9706 	br	386a0 <_fpadd_parts+0xd8>
   38844:	203f8926 	beq	r4,zero,3866c <_fpadd_parts+0xa4>
   38848:	50fff804 	addi	r3,r10,-32
   3884c:	3a8f883a 	add	r7,r7,r10
   38850:	18002316 	blt	r3,zero,388e0 <_fpadd_parts+0x318>
   38854:	68d6d83a 	srl	r11,r13,r3
   38858:	001d883a 	mov	r14,zero
   3885c:	18001c16 	blt	r3,zero,388d0 <_fpadd_parts+0x308>
   38860:	01000044 	movi	r4,1
   38864:	20c6983a 	sll	r3,r4,r3
   38868:	0015883a 	mov	r10,zero
   3886c:	513fffc4 	addi	r4,r10,-1
   38870:	2295403a 	cmpgeu	r10,r4,r10
   38874:	1a87c83a 	sub	r3,r3,r10
   38878:	1b5a703a 	and	r13,r3,r13
   3887c:	2318703a 	and	r12,r4,r12
   38880:	6358b03a 	or	r12,r12,r13
   38884:	6018c03a 	cmpne	r12,r12,zero
   38888:	62d8b03a 	or	r12,r12,r11
   3888c:	701b883a 	mov	r13,r14
   38890:	003f7606 	br	3866c <_fpadd_parts+0xa4>
   38894:	4808907a 	slli	r4,r9,1
   38898:	02c007c4 	movi	r11,31
   3889c:	5a97c83a 	sub	r11,r11,r10
   388a0:	22c8983a 	sll	r4,r4,r11
   388a4:	4296d83a 	srl	r11,r8,r10
   388a8:	4a9cd83a 	srl	r14,r9,r10
   388ac:	22d6b03a 	or	r11,r4,r11
   388b0:	003f6106 	br	38638 <_fpadd_parts+0x70>
   388b4:	00c00044 	movi	r3,1
   388b8:	1a94983a 	sll	r10,r3,r10
   388bc:	0007883a 	mov	r3,zero
   388c0:	003f6106 	br	38648 <_fpadd_parts+0x80>
   388c4:	013fff84 	movi	r4,-2
   388c8:	21ff7c2e 	bgeu	r4,r7,386bc <_fpadd_parts+0xf4>
   388cc:	003f9106 	br	38714 <_fpadd_parts+0x14c>
   388d0:	00c00044 	movi	r3,1
   388d4:	1a94983a 	sll	r10,r3,r10
   388d8:	0007883a 	mov	r3,zero
   388dc:	003fe306 	br	3886c <_fpadd_parts+0x2a4>
   388e0:	6816907a 	slli	r11,r13,1
   388e4:	010007c4 	movi	r4,31
   388e8:	2289c83a 	sub	r4,r4,r10
   388ec:	5908983a 	sll	r4,r11,r4
   388f0:	6296d83a 	srl	r11,r12,r10
   388f4:	6a9cd83a 	srl	r14,r13,r10
   388f8:	22d6b03a 	or	r11,r4,r11
   388fc:	003fd706 	br	3885c <_fpadd_parts+0x294>
   38900:	193f971e 	bne	r3,r4,38760 <_fpadd_parts+0x198>
   38904:	11000117 	ldw	r4,4(r2)
   38908:	28c00117 	ldw	r3,4(r5)
   3890c:	20ff9426 	beq	r4,r3,38760 <_fpadd_parts+0x198>
   38910:	00800034 	movhi	r2,0
   38914:	10808b04 	addi	r2,r2,556
   38918:	f800283a 	ret

0003891c <__adddf3>:
   3891c:	deffec04 	addi	sp,sp,-80
   38920:	d9001115 	stw	r4,68(sp)
   38924:	d9401215 	stw	r5,72(sp)
   38928:	d9001104 	addi	r4,sp,68
   3892c:	d9400a04 	addi	r5,sp,40
   38930:	dfc01315 	stw	ra,76(sp)
   38934:	d9c01015 	stw	r7,64(sp)
   38938:	d9800f15 	stw	r6,60(sp)
   3893c:	00398400 	call	39840 <__unpack_d>
   38940:	d9000f04 	addi	r4,sp,60
   38944:	d9400504 	addi	r5,sp,20
   38948:	00398400 	call	39840 <__unpack_d>
   3894c:	d9000a04 	addi	r4,sp,40
   38950:	d9400504 	addi	r5,sp,20
   38954:	d80d883a 	mov	r6,sp
   38958:	00385c80 	call	385c8 <_fpadd_parts>
   3895c:	1009883a 	mov	r4,r2
   38960:	003961c0 	call	3961c <__pack_d>
   38964:	dfc01317 	ldw	ra,76(sp)
   38968:	dec01404 	addi	sp,sp,80
   3896c:	f800283a 	ret

00038970 <__subdf3>:
   38970:	deffec04 	addi	sp,sp,-80
   38974:	d9001115 	stw	r4,68(sp)
   38978:	d9401215 	stw	r5,72(sp)
   3897c:	d9001104 	addi	r4,sp,68
   38980:	d9400a04 	addi	r5,sp,40
   38984:	dfc01315 	stw	ra,76(sp)
   38988:	d9c01015 	stw	r7,64(sp)
   3898c:	d9800f15 	stw	r6,60(sp)
   38990:	00398400 	call	39840 <__unpack_d>
   38994:	d9000f04 	addi	r4,sp,60
   38998:	d9400504 	addi	r5,sp,20
   3899c:	00398400 	call	39840 <__unpack_d>
   389a0:	d8800617 	ldw	r2,24(sp)
   389a4:	d9000a04 	addi	r4,sp,40
   389a8:	d9400504 	addi	r5,sp,20
   389ac:	d80d883a 	mov	r6,sp
   389b0:	1080005c 	xori	r2,r2,1
   389b4:	d8800615 	stw	r2,24(sp)
   389b8:	00385c80 	call	385c8 <_fpadd_parts>
   389bc:	1009883a 	mov	r4,r2
   389c0:	003961c0 	call	3961c <__pack_d>
   389c4:	dfc01317 	ldw	ra,76(sp)
   389c8:	dec01404 	addi	sp,sp,80
   389cc:	f800283a 	ret

000389d0 <__muldf3>:
   389d0:	deffe404 	addi	sp,sp,-112
   389d4:	d9001115 	stw	r4,68(sp)
   389d8:	d9401215 	stw	r5,72(sp)
   389dc:	d9001104 	addi	r4,sp,68
   389e0:	d9400a04 	addi	r5,sp,40
   389e4:	dfc01b15 	stw	ra,108(sp)
   389e8:	d9800f15 	stw	r6,60(sp)
   389ec:	d9c01015 	stw	r7,64(sp)
   389f0:	ddc01a15 	stw	r23,104(sp)
   389f4:	dd801915 	stw	r22,100(sp)
   389f8:	dd401815 	stw	r21,96(sp)
   389fc:	dd001715 	stw	r20,92(sp)
   38a00:	dcc01615 	stw	r19,88(sp)
   38a04:	dc801515 	stw	r18,84(sp)
   38a08:	dc401415 	stw	r17,80(sp)
   38a0c:	dc001315 	stw	r16,76(sp)
   38a10:	00398400 	call	39840 <__unpack_d>
   38a14:	d9000f04 	addi	r4,sp,60
   38a18:	d9400504 	addi	r5,sp,20
   38a1c:	00398400 	call	39840 <__unpack_d>
   38a20:	d8c00a17 	ldw	r3,40(sp)
   38a24:	00800044 	movi	r2,1
   38a28:	10c01136 	bltu	r2,r3,38a70 <__muldf3+0xa0>
   38a2c:	d8c00b17 	ldw	r3,44(sp)
   38a30:	d8800617 	ldw	r2,24(sp)
   38a34:	d9000a04 	addi	r4,sp,40
   38a38:	1884c03a 	cmpne	r2,r3,r2
   38a3c:	d8800b15 	stw	r2,44(sp)
   38a40:	003961c0 	call	3961c <__pack_d>
   38a44:	dfc01b17 	ldw	ra,108(sp)
   38a48:	ddc01a17 	ldw	r23,104(sp)
   38a4c:	dd801917 	ldw	r22,100(sp)
   38a50:	dd401817 	ldw	r21,96(sp)
   38a54:	dd001717 	ldw	r20,92(sp)
   38a58:	dcc01617 	ldw	r19,88(sp)
   38a5c:	dc801517 	ldw	r18,84(sp)
   38a60:	dc401417 	ldw	r17,80(sp)
   38a64:	dc001317 	ldw	r16,76(sp)
   38a68:	dec01c04 	addi	sp,sp,112
   38a6c:	f800283a 	ret
   38a70:	d9000517 	ldw	r4,20(sp)
   38a74:	11000636 	bltu	r2,r4,38a90 <__muldf3+0xc0>
   38a78:	d8800617 	ldw	r2,24(sp)
   38a7c:	d8c00b17 	ldw	r3,44(sp)
   38a80:	d9000504 	addi	r4,sp,20
   38a84:	1884c03a 	cmpne	r2,r3,r2
   38a88:	d8800615 	stw	r2,24(sp)
   38a8c:	003fec06 	br	38a40 <__muldf3+0x70>
   38a90:	00800104 	movi	r2,4
   38a94:	1880051e 	bne	r3,r2,38aac <__muldf3+0xdc>
   38a98:	00800084 	movi	r2,2
   38a9c:	20bfe31e 	bne	r4,r2,38a2c <__muldf3+0x5c>
   38aa0:	01000034 	movhi	r4,0
   38aa4:	21008b04 	addi	r4,r4,556
   38aa8:	003fe506 	br	38a40 <__muldf3+0x70>
   38aac:	2080031e 	bne	r4,r2,38abc <__muldf3+0xec>
   38ab0:	00800084 	movi	r2,2
   38ab4:	18bffa26 	beq	r3,r2,38aa0 <__muldf3+0xd0>
   38ab8:	003fef06 	br	38a78 <__muldf3+0xa8>
   38abc:	00800084 	movi	r2,2
   38ac0:	18bfda26 	beq	r3,r2,38a2c <__muldf3+0x5c>
   38ac4:	20bfec26 	beq	r4,r2,38a78 <__muldf3+0xa8>
   38ac8:	dc000d17 	ldw	r16,52(sp)
   38acc:	dd000817 	ldw	r20,32(sp)
   38ad0:	dc800917 	ldw	r18,36(sp)
   38ad4:	8009883a 	mov	r4,r16
   38ad8:	000b883a 	mov	r5,zero
   38adc:	a00d883a 	mov	r6,r20
   38ae0:	000f883a 	mov	r7,zero
   38ae4:	00394600 	call	39460 <__muldi3>
   38ae8:	dc400e17 	ldw	r17,56(sp)
   38aec:	9009883a 	mov	r4,r18
   38af0:	800d883a 	mov	r6,r16
   38af4:	000b883a 	mov	r5,zero
   38af8:	000f883a 	mov	r7,zero
   38afc:	102f883a 	mov	r23,r2
   38b00:	1827883a 	mov	r19,r3
   38b04:	00394600 	call	39460 <__muldi3>
   38b08:	900d883a 	mov	r6,r18
   38b0c:	8809883a 	mov	r4,r17
   38b10:	000b883a 	mov	r5,zero
   38b14:	000f883a 	mov	r7,zero
   38b18:	102b883a 	mov	r21,r2
   38b1c:	1821883a 	mov	r16,r3
   38b20:	00394600 	call	39460 <__muldi3>
   38b24:	8809883a 	mov	r4,r17
   38b28:	000b883a 	mov	r5,zero
   38b2c:	a00d883a 	mov	r6,r20
   38b30:	000f883a 	mov	r7,zero
   38b34:	102d883a 	mov	r22,r2
   38b38:	1825883a 	mov	r18,r3
   38b3c:	00394600 	call	39460 <__muldi3>
   38b40:	154b883a 	add	r5,r2,r21
   38b44:	2889803a 	cmpltu	r4,r5,r2
   38b48:	1c07883a 	add	r3,r3,r16
   38b4c:	20c9883a 	add	r4,r4,r3
   38b50:	24004b36 	bltu	r4,r16,38c80 <__muldf3+0x2b0>
   38b54:	8100011e 	bne	r16,r4,38b5c <__muldf3+0x18c>
   38b58:	2d404936 	bltu	r5,r21,38c80 <__muldf3+0x2b0>
   38b5c:	0011883a 	mov	r8,zero
   38b60:	0007883a 	mov	r3,zero
   38b64:	2ccb883a 	add	r5,r5,r19
   38b68:	b80d883a 	mov	r6,r23
   38b6c:	2cc0012e 	bgeu	r5,r19,38b74 <__muldf3+0x1a4>
   38b70:	02000044 	movi	r8,1
   38b74:	258f883a 	add	r7,r4,r22
   38b78:	3909803a 	cmpltu	r4,r7,r4
   38b7c:	da400c17 	ldw	r9,48(sp)
   38b80:	2489883a 	add	r4,r4,r18
   38b84:	d8800717 	ldw	r2,28(sp)
   38b88:	20c9883a 	add	r4,r4,r3
   38b8c:	da800b17 	ldw	r10,44(sp)
   38b90:	d8c00617 	ldw	r3,24(sp)
   38b94:	3a11883a 	add	r8,r7,r8
   38b98:	4885883a 	add	r2,r9,r2
   38b9c:	50c6c03a 	cmpne	r3,r10,r3
   38ba0:	41cf803a 	cmpltu	r7,r8,r7
   38ba4:	12400104 	addi	r9,r2,4
   38ba8:	d8c00115 	stw	r3,4(sp)
   38bac:	3909883a 	add	r4,r7,r4
   38bb0:	da400215 	stw	r9,8(sp)
   38bb4:	03480034 	movhi	r13,8192
   38bb8:	6b7fffc4 	addi	r13,r13,-1
   38bbc:	4007883a 	mov	r3,r8
   38bc0:	6900102e 	bgeu	r13,r4,38c04 <__muldf3+0x234>
   38bc4:	10800144 	addi	r2,r2,5
   38bc8:	180ed07a 	srli	r7,r3,1
   38bcc:	18c0004c 	andi	r3,r3,1
   38bd0:	201097fa 	slli	r8,r4,31
   38bd4:	281697fa 	slli	r11,r5,31
   38bd8:	2008d07a 	srli	r4,r4,1
   38bdc:	3014d07a 	srli	r10,r6,1
   38be0:	2812d07a 	srli	r9,r5,1
   38be4:	1019883a 	mov	r12,r2
   38be8:	18000226 	beq	r3,zero,38bf4 <__muldf3+0x224>
   38bec:	5a8cb03a 	or	r6,r11,r10
   38bf0:	49600034 	orhi	r5,r9,32768
   38bf4:	41c6b03a 	or	r3,r8,r7
   38bf8:	10800044 	addi	r2,r2,1
   38bfc:	693ff236 	bltu	r13,r4,38bc8 <__muldf3+0x1f8>
   38c00:	db000215 	stw	r12,8(sp)
   38c04:	03440034 	movhi	r13,4096
   38c08:	6b7fffc4 	addi	r13,r13,-1
   38c0c:	69001336 	bltu	r13,r4,38c5c <__muldf3+0x28c>
   38c10:	d8800217 	ldw	r2,8(sp)
   38c14:	10bfffc4 	addi	r2,r2,-1
   38c18:	18d3883a 	add	r9,r3,r3
   38c1c:	48c7803a 	cmpltu	r3,r9,r3
   38c20:	2109883a 	add	r4,r4,r4
   38c24:	190f883a 	add	r7,r3,r4
   38c28:	3191883a 	add	r8,r6,r6
   38c2c:	4197803a 	cmpltu	r11,r8,r6
   38c30:	2955883a 	add	r10,r5,r5
   38c34:	1019883a 	mov	r12,r2
   38c38:	4807883a 	mov	r3,r9
   38c3c:	3809883a 	mov	r4,r7
   38c40:	2800010e 	bge	r5,zero,38c48 <__muldf3+0x278>
   38c44:	48c00054 	ori	r3,r9,1
   38c48:	400d883a 	mov	r6,r8
   38c4c:	5a8b883a 	add	r5,r11,r10
   38c50:	10bfffc4 	addi	r2,r2,-1
   38c54:	69fff02e 	bgeu	r13,r7,38c18 <__muldf3+0x248>
   38c58:	db000215 	stw	r12,8(sp)
   38c5c:	18803fcc 	andi	r2,r3,255
   38c60:	01c02004 	movi	r7,128
   38c64:	11c00926 	beq	r2,r7,38c8c <__muldf3+0x2bc>
   38c68:	008000c4 	movi	r2,3
   38c6c:	d9000415 	stw	r4,16(sp)
   38c70:	d8c00315 	stw	r3,12(sp)
   38c74:	d8800015 	stw	r2,0(sp)
   38c78:	d809883a 	mov	r4,sp
   38c7c:	003f7006 	br	38a40 <__muldf3+0x70>
   38c80:	0011883a 	mov	r8,zero
   38c84:	00c00044 	movi	r3,1
   38c88:	003fb606 	br	38b64 <__muldf3+0x194>
   38c8c:	19c0400c 	andi	r7,r3,256
   38c90:	383ff51e 	bne	r7,zero,38c68 <__muldf3+0x298>
   38c94:	314ab03a 	or	r5,r6,r5
   38c98:	283ff326 	beq	r5,zero,38c68 <__muldf3+0x298>
   38c9c:	1885883a 	add	r2,r3,r2
   38ca0:	10cb803a 	cmpltu	r5,r2,r3
   38ca4:	00ffc004 	movi	r3,-256
   38ca8:	10c6703a 	and	r3,r2,r3
   38cac:	2909883a 	add	r4,r5,r4
   38cb0:	003fed06 	br	38c68 <__muldf3+0x298>

00038cb4 <__divdf3>:
   38cb4:	defff104 	addi	sp,sp,-60
   38cb8:	d9000c15 	stw	r4,48(sp)
   38cbc:	d9400d15 	stw	r5,52(sp)
   38cc0:	d9000c04 	addi	r4,sp,48
   38cc4:	d9400504 	addi	r5,sp,20
   38cc8:	dfc00e15 	stw	ra,56(sp)
   38ccc:	d9800a15 	stw	r6,40(sp)
   38cd0:	d9c00b15 	stw	r7,44(sp)
   38cd4:	00398400 	call	39840 <__unpack_d>
   38cd8:	d9000a04 	addi	r4,sp,40
   38cdc:	d80b883a 	mov	r5,sp
   38ce0:	00398400 	call	39840 <__unpack_d>
   38ce4:	d8c00517 	ldw	r3,20(sp)
   38ce8:	00800044 	movi	r2,1
   38cec:	10c00536 	bltu	r2,r3,38d04 <__divdf3+0x50>
   38cf0:	d9000504 	addi	r4,sp,20
   38cf4:	003961c0 	call	3961c <__pack_d>
   38cf8:	dfc00e17 	ldw	ra,56(sp)
   38cfc:	dec00f04 	addi	sp,sp,60
   38d00:	f800283a 	ret
   38d04:	d9000017 	ldw	r4,0(sp)
   38d08:	11000536 	bltu	r2,r4,38d20 <__divdf3+0x6c>
   38d0c:	d809883a 	mov	r4,sp
   38d10:	003961c0 	call	3961c <__pack_d>
   38d14:	dfc00e17 	ldw	ra,56(sp)
   38d18:	dec00f04 	addi	sp,sp,60
   38d1c:	f800283a 	ret
   38d20:	d9800617 	ldw	r6,24(sp)
   38d24:	d9400117 	ldw	r5,4(sp)
   38d28:	00800104 	movi	r2,4
   38d2c:	314af03a 	xor	r5,r6,r5
   38d30:	d9400615 	stw	r5,24(sp)
   38d34:	18800226 	beq	r3,r2,38d40 <__divdf3+0x8c>
   38d38:	01400084 	movi	r5,2
   38d3c:	1940041e 	bne	r3,r5,38d50 <__divdf3+0x9c>
   38d40:	193feb1e 	bne	r3,r4,38cf0 <__divdf3+0x3c>
   38d44:	01000034 	movhi	r4,0
   38d48:	21008b04 	addi	r4,r4,556
   38d4c:	003fe906 	br	38cf4 <__divdf3+0x40>
   38d50:	20803326 	beq	r4,r2,38e20 <__divdf3+0x16c>
   38d54:	21403726 	beq	r4,r5,38e34 <__divdf3+0x180>
   38d58:	d8800217 	ldw	r2,8(sp)
   38d5c:	d9000717 	ldw	r4,28(sp)
   38d60:	d8c00917 	ldw	r3,36(sp)
   38d64:	da000417 	ldw	r8,16(sp)
   38d68:	2089c83a 	sub	r4,r4,r2
   38d6c:	d9000715 	stw	r4,28(sp)
   38d70:	d8800817 	ldw	r2,32(sp)
   38d74:	dbc00317 	ldw	r15,12(sp)
   38d78:	1a000236 	bltu	r3,r8,38d84 <__divdf3+0xd0>
   38d7c:	40c0081e 	bne	r8,r3,38da0 <__divdf3+0xec>
   38d80:	13c0072e 	bgeu	r2,r15,38da0 <__divdf3+0xec>
   38d84:	108b883a 	add	r5,r2,r2
   38d88:	288d803a 	cmpltu	r6,r5,r2
   38d8c:	18c7883a 	add	r3,r3,r3
   38d90:	213fffc4 	addi	r4,r4,-1
   38d94:	2805883a 	mov	r2,r5
   38d98:	30c7883a 	add	r3,r6,r3
   38d9c:	d9000715 	stw	r4,28(sp)
   38da0:	01400f44 	movi	r5,61
   38da4:	000f883a 	mov	r7,zero
   38da8:	01040034 	movhi	r4,4096
   38dac:	0019883a 	mov	r12,zero
   38db0:	001b883a 	mov	r13,zero
   38db4:	201697fa 	slli	r11,r4,31
   38db8:	3814d07a 	srli	r10,r7,1
   38dbc:	297fffc4 	addi	r5,r5,-1
   38dc0:	1a000936 	bltu	r3,r8,38de8 <__divdf3+0x134>
   38dc4:	13cdc83a 	sub	r6,r2,r15
   38dc8:	1193803a 	cmpltu	r9,r2,r6
   38dcc:	1a1dc83a 	sub	r14,r3,r8
   38dd0:	40c0011e 	bne	r8,r3,38dd8 <__divdf3+0x124>
   38dd4:	13c00436 	bltu	r2,r15,38de8 <__divdf3+0x134>
   38dd8:	3005883a 	mov	r2,r6
   38ddc:	7247c83a 	sub	r3,r14,r9
   38de0:	61d8b03a 	or	r12,r12,r7
   38de4:	691ab03a 	or	r13,r13,r4
   38de8:	108d883a 	add	r6,r2,r2
   38dec:	3093803a 	cmpltu	r9,r6,r2
   38df0:	18c7883a 	add	r3,r3,r3
   38df4:	5a8eb03a 	or	r7,r11,r10
   38df8:	2008d07a 	srli	r4,r4,1
   38dfc:	3005883a 	mov	r2,r6
   38e00:	48c7883a 	add	r3,r9,r3
   38e04:	283feb1e 	bne	r5,zero,38db4 <__divdf3+0x100>
   38e08:	61003fcc 	andi	r4,r12,255
   38e0c:	01402004 	movi	r5,128
   38e10:	21400b26 	beq	r4,r5,38e40 <__divdf3+0x18c>
   38e14:	db000815 	stw	r12,32(sp)
   38e18:	db400915 	stw	r13,36(sp)
   38e1c:	003fb406 	br	38cf0 <__divdf3+0x3c>
   38e20:	d8000815 	stw	zero,32(sp)
   38e24:	d8000915 	stw	zero,36(sp)
   38e28:	d8000715 	stw	zero,28(sp)
   38e2c:	d9000504 	addi	r4,sp,20
   38e30:	003fb006 	br	38cf4 <__divdf3+0x40>
   38e34:	d8800515 	stw	r2,20(sp)
   38e38:	d9000504 	addi	r4,sp,20
   38e3c:	003fad06 	br	38cf4 <__divdf3+0x40>
   38e40:	6140400c 	andi	r5,r12,256
   38e44:	283ff31e 	bne	r5,zero,38e14 <__divdf3+0x160>
   38e48:	30c4b03a 	or	r2,r6,r3
   38e4c:	103ff126 	beq	r2,zero,38e14 <__divdf3+0x160>
   38e50:	6109883a 	add	r4,r12,r4
   38e54:	2305803a 	cmpltu	r2,r4,r12
   38e58:	033fc004 	movi	r12,-256
   38e5c:	2318703a 	and	r12,r4,r12
   38e60:	135b883a 	add	r13,r2,r13
   38e64:	003feb06 	br	38e14 <__divdf3+0x160>

00038e68 <__eqdf2>:
   38e68:	defff104 	addi	sp,sp,-60
   38e6c:	d9000c15 	stw	r4,48(sp)
   38e70:	d9400d15 	stw	r5,52(sp)
   38e74:	d9000c04 	addi	r4,sp,48
   38e78:	d9400504 	addi	r5,sp,20
   38e7c:	dfc00e15 	stw	ra,56(sp)
   38e80:	d9800a15 	stw	r6,40(sp)
   38e84:	d9c00b15 	stw	r7,44(sp)
   38e88:	00398400 	call	39840 <__unpack_d>
   38e8c:	d9000a04 	addi	r4,sp,40
   38e90:	d80b883a 	mov	r5,sp
   38e94:	00398400 	call	39840 <__unpack_d>
   38e98:	d8c00517 	ldw	r3,20(sp)
   38e9c:	00800044 	movi	r2,1
   38ea0:	10c0052e 	bgeu	r2,r3,38eb8 <__eqdf2+0x50>
   38ea4:	d8c00017 	ldw	r3,0(sp)
   38ea8:	10c0032e 	bgeu	r2,r3,38eb8 <__eqdf2+0x50>
   38eac:	d9000504 	addi	r4,sp,20
   38eb0:	d80b883a 	mov	r5,sp
   38eb4:	00399440 	call	39944 <__fpcmp_parts_d>
   38eb8:	dfc00e17 	ldw	ra,56(sp)
   38ebc:	dec00f04 	addi	sp,sp,60
   38ec0:	f800283a 	ret

00038ec4 <__nedf2>:
   38ec4:	defff104 	addi	sp,sp,-60
   38ec8:	d9000c15 	stw	r4,48(sp)
   38ecc:	d9400d15 	stw	r5,52(sp)
   38ed0:	d9000c04 	addi	r4,sp,48
   38ed4:	d9400504 	addi	r5,sp,20
   38ed8:	dfc00e15 	stw	ra,56(sp)
   38edc:	d9800a15 	stw	r6,40(sp)
   38ee0:	d9c00b15 	stw	r7,44(sp)
   38ee4:	00398400 	call	39840 <__unpack_d>
   38ee8:	d9000a04 	addi	r4,sp,40
   38eec:	d80b883a 	mov	r5,sp
   38ef0:	00398400 	call	39840 <__unpack_d>
   38ef4:	d8c00517 	ldw	r3,20(sp)
   38ef8:	00800044 	movi	r2,1
   38efc:	10c0052e 	bgeu	r2,r3,38f14 <__nedf2+0x50>
   38f00:	d8c00017 	ldw	r3,0(sp)
   38f04:	10c0032e 	bgeu	r2,r3,38f14 <__nedf2+0x50>
   38f08:	d9000504 	addi	r4,sp,20
   38f0c:	d80b883a 	mov	r5,sp
   38f10:	00399440 	call	39944 <__fpcmp_parts_d>
   38f14:	dfc00e17 	ldw	ra,56(sp)
   38f18:	dec00f04 	addi	sp,sp,60
   38f1c:	f800283a 	ret

00038f20 <__gtdf2>:
   38f20:	defff104 	addi	sp,sp,-60
   38f24:	d9000c15 	stw	r4,48(sp)
   38f28:	d9400d15 	stw	r5,52(sp)
   38f2c:	d9000c04 	addi	r4,sp,48
   38f30:	d9400504 	addi	r5,sp,20
   38f34:	dfc00e15 	stw	ra,56(sp)
   38f38:	d9800a15 	stw	r6,40(sp)
   38f3c:	d9c00b15 	stw	r7,44(sp)
   38f40:	00398400 	call	39840 <__unpack_d>
   38f44:	d9000a04 	addi	r4,sp,40
   38f48:	d80b883a 	mov	r5,sp
   38f4c:	00398400 	call	39840 <__unpack_d>
   38f50:	d8c00517 	ldw	r3,20(sp)
   38f54:	00800044 	movi	r2,1
   38f58:	10c0082e 	bgeu	r2,r3,38f7c <__gtdf2+0x5c>
   38f5c:	d8c00017 	ldw	r3,0(sp)
   38f60:	10c0062e 	bgeu	r2,r3,38f7c <__gtdf2+0x5c>
   38f64:	d9000504 	addi	r4,sp,20
   38f68:	d80b883a 	mov	r5,sp
   38f6c:	00399440 	call	39944 <__fpcmp_parts_d>
   38f70:	dfc00e17 	ldw	ra,56(sp)
   38f74:	dec00f04 	addi	sp,sp,60
   38f78:	f800283a 	ret
   38f7c:	00bfffc4 	movi	r2,-1
   38f80:	003ffb06 	br	38f70 <__gtdf2+0x50>

00038f84 <__gedf2>:
   38f84:	defff104 	addi	sp,sp,-60
   38f88:	d9000c15 	stw	r4,48(sp)
   38f8c:	d9400d15 	stw	r5,52(sp)
   38f90:	d9000c04 	addi	r4,sp,48
   38f94:	d9400504 	addi	r5,sp,20
   38f98:	dfc00e15 	stw	ra,56(sp)
   38f9c:	d9800a15 	stw	r6,40(sp)
   38fa0:	d9c00b15 	stw	r7,44(sp)
   38fa4:	00398400 	call	39840 <__unpack_d>
   38fa8:	d9000a04 	addi	r4,sp,40
   38fac:	d80b883a 	mov	r5,sp
   38fb0:	00398400 	call	39840 <__unpack_d>
   38fb4:	d8c00517 	ldw	r3,20(sp)
   38fb8:	00800044 	movi	r2,1
   38fbc:	10c0082e 	bgeu	r2,r3,38fe0 <__gedf2+0x5c>
   38fc0:	d8c00017 	ldw	r3,0(sp)
   38fc4:	10c0062e 	bgeu	r2,r3,38fe0 <__gedf2+0x5c>
   38fc8:	d9000504 	addi	r4,sp,20
   38fcc:	d80b883a 	mov	r5,sp
   38fd0:	00399440 	call	39944 <__fpcmp_parts_d>
   38fd4:	dfc00e17 	ldw	ra,56(sp)
   38fd8:	dec00f04 	addi	sp,sp,60
   38fdc:	f800283a 	ret
   38fe0:	00bfffc4 	movi	r2,-1
   38fe4:	003ffb06 	br	38fd4 <__gedf2+0x50>

00038fe8 <__ltdf2>:
   38fe8:	defff104 	addi	sp,sp,-60
   38fec:	d9000c15 	stw	r4,48(sp)
   38ff0:	d9400d15 	stw	r5,52(sp)
   38ff4:	d9000c04 	addi	r4,sp,48
   38ff8:	d9400504 	addi	r5,sp,20
   38ffc:	dfc00e15 	stw	ra,56(sp)
   39000:	d9800a15 	stw	r6,40(sp)
   39004:	d9c00b15 	stw	r7,44(sp)
   39008:	00398400 	call	39840 <__unpack_d>
   3900c:	d9000a04 	addi	r4,sp,40
   39010:	d80b883a 	mov	r5,sp
   39014:	00398400 	call	39840 <__unpack_d>
   39018:	d8c00517 	ldw	r3,20(sp)
   3901c:	00800044 	movi	r2,1
   39020:	10c0052e 	bgeu	r2,r3,39038 <__ltdf2+0x50>
   39024:	d8c00017 	ldw	r3,0(sp)
   39028:	10c0032e 	bgeu	r2,r3,39038 <__ltdf2+0x50>
   3902c:	d9000504 	addi	r4,sp,20
   39030:	d80b883a 	mov	r5,sp
   39034:	00399440 	call	39944 <__fpcmp_parts_d>
   39038:	dfc00e17 	ldw	ra,56(sp)
   3903c:	dec00f04 	addi	sp,sp,60
   39040:	f800283a 	ret

00039044 <__floatsidf>:
   39044:	2004d7fa 	srli	r2,r4,31
   39048:	defff904 	addi	sp,sp,-28
   3904c:	00c000c4 	movi	r3,3
   39050:	dfc00615 	stw	ra,24(sp)
   39054:	dc000515 	stw	r16,20(sp)
   39058:	d8c00015 	stw	r3,0(sp)
   3905c:	d8800115 	stw	r2,4(sp)
   39060:	2000081e 	bne	r4,zero,39084 <__floatsidf+0x40>
   39064:	00800084 	movi	r2,2
   39068:	d8800015 	stw	r2,0(sp)
   3906c:	d809883a 	mov	r4,sp
   39070:	003961c0 	call	3961c <__pack_d>
   39074:	dfc00617 	ldw	ra,24(sp)
   39078:	dc000517 	ldw	r16,20(sp)
   3907c:	dec00704 	addi	sp,sp,28
   39080:	f800283a 	ret
   39084:	00c00f04 	movi	r3,60
   39088:	d8c00215 	stw	r3,8(sp)
   3908c:	10000f1e 	bne	r2,zero,390cc <__floatsidf+0x88>
   39090:	2021883a 	mov	r16,r4
   39094:	8009883a 	mov	r4,r16
   39098:	00395700 	call	39570 <__clzsi2>
   3909c:	11000744 	addi	r4,r2,29
   390a0:	0100110e 	bge	zero,r4,390e8 <__floatsidf+0xa4>
   390a4:	10ffff44 	addi	r3,r2,-3
   390a8:	18001216 	blt	r3,zero,390f4 <__floatsidf+0xb0>
   390ac:	80c6983a 	sll	r3,r16,r3
   390b0:	0009883a 	mov	r4,zero
   390b4:	014007c4 	movi	r5,31
   390b8:	2885c83a 	sub	r2,r5,r2
   390bc:	d9000315 	stw	r4,12(sp)
   390c0:	d8c00415 	stw	r3,16(sp)
   390c4:	d8800215 	stw	r2,8(sp)
   390c8:	003fe806 	br	3906c <__floatsidf+0x28>
   390cc:	00a00034 	movhi	r2,32768
   390d0:	20800e26 	beq	r4,r2,3910c <__floatsidf+0xc8>
   390d4:	0121c83a 	sub	r16,zero,r4
   390d8:	8009883a 	mov	r4,r16
   390dc:	00395700 	call	39570 <__clzsi2>
   390e0:	11000744 	addi	r4,r2,29
   390e4:	013fef16 	blt	zero,r4,390a4 <__floatsidf+0x60>
   390e8:	dc000315 	stw	r16,12(sp)
   390ec:	d8000415 	stw	zero,16(sp)
   390f0:	003fde06 	br	3906c <__floatsidf+0x28>
   390f4:	800ad07a 	srli	r5,r16,1
   390f8:	00c007c4 	movi	r3,31
   390fc:	1907c83a 	sub	r3,r3,r4
   39100:	28c6d83a 	srl	r3,r5,r3
   39104:	8108983a 	sll	r4,r16,r4
   39108:	003fea06 	br	390b4 <__floatsidf+0x70>
   3910c:	0005883a 	mov	r2,zero
   39110:	00f07834 	movhi	r3,49632
   39114:	003fd706 	br	39074 <__floatsidf+0x30>

00039118 <__fixdfsi>:
   39118:	defff804 	addi	sp,sp,-32
   3911c:	d9000515 	stw	r4,20(sp)
   39120:	d9400615 	stw	r5,24(sp)
   39124:	d9000504 	addi	r4,sp,20
   39128:	d80b883a 	mov	r5,sp
   3912c:	dfc00715 	stw	ra,28(sp)
   39130:	00398400 	call	39840 <__unpack_d>
   39134:	d8800017 	ldw	r2,0(sp)
   39138:	00c00084 	movi	r3,2
   3913c:	10c01c26 	beq	r2,r3,391b0 <__fixdfsi+0x98>
   39140:	00c00044 	movi	r3,1
   39144:	18801a2e 	bgeu	r3,r2,391b0 <__fixdfsi+0x98>
   39148:	00c00104 	movi	r3,4
   3914c:	10c01126 	beq	r2,r3,39194 <__fixdfsi+0x7c>
   39150:	d8800217 	ldw	r2,8(sp)
   39154:	10001616 	blt	r2,zero,391b0 <__fixdfsi+0x98>
   39158:	00c00784 	movi	r3,30
   3915c:	18800d16 	blt	r3,r2,39194 <__fixdfsi+0x7c>
   39160:	00c00f04 	movi	r3,60
   39164:	1885c83a 	sub	r2,r3,r2
   39168:	10fff804 	addi	r3,r2,-32
   3916c:	d9400317 	ldw	r5,12(sp)
   39170:	d9000417 	ldw	r4,16(sp)
   39174:	18001616 	blt	r3,zero,391d0 <__fixdfsi+0xb8>
   39178:	20c4d83a 	srl	r2,r4,r3
   3917c:	d8c00117 	ldw	r3,4(sp)
   39180:	18000126 	beq	r3,zero,39188 <__fixdfsi+0x70>
   39184:	0085c83a 	sub	r2,zero,r2
   39188:	dfc00717 	ldw	ra,28(sp)
   3918c:	dec00804 	addi	sp,sp,32
   39190:	f800283a 	ret
   39194:	d8800117 	ldw	r2,4(sp)
   39198:	1000091e 	bne	r2,zero,391c0 <__fixdfsi+0xa8>
   3919c:	00a00034 	movhi	r2,32768
   391a0:	10bfffc4 	addi	r2,r2,-1
   391a4:	dfc00717 	ldw	ra,28(sp)
   391a8:	dec00804 	addi	sp,sp,32
   391ac:	f800283a 	ret
   391b0:	0005883a 	mov	r2,zero
   391b4:	dfc00717 	ldw	ra,28(sp)
   391b8:	dec00804 	addi	sp,sp,32
   391bc:	f800283a 	ret
   391c0:	00a00034 	movhi	r2,32768
   391c4:	dfc00717 	ldw	ra,28(sp)
   391c8:	dec00804 	addi	sp,sp,32
   391cc:	f800283a 	ret
   391d0:	2008907a 	slli	r4,r4,1
   391d4:	018007c4 	movi	r6,31
   391d8:	308dc83a 	sub	r6,r6,r2
   391dc:	2188983a 	sll	r4,r4,r6
   391e0:	2884d83a 	srl	r2,r5,r2
   391e4:	2084b03a 	or	r2,r4,r2
   391e8:	003fe406 	br	3917c <__fixdfsi+0x64>

000391ec <__floatunsidf>:
   391ec:	defff904 	addi	sp,sp,-28
   391f0:	dc000515 	stw	r16,20(sp)
   391f4:	dfc00615 	stw	ra,24(sp)
   391f8:	d8000115 	stw	zero,4(sp)
   391fc:	2021883a 	mov	r16,r4
   39200:	20001726 	beq	r4,zero,39260 <__floatunsidf+0x74>
   39204:	008000c4 	movi	r2,3
   39208:	d8800015 	stw	r2,0(sp)
   3920c:	00800f04 	movi	r2,60
   39210:	d8800215 	stw	r2,8(sp)
   39214:	00395700 	call	39570 <__clzsi2>
   39218:	10c00744 	addi	r3,r2,29
   3921c:	18001816 	blt	r3,zero,39280 <__floatunsidf+0x94>
   39220:	18002d26 	beq	r3,zero,392d8 <__floatunsidf+0xec>
   39224:	113fff44 	addi	r4,r2,-3
   39228:	20002e16 	blt	r4,zero,392e4 <__floatunsidf+0xf8>
   3922c:	8108983a 	sll	r4,r16,r4
   39230:	0021883a 	mov	r16,zero
   39234:	014007c4 	movi	r5,31
   39238:	2885c83a 	sub	r2,r5,r2
   3923c:	dc000315 	stw	r16,12(sp)
   39240:	d9000415 	stw	r4,16(sp)
   39244:	d8800215 	stw	r2,8(sp)
   39248:	d809883a 	mov	r4,sp
   3924c:	003961c0 	call	3961c <__pack_d>
   39250:	dfc00617 	ldw	ra,24(sp)
   39254:	dc000517 	ldw	r16,20(sp)
   39258:	dec00704 	addi	sp,sp,28
   3925c:	f800283a 	ret
   39260:	00800084 	movi	r2,2
   39264:	d809883a 	mov	r4,sp
   39268:	d8800015 	stw	r2,0(sp)
   3926c:	003961c0 	call	3961c <__pack_d>
   39270:	dfc00617 	ldw	ra,24(sp)
   39274:	dc000517 	ldw	r16,20(sp)
   39278:	dec00704 	addi	sp,sp,28
   3927c:	f800283a 	ret
   39280:	00c7c83a 	sub	r3,zero,r3
   39284:	193ff804 	addi	r4,r3,-32
   39288:	20001c16 	blt	r4,zero,392fc <__floatunsidf+0x110>
   3928c:	000b883a 	mov	r5,zero
   39290:	2009d7fa 	srai	r4,r4,31
   39294:	80c6d83a 	srl	r3,r16,r3
   39298:	297fffc4 	addi	r5,r5,-1
   3929c:	2c20703a 	and	r16,r5,r16
   392a0:	8020c03a 	cmpne	r16,r16,zero
   392a4:	1906703a 	and	r3,r3,r4
   392a8:	010007c4 	movi	r4,31
   392ac:	80c6b03a 	or	r3,r16,r3
   392b0:	2085c83a 	sub	r2,r4,r2
   392b4:	d809883a 	mov	r4,sp
   392b8:	d8c00315 	stw	r3,12(sp)
   392bc:	d8000415 	stw	zero,16(sp)
   392c0:	d8800215 	stw	r2,8(sp)
   392c4:	003961c0 	call	3961c <__pack_d>
   392c8:	dfc00617 	ldw	ra,24(sp)
   392cc:	dc000517 	ldw	r16,20(sp)
   392d0:	dec00704 	addi	sp,sp,28
   392d4:	f800283a 	ret
   392d8:	dc000315 	stw	r16,12(sp)
   392dc:	d8000415 	stw	zero,16(sp)
   392e0:	003fd906 	br	39248 <__floatunsidf+0x5c>
   392e4:	800ad07a 	srli	r5,r16,1
   392e8:	010007c4 	movi	r4,31
   392ec:	20c9c83a 	sub	r4,r4,r3
   392f0:	2908d83a 	srl	r4,r5,r4
   392f4:	80e0983a 	sll	r16,r16,r3
   392f8:	003fce06 	br	39234 <__floatunsidf+0x48>
   392fc:	01400044 	movi	r5,1
   39300:	28ca983a 	sll	r5,r5,r3
   39304:	003fe206 	br	39290 <__floatunsidf+0xa4>

00039308 <udivmodsi4>:
   39308:	2005883a 	mov	r2,r4
   3930c:	2900182e 	bgeu	r5,r4,39370 <udivmodsi4+0x68>
   39310:	28001716 	blt	r5,zero,39370 <udivmodsi4+0x68>
   39314:	01000804 	movi	r4,32
   39318:	00c00044 	movi	r3,1
   3931c:	00000206 	br	39328 <udivmodsi4+0x20>
   39320:	20001126 	beq	r4,zero,39368 <udivmodsi4+0x60>
   39324:	28000516 	blt	r5,zero,3933c <udivmodsi4+0x34>
   39328:	294b883a 	add	r5,r5,r5
   3932c:	213fffc4 	addi	r4,r4,-1
   39330:	18c7883a 	add	r3,r3,r3
   39334:	28bffa36 	bltu	r5,r2,39320 <udivmodsi4+0x18>
   39338:	18000b26 	beq	r3,zero,39368 <udivmodsi4+0x60>
   3933c:	0009883a 	mov	r4,zero
   39340:	11400236 	bltu	r2,r5,3934c <udivmodsi4+0x44>
   39344:	1145c83a 	sub	r2,r2,r5
   39348:	20c8b03a 	or	r4,r4,r3
   3934c:	1806d07a 	srli	r3,r3,1
   39350:	280ad07a 	srli	r5,r5,1
   39354:	183ffa1e 	bne	r3,zero,39340 <udivmodsi4+0x38>
   39358:	3000021e 	bne	r6,zero,39364 <udivmodsi4+0x5c>
   3935c:	2005883a 	mov	r2,r4
   39360:	f800283a 	ret
   39364:	f800283a 	ret
   39368:	0009883a 	mov	r4,zero
   3936c:	003ffa06 	br	39358 <udivmodsi4+0x50>
   39370:	00c00044 	movi	r3,1
   39374:	0009883a 	mov	r4,zero
   39378:	003ff106 	br	39340 <udivmodsi4+0x38>

0003937c <__divsi3>:
   3937c:	defffe04 	addi	sp,sp,-8
   39380:	dfc00115 	stw	ra,4(sp)
   39384:	dc000015 	stw	r16,0(sp)
   39388:	20000a16 	blt	r4,zero,393b4 <__divsi3+0x38>
   3938c:	0021883a 	mov	r16,zero
   39390:	28000b16 	blt	r5,zero,393c0 <__divsi3+0x44>
   39394:	000d883a 	mov	r6,zero
   39398:	00393080 	call	39308 <udivmodsi4>
   3939c:	80000126 	beq	r16,zero,393a4 <__divsi3+0x28>
   393a0:	0085c83a 	sub	r2,zero,r2
   393a4:	dfc00117 	ldw	ra,4(sp)
   393a8:	dc000017 	ldw	r16,0(sp)
   393ac:	dec00204 	addi	sp,sp,8
   393b0:	f800283a 	ret
   393b4:	0109c83a 	sub	r4,zero,r4
   393b8:	04000044 	movi	r16,1
   393bc:	283ff50e 	bge	r5,zero,39394 <__divsi3+0x18>
   393c0:	014bc83a 	sub	r5,zero,r5
   393c4:	8400005c 	xori	r16,r16,1
   393c8:	003ff206 	br	39394 <__divsi3+0x18>

000393cc <__modsi3>:
   393cc:	deffff04 	addi	sp,sp,-4
   393d0:	dfc00015 	stw	ra,0(sp)
   393d4:	20000516 	blt	r4,zero,393ec <__modsi3+0x20>
   393d8:	28000c16 	blt	r5,zero,3940c <__modsi3+0x40>
   393dc:	01800044 	movi	r6,1
   393e0:	dfc00017 	ldw	ra,0(sp)
   393e4:	dec00104 	addi	sp,sp,4
   393e8:	00393081 	jmpi	39308 <udivmodsi4>
   393ec:	0109c83a 	sub	r4,zero,r4
   393f0:	28000b16 	blt	r5,zero,39420 <__modsi3+0x54>
   393f4:	01800044 	movi	r6,1
   393f8:	00393080 	call	39308 <udivmodsi4>
   393fc:	0085c83a 	sub	r2,zero,r2
   39400:	dfc00017 	ldw	ra,0(sp)
   39404:	dec00104 	addi	sp,sp,4
   39408:	f800283a 	ret
   3940c:	014bc83a 	sub	r5,zero,r5
   39410:	01800044 	movi	r6,1
   39414:	dfc00017 	ldw	ra,0(sp)
   39418:	dec00104 	addi	sp,sp,4
   3941c:	00393081 	jmpi	39308 <udivmodsi4>
   39420:	014bc83a 	sub	r5,zero,r5
   39424:	003ff306 	br	393f4 <__modsi3+0x28>

00039428 <__udivsi3>:
   39428:	000d883a 	mov	r6,zero
   3942c:	00393081 	jmpi	39308 <udivmodsi4>

00039430 <__umodsi3>:
   39430:	01800044 	movi	r6,1
   39434:	00393081 	jmpi	39308 <udivmodsi4>

00039438 <__mulsi3>:
   39438:	0005883a 	mov	r2,zero
   3943c:	20000726 	beq	r4,zero,3945c <__mulsi3+0x24>
   39440:	20c0004c 	andi	r3,r4,1
   39444:	2008d07a 	srli	r4,r4,1
   39448:	18000126 	beq	r3,zero,39450 <__mulsi3+0x18>
   3944c:	1145883a 	add	r2,r2,r5
   39450:	294b883a 	add	r5,r5,r5
   39454:	203ffa1e 	bne	r4,zero,39440 <__mulsi3+0x8>
   39458:	f800283a 	ret
   3945c:	f800283a 	ret

00039460 <__muldi3>:
   39460:	defff604 	addi	sp,sp,-40
   39464:	dd400515 	stw	r21,20(sp)
   39468:	dd000415 	stw	r20,16(sp)
   3946c:	257fffcc 	andi	r21,r4,65535
   39470:	353fffcc 	andi	r20,r6,65535
   39474:	dcc00315 	stw	r19,12(sp)
   39478:	3026d43a 	srli	r19,r6,16
   3947c:	dd800615 	stw	r22,24(sp)
   39480:	dc800215 	stw	r18,8(sp)
   39484:	dc400115 	stw	r17,4(sp)
   39488:	2024d43a 	srli	r18,r4,16
   3948c:	2023883a 	mov	r17,r4
   39490:	282d883a 	mov	r22,r5
   39494:	a009883a 	mov	r4,r20
   39498:	a80b883a 	mov	r5,r21
   3949c:	dfc00915 	stw	ra,36(sp)
   394a0:	df000815 	stw	fp,32(sp)
   394a4:	ddc00715 	stw	r23,28(sp)
   394a8:	3839883a 	mov	fp,r7
   394ac:	dc000015 	stw	r16,0(sp)
   394b0:	3021883a 	mov	r16,r6
   394b4:	00394380 	call	39438 <__mulsi3>
   394b8:	a80b883a 	mov	r5,r21
   394bc:	9809883a 	mov	r4,r19
   394c0:	102f883a 	mov	r23,r2
   394c4:	00394380 	call	39438 <__mulsi3>
   394c8:	a009883a 	mov	r4,r20
   394cc:	900b883a 	mov	r5,r18
   394d0:	102b883a 	mov	r21,r2
   394d4:	00394380 	call	39438 <__mulsi3>
   394d8:	9809883a 	mov	r4,r19
   394dc:	900b883a 	mov	r5,r18
   394e0:	1029883a 	mov	r20,r2
   394e4:	00394380 	call	39438 <__mulsi3>
   394e8:	1007883a 	mov	r3,r2
   394ec:	b804d43a 	srli	r2,r23,16
   394f0:	a549883a 	add	r4,r20,r21
   394f4:	2089883a 	add	r4,r4,r2
   394f8:	2500022e 	bgeu	r4,r20,39504 <__muldi3+0xa4>
   394fc:	00800074 	movhi	r2,1
   39500:	1887883a 	add	r3,r3,r2
   39504:	200cd43a 	srli	r6,r4,16
   39508:	2004943a 	slli	r2,r4,16
   3950c:	e00b883a 	mov	r5,fp
   39510:	8809883a 	mov	r4,r17
   39514:	bdffffcc 	andi	r23,r23,65535
   39518:	19a3883a 	add	r17,r3,r6
   3951c:	15ef883a 	add	r23,r2,r23
   39520:	00394380 	call	39438 <__mulsi3>
   39524:	8009883a 	mov	r4,r16
   39528:	b00b883a 	mov	r5,r22
   3952c:	1025883a 	mov	r18,r2
   39530:	00394380 	call	39438 <__mulsi3>
   39534:	9085883a 	add	r2,r18,r2
   39538:	1447883a 	add	r3,r2,r17
   3953c:	b805883a 	mov	r2,r23
   39540:	dfc00917 	ldw	ra,36(sp)
   39544:	df000817 	ldw	fp,32(sp)
   39548:	ddc00717 	ldw	r23,28(sp)
   3954c:	dd800617 	ldw	r22,24(sp)
   39550:	dd400517 	ldw	r21,20(sp)
   39554:	dd000417 	ldw	r20,16(sp)
   39558:	dcc00317 	ldw	r19,12(sp)
   3955c:	dc800217 	ldw	r18,8(sp)
   39560:	dc400117 	ldw	r17,4(sp)
   39564:	dc000017 	ldw	r16,0(sp)
   39568:	dec00a04 	addi	sp,sp,40
   3956c:	f800283a 	ret

00039570 <__clzsi2>:
   39570:	00bfffd4 	movui	r2,65535
   39574:	11000b36 	bltu	r2,r4,395a4 <__clzsi2+0x34>
   39578:	00803fc4 	movi	r2,255
   3957c:	11001e2e 	bgeu	r2,r4,395f8 <__clzsi2+0x88>
   39580:	00c00204 	movi	r3,8
   39584:	20c8d83a 	srl	r4,r4,r3
   39588:	00c00034 	movhi	r3,0
   3958c:	18c09004 	addi	r3,r3,576
   39590:	00800604 	movi	r2,24
   39594:	1909883a 	add	r4,r3,r4
   39598:	20c00003 	ldbu	r3,0(r4)
   3959c:	10c5c83a 	sub	r2,r2,r3
   395a0:	f800283a 	ret
   395a4:	00804034 	movhi	r2,256
   395a8:	10bfffc4 	addi	r2,r2,-1
   395ac:	11000936 	bltu	r2,r4,395d4 <__clzsi2+0x64>
   395b0:	00800404 	movi	r2,16
   395b4:	1007883a 	mov	r3,r2
   395b8:	20c8d83a 	srl	r4,r4,r3
   395bc:	00c00034 	movhi	r3,0
   395c0:	18c09004 	addi	r3,r3,576
   395c4:	1909883a 	add	r4,r3,r4
   395c8:	20c00003 	ldbu	r3,0(r4)
   395cc:	10c5c83a 	sub	r2,r2,r3
   395d0:	f800283a 	ret
   395d4:	00c00604 	movi	r3,24
   395d8:	20c8d83a 	srl	r4,r4,r3
   395dc:	00c00034 	movhi	r3,0
   395e0:	18c09004 	addi	r3,r3,576
   395e4:	00800204 	movi	r2,8
   395e8:	1909883a 	add	r4,r3,r4
   395ec:	20c00003 	ldbu	r3,0(r4)
   395f0:	10c5c83a 	sub	r2,r2,r3
   395f4:	f800283a 	ret
   395f8:	0007883a 	mov	r3,zero
   395fc:	20c8d83a 	srl	r4,r4,r3
   39600:	00c00034 	movhi	r3,0
   39604:	18c09004 	addi	r3,r3,576
   39608:	00800804 	movi	r2,32
   3960c:	1909883a 	add	r4,r3,r4
   39610:	20c00003 	ldbu	r3,0(r4)
   39614:	10c5c83a 	sub	r2,r2,r3
   39618:	f800283a 	ret

0003961c <__pack_d>:
   3961c:	20800017 	ldw	r2,0(r4)
   39620:	defff804 	addi	sp,sp,-32
   39624:	dcc00315 	stw	r19,12(sp)
   39628:	dc800215 	stw	r18,8(sp)
   3962c:	dfc00715 	stw	ra,28(sp)
   39630:	dd800615 	stw	r22,24(sp)
   39634:	dd400515 	stw	r21,20(sp)
   39638:	dd000415 	stw	r20,16(sp)
   3963c:	dc400115 	stw	r17,4(sp)
   39640:	dc000015 	stw	r16,0(sp)
   39644:	04800044 	movi	r18,1
   39648:	24400317 	ldw	r17,12(r4)
   3964c:	24000417 	ldw	r16,16(r4)
   39650:	24c00117 	ldw	r19,4(r4)
   39654:	9080422e 	bgeu	r18,r2,39760 <__pack_d+0x144>
   39658:	00c00104 	movi	r3,4
   3965c:	10c03c26 	beq	r2,r3,39750 <__pack_d+0x134>
   39660:	00c00084 	movi	r3,2
   39664:	10c01926 	beq	r2,r3,396cc <__pack_d+0xb0>
   39668:	8c04b03a 	or	r2,r17,r16
   3966c:	10001726 	beq	r2,zero,396cc <__pack_d+0xb0>
   39670:	21000217 	ldw	r4,8(r4)
   39674:	00bf0084 	movi	r2,-1022
   39678:	20804016 	blt	r4,r2,3977c <__pack_d+0x160>
   3967c:	0080ffc4 	movi	r2,1023
   39680:	11003316 	blt	r2,r4,39750 <__pack_d+0x134>
   39684:	88803fcc 	andi	r2,r17,255
   39688:	00c02004 	movi	r3,128
   3968c:	10c02926 	beq	r2,r3,39734 <__pack_d+0x118>
   39690:	88801fc4 	addi	r2,r17,127
   39694:	1463803a 	cmpltu	r17,r2,r17
   39698:	8c21883a 	add	r16,r17,r16
   3969c:	1023883a 	mov	r17,r2
   396a0:	00880034 	movhi	r2,8192
   396a4:	10bfffc4 	addi	r2,r2,-1
   396a8:	14001c36 	bltu	r2,r16,3971c <__pack_d+0x100>
   396ac:	2100ffc4 	addi	r4,r4,1023
   396b0:	8006963a 	slli	r3,r16,24
   396b4:	8804d23a 	srli	r2,r17,8
   396b8:	8020913a 	slli	r16,r16,4
   396bc:	2101ffcc 	andi	r4,r4,2047
   396c0:	1884b03a 	or	r2,r3,r2
   396c4:	8020d33a 	srli	r16,r16,12
   396c8:	00000306 	br	396d8 <__pack_d+0xbc>
   396cc:	0009883a 	mov	r4,zero
   396d0:	0005883a 	mov	r2,zero
   396d4:	0021883a 	mov	r16,zero
   396d8:	2008953a 	slli	r4,r4,20
   396dc:	982697fa 	slli	r19,r19,31
   396e0:	00c00434 	movhi	r3,16
   396e4:	18ffffc4 	addi	r3,r3,-1
   396e8:	80e0703a 	and	r16,r16,r3
   396ec:	8106b03a 	or	r3,r16,r4
   396f0:	1cc6b03a 	or	r3,r3,r19
   396f4:	dfc00717 	ldw	ra,28(sp)
   396f8:	dd800617 	ldw	r22,24(sp)
   396fc:	dd400517 	ldw	r21,20(sp)
   39700:	dd000417 	ldw	r20,16(sp)
   39704:	dcc00317 	ldw	r19,12(sp)
   39708:	dc800217 	ldw	r18,8(sp)
   3970c:	dc400117 	ldw	r17,4(sp)
   39710:	dc000017 	ldw	r16,0(sp)
   39714:	dec00804 	addi	sp,sp,32
   39718:	f800283a 	ret
   3971c:	800697fa 	slli	r3,r16,31
   39720:	8804d07a 	srli	r2,r17,1
   39724:	21010004 	addi	r4,r4,1024
   39728:	8020d07a 	srli	r16,r16,1
   3972c:	18a2b03a 	or	r17,r3,r2
   39730:	003fdf06 	br	396b0 <__pack_d+0x94>
   39734:	88c0400c 	andi	r3,r17,256
   39738:	183fd926 	beq	r3,zero,396a0 <__pack_d+0x84>
   3973c:	8885883a 	add	r2,r17,r2
   39740:	1463803a 	cmpltu	r17,r2,r17
   39744:	8c21883a 	add	r16,r17,r16
   39748:	1023883a 	mov	r17,r2
   3974c:	003fd406 	br	396a0 <__pack_d+0x84>
   39750:	0101ffc4 	movi	r4,2047
   39754:	0005883a 	mov	r2,zero
   39758:	0021883a 	mov	r16,zero
   3975c:	003fde06 	br	396d8 <__pack_d+0xbc>
   39760:	84000234 	orhi	r16,r16,8
   39764:	00c00434 	movhi	r3,16
   39768:	18ffffc4 	addi	r3,r3,-1
   3976c:	8805883a 	mov	r2,r17
   39770:	80e0703a 	and	r16,r16,r3
   39774:	0101ffc4 	movi	r4,2047
   39778:	003fd706 	br	396d8 <__pack_d+0xbc>
   3977c:	1129c83a 	sub	r20,r2,r4
   39780:	00800e04 	movi	r2,56
   39784:	15002716 	blt	r2,r20,39824 <__pack_d+0x208>
   39788:	800b883a 	mov	r5,r16
   3978c:	a00d883a 	mov	r6,r20
   39790:	8809883a 	mov	r4,r17
   39794:	0039a140 	call	39a14 <__lshrdi3>
   39798:	9009883a 	mov	r4,r18
   3979c:	000b883a 	mov	r5,zero
   397a0:	a00d883a 	mov	r6,r20
   397a4:	102d883a 	mov	r22,r2
   397a8:	182b883a 	mov	r21,r3
   397ac:	0039a580 	call	39a58 <__ashldi3>
   397b0:	1009003a 	cmpeq	r4,r2,zero
   397b4:	1907c83a 	sub	r3,r3,r4
   397b8:	10bfffc4 	addi	r2,r2,-1
   397bc:	1c20703a 	and	r16,r3,r16
   397c0:	1444703a 	and	r2,r2,r17
   397c4:	1404b03a 	or	r2,r2,r16
   397c8:	1004c03a 	cmpne	r2,r2,zero
   397cc:	1584b03a 	or	r2,r2,r22
   397d0:	11003fcc 	andi	r4,r2,255
   397d4:	01402004 	movi	r5,128
   397d8:	a807883a 	mov	r3,r21
   397dc:	2140131e 	bne	r4,r5,3982c <__pack_d+0x210>
   397e0:	1140400c 	andi	r5,r2,256
   397e4:	28000426 	beq	r5,zero,397f8 <__pack_d+0x1dc>
   397e8:	1109883a 	add	r4,r2,r4
   397ec:	2085803a 	cmpltu	r2,r4,r2
   397f0:	1547883a 	add	r3,r2,r21
   397f4:	2005883a 	mov	r2,r4
   397f8:	1808963a 	slli	r4,r3,24
   397fc:	1004d23a 	srli	r2,r2,8
   39800:	1820913a 	slli	r16,r3,4
   39804:	01440034 	movhi	r5,4096
   39808:	297fffc4 	addi	r5,r5,-1
   3980c:	2084b03a 	or	r2,r4,r2
   39810:	8020d33a 	srli	r16,r16,12
   39814:	01000044 	movi	r4,1
   39818:	28ffaf36 	bltu	r5,r3,396d8 <__pack_d+0xbc>
   3981c:	0009883a 	mov	r4,zero
   39820:	003fad06 	br	396d8 <__pack_d+0xbc>
   39824:	0005883a 	mov	r2,zero
   39828:	0007883a 	mov	r3,zero
   3982c:	11001fc4 	addi	r4,r2,127
   39830:	2085803a 	cmpltu	r2,r4,r2
   39834:	10c7883a 	add	r3,r2,r3
   39838:	2005883a 	mov	r2,r4
   3983c:	003fee06 	br	397f8 <__pack_d+0x1dc>

00039840 <__unpack_d>:
   39840:	21800117 	ldw	r6,4(r4)
   39844:	20c00017 	ldw	r3,0(r4)
   39848:	3004d7fa 	srli	r2,r6,31
   3984c:	3008d53a 	srli	r4,r6,20
   39850:	28800115 	stw	r2,4(r5)
   39854:	2101ffcc 	andi	r4,r4,2047
   39858:	00800434 	movhi	r2,16
   3985c:	10bfffc4 	addi	r2,r2,-1
   39860:	3084703a 	and	r2,r6,r2
   39864:	20001a1e 	bne	r4,zero,398d0 <__unpack_d+0x90>
   39868:	1888b03a 	or	r4,r3,r2
   3986c:	20002626 	beq	r4,zero,39908 <__unpack_d+0xc8>
   39870:	1808d63a 	srli	r4,r3,24
   39874:	1004923a 	slli	r2,r2,8
   39878:	01bf0084 	movi	r6,-1022
   3987c:	29800215 	stw	r6,8(r5)
   39880:	2084b03a 	or	r2,r4,r2
   39884:	010000c4 	movi	r4,3
   39888:	29000015 	stw	r4,0(r5)
   3988c:	02040034 	movhi	r8,4096
   39890:	423fffc4 	addi	r8,r8,-1
   39894:	1806923a 	slli	r3,r3,8
   39898:	40801836 	bltu	r8,r2,398fc <__unpack_d+0xbc>
   3989c:	013f0044 	movi	r4,-1023
   398a0:	18cd883a 	add	r6,r3,r3
   398a4:	30c7803a 	cmpltu	r3,r6,r3
   398a8:	1085883a 	add	r2,r2,r2
   398ac:	1885883a 	add	r2,r3,r2
   398b0:	200f883a 	mov	r7,r4
   398b4:	3007883a 	mov	r3,r6
   398b8:	213fffc4 	addi	r4,r4,-1
   398bc:	40bff82e 	bgeu	r8,r2,398a0 <__unpack_d+0x60>
   398c0:	29c00215 	stw	r7,8(r5)
   398c4:	28c00315 	stw	r3,12(r5)
   398c8:	28800415 	stw	r2,16(r5)
   398cc:	f800283a 	ret
   398d0:	01c1ffc4 	movi	r7,2047
   398d4:	21c00f26 	beq	r4,r7,39914 <__unpack_d+0xd4>
   398d8:	180cd63a 	srli	r6,r3,24
   398dc:	1004923a 	slli	r2,r2,8
   398e0:	213f0044 	addi	r4,r4,-1023
   398e4:	1806923a 	slli	r3,r3,8
   398e8:	3084b03a 	or	r2,r6,r2
   398ec:	29000215 	stw	r4,8(r5)
   398f0:	010000c4 	movi	r4,3
   398f4:	10840034 	orhi	r2,r2,4096
   398f8:	29000015 	stw	r4,0(r5)
   398fc:	28c00315 	stw	r3,12(r5)
   39900:	28800415 	stw	r2,16(r5)
   39904:	f800283a 	ret
   39908:	00800084 	movi	r2,2
   3990c:	28800015 	stw	r2,0(r5)
   39910:	f800283a 	ret
   39914:	1888b03a 	or	r4,r3,r2
   39918:	20000526 	beq	r4,zero,39930 <__unpack_d+0xf0>
   3991c:	3180022c 	andhi	r6,r6,8
   39920:	30000626 	beq	r6,zero,3993c <__unpack_d+0xfc>
   39924:	01000044 	movi	r4,1
   39928:	29000015 	stw	r4,0(r5)
   3992c:	003ff306 	br	398fc <__unpack_d+0xbc>
   39930:	00800104 	movi	r2,4
   39934:	28800015 	stw	r2,0(r5)
   39938:	f800283a 	ret
   3993c:	28000015 	stw	zero,0(r5)
   39940:	003fee06 	br	398fc <__unpack_d+0xbc>

00039944 <__fpcmp_parts_d>:
   39944:	20c00017 	ldw	r3,0(r4)
   39948:	00800044 	movi	r2,1
   3994c:	10c0142e 	bgeu	r2,r3,399a0 <__fpcmp_parts_d+0x5c>
   39950:	29800017 	ldw	r6,0(r5)
   39954:	1180122e 	bgeu	r2,r6,399a0 <__fpcmp_parts_d+0x5c>
   39958:	01c00104 	movi	r7,4
   3995c:	19c02826 	beq	r3,r7,39a00 <__fpcmp_parts_d+0xbc>
   39960:	31c00926 	beq	r6,r7,39988 <__fpcmp_parts_d+0x44>
   39964:	01c00084 	movi	r7,2
   39968:	19c00626 	beq	r3,r7,39984 <__fpcmp_parts_d+0x40>
   3996c:	31c00a26 	beq	r6,r7,39998 <__fpcmp_parts_d+0x54>
   39970:	20c00117 	ldw	r3,4(r4)
   39974:	29800117 	ldw	r6,4(r5)
   39978:	19800b26 	beq	r3,r6,399a8 <__fpcmp_parts_d+0x64>
   3997c:	1800041e 	bne	r3,zero,39990 <__fpcmp_parts_d+0x4c>
   39980:	f800283a 	ret
   39984:	30c01a26 	beq	r6,r3,399f0 <__fpcmp_parts_d+0xac>
   39988:	28800117 	ldw	r2,4(r5)
   3998c:	1000041e 	bne	r2,zero,399a0 <__fpcmp_parts_d+0x5c>
   39990:	00bfffc4 	movi	r2,-1
   39994:	f800283a 	ret
   39998:	20800117 	ldw	r2,4(r4)
   3999c:	103ffc1e 	bne	r2,zero,39990 <__fpcmp_parts_d+0x4c>
   399a0:	00800044 	movi	r2,1
   399a4:	f800283a 	ret
   399a8:	21c00217 	ldw	r7,8(r4)
   399ac:	29800217 	ldw	r6,8(r5)
   399b0:	31c0020e 	bge	r6,r7,399bc <__fpcmp_parts_d+0x78>
   399b4:	183ff61e 	bne	r3,zero,39990 <__fpcmp_parts_d+0x4c>
   399b8:	f800283a 	ret
   399bc:	39800a16 	blt	r7,r6,399e8 <__fpcmp_parts_d+0xa4>
   399c0:	20800417 	ldw	r2,16(r4)
   399c4:	29800417 	ldw	r6,16(r5)
   399c8:	21c00317 	ldw	r7,12(r4)
   399cc:	29000317 	ldw	r4,12(r5)
   399d0:	30800936 	bltu	r6,r2,399f8 <__fpcmp_parts_d+0xb4>
   399d4:	1180011e 	bne	r2,r6,399dc <__fpcmp_parts_d+0x98>
   399d8:	21c00736 	bltu	r4,r7,399f8 <__fpcmp_parts_d+0xb4>
   399dc:	11800236 	bltu	r2,r6,399e8 <__fpcmp_parts_d+0xa4>
   399e0:	3080031e 	bne	r6,r2,399f0 <__fpcmp_parts_d+0xac>
   399e4:	3900022e 	bgeu	r7,r4,399f0 <__fpcmp_parts_d+0xac>
   399e8:	183fe926 	beq	r3,zero,39990 <__fpcmp_parts_d+0x4c>
   399ec:	003fec06 	br	399a0 <__fpcmp_parts_d+0x5c>
   399f0:	0005883a 	mov	r2,zero
   399f4:	f800283a 	ret
   399f8:	183fe926 	beq	r3,zero,399a0 <__fpcmp_parts_d+0x5c>
   399fc:	003fe406 	br	39990 <__fpcmp_parts_d+0x4c>
   39a00:	30ffe51e 	bne	r6,r3,39998 <__fpcmp_parts_d+0x54>
   39a04:	28c00117 	ldw	r3,4(r5)
   39a08:	20800117 	ldw	r2,4(r4)
   39a0c:	1885c83a 	sub	r2,r3,r2
   39a10:	f800283a 	ret

00039a14 <__lshrdi3>:
   39a14:	2005883a 	mov	r2,r4
   39a18:	2807883a 	mov	r3,r5
   39a1c:	30000826 	beq	r6,zero,39a40 <__lshrdi3+0x2c>
   39a20:	01000804 	movi	r4,32
   39a24:	2189c83a 	sub	r4,r4,r6
   39a28:	0100060e 	bge	zero,r4,39a44 <__lshrdi3+0x30>
   39a2c:	1184d83a 	srl	r2,r2,r6
   39a30:	2908983a 	sll	r4,r5,r4
   39a34:	298cd83a 	srl	r6,r5,r6
   39a38:	2084b03a 	or	r2,r4,r2
   39a3c:	3007883a 	mov	r3,r6
   39a40:	f800283a 	ret
   39a44:	0105c83a 	sub	r2,zero,r4
   39a48:	000d883a 	mov	r6,zero
   39a4c:	2884d83a 	srl	r2,r5,r2
   39a50:	3007883a 	mov	r3,r6
   39a54:	003ffa06 	br	39a40 <__lshrdi3+0x2c>

00039a58 <__ashldi3>:
   39a58:	2005883a 	mov	r2,r4
   39a5c:	2807883a 	mov	r3,r5
   39a60:	30000826 	beq	r6,zero,39a84 <__ashldi3+0x2c>
   39a64:	01000804 	movi	r4,32
   39a68:	2189c83a 	sub	r4,r4,r6
   39a6c:	0100060e 	bge	zero,r4,39a88 <__ashldi3+0x30>
   39a70:	1108d83a 	srl	r4,r2,r4
   39a74:	2986983a 	sll	r3,r5,r6
   39a78:	118c983a 	sll	r6,r2,r6
   39a7c:	20c6b03a 	or	r3,r4,r3
   39a80:	3005883a 	mov	r2,r6
   39a84:	f800283a 	ret
   39a88:	0107c83a 	sub	r3,zero,r4
   39a8c:	000d883a 	mov	r6,zero
   39a90:	10c6983a 	sll	r3,r2,r3
   39a94:	3005883a 	mov	r2,r6
   39a98:	003ffa06 	br	39a84 <__ashldi3+0x2c>

00039a9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39a9c:	defffe04 	addi	sp,sp,-8
   39aa0:	dfc00115 	stw	ra,4(sp)
   39aa4:	df000015 	stw	fp,0(sp)
   39aa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39aac:	00800034 	movhi	r2,0
   39ab0:	10876c04 	addi	r2,r2,7600
   39ab4:	10800017 	ldw	r2,0(r2)
   39ab8:	10000526 	beq	r2,zero,39ad0 <alt_get_errno+0x34>
   39abc:	00800034 	movhi	r2,0
   39ac0:	10876c04 	addi	r2,r2,7600
   39ac4:	10800017 	ldw	r2,0(r2)
   39ac8:	103ee83a 	callr	r2
   39acc:	00000206 	br	39ad8 <alt_get_errno+0x3c>
   39ad0:	00800034 	movhi	r2,0
   39ad4:	10877704 	addi	r2,r2,7644
}
   39ad8:	e037883a 	mov	sp,fp
   39adc:	dfc00117 	ldw	ra,4(sp)
   39ae0:	df000017 	ldw	fp,0(sp)
   39ae4:	dec00204 	addi	sp,sp,8
   39ae8:	f800283a 	ret

00039aec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   39aec:	defffb04 	addi	sp,sp,-20
   39af0:	dfc00415 	stw	ra,16(sp)
   39af4:	df000315 	stw	fp,12(sp)
   39af8:	df000304 	addi	fp,sp,12
   39afc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   39b00:	e0bfff17 	ldw	r2,-4(fp)
   39b04:	10000716 	blt	r2,zero,39b24 <close+0x38>
   39b08:	e13fff17 	ldw	r4,-4(fp)
   39b0c:	01400304 	movi	r5,12
   39b10:	00394380 	call	39438 <__mulsi3>
   39b14:	00c00034 	movhi	r3,0
   39b18:	18c2ea04 	addi	r3,r3,2984
   39b1c:	10c5883a 	add	r2,r2,r3
   39b20:	00000106 	br	39b28 <close+0x3c>
   39b24:	0005883a 	mov	r2,zero
   39b28:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   39b2c:	e0bffd17 	ldw	r2,-12(fp)
   39b30:	10001826 	beq	r2,zero,39b94 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   39b34:	e0bffd17 	ldw	r2,-12(fp)
   39b38:	10800017 	ldw	r2,0(r2)
   39b3c:	10800417 	ldw	r2,16(r2)
   39b40:	10000626 	beq	r2,zero,39b5c <close+0x70>
   39b44:	e0bffd17 	ldw	r2,-12(fp)
   39b48:	10800017 	ldw	r2,0(r2)
   39b4c:	10800417 	ldw	r2,16(r2)
   39b50:	e13ffd17 	ldw	r4,-12(fp)
   39b54:	103ee83a 	callr	r2
   39b58:	00000106 	br	39b60 <close+0x74>
   39b5c:	0005883a 	mov	r2,zero
   39b60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   39b64:	e13fff17 	ldw	r4,-4(fp)
   39b68:	003a1e40 	call	3a1e4 <alt_release_fd>
    if (rval < 0)
   39b6c:	e0bffe17 	ldw	r2,-8(fp)
   39b70:	1000060e 	bge	r2,zero,39b8c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   39b74:	0039a9c0 	call	39a9c <alt_get_errno>
   39b78:	e0fffe17 	ldw	r3,-8(fp)
   39b7c:	00c7c83a 	sub	r3,zero,r3
   39b80:	10c00015 	stw	r3,0(r2)
      return -1;
   39b84:	00bfffc4 	movi	r2,-1
   39b88:	00000606 	br	39ba4 <close+0xb8>
    }
    return 0;
   39b8c:	0005883a 	mov	r2,zero
   39b90:	00000406 	br	39ba4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39b94:	0039a9c0 	call	39a9c <alt_get_errno>
   39b98:	00c01444 	movi	r3,81
   39b9c:	10c00015 	stw	r3,0(r2)
    return -1;
   39ba0:	00bfffc4 	movi	r2,-1
  }
}
   39ba4:	e037883a 	mov	sp,fp
   39ba8:	dfc00117 	ldw	ra,4(sp)
   39bac:	df000017 	ldw	fp,0(sp)
   39bb0:	dec00204 	addi	sp,sp,8
   39bb4:	f800283a 	ret

00039bb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   39bb8:	defffc04 	addi	sp,sp,-16
   39bbc:	df000315 	stw	fp,12(sp)
   39bc0:	df000304 	addi	fp,sp,12
   39bc4:	e13ffd15 	stw	r4,-12(fp)
   39bc8:	e17ffe15 	stw	r5,-8(fp)
   39bcc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   39bd0:	e0bfff17 	ldw	r2,-4(fp)
}
   39bd4:	e037883a 	mov	sp,fp
   39bd8:	df000017 	ldw	fp,0(sp)
   39bdc:	dec00104 	addi	sp,sp,4
   39be0:	f800283a 	ret

00039be4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39be4:	defffe04 	addi	sp,sp,-8
   39be8:	dfc00115 	stw	ra,4(sp)
   39bec:	df000015 	stw	fp,0(sp)
   39bf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39bf4:	00800034 	movhi	r2,0
   39bf8:	10876c04 	addi	r2,r2,7600
   39bfc:	10800017 	ldw	r2,0(r2)
   39c00:	10000526 	beq	r2,zero,39c18 <alt_get_errno+0x34>
   39c04:	00800034 	movhi	r2,0
   39c08:	10876c04 	addi	r2,r2,7600
   39c0c:	10800017 	ldw	r2,0(r2)
   39c10:	103ee83a 	callr	r2
   39c14:	00000206 	br	39c20 <alt_get_errno+0x3c>
   39c18:	00800034 	movhi	r2,0
   39c1c:	10877704 	addi	r2,r2,7644
}
   39c20:	e037883a 	mov	sp,fp
   39c24:	dfc00117 	ldw	ra,4(sp)
   39c28:	df000017 	ldw	fp,0(sp)
   39c2c:	dec00204 	addi	sp,sp,8
   39c30:	f800283a 	ret

00039c34 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   39c34:	defffb04 	addi	sp,sp,-20
   39c38:	dfc00415 	stw	ra,16(sp)
   39c3c:	df000315 	stw	fp,12(sp)
   39c40:	df000304 	addi	fp,sp,12
   39c44:	e13ffe15 	stw	r4,-8(fp)
   39c48:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   39c4c:	e0bffe17 	ldw	r2,-8(fp)
   39c50:	10000716 	blt	r2,zero,39c70 <fstat+0x3c>
   39c54:	e13ffe17 	ldw	r4,-8(fp)
   39c58:	01400304 	movi	r5,12
   39c5c:	00394380 	call	39438 <__mulsi3>
   39c60:	00c00034 	movhi	r3,0
   39c64:	18c2ea04 	addi	r3,r3,2984
   39c68:	10c5883a 	add	r2,r2,r3
   39c6c:	00000106 	br	39c74 <fstat+0x40>
   39c70:	0005883a 	mov	r2,zero
   39c74:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   39c78:	e0bffd17 	ldw	r2,-12(fp)
   39c7c:	10001026 	beq	r2,zero,39cc0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   39c80:	e0bffd17 	ldw	r2,-12(fp)
   39c84:	10800017 	ldw	r2,0(r2)
   39c88:	10800817 	ldw	r2,32(r2)
   39c8c:	10000726 	beq	r2,zero,39cac <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   39c90:	e0bffd17 	ldw	r2,-12(fp)
   39c94:	10800017 	ldw	r2,0(r2)
   39c98:	10800817 	ldw	r2,32(r2)
   39c9c:	e13ffd17 	ldw	r4,-12(fp)
   39ca0:	e17fff17 	ldw	r5,-4(fp)
   39ca4:	103ee83a 	callr	r2
   39ca8:	00000906 	br	39cd0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   39cac:	e0bfff17 	ldw	r2,-4(fp)
   39cb0:	00c80004 	movi	r3,8192
   39cb4:	10c00115 	stw	r3,4(r2)
      return 0;
   39cb8:	0005883a 	mov	r2,zero
   39cbc:	00000406 	br	39cd0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39cc0:	0039be40 	call	39be4 <alt_get_errno>
   39cc4:	00c01444 	movi	r3,81
   39cc8:	10c00015 	stw	r3,0(r2)
    return -1;
   39ccc:	00bfffc4 	movi	r2,-1
  }
}
   39cd0:	e037883a 	mov	sp,fp
   39cd4:	dfc00117 	ldw	ra,4(sp)
   39cd8:	df000017 	ldw	fp,0(sp)
   39cdc:	dec00204 	addi	sp,sp,8
   39ce0:	f800283a 	ret

00039ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39ce4:	defffe04 	addi	sp,sp,-8
   39ce8:	dfc00115 	stw	ra,4(sp)
   39cec:	df000015 	stw	fp,0(sp)
   39cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39cf4:	00800034 	movhi	r2,0
   39cf8:	10876c04 	addi	r2,r2,7600
   39cfc:	10800017 	ldw	r2,0(r2)
   39d00:	10000526 	beq	r2,zero,39d18 <alt_get_errno+0x34>
   39d04:	00800034 	movhi	r2,0
   39d08:	10876c04 	addi	r2,r2,7600
   39d0c:	10800017 	ldw	r2,0(r2)
   39d10:	103ee83a 	callr	r2
   39d14:	00000206 	br	39d20 <alt_get_errno+0x3c>
   39d18:	00800034 	movhi	r2,0
   39d1c:	10877704 	addi	r2,r2,7644
}
   39d20:	e037883a 	mov	sp,fp
   39d24:	dfc00117 	ldw	ra,4(sp)
   39d28:	df000017 	ldw	fp,0(sp)
   39d2c:	dec00204 	addi	sp,sp,8
   39d30:	f800283a 	ret

00039d34 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   39d34:	deffed04 	addi	sp,sp,-76
   39d38:	dfc01215 	stw	ra,72(sp)
   39d3c:	df001115 	stw	fp,68(sp)
   39d40:	df001104 	addi	fp,sp,68
   39d44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   39d48:	e0bfff17 	ldw	r2,-4(fp)
   39d4c:	10000716 	blt	r2,zero,39d6c <isatty+0x38>
   39d50:	e13fff17 	ldw	r4,-4(fp)
   39d54:	01400304 	movi	r5,12
   39d58:	00394380 	call	39438 <__mulsi3>
   39d5c:	00c00034 	movhi	r3,0
   39d60:	18c2ea04 	addi	r3,r3,2984
   39d64:	10c5883a 	add	r2,r2,r3
   39d68:	00000106 	br	39d70 <isatty+0x3c>
   39d6c:	0005883a 	mov	r2,zero
   39d70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   39d74:	e0bfef17 	ldw	r2,-68(fp)
   39d78:	10000e26 	beq	r2,zero,39db4 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   39d7c:	e0bfef17 	ldw	r2,-68(fp)
   39d80:	10800017 	ldw	r2,0(r2)
   39d84:	10800817 	ldw	r2,32(r2)
   39d88:	1000021e 	bne	r2,zero,39d94 <isatty+0x60>
    {
      return 1;
   39d8c:	00800044 	movi	r2,1
   39d90:	00000c06 	br	39dc4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   39d94:	e0bff004 	addi	r2,fp,-64
   39d98:	e13fff17 	ldw	r4,-4(fp)
   39d9c:	100b883a 	mov	r5,r2
   39da0:	0039c340 	call	39c34 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   39da4:	e0bff117 	ldw	r2,-60(fp)
   39da8:	10880020 	cmpeqi	r2,r2,8192
   39dac:	10803fcc 	andi	r2,r2,255
   39db0:	00000406 	br	39dc4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39db4:	0039ce40 	call	39ce4 <alt_get_errno>
   39db8:	00c01444 	movi	r3,81
   39dbc:	10c00015 	stw	r3,0(r2)
    return 0;
   39dc0:	0005883a 	mov	r2,zero
  }
}
   39dc4:	e037883a 	mov	sp,fp
   39dc8:	dfc00117 	ldw	ra,4(sp)
   39dcc:	df000017 	ldw	fp,0(sp)
   39dd0:	dec00204 	addi	sp,sp,8
   39dd4:	f800283a 	ret

00039dd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   39dd8:	defffc04 	addi	sp,sp,-16
   39ddc:	df000315 	stw	fp,12(sp)
   39de0:	df000304 	addi	fp,sp,12
   39de4:	e13ffd15 	stw	r4,-12(fp)
   39de8:	e17ffe15 	stw	r5,-8(fp)
   39dec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   39df0:	e0fffe17 	ldw	r3,-8(fp)
   39df4:	e0bffd17 	ldw	r2,-12(fp)
   39df8:	18800e26 	beq	r3,r2,39e34 <alt_load_section+0x5c>
  {
    while( to != end )
   39dfc:	00000a06 	br	39e28 <alt_load_section+0x50>
    {
      *to++ = *from++;
   39e00:	e0bffd17 	ldw	r2,-12(fp)
   39e04:	10c00017 	ldw	r3,0(r2)
   39e08:	e0bffe17 	ldw	r2,-8(fp)
   39e0c:	10c00015 	stw	r3,0(r2)
   39e10:	e0bffe17 	ldw	r2,-8(fp)
   39e14:	10800104 	addi	r2,r2,4
   39e18:	e0bffe15 	stw	r2,-8(fp)
   39e1c:	e0bffd17 	ldw	r2,-12(fp)
   39e20:	10800104 	addi	r2,r2,4
   39e24:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   39e28:	e0fffe17 	ldw	r3,-8(fp)
   39e2c:	e0bfff17 	ldw	r2,-4(fp)
   39e30:	18bff31e 	bne	r3,r2,39e00 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   39e34:	e037883a 	mov	sp,fp
   39e38:	df000017 	ldw	fp,0(sp)
   39e3c:	dec00104 	addi	sp,sp,4
   39e40:	f800283a 	ret

00039e44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   39e44:	defffe04 	addi	sp,sp,-8
   39e48:	dfc00115 	stw	ra,4(sp)
   39e4c:	df000015 	stw	fp,0(sp)
   39e50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   39e54:	01000134 	movhi	r4,4
   39e58:	2132b004 	addi	r4,r4,-13632
   39e5c:	01400034 	movhi	r5,0
   39e60:	2940db04 	addi	r5,r5,876
   39e64:	01800034 	movhi	r6,0
   39e68:	31877104 	addi	r6,r6,7620
   39e6c:	0039dd80 	call	39dd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   39e70:	010000f4 	movhi	r4,3
   39e74:	21000804 	addi	r4,r4,32
   39e78:	014000f4 	movhi	r5,3
   39e7c:	29400804 	addi	r5,r5,32
   39e80:	018000f4 	movhi	r6,3
   39e84:	31806e04 	addi	r6,r6,440
   39e88:	0039dd80 	call	39dd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   39e8c:	01000134 	movhi	r4,4
   39e90:	2131d504 	addi	r4,r4,-14508
   39e94:	01400034 	movhi	r5,0
   39e98:	29400004 	addi	r5,r5,0
   39e9c:	01800034 	movhi	r6,0
   39ea0:	3180db04 	addi	r6,r6,876
   39ea4:	0039dd80 	call	39dd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   39ea8:	003b6b40 	call	3b6b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   39eac:	003b8780 	call	3b878 <alt_icache_flush_all>
}
   39eb0:	e037883a 	mov	sp,fp
   39eb4:	dfc00117 	ldw	ra,4(sp)
   39eb8:	df000017 	ldw	fp,0(sp)
   39ebc:	dec00204 	addi	sp,sp,8
   39ec0:	f800283a 	ret

00039ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39ec4:	defffe04 	addi	sp,sp,-8
   39ec8:	dfc00115 	stw	ra,4(sp)
   39ecc:	df000015 	stw	fp,0(sp)
   39ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39ed4:	00800034 	movhi	r2,0
   39ed8:	10876c04 	addi	r2,r2,7600
   39edc:	10800017 	ldw	r2,0(r2)
   39ee0:	10000526 	beq	r2,zero,39ef8 <alt_get_errno+0x34>
   39ee4:	00800034 	movhi	r2,0
   39ee8:	10876c04 	addi	r2,r2,7600
   39eec:	10800017 	ldw	r2,0(r2)
   39ef0:	103ee83a 	callr	r2
   39ef4:	00000206 	br	39f00 <alt_get_errno+0x3c>
   39ef8:	00800034 	movhi	r2,0
   39efc:	10877704 	addi	r2,r2,7644
}
   39f00:	e037883a 	mov	sp,fp
   39f04:	dfc00117 	ldw	ra,4(sp)
   39f08:	df000017 	ldw	fp,0(sp)
   39f0c:	dec00204 	addi	sp,sp,8
   39f10:	f800283a 	ret

00039f14 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   39f14:	defff904 	addi	sp,sp,-28
   39f18:	dfc00615 	stw	ra,24(sp)
   39f1c:	df000515 	stw	fp,20(sp)
   39f20:	df000504 	addi	fp,sp,20
   39f24:	e13ffd15 	stw	r4,-12(fp)
   39f28:	e17ffe15 	stw	r5,-8(fp)
   39f2c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   39f30:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   39f34:	e0bffd17 	ldw	r2,-12(fp)
   39f38:	10000716 	blt	r2,zero,39f58 <lseek+0x44>
   39f3c:	e13ffd17 	ldw	r4,-12(fp)
   39f40:	01400304 	movi	r5,12
   39f44:	00394380 	call	39438 <__mulsi3>
   39f48:	00c00034 	movhi	r3,0
   39f4c:	18c2ea04 	addi	r3,r3,2984
   39f50:	10c5883a 	add	r2,r2,r3
   39f54:	00000106 	br	39f5c <lseek+0x48>
   39f58:	0005883a 	mov	r2,zero
   39f5c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   39f60:	e0bffc17 	ldw	r2,-16(fp)
   39f64:	10001026 	beq	r2,zero,39fa8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   39f68:	e0bffc17 	ldw	r2,-16(fp)
   39f6c:	10800017 	ldw	r2,0(r2)
   39f70:	10800717 	ldw	r2,28(r2)
   39f74:	10000926 	beq	r2,zero,39f9c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   39f78:	e0bffc17 	ldw	r2,-16(fp)
   39f7c:	10800017 	ldw	r2,0(r2)
   39f80:	10800717 	ldw	r2,28(r2)
   39f84:	e13ffc17 	ldw	r4,-16(fp)
   39f88:	e17ffe17 	ldw	r5,-8(fp)
   39f8c:	e1bfff17 	ldw	r6,-4(fp)
   39f90:	103ee83a 	callr	r2
   39f94:	e0bffb15 	stw	r2,-20(fp)
   39f98:	00000506 	br	39fb0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   39f9c:	00bfde84 	movi	r2,-134
   39fa0:	e0bffb15 	stw	r2,-20(fp)
   39fa4:	00000206 	br	39fb0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   39fa8:	00bfebc4 	movi	r2,-81
   39fac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   39fb0:	e0bffb17 	ldw	r2,-20(fp)
   39fb4:	1000060e 	bge	r2,zero,39fd0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   39fb8:	0039ec40 	call	39ec4 <alt_get_errno>
   39fbc:	e0fffb17 	ldw	r3,-20(fp)
   39fc0:	00c7c83a 	sub	r3,zero,r3
   39fc4:	10c00015 	stw	r3,0(r2)
    rc = -1;
   39fc8:	00bfffc4 	movi	r2,-1
   39fcc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   39fd0:	e0bffb17 	ldw	r2,-20(fp)
}
   39fd4:	e037883a 	mov	sp,fp
   39fd8:	dfc00117 	ldw	ra,4(sp)
   39fdc:	df000017 	ldw	fp,0(sp)
   39fe0:	dec00204 	addi	sp,sp,8
   39fe4:	f800283a 	ret

00039fe8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   39fe8:	defffd04 	addi	sp,sp,-12
   39fec:	dfc00215 	stw	ra,8(sp)
   39ff0:	df000115 	stw	fp,4(sp)
   39ff4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   39ff8:	0009883a 	mov	r4,zero
   39ffc:	003a48c0 	call	3a48c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   3a000:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   3a004:	003a4c00 	call	3a4c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   3a008:	01000034 	movhi	r4,0
   3a00c:	2100d304 	addi	r4,r4,844
   3a010:	01400034 	movhi	r5,0
   3a014:	2940d304 	addi	r5,r5,844
   3a018:	01800034 	movhi	r6,0
   3a01c:	3180d304 	addi	r6,r6,844
   3a020:	003bc3c0 	call	3bc3c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   3a024:	003b7c00 	call	3b7c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   3a028:	01000134 	movhi	r4,4
   3a02c:	212e0704 	addi	r4,r4,-18404
   3a030:	003c3800 	call	3c380 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   3a034:	d1201617 	ldw	r4,-32680(gp)
   3a038:	d0e01717 	ldw	r3,-32676(gp)
   3a03c:	d0a01817 	ldw	r2,-32672(gp)
   3a040:	180b883a 	mov	r5,r3
   3a044:	100d883a 	mov	r6,r2
   3a048:	003029c0 	call	3029c <main>
   3a04c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3a050:	01000044 	movi	r4,1
   3a054:	0039aec0 	call	39aec <close>
  exit (result);
   3a058:	e13fff17 	ldw	r4,-4(fp)
   3a05c:	003c3940 	call	3c394 <exit>

0003a060 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   3a060:	defffe04 	addi	sp,sp,-8
   3a064:	df000115 	stw	fp,4(sp)
   3a068:	df000104 	addi	fp,sp,4
   3a06c:	e13fff15 	stw	r4,-4(fp)
}
   3a070:	e037883a 	mov	sp,fp
   3a074:	df000017 	ldw	fp,0(sp)
   3a078:	dec00104 	addi	sp,sp,4
   3a07c:	f800283a 	ret

0003a080 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   3a080:	defffe04 	addi	sp,sp,-8
   3a084:	df000115 	stw	fp,4(sp)
   3a088:	df000104 	addi	fp,sp,4
   3a08c:	e13fff15 	stw	r4,-4(fp)
}
   3a090:	e037883a 	mov	sp,fp
   3a094:	df000017 	ldw	fp,0(sp)
   3a098:	dec00104 	addi	sp,sp,4
   3a09c:	f800283a 	ret

0003a0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a0a0:	defffe04 	addi	sp,sp,-8
   3a0a4:	dfc00115 	stw	ra,4(sp)
   3a0a8:	df000015 	stw	fp,0(sp)
   3a0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3a0b0:	00800034 	movhi	r2,0
   3a0b4:	10876c04 	addi	r2,r2,7600
   3a0b8:	10800017 	ldw	r2,0(r2)
   3a0bc:	10000526 	beq	r2,zero,3a0d4 <alt_get_errno+0x34>
   3a0c0:	00800034 	movhi	r2,0
   3a0c4:	10876c04 	addi	r2,r2,7600
   3a0c8:	10800017 	ldw	r2,0(r2)
   3a0cc:	103ee83a 	callr	r2
   3a0d0:	00000206 	br	3a0dc <alt_get_errno+0x3c>
   3a0d4:	00800034 	movhi	r2,0
   3a0d8:	10877704 	addi	r2,r2,7644
}
   3a0dc:	e037883a 	mov	sp,fp
   3a0e0:	dfc00117 	ldw	ra,4(sp)
   3a0e4:	df000017 	ldw	fp,0(sp)
   3a0e8:	dec00204 	addi	sp,sp,8
   3a0ec:	f800283a 	ret

0003a0f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3a0f0:	defff904 	addi	sp,sp,-28
   3a0f4:	dfc00615 	stw	ra,24(sp)
   3a0f8:	df000515 	stw	fp,20(sp)
   3a0fc:	df000504 	addi	fp,sp,20
   3a100:	e13ffd15 	stw	r4,-12(fp)
   3a104:	e17ffe15 	stw	r5,-8(fp)
   3a108:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a10c:	e0bffd17 	ldw	r2,-12(fp)
   3a110:	10000716 	blt	r2,zero,3a130 <read+0x40>
   3a114:	e13ffd17 	ldw	r4,-12(fp)
   3a118:	01400304 	movi	r5,12
   3a11c:	00394380 	call	39438 <__mulsi3>
   3a120:	00c00034 	movhi	r3,0
   3a124:	18c2ea04 	addi	r3,r3,2984
   3a128:	10c5883a 	add	r2,r2,r3
   3a12c:	00000106 	br	3a134 <read+0x44>
   3a130:	0005883a 	mov	r2,zero
   3a134:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3a138:	e0bffb17 	ldw	r2,-20(fp)
   3a13c:	10002026 	beq	r2,zero,3a1c0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a140:	e0bffb17 	ldw	r2,-20(fp)
   3a144:	10800217 	ldw	r2,8(r2)
   3a148:	108000cc 	andi	r2,r2,3
   3a14c:	10800060 	cmpeqi	r2,r2,1
   3a150:	1000171e 	bne	r2,zero,3a1b0 <read+0xc0>
        (fd->dev->read))
   3a154:	e0bffb17 	ldw	r2,-20(fp)
   3a158:	10800017 	ldw	r2,0(r2)
   3a15c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a160:	10001326 	beq	r2,zero,3a1b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   3a164:	e0bffb17 	ldw	r2,-20(fp)
   3a168:	10800017 	ldw	r2,0(r2)
   3a16c:	10c00517 	ldw	r3,20(r2)
   3a170:	e0bfff17 	ldw	r2,-4(fp)
   3a174:	e13ffb17 	ldw	r4,-20(fp)
   3a178:	e17ffe17 	ldw	r5,-8(fp)
   3a17c:	100d883a 	mov	r6,r2
   3a180:	183ee83a 	callr	r3
   3a184:	e0bffc15 	stw	r2,-16(fp)
   3a188:	e0bffc17 	ldw	r2,-16(fp)
   3a18c:	1000060e 	bge	r2,zero,3a1a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   3a190:	003a0a00 	call	3a0a0 <alt_get_errno>
   3a194:	e0fffc17 	ldw	r3,-16(fp)
   3a198:	00c7c83a 	sub	r3,zero,r3
   3a19c:	10c00015 	stw	r3,0(r2)
          return -1;
   3a1a0:	00bfffc4 	movi	r2,-1
   3a1a4:	00000a06 	br	3a1d0 <read+0xe0>
        }
        return rval;
   3a1a8:	e0bffc17 	ldw	r2,-16(fp)
   3a1ac:	00000806 	br	3a1d0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   3a1b0:	003a0a00 	call	3a0a0 <alt_get_errno>
   3a1b4:	00c00344 	movi	r3,13
   3a1b8:	10c00015 	stw	r3,0(r2)
   3a1bc:	00000306 	br	3a1cc <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   3a1c0:	003a0a00 	call	3a0a0 <alt_get_errno>
   3a1c4:	00c01444 	movi	r3,81
   3a1c8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   3a1cc:	00bfffc4 	movi	r2,-1
}
   3a1d0:	e037883a 	mov	sp,fp
   3a1d4:	dfc00117 	ldw	ra,4(sp)
   3a1d8:	df000017 	ldw	fp,0(sp)
   3a1dc:	dec00204 	addi	sp,sp,8
   3a1e0:	f800283a 	ret

0003a1e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   3a1e4:	defffc04 	addi	sp,sp,-16
   3a1e8:	dfc00315 	stw	ra,12(sp)
   3a1ec:	df000215 	stw	fp,8(sp)
   3a1f0:	dc000115 	stw	r16,4(sp)
   3a1f4:	df000104 	addi	fp,sp,4
   3a1f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   3a1fc:	e0bfff17 	ldw	r2,-4(fp)
   3a200:	108000d0 	cmplti	r2,r2,3
   3a204:	1000111e 	bne	r2,zero,3a24c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   3a208:	04000034 	movhi	r16,0
   3a20c:	8402ea04 	addi	r16,r16,2984
   3a210:	e0bfff17 	ldw	r2,-4(fp)
   3a214:	1009883a 	mov	r4,r2
   3a218:	01400304 	movi	r5,12
   3a21c:	00394380 	call	39438 <__mulsi3>
   3a220:	8085883a 	add	r2,r16,r2
   3a224:	10800204 	addi	r2,r2,8
   3a228:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3a22c:	04000034 	movhi	r16,0
   3a230:	8402ea04 	addi	r16,r16,2984
   3a234:	e0bfff17 	ldw	r2,-4(fp)
   3a238:	1009883a 	mov	r4,r2
   3a23c:	01400304 	movi	r5,12
   3a240:	00394380 	call	39438 <__mulsi3>
   3a244:	8085883a 	add	r2,r16,r2
   3a248:	10000015 	stw	zero,0(r2)
  }
}
   3a24c:	e037883a 	mov	sp,fp
   3a250:	dfc00217 	ldw	ra,8(sp)
   3a254:	df000117 	ldw	fp,4(sp)
   3a258:	dc000017 	ldw	r16,0(sp)
   3a25c:	dec00304 	addi	sp,sp,12
   3a260:	f800283a 	ret

0003a264 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   3a264:	defff904 	addi	sp,sp,-28
   3a268:	df000615 	stw	fp,24(sp)
   3a26c:	df000604 	addi	fp,sp,24
   3a270:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3a274:	0005303a 	rdctl	r2,status
   3a278:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3a27c:	e0fffc17 	ldw	r3,-16(fp)
   3a280:	00bfff84 	movi	r2,-2
   3a284:	1884703a 	and	r2,r3,r2
   3a288:	1001703a 	wrctl	status,r2
  
  return context;
   3a28c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   3a290:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   3a294:	d0a00b17 	ldw	r2,-32724(gp)
   3a298:	10c000c4 	addi	r3,r2,3
   3a29c:	00bfff04 	movi	r2,-4
   3a2a0:	1884703a 	and	r2,r3,r2
   3a2a4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   3a2a8:	d0e00b17 	ldw	r3,-32724(gp)
   3a2ac:	e0bfff17 	ldw	r2,-4(fp)
   3a2b0:	1885883a 	add	r2,r3,r2
   3a2b4:	00c000b4 	movhi	r3,2
   3a2b8:	18c00004 	addi	r3,r3,0
   3a2bc:	1880062e 	bgeu	r3,r2,3a2d8 <sbrk+0x74>
   3a2c0:	e0bffa17 	ldw	r2,-24(fp)
   3a2c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3a2c8:	e0bffd17 	ldw	r2,-12(fp)
   3a2cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   3a2d0:	00bfffc4 	movi	r2,-1
   3a2d4:	00000b06 	br	3a304 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   3a2d8:	d0a00b17 	ldw	r2,-32724(gp)
   3a2dc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   3a2e0:	d0e00b17 	ldw	r3,-32724(gp)
   3a2e4:	e0bfff17 	ldw	r2,-4(fp)
   3a2e8:	1885883a 	add	r2,r3,r2
   3a2ec:	d0a00b15 	stw	r2,-32724(gp)
   3a2f0:	e0bffa17 	ldw	r2,-24(fp)
   3a2f4:	e0bffe15 	stw	r2,-8(fp)
   3a2f8:	e0bffe17 	ldw	r2,-8(fp)
   3a2fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   3a300:	e0bffb17 	ldw	r2,-20(fp)
} 
   3a304:	e037883a 	mov	sp,fp
   3a308:	df000017 	ldw	fp,0(sp)
   3a30c:	dec00104 	addi	sp,sp,4
   3a310:	f800283a 	ret

0003a314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a314:	defffe04 	addi	sp,sp,-8
   3a318:	dfc00115 	stw	ra,4(sp)
   3a31c:	df000015 	stw	fp,0(sp)
   3a320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3a324:	00800034 	movhi	r2,0
   3a328:	10876c04 	addi	r2,r2,7600
   3a32c:	10800017 	ldw	r2,0(r2)
   3a330:	10000526 	beq	r2,zero,3a348 <alt_get_errno+0x34>
   3a334:	00800034 	movhi	r2,0
   3a338:	10876c04 	addi	r2,r2,7600
   3a33c:	10800017 	ldw	r2,0(r2)
   3a340:	103ee83a 	callr	r2
   3a344:	00000206 	br	3a350 <alt_get_errno+0x3c>
   3a348:	00800034 	movhi	r2,0
   3a34c:	10877704 	addi	r2,r2,7644
}
   3a350:	e037883a 	mov	sp,fp
   3a354:	dfc00117 	ldw	ra,4(sp)
   3a358:	df000017 	ldw	fp,0(sp)
   3a35c:	dec00204 	addi	sp,sp,8
   3a360:	f800283a 	ret

0003a364 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3a364:	defff904 	addi	sp,sp,-28
   3a368:	dfc00615 	stw	ra,24(sp)
   3a36c:	df000515 	stw	fp,20(sp)
   3a370:	df000504 	addi	fp,sp,20
   3a374:	e13ffd15 	stw	r4,-12(fp)
   3a378:	e17ffe15 	stw	r5,-8(fp)
   3a37c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a380:	e0bffd17 	ldw	r2,-12(fp)
   3a384:	10000716 	blt	r2,zero,3a3a4 <write+0x40>
   3a388:	e13ffd17 	ldw	r4,-12(fp)
   3a38c:	01400304 	movi	r5,12
   3a390:	00394380 	call	39438 <__mulsi3>
   3a394:	00c00034 	movhi	r3,0
   3a398:	18c2ea04 	addi	r3,r3,2984
   3a39c:	10c5883a 	add	r2,r2,r3
   3a3a0:	00000106 	br	3a3a8 <write+0x44>
   3a3a4:	0005883a 	mov	r2,zero
   3a3a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3a3ac:	e0bffb17 	ldw	r2,-20(fp)
   3a3b0:	10001f26 	beq	r2,zero,3a430 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3a3b4:	e0bffb17 	ldw	r2,-20(fp)
   3a3b8:	10800217 	ldw	r2,8(r2)
   3a3bc:	108000cc 	andi	r2,r2,3
   3a3c0:	10001726 	beq	r2,zero,3a420 <write+0xbc>
   3a3c4:	e0bffb17 	ldw	r2,-20(fp)
   3a3c8:	10800017 	ldw	r2,0(r2)
   3a3cc:	10800617 	ldw	r2,24(r2)
   3a3d0:	10001326 	beq	r2,zero,3a420 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3a3d4:	e0bffb17 	ldw	r2,-20(fp)
   3a3d8:	10800017 	ldw	r2,0(r2)
   3a3dc:	10c00617 	ldw	r3,24(r2)
   3a3e0:	e0bfff17 	ldw	r2,-4(fp)
   3a3e4:	e13ffb17 	ldw	r4,-20(fp)
   3a3e8:	e17ffe17 	ldw	r5,-8(fp)
   3a3ec:	100d883a 	mov	r6,r2
   3a3f0:	183ee83a 	callr	r3
   3a3f4:	e0bffc15 	stw	r2,-16(fp)
   3a3f8:	e0bffc17 	ldw	r2,-16(fp)
   3a3fc:	1000060e 	bge	r2,zero,3a418 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   3a400:	003a3140 	call	3a314 <alt_get_errno>
   3a404:	e0fffc17 	ldw	r3,-16(fp)
   3a408:	00c7c83a 	sub	r3,zero,r3
   3a40c:	10c00015 	stw	r3,0(r2)
        return -1;
   3a410:	00bfffc4 	movi	r2,-1
   3a414:	00000a06 	br	3a440 <write+0xdc>
      }
      return rval;
   3a418:	e0bffc17 	ldw	r2,-16(fp)
   3a41c:	00000806 	br	3a440 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3a420:	003a3140 	call	3a314 <alt_get_errno>
   3a424:	00c00344 	movi	r3,13
   3a428:	10c00015 	stw	r3,0(r2)
   3a42c:	00000306 	br	3a43c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   3a430:	003a3140 	call	3a314 <alt_get_errno>
   3a434:	00c01444 	movi	r3,81
   3a438:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   3a43c:	00bfffc4 	movi	r2,-1
}
   3a440:	e037883a 	mov	sp,fp
   3a444:	dfc00117 	ldw	ra,4(sp)
   3a448:	df000017 	ldw	fp,0(sp)
   3a44c:	dec00204 	addi	sp,sp,8
   3a450:	f800283a 	ret

0003a454 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   3a454:	defffd04 	addi	sp,sp,-12
   3a458:	dfc00215 	stw	ra,8(sp)
   3a45c:	df000115 	stw	fp,4(sp)
   3a460:	df000104 	addi	fp,sp,4
   3a464:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   3a468:	e13fff17 	ldw	r4,-4(fp)
   3a46c:	01400034 	movhi	r5,0
   3a470:	29476904 	addi	r5,r5,7588
   3a474:	003b7200 	call	3b720 <alt_dev_llist_insert>
}
   3a478:	e037883a 	mov	sp,fp
   3a47c:	dfc00117 	ldw	ra,4(sp)
   3a480:	df000017 	ldw	fp,0(sp)
   3a484:	dec00204 	addi	sp,sp,8
   3a488:	f800283a 	ret

0003a48c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   3a48c:	defffd04 	addi	sp,sp,-12
   3a490:	dfc00215 	stw	ra,8(sp)
   3a494:	df000115 	stw	fp,4(sp)
   3a498:	df000104 	addi	fp,sp,4
   3a49c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   3a4a0:	003c0e80 	call	3c0e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   3a4a4:	00800044 	movi	r2,1
   3a4a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   3a4ac:	e037883a 	mov	sp,fp
   3a4b0:	dfc00117 	ldw	ra,4(sp)
   3a4b4:	df000017 	ldw	fp,0(sp)
   3a4b8:	dec00204 	addi	sp,sp,8
   3a4bc:	f800283a 	ret

0003a4c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   3a4c0:	defffe04 	addi	sp,sp,-8
   3a4c4:	dfc00115 	stw	ra,4(sp)
   3a4c8:	df000015 	stw	fp,0(sp)
   3a4cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
   3a4d0:	01000134 	movhi	r4,4
   3a4d4:	21040804 	addi	r4,r4,4128
   3a4d8:	000b883a 	mov	r5,zero
   3a4dc:	000d883a 	mov	r6,zero
   3a4e0:	01c0fa04 	movi	r7,1000
   3a4e4:	003b4ec0 	call	3b4ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_MEM, fifo_mem);
   3a4e8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART1, jtag_uart1);
   3a4ec:	01000034 	movhi	r4,0
   3a4f0:	21035404 	addi	r4,r4,3408
   3a4f4:	000b883a 	mov	r5,zero
   3a4f8:	01800044 	movi	r6,1
   3a4fc:	003ab780 	call	3ab78 <altera_avalon_jtag_uart_init>
   3a500:	01000034 	movhi	r4,0
   3a504:	21034a04 	addi	r4,r4,3368
   3a508:	003a4540 	call	3a454 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysId);
   3a50c:	0001883a 	nop
}
   3a510:	e037883a 	mov	sp,fp
   3a514:	dfc00117 	ldw	ra,4(sp)
   3a518:	df000017 	ldw	fp,0(sp)
   3a51c:	dec00204 	addi	sp,sp,8
   3a520:	f800283a 	ret

0003a524 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   3a524:	defffa04 	addi	sp,sp,-24
   3a528:	dfc00515 	stw	ra,20(sp)
   3a52c:	df000415 	stw	fp,16(sp)
   3a530:	df000404 	addi	fp,sp,16
   3a534:	e13ffc15 	stw	r4,-16(fp)
   3a538:	e17ffd15 	stw	r5,-12(fp)
   3a53c:	e1bffe15 	stw	r6,-8(fp)
   3a540:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   3a544:	e13ffc17 	ldw	r4,-16(fp)
   3a548:	01400fc4 	movi	r5,63
   3a54c:	003a6f00 	call	3a6f0 <altera_avalon_fifo_clear_event>
   3a550:	10000226 	beq	r2,zero,3a55c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   3a554:	00bfffc4 	movi	r2,-1
   3a558:	00001306 	br	3a5a8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   3a55c:	e13ffc17 	ldw	r4,-16(fp)
   3a560:	e17ffd17 	ldw	r5,-12(fp)
   3a564:	003a74c0 	call	3a74c <altera_avalon_fifo_write_ienable>
   3a568:	10000226 	beq	r2,zero,3a574 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   3a56c:	00bfff84 	movi	r2,-2
   3a570:	00000d06 	br	3a5a8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   3a574:	e13ffc17 	ldw	r4,-16(fp)
   3a578:	e17fff17 	ldw	r5,-4(fp)
   3a57c:	003a7a40 	call	3a7a4 <altera_avalon_fifo_write_almostfull>
   3a580:	10000226 	beq	r2,zero,3a58c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a584:	00bfff44 	movi	r2,-3
   3a588:	00000706 	br	3a5a8 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   3a58c:	e13ffc17 	ldw	r4,-16(fp)
   3a590:	e17ffe17 	ldw	r5,-8(fp)
   3a594:	003a7fc0 	call	3a7fc <altera_avalon_fifo_write_almostempty>
   3a598:	10000226 	beq	r2,zero,3a5a4 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a59c:	00bfff44 	movi	r2,-3
   3a5a0:	00000106 	br	3a5a8 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   3a5a4:	0005883a 	mov	r2,zero
}
   3a5a8:	e037883a 	mov	sp,fp
   3a5ac:	dfc00117 	ldw	ra,4(sp)
   3a5b0:	df000017 	ldw	fp,0(sp)
   3a5b4:	dec00204 	addi	sp,sp,8
   3a5b8:	f800283a 	ret

0003a5bc <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   3a5bc:	defffd04 	addi	sp,sp,-12
   3a5c0:	df000215 	stw	fp,8(sp)
   3a5c4:	df000204 	addi	fp,sp,8
   3a5c8:	e13ffe15 	stw	r4,-8(fp)
   3a5cc:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   3a5d0:	e0bffe17 	ldw	r2,-8(fp)
   3a5d4:	10800104 	addi	r2,r2,4
   3a5d8:	10800037 	ldwio	r2,0(r2)
   3a5dc:	1007883a 	mov	r3,r2
   3a5e0:	e0bfff17 	ldw	r2,-4(fp)
   3a5e4:	1884703a 	and	r2,r3,r2
}
   3a5e8:	e037883a 	mov	sp,fp
   3a5ec:	df000017 	ldw	fp,0(sp)
   3a5f0:	dec00104 	addi	sp,sp,4
   3a5f4:	f800283a 	ret

0003a5f8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   3a5f8:	defffd04 	addi	sp,sp,-12
   3a5fc:	df000215 	stw	fp,8(sp)
   3a600:	df000204 	addi	fp,sp,8
   3a604:	e13ffe15 	stw	r4,-8(fp)
   3a608:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   3a60c:	e0bffe17 	ldw	r2,-8(fp)
   3a610:	10800304 	addi	r2,r2,12
   3a614:	10800037 	ldwio	r2,0(r2)
   3a618:	1007883a 	mov	r3,r2
   3a61c:	e0bfff17 	ldw	r2,-4(fp)
   3a620:	1884703a 	and	r2,r3,r2
}
   3a624:	e037883a 	mov	sp,fp
   3a628:	df000017 	ldw	fp,0(sp)
   3a62c:	dec00104 	addi	sp,sp,4
   3a630:	f800283a 	ret

0003a634 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   3a634:	defffe04 	addi	sp,sp,-8
   3a638:	df000115 	stw	fp,4(sp)
   3a63c:	df000104 	addi	fp,sp,4
   3a640:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   3a644:	e0bfff17 	ldw	r2,-4(fp)
   3a648:	10800404 	addi	r2,r2,16
   3a64c:	10800037 	ldwio	r2,0(r2)
}
   3a650:	e037883a 	mov	sp,fp
   3a654:	df000017 	ldw	fp,0(sp)
   3a658:	dec00104 	addi	sp,sp,4
   3a65c:	f800283a 	ret

0003a660 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   3a660:	defffe04 	addi	sp,sp,-8
   3a664:	df000115 	stw	fp,4(sp)
   3a668:	df000104 	addi	fp,sp,4
   3a66c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   3a670:	e0bfff17 	ldw	r2,-4(fp)
   3a674:	10800504 	addi	r2,r2,20
   3a678:	10800037 	ldwio	r2,0(r2)
}
   3a67c:	e037883a 	mov	sp,fp
   3a680:	df000017 	ldw	fp,0(sp)
   3a684:	dec00104 	addi	sp,sp,4
   3a688:	f800283a 	ret

0003a68c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   3a68c:	defffd04 	addi	sp,sp,-12
   3a690:	df000215 	stw	fp,8(sp)
   3a694:	df000204 	addi	fp,sp,8
   3a698:	e13ffe15 	stw	r4,-8(fp)
   3a69c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   3a6a0:	e0bffe17 	ldw	r2,-8(fp)
   3a6a4:	10800204 	addi	r2,r2,8
   3a6a8:	10800037 	ldwio	r2,0(r2)
   3a6ac:	1007883a 	mov	r3,r2
   3a6b0:	e0bfff17 	ldw	r2,-4(fp)
   3a6b4:	1884703a 	and	r2,r3,r2
}
   3a6b8:	e037883a 	mov	sp,fp
   3a6bc:	df000017 	ldw	fp,0(sp)
   3a6c0:	dec00104 	addi	sp,sp,4
   3a6c4:	f800283a 	ret

0003a6c8 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   3a6c8:	defffe04 	addi	sp,sp,-8
   3a6cc:	df000115 	stw	fp,4(sp)
   3a6d0:	df000104 	addi	fp,sp,4
   3a6d4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   3a6d8:	e0bfff17 	ldw	r2,-4(fp)
   3a6dc:	10800037 	ldwio	r2,0(r2)
}
   3a6e0:	e037883a 	mov	sp,fp
   3a6e4:	df000017 	ldw	fp,0(sp)
   3a6e8:	dec00104 	addi	sp,sp,4
   3a6ec:	f800283a 	ret

0003a6f0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   3a6f0:	defffd04 	addi	sp,sp,-12
   3a6f4:	df000215 	stw	fp,8(sp)
   3a6f8:	df000204 	addi	fp,sp,8
   3a6fc:	e13ffe15 	stw	r4,-8(fp)
   3a700:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   3a704:	e0bffe17 	ldw	r2,-8(fp)
   3a708:	10800204 	addi	r2,r2,8
   3a70c:	e0ffff17 	ldw	r3,-4(fp)
   3a710:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   3a714:	e0bffe17 	ldw	r2,-8(fp)
   3a718:	10800204 	addi	r2,r2,8
   3a71c:	10800037 	ldwio	r2,0(r2)
   3a720:	1007883a 	mov	r3,r2
   3a724:	e0bfff17 	ldw	r2,-4(fp)
   3a728:	1884703a 	and	r2,r3,r2
   3a72c:	1000021e 	bne	r2,zero,3a738 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   3a730:	0005883a 	mov	r2,zero
   3a734:	00000106 	br	3a73c <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   3a738:	00bfffc4 	movi	r2,-1
}
   3a73c:	e037883a 	mov	sp,fp
   3a740:	df000017 	ldw	fp,0(sp)
   3a744:	dec00104 	addi	sp,sp,4
   3a748:	f800283a 	ret

0003a74c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   3a74c:	defffd04 	addi	sp,sp,-12
   3a750:	df000215 	stw	fp,8(sp)
   3a754:	df000204 	addi	fp,sp,8
   3a758:	e13ffe15 	stw	r4,-8(fp)
   3a75c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   3a760:	e0bffe17 	ldw	r2,-8(fp)
   3a764:	10800304 	addi	r2,r2,12
   3a768:	e0ffff17 	ldw	r3,-4(fp)
   3a76c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   3a770:	e0bffe17 	ldw	r2,-8(fp)
   3a774:	10800304 	addi	r2,r2,12
   3a778:	10800037 	ldwio	r2,0(r2)
   3a77c:	1007883a 	mov	r3,r2
   3a780:	e0bfff17 	ldw	r2,-4(fp)
   3a784:	1880021e 	bne	r3,r2,3a790 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   3a788:	0005883a 	mov	r2,zero
   3a78c:	00000106 	br	3a794 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   3a790:	00bfff84 	movi	r2,-2
}
   3a794:	e037883a 	mov	sp,fp
   3a798:	df000017 	ldw	fp,0(sp)
   3a79c:	dec00104 	addi	sp,sp,4
   3a7a0:	f800283a 	ret

0003a7a4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   3a7a4:	defffd04 	addi	sp,sp,-12
   3a7a8:	df000215 	stw	fp,8(sp)
   3a7ac:	df000204 	addi	fp,sp,8
   3a7b0:	e13ffe15 	stw	r4,-8(fp)
   3a7b4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   3a7b8:	e0bffe17 	ldw	r2,-8(fp)
   3a7bc:	10800404 	addi	r2,r2,16
   3a7c0:	e0ffff17 	ldw	r3,-4(fp)
   3a7c4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   3a7c8:	e0bffe17 	ldw	r2,-8(fp)
   3a7cc:	10800404 	addi	r2,r2,16
   3a7d0:	10800037 	ldwio	r2,0(r2)
   3a7d4:	1007883a 	mov	r3,r2
   3a7d8:	e0bfff17 	ldw	r2,-4(fp)
   3a7dc:	1880021e 	bne	r3,r2,3a7e8 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   3a7e0:	0005883a 	mov	r2,zero
   3a7e4:	00000106 	br	3a7ec <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a7e8:	00bfff44 	movi	r2,-3
}
   3a7ec:	e037883a 	mov	sp,fp
   3a7f0:	df000017 	ldw	fp,0(sp)
   3a7f4:	dec00104 	addi	sp,sp,4
   3a7f8:	f800283a 	ret

0003a7fc <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   3a7fc:	defffd04 	addi	sp,sp,-12
   3a800:	df000215 	stw	fp,8(sp)
   3a804:	df000204 	addi	fp,sp,8
   3a808:	e13ffe15 	stw	r4,-8(fp)
   3a80c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   3a810:	e0bffe17 	ldw	r2,-8(fp)
   3a814:	10800504 	addi	r2,r2,20
   3a818:	e0ffff17 	ldw	r3,-4(fp)
   3a81c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   3a820:	e0bffe17 	ldw	r2,-8(fp)
   3a824:	10800504 	addi	r2,r2,20
   3a828:	10800037 	ldwio	r2,0(r2)
   3a82c:	1007883a 	mov	r3,r2
   3a830:	e0bfff17 	ldw	r2,-4(fp)
   3a834:	1880021e 	bne	r3,r2,3a840 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   3a838:	0005883a 	mov	r2,zero
   3a83c:	00000106 	br	3a844 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a840:	00bfff44 	movi	r2,-3
}
   3a844:	e037883a 	mov	sp,fp
   3a848:	df000017 	ldw	fp,0(sp)
   3a84c:	dec00104 	addi	sp,sp,4
   3a850:	f800283a 	ret

0003a854 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   3a854:	defffb04 	addi	sp,sp,-20
   3a858:	dfc00415 	stw	ra,16(sp)
   3a85c:	df000315 	stw	fp,12(sp)
   3a860:	df000304 	addi	fp,sp,12
   3a864:	e13ffd15 	stw	r4,-12(fp)
   3a868:	e17ffe15 	stw	r5,-8(fp)
   3a86c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   3a870:	e13ffe17 	ldw	r4,-8(fp)
   3a874:	01400044 	movi	r5,1
   3a878:	003a5bc0 	call	3a5bc <altera_avalon_fifo_read_status>
   3a87c:	1000051e 	bne	r2,zero,3a894 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   3a880:	e0bffd17 	ldw	r2,-12(fp)
   3a884:	e0ffff17 	ldw	r3,-4(fp)
   3a888:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   3a88c:	0005883a 	mov	r2,zero
   3a890:	00000106 	br	3a898 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   3a894:	00bfff04 	movi	r2,-4
    }
}
   3a898:	e037883a 	mov	sp,fp
   3a89c:	dfc00117 	ldw	ra,4(sp)
   3a8a0:	df000017 	ldw	fp,0(sp)
   3a8a4:	dec00204 	addi	sp,sp,8
   3a8a8:	f800283a 	ret

0003a8ac <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   3a8ac:	defffa04 	addi	sp,sp,-24
   3a8b0:	dfc00515 	stw	ra,20(sp)
   3a8b4:	df000415 	stw	fp,16(sp)
   3a8b8:	df000404 	addi	fp,sp,16
   3a8bc:	e13ffd15 	stw	r4,-12(fp)
   3a8c0:	e17ffe15 	stw	r5,-8(fp)
   3a8c4:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   3a8c8:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   3a8cc:	e0bfff17 	ldw	r2,-4(fp)
   3a8d0:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   3a8d4:	e13ffe17 	ldw	r4,-8(fp)
   3a8d8:	01400084 	movi	r5,2
   3a8dc:	003a5bc0 	call	3a5bc <altera_avalon_fifo_read_status>
   3a8e0:	1000071e 	bne	r2,zero,3a900 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   3a8e4:	e13ffe17 	ldw	r4,-8(fp)
   3a8e8:	003a6c80 	call	3a6c8 <altera_avalon_fifo_read_level>
   3a8ec:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   3a8f0:	e0bffd17 	ldw	r2,-12(fp)
   3a8f4:	10c00037 	ldwio	r3,0(r2)
   3a8f8:	e0bfff17 	ldw	r2,-4(fp)
   3a8fc:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   3a900:	e0bffc17 	ldw	r2,-16(fp)
}
   3a904:	e037883a 	mov	sp,fp
   3a908:	dfc00117 	ldw	ra,4(sp)
   3a90c:	df000017 	ldw	fp,0(sp)
   3a910:	dec00204 	addi	sp,sp,8
   3a914:	f800283a 	ret

0003a918 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   3a918:	defffc04 	addi	sp,sp,-16
   3a91c:	dfc00315 	stw	ra,12(sp)
   3a920:	df000215 	stw	fp,8(sp)
   3a924:	df000204 	addi	fp,sp,8
   3a928:	e13ffe15 	stw	r4,-8(fp)
   3a92c:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   3a930:	e13fff17 	ldw	r4,-4(fp)
   3a934:	01400084 	movi	r5,2
   3a938:	003a5bc0 	call	3a5bc <altera_avalon_fifo_read_status>
   3a93c:	1000031e 	bne	r2,zero,3a94c <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   3a940:	e0bffe17 	ldw	r2,-8(fp)
   3a944:	10800037 	ldwio	r2,0(r2)
   3a948:	00000106 	br	3a950 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   3a94c:	0005883a 	mov	r2,zero
}
   3a950:	e037883a 	mov	sp,fp
   3a954:	dfc00117 	ldw	ra,4(sp)
   3a958:	df000017 	ldw	fp,0(sp)
   3a95c:	dec00204 	addi	sp,sp,8
   3a960:	f800283a 	ret

0003a964 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   3a964:	defffb04 	addi	sp,sp,-20
   3a968:	dfc00415 	stw	ra,16(sp)
   3a96c:	df000315 	stw	fp,12(sp)
   3a970:	df000304 	addi	fp,sp,12
   3a974:	e13ffd15 	stw	r4,-12(fp)
   3a978:	e17ffe15 	stw	r5,-8(fp)
   3a97c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   3a980:	e13ffe17 	ldw	r4,-8(fp)
   3a984:	01400044 	movi	r5,1
   3a988:	003a5bc0 	call	3a5bc <altera_avalon_fifo_read_status>
   3a98c:	1000061e 	bne	r2,zero,3a9a8 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   3a990:	e0bffd17 	ldw	r2,-12(fp)
   3a994:	10800104 	addi	r2,r2,4
   3a998:	e0ffff17 	ldw	r3,-4(fp)
   3a99c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   3a9a0:	0005883a 	mov	r2,zero
   3a9a4:	00000106 	br	3a9ac <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   3a9a8:	00bfff04 	movi	r2,-4
    }
}
   3a9ac:	e037883a 	mov	sp,fp
   3a9b0:	dfc00117 	ldw	ra,4(sp)
   3a9b4:	df000017 	ldw	fp,0(sp)
   3a9b8:	dec00204 	addi	sp,sp,8
   3a9bc:	f800283a 	ret

0003a9c0 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   3a9c0:	defffe04 	addi	sp,sp,-8
   3a9c4:	df000115 	stw	fp,4(sp)
   3a9c8:	df000104 	addi	fp,sp,4
   3a9cc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   3a9d0:	e0bfff17 	ldw	r2,-4(fp)
   3a9d4:	10800104 	addi	r2,r2,4
   3a9d8:	10800037 	ldwio	r2,0(r2)
}
   3a9dc:	e037883a 	mov	sp,fp
   3a9e0:	df000017 	ldw	fp,0(sp)
   3a9e4:	dec00104 	addi	sp,sp,4
   3a9e8:	f800283a 	ret

0003a9ec <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   3a9ec:	defffe04 	addi	sp,sp,-8
   3a9f0:	df000115 	stw	fp,4(sp)
   3a9f4:	df000104 	addi	fp,sp,4
   3a9f8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   3a9fc:	e0bfff17 	ldw	r2,-4(fp)
   3aa00:	10800037 	ldwio	r2,0(r2)
}
   3aa04:	e037883a 	mov	sp,fp
   3aa08:	df000017 	ldw	fp,0(sp)
   3aa0c:	dec00104 	addi	sp,sp,4
   3aa10:	f800283a 	ret

0003aa14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   3aa14:	defffa04 	addi	sp,sp,-24
   3aa18:	dfc00515 	stw	ra,20(sp)
   3aa1c:	df000415 	stw	fp,16(sp)
   3aa20:	df000404 	addi	fp,sp,16
   3aa24:	e13ffd15 	stw	r4,-12(fp)
   3aa28:	e17ffe15 	stw	r5,-8(fp)
   3aa2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3aa30:	e0bffd17 	ldw	r2,-12(fp)
   3aa34:	10800017 	ldw	r2,0(r2)
   3aa38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3aa3c:	e0bffc17 	ldw	r2,-16(fp)
   3aa40:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   3aa44:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3aa48:	10800217 	ldw	r2,8(r2)
   3aa4c:	1809883a 	mov	r4,r3
   3aa50:	e17ffe17 	ldw	r5,-8(fp)
   3aa54:	e1bfff17 	ldw	r6,-4(fp)
   3aa58:	100f883a 	mov	r7,r2
   3aa5c:	003b03c0 	call	3b03c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   3aa60:	e037883a 	mov	sp,fp
   3aa64:	dfc00117 	ldw	ra,4(sp)
   3aa68:	df000017 	ldw	fp,0(sp)
   3aa6c:	dec00204 	addi	sp,sp,8
   3aa70:	f800283a 	ret

0003aa74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   3aa74:	defffa04 	addi	sp,sp,-24
   3aa78:	dfc00515 	stw	ra,20(sp)
   3aa7c:	df000415 	stw	fp,16(sp)
   3aa80:	df000404 	addi	fp,sp,16
   3aa84:	e13ffd15 	stw	r4,-12(fp)
   3aa88:	e17ffe15 	stw	r5,-8(fp)
   3aa8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3aa90:	e0bffd17 	ldw	r2,-12(fp)
   3aa94:	10800017 	ldw	r2,0(r2)
   3aa98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3aa9c:	e0bffc17 	ldw	r2,-16(fp)
   3aaa0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   3aaa4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3aaa8:	10800217 	ldw	r2,8(r2)
   3aaac:	1809883a 	mov	r4,r3
   3aab0:	e17ffe17 	ldw	r5,-8(fp)
   3aab4:	e1bfff17 	ldw	r6,-4(fp)
   3aab8:	100f883a 	mov	r7,r2
   3aabc:	003b2540 	call	3b254 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   3aac0:	e037883a 	mov	sp,fp
   3aac4:	dfc00117 	ldw	ra,4(sp)
   3aac8:	df000017 	ldw	fp,0(sp)
   3aacc:	dec00204 	addi	sp,sp,8
   3aad0:	f800283a 	ret

0003aad4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   3aad4:	defffc04 	addi	sp,sp,-16
   3aad8:	dfc00315 	stw	ra,12(sp)
   3aadc:	df000215 	stw	fp,8(sp)
   3aae0:	df000204 	addi	fp,sp,8
   3aae4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3aae8:	e0bfff17 	ldw	r2,-4(fp)
   3aaec:	10800017 	ldw	r2,0(r2)
   3aaf0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   3aaf4:	e0bffe17 	ldw	r2,-8(fp)
   3aaf8:	10c00a04 	addi	r3,r2,40
   3aafc:	e0bfff17 	ldw	r2,-4(fp)
   3ab00:	10800217 	ldw	r2,8(r2)
   3ab04:	1809883a 	mov	r4,r3
   3ab08:	100b883a 	mov	r5,r2
   3ab0c:	003aee00 	call	3aee0 <altera_avalon_jtag_uart_close>
}
   3ab10:	e037883a 	mov	sp,fp
   3ab14:	dfc00117 	ldw	ra,4(sp)
   3ab18:	df000017 	ldw	fp,0(sp)
   3ab1c:	dec00204 	addi	sp,sp,8
   3ab20:	f800283a 	ret

0003ab24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   3ab24:	defffa04 	addi	sp,sp,-24
   3ab28:	dfc00515 	stw	ra,20(sp)
   3ab2c:	df000415 	stw	fp,16(sp)
   3ab30:	df000404 	addi	fp,sp,16
   3ab34:	e13ffd15 	stw	r4,-12(fp)
   3ab38:	e17ffe15 	stw	r5,-8(fp)
   3ab3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   3ab40:	e0bffd17 	ldw	r2,-12(fp)
   3ab44:	10800017 	ldw	r2,0(r2)
   3ab48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   3ab4c:	e0bffc17 	ldw	r2,-16(fp)
   3ab50:	10800a04 	addi	r2,r2,40
   3ab54:	1009883a 	mov	r4,r2
   3ab58:	e17ffe17 	ldw	r5,-8(fp)
   3ab5c:	e1bfff17 	ldw	r6,-4(fp)
   3ab60:	003af480 	call	3af48 <altera_avalon_jtag_uart_ioctl>
}
   3ab64:	e037883a 	mov	sp,fp
   3ab68:	dfc00117 	ldw	ra,4(sp)
   3ab6c:	df000017 	ldw	fp,0(sp)
   3ab70:	dec00204 	addi	sp,sp,8
   3ab74:	f800283a 	ret

0003ab78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   3ab78:	defffa04 	addi	sp,sp,-24
   3ab7c:	dfc00515 	stw	ra,20(sp)
   3ab80:	df000415 	stw	fp,16(sp)
   3ab84:	df000404 	addi	fp,sp,16
   3ab88:	e13ffd15 	stw	r4,-12(fp)
   3ab8c:	e17ffe15 	stw	r5,-8(fp)
   3ab90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3ab94:	e0bffd17 	ldw	r2,-12(fp)
   3ab98:	00c00044 	movi	r3,1
   3ab9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   3aba0:	e0bffd17 	ldw	r2,-12(fp)
   3aba4:	10800017 	ldw	r2,0(r2)
   3aba8:	10800104 	addi	r2,r2,4
   3abac:	e0fffd17 	ldw	r3,-12(fp)
   3abb0:	18c00817 	ldw	r3,32(r3)
   3abb4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   3abb8:	e0fffe17 	ldw	r3,-8(fp)
   3abbc:	e0bfff17 	ldw	r2,-4(fp)
   3abc0:	d8000015 	stw	zero,0(sp)
   3abc4:	1809883a 	mov	r4,r3
   3abc8:	100b883a 	mov	r5,r2
   3abcc:	01800134 	movhi	r6,4
   3abd0:	31ab0e04 	addi	r6,r6,-21448
   3abd4:	e1fffd17 	ldw	r7,-12(fp)
   3abd8:	003b8940 	call	3b894 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   3abdc:	e0bffd17 	ldw	r2,-12(fp)
   3abe0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   3abe4:	e0bffd17 	ldw	r2,-12(fp)
   3abe8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3abec:	00800034 	movhi	r2,0
   3abf0:	10877c04 	addi	r2,r2,7664
   3abf4:	10800017 	ldw	r2,0(r2)
   3abf8:	1809883a 	mov	r4,r3
   3abfc:	100b883a 	mov	r5,r2
   3ac00:	01800134 	movhi	r6,4
   3ac04:	31ab8f04 	addi	r6,r6,-20932
   3ac08:	e1fffd17 	ldw	r7,-12(fp)
   3ac0c:	003b5740 	call	3b574 <alt_alarm_start>
   3ac10:	1000040e 	bge	r2,zero,3ac24 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   3ac14:	e0bffd17 	ldw	r2,-12(fp)
   3ac18:	00e00034 	movhi	r3,32768
   3ac1c:	18ffffc4 	addi	r3,r3,-1
   3ac20:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   3ac24:	e037883a 	mov	sp,fp
   3ac28:	dfc00117 	ldw	ra,4(sp)
   3ac2c:	df000017 	ldw	fp,0(sp)
   3ac30:	dec00204 	addi	sp,sp,8
   3ac34:	f800283a 	ret

0003ac38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   3ac38:	defff804 	addi	sp,sp,-32
   3ac3c:	df000715 	stw	fp,28(sp)
   3ac40:	df000704 	addi	fp,sp,28
   3ac44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   3ac48:	e0bfff17 	ldw	r2,-4(fp)
   3ac4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   3ac50:	e0bffb17 	ldw	r2,-20(fp)
   3ac54:	10800017 	ldw	r2,0(r2)
   3ac58:	e0bffc15 	stw	r2,-16(fp)
   3ac5c:	00000106 	br	3ac64 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   3ac60:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ac64:	e0bffc17 	ldw	r2,-16(fp)
   3ac68:	10800104 	addi	r2,r2,4
   3ac6c:	10800037 	ldwio	r2,0(r2)
   3ac70:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   3ac74:	e0bffd17 	ldw	r2,-12(fp)
   3ac78:	1080c00c 	andi	r2,r2,768
   3ac7c:	10006a26 	beq	r2,zero,3ae28 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   3ac80:	e0bffd17 	ldw	r2,-12(fp)
   3ac84:	1080400c 	andi	r2,r2,256
   3ac88:	10003326 	beq	r2,zero,3ad58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   3ac8c:	00800074 	movhi	r2,1
   3ac90:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3ac94:	e0bffb17 	ldw	r2,-20(fp)
   3ac98:	10800a17 	ldw	r2,40(r2)
   3ac9c:	10800044 	addi	r2,r2,1
   3aca0:	1081ffcc 	andi	r2,r2,2047
   3aca4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   3aca8:	e0bffb17 	ldw	r2,-20(fp)
   3acac:	10c00b17 	ldw	r3,44(r2)
   3acb0:	e0bffe17 	ldw	r2,-8(fp)
   3acb4:	18801426 	beq	r3,r2,3ad08 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   3acb8:	e0bffc17 	ldw	r2,-16(fp)
   3acbc:	10800037 	ldwio	r2,0(r2)
   3acc0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   3acc4:	e0bff917 	ldw	r2,-28(fp)
   3acc8:	10a0000c 	andi	r2,r2,32768
   3accc:	10001026 	beq	r2,zero,3ad10 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   3acd0:	e0bffb17 	ldw	r2,-20(fp)
   3acd4:	10800a17 	ldw	r2,40(r2)
   3acd8:	e0fff917 	ldw	r3,-28(fp)
   3acdc:	e13ffb17 	ldw	r4,-20(fp)
   3ace0:	2085883a 	add	r2,r4,r2
   3ace4:	10800e04 	addi	r2,r2,56
   3ace8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3acec:	e0bffb17 	ldw	r2,-20(fp)
   3acf0:	10800a17 	ldw	r2,40(r2)
   3acf4:	10800044 	addi	r2,r2,1
   3acf8:	10c1ffcc 	andi	r3,r2,2047
   3acfc:	e0bffb17 	ldw	r2,-20(fp)
   3ad00:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   3ad04:	003fe306 	br	3ac94 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   3ad08:	0001883a 	nop
   3ad0c:	00000106 	br	3ad14 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   3ad10:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   3ad14:	e0bff917 	ldw	r2,-28(fp)
   3ad18:	10bfffec 	andhi	r2,r2,65535
   3ad1c:	10000e26 	beq	r2,zero,3ad58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3ad20:	e0bffb17 	ldw	r2,-20(fp)
   3ad24:	10c00817 	ldw	r3,32(r2)
   3ad28:	00bfff84 	movi	r2,-2
   3ad2c:	1886703a 	and	r3,r3,r2
   3ad30:	e0bffb17 	ldw	r2,-20(fp)
   3ad34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   3ad38:	e0bffc17 	ldw	r2,-16(fp)
   3ad3c:	10800104 	addi	r2,r2,4
   3ad40:	e0fffb17 	ldw	r3,-20(fp)
   3ad44:	18c00817 	ldw	r3,32(r3)
   3ad48:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ad4c:	e0bffc17 	ldw	r2,-16(fp)
   3ad50:	10800104 	addi	r2,r2,4
   3ad54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3ad58:	e0bffd17 	ldw	r2,-12(fp)
   3ad5c:	1080800c 	andi	r2,r2,512
   3ad60:	103fbf26 	beq	r2,zero,3ac60 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   3ad64:	e0bffd17 	ldw	r2,-12(fp)
   3ad68:	1004d43a 	srli	r2,r2,16
   3ad6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   3ad70:	00001406 	br	3adc4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   3ad74:	e0bffc17 	ldw	r2,-16(fp)
   3ad78:	e0fffb17 	ldw	r3,-20(fp)
   3ad7c:	18c00d17 	ldw	r3,52(r3)
   3ad80:	e13ffb17 	ldw	r4,-20(fp)
   3ad84:	20c7883a 	add	r3,r4,r3
   3ad88:	18c20e04 	addi	r3,r3,2104
   3ad8c:	18c00003 	ldbu	r3,0(r3)
   3ad90:	18c03fcc 	andi	r3,r3,255
   3ad94:	18c0201c 	xori	r3,r3,128
   3ad98:	18ffe004 	addi	r3,r3,-128
   3ad9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3ada0:	e0bffb17 	ldw	r2,-20(fp)
   3ada4:	10800d17 	ldw	r2,52(r2)
   3ada8:	10800044 	addi	r2,r2,1
   3adac:	10c1ffcc 	andi	r3,r2,2047
   3adb0:	e0bffb17 	ldw	r2,-20(fp)
   3adb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   3adb8:	e0bffa17 	ldw	r2,-24(fp)
   3adbc:	10bfffc4 	addi	r2,r2,-1
   3adc0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   3adc4:	e0bffa17 	ldw	r2,-24(fp)
   3adc8:	10000526 	beq	r2,zero,3ade0 <altera_avalon_jtag_uart_irq+0x1a8>
   3adcc:	e0bffb17 	ldw	r2,-20(fp)
   3add0:	10c00d17 	ldw	r3,52(r2)
   3add4:	e0bffb17 	ldw	r2,-20(fp)
   3add8:	10800c17 	ldw	r2,48(r2)
   3addc:	18bfe51e 	bne	r3,r2,3ad74 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   3ade0:	e0bffa17 	ldw	r2,-24(fp)
   3ade4:	103f9e26 	beq	r2,zero,3ac60 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3ade8:	e0bffb17 	ldw	r2,-20(fp)
   3adec:	10c00817 	ldw	r3,32(r2)
   3adf0:	00bfff44 	movi	r2,-3
   3adf4:	1886703a 	and	r3,r3,r2
   3adf8:	e0bffb17 	ldw	r2,-20(fp)
   3adfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3ae00:	e0bffb17 	ldw	r2,-20(fp)
   3ae04:	10800017 	ldw	r2,0(r2)
   3ae08:	10800104 	addi	r2,r2,4
   3ae0c:	e0fffb17 	ldw	r3,-20(fp)
   3ae10:	18c00817 	ldw	r3,32(r3)
   3ae14:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ae18:	e0bffc17 	ldw	r2,-16(fp)
   3ae1c:	10800104 	addi	r2,r2,4
   3ae20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   3ae24:	003f8e06 	br	3ac60 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   3ae28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   3ae2c:	e037883a 	mov	sp,fp
   3ae30:	df000017 	ldw	fp,0(sp)
   3ae34:	dec00104 	addi	sp,sp,4
   3ae38:	f800283a 	ret

0003ae3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   3ae3c:	defffc04 	addi	sp,sp,-16
   3ae40:	df000315 	stw	fp,12(sp)
   3ae44:	df000304 	addi	fp,sp,12
   3ae48:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   3ae4c:	e0bfff17 	ldw	r2,-4(fp)
   3ae50:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3ae54:	e0bffd17 	ldw	r2,-12(fp)
   3ae58:	10800017 	ldw	r2,0(r2)
   3ae5c:	10800104 	addi	r2,r2,4
   3ae60:	10800037 	ldwio	r2,0(r2)
   3ae64:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   3ae68:	e0bffe17 	ldw	r2,-8(fp)
   3ae6c:	1081000c 	andi	r2,r2,1024
   3ae70:	10000a26 	beq	r2,zero,3ae9c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   3ae74:	e0bffd17 	ldw	r2,-12(fp)
   3ae78:	10800017 	ldw	r2,0(r2)
   3ae7c:	10800104 	addi	r2,r2,4
   3ae80:	e0fffd17 	ldw	r3,-12(fp)
   3ae84:	18c00817 	ldw	r3,32(r3)
   3ae88:	18c10014 	ori	r3,r3,1024
   3ae8c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   3ae90:	e0bffd17 	ldw	r2,-12(fp)
   3ae94:	10000915 	stw	zero,36(r2)
   3ae98:	00000a06 	br	3aec4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   3ae9c:	e0bffd17 	ldw	r2,-12(fp)
   3aea0:	10800917 	ldw	r2,36(r2)
   3aea4:	00e00034 	movhi	r3,32768
   3aea8:	18ffff04 	addi	r3,r3,-4
   3aeac:	18800536 	bltu	r3,r2,3aec4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   3aeb0:	e0bffd17 	ldw	r2,-12(fp)
   3aeb4:	10800917 	ldw	r2,36(r2)
   3aeb8:	10c00044 	addi	r3,r2,1
   3aebc:	e0bffd17 	ldw	r2,-12(fp)
   3aec0:	10c00915 	stw	r3,36(r2)
   3aec4:	00800034 	movhi	r2,0
   3aec8:	10877c04 	addi	r2,r2,7664
   3aecc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   3aed0:	e037883a 	mov	sp,fp
   3aed4:	df000017 	ldw	fp,0(sp)
   3aed8:	dec00104 	addi	sp,sp,4
   3aedc:	f800283a 	ret

0003aee0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   3aee0:	defffd04 	addi	sp,sp,-12
   3aee4:	df000215 	stw	fp,8(sp)
   3aee8:	df000204 	addi	fp,sp,8
   3aeec:	e13ffe15 	stw	r4,-8(fp)
   3aef0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3aef4:	00000506 	br	3af0c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   3aef8:	e0bfff17 	ldw	r2,-4(fp)
   3aefc:	1090000c 	andi	r2,r2,16384
   3af00:	10000226 	beq	r2,zero,3af0c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3af04:	00bffd44 	movi	r2,-11
   3af08:	00000b06 	br	3af38 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3af0c:	e0bffe17 	ldw	r2,-8(fp)
   3af10:	10c00d17 	ldw	r3,52(r2)
   3af14:	e0bffe17 	ldw	r2,-8(fp)
   3af18:	10800c17 	ldw	r2,48(r2)
   3af1c:	18800526 	beq	r3,r2,3af34 <altera_avalon_jtag_uart_close+0x54>
   3af20:	e0bffe17 	ldw	r2,-8(fp)
   3af24:	10c00917 	ldw	r3,36(r2)
   3af28:	e0bffe17 	ldw	r2,-8(fp)
   3af2c:	10800117 	ldw	r2,4(r2)
   3af30:	18bff136 	bltu	r3,r2,3aef8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3af34:	0005883a 	mov	r2,zero
}
   3af38:	e037883a 	mov	sp,fp
   3af3c:	df000017 	ldw	fp,0(sp)
   3af40:	dec00104 	addi	sp,sp,4
   3af44:	f800283a 	ret

0003af48 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3af48:	defffa04 	addi	sp,sp,-24
   3af4c:	df000515 	stw	fp,20(sp)
   3af50:	df000504 	addi	fp,sp,20
   3af54:	e13ffd15 	stw	r4,-12(fp)
   3af58:	e17ffe15 	stw	r5,-8(fp)
   3af5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   3af60:	00bff9c4 	movi	r2,-25
   3af64:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   3af68:	e0bffe17 	ldw	r2,-8(fp)
   3af6c:	10da8060 	cmpeqi	r3,r2,27137
   3af70:	1800031e 	bne	r3,zero,3af80 <altera_avalon_jtag_uart_ioctl+0x38>
   3af74:	109a80a0 	cmpeqi	r2,r2,27138
   3af78:	1000181e 	bne	r2,zero,3afdc <altera_avalon_jtag_uart_ioctl+0x94>
   3af7c:	00002606 	br	3b018 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   3af80:	e0bffd17 	ldw	r2,-12(fp)
   3af84:	10c00117 	ldw	r3,4(r2)
   3af88:	00a00034 	movhi	r2,32768
   3af8c:	10bfffc4 	addi	r2,r2,-1
   3af90:	18802226 	beq	r3,r2,3b01c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   3af94:	e0bfff17 	ldw	r2,-4(fp)
   3af98:	10800017 	ldw	r2,0(r2)
   3af9c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   3afa0:	e0bffc17 	ldw	r2,-16(fp)
   3afa4:	10800090 	cmplti	r2,r2,2
   3afa8:	1000061e 	bne	r2,zero,3afc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   3afac:	e0fffc17 	ldw	r3,-16(fp)
   3afb0:	00a00034 	movhi	r2,32768
   3afb4:	10bfffc4 	addi	r2,r2,-1
   3afb8:	18800226 	beq	r3,r2,3afc4 <altera_avalon_jtag_uart_ioctl+0x7c>
   3afbc:	e0bffc17 	ldw	r2,-16(fp)
   3afc0:	00000206 	br	3afcc <altera_avalon_jtag_uart_ioctl+0x84>
   3afc4:	00a00034 	movhi	r2,32768
   3afc8:	10bfff84 	addi	r2,r2,-2
   3afcc:	e0fffd17 	ldw	r3,-12(fp)
   3afd0:	18800115 	stw	r2,4(r3)
      rc = 0;
   3afd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3afd8:	00001006 	br	3b01c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   3afdc:	e0bffd17 	ldw	r2,-12(fp)
   3afe0:	10c00117 	ldw	r3,4(r2)
   3afe4:	00a00034 	movhi	r2,32768
   3afe8:	10bfffc4 	addi	r2,r2,-1
   3afec:	18800d26 	beq	r3,r2,3b024 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   3aff0:	e0bffd17 	ldw	r2,-12(fp)
   3aff4:	10c00917 	ldw	r3,36(r2)
   3aff8:	e0bffd17 	ldw	r2,-12(fp)
   3affc:	10800117 	ldw	r2,4(r2)
   3b000:	1885803a 	cmpltu	r2,r3,r2
   3b004:	10c03fcc 	andi	r3,r2,255
   3b008:	e0bfff17 	ldw	r2,-4(fp)
   3b00c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   3b010:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3b014:	00000306 	br	3b024 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   3b018:	00000306 	br	3b028 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   3b01c:	0001883a 	nop
   3b020:	00000106 	br	3b028 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   3b024:	0001883a 	nop

  default:
    break;
  }

  return rc;
   3b028:	e0bffb17 	ldw	r2,-20(fp)
}
   3b02c:	e037883a 	mov	sp,fp
   3b030:	df000017 	ldw	fp,0(sp)
   3b034:	dec00104 	addi	sp,sp,4
   3b038:	f800283a 	ret

0003b03c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3b03c:	defff304 	addi	sp,sp,-52
   3b040:	dfc00c15 	stw	ra,48(sp)
   3b044:	df000b15 	stw	fp,44(sp)
   3b048:	df000b04 	addi	fp,sp,44
   3b04c:	e13ffc15 	stw	r4,-16(fp)
   3b050:	e17ffd15 	stw	r5,-12(fp)
   3b054:	e1bffe15 	stw	r6,-8(fp)
   3b058:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   3b05c:	e0bffd17 	ldw	r2,-12(fp)
   3b060:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3b064:	00004706 	br	3b184 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3b068:	e0bffc17 	ldw	r2,-16(fp)
   3b06c:	10800a17 	ldw	r2,40(r2)
   3b070:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   3b074:	e0bffc17 	ldw	r2,-16(fp)
   3b078:	10800b17 	ldw	r2,44(r2)
   3b07c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   3b080:	e0fff717 	ldw	r3,-36(fp)
   3b084:	e0bff817 	ldw	r2,-32(fp)
   3b088:	18800536 	bltu	r3,r2,3b0a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   3b08c:	e0fff717 	ldw	r3,-36(fp)
   3b090:	e0bff817 	ldw	r2,-32(fp)
   3b094:	1885c83a 	sub	r2,r3,r2
   3b098:	e0bff615 	stw	r2,-40(fp)
   3b09c:	00000406 	br	3b0b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   3b0a0:	00c20004 	movi	r3,2048
   3b0a4:	e0bff817 	ldw	r2,-32(fp)
   3b0a8:	1885c83a 	sub	r2,r3,r2
   3b0ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3b0b0:	e0bff617 	ldw	r2,-40(fp)
   3b0b4:	10001e26 	beq	r2,zero,3b130 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   3b0b8:	e0fffe17 	ldw	r3,-8(fp)
   3b0bc:	e0bff617 	ldw	r2,-40(fp)
   3b0c0:	1880022e 	bgeu	r3,r2,3b0cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   3b0c4:	e0bffe17 	ldw	r2,-8(fp)
   3b0c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   3b0cc:	e0bff817 	ldw	r2,-32(fp)
   3b0d0:	10800e04 	addi	r2,r2,56
   3b0d4:	e0fffc17 	ldw	r3,-16(fp)
   3b0d8:	1885883a 	add	r2,r3,r2
   3b0dc:	e13ff517 	ldw	r4,-44(fp)
   3b0e0:	100b883a 	mov	r5,r2
   3b0e4:	e1bff617 	ldw	r6,-40(fp)
   3b0e8:	00358200 	call	35820 <memcpy>
      ptr   += n;
   3b0ec:	e0fff517 	ldw	r3,-44(fp)
   3b0f0:	e0bff617 	ldw	r2,-40(fp)
   3b0f4:	1885883a 	add	r2,r3,r2
   3b0f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   3b0fc:	e0fffe17 	ldw	r3,-8(fp)
   3b100:	e0bff617 	ldw	r2,-40(fp)
   3b104:	1885c83a 	sub	r2,r3,r2
   3b108:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b10c:	e0fff817 	ldw	r3,-32(fp)
   3b110:	e0bff617 	ldw	r2,-40(fp)
   3b114:	1885883a 	add	r2,r3,r2
   3b118:	10c1ffcc 	andi	r3,r2,2047
   3b11c:	e0bffc17 	ldw	r2,-16(fp)
   3b120:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   3b124:	e0bffe17 	ldw	r2,-8(fp)
   3b128:	00bfcf16 	blt	zero,r2,3b068 <altera_avalon_jtag_uart_read+0x2c>
   3b12c:	00000106 	br	3b134 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   3b130:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   3b134:	e0fff517 	ldw	r3,-44(fp)
   3b138:	e0bffd17 	ldw	r2,-12(fp)
   3b13c:	1880141e 	bne	r3,r2,3b190 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   3b140:	e0bfff17 	ldw	r2,-4(fp)
   3b144:	1090000c 	andi	r2,r2,16384
   3b148:	1000131e 	bne	r2,zero,3b198 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3b14c:	0001883a 	nop
   3b150:	e0bffc17 	ldw	r2,-16(fp)
   3b154:	10c00a17 	ldw	r3,40(r2)
   3b158:	e0bff717 	ldw	r2,-36(fp)
   3b15c:	1880051e 	bne	r3,r2,3b174 <altera_avalon_jtag_uart_read+0x138>
   3b160:	e0bffc17 	ldw	r2,-16(fp)
   3b164:	10c00917 	ldw	r3,36(r2)
   3b168:	e0bffc17 	ldw	r2,-16(fp)
   3b16c:	10800117 	ldw	r2,4(r2)
   3b170:	18bff736 	bltu	r3,r2,3b150 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   3b174:	e0bffc17 	ldw	r2,-16(fp)
   3b178:	10c00a17 	ldw	r3,40(r2)
   3b17c:	e0bff717 	ldw	r2,-36(fp)
   3b180:	18800726 	beq	r3,r2,3b1a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3b184:	e0bffe17 	ldw	r2,-8(fp)
   3b188:	00bfb716 	blt	zero,r2,3b068 <altera_avalon_jtag_uart_read+0x2c>
   3b18c:	00000506 	br	3b1a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   3b190:	0001883a 	nop
   3b194:	00000306 	br	3b1a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   3b198:	0001883a 	nop
   3b19c:	00000106 	br	3b1a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   3b1a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   3b1a4:	e0fff517 	ldw	r3,-44(fp)
   3b1a8:	e0bffd17 	ldw	r2,-12(fp)
   3b1ac:	18801726 	beq	r3,r2,3b20c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b1b0:	0005303a 	rdctl	r2,status
   3b1b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b1b8:	e0fffa17 	ldw	r3,-24(fp)
   3b1bc:	00bfff84 	movi	r2,-2
   3b1c0:	1884703a 	and	r2,r3,r2
   3b1c4:	1001703a 	wrctl	status,r2
  
  return context;
   3b1c8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   3b1cc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3b1d0:	e0bffc17 	ldw	r2,-16(fp)
   3b1d4:	10800817 	ldw	r2,32(r2)
   3b1d8:	10c00054 	ori	r3,r2,1
   3b1dc:	e0bffc17 	ldw	r2,-16(fp)
   3b1e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b1e4:	e0bffc17 	ldw	r2,-16(fp)
   3b1e8:	10800017 	ldw	r2,0(r2)
   3b1ec:	10800104 	addi	r2,r2,4
   3b1f0:	e0fffc17 	ldw	r3,-16(fp)
   3b1f4:	18c00817 	ldw	r3,32(r3)
   3b1f8:	10c00035 	stwio	r3,0(r2)
   3b1fc:	e0bff917 	ldw	r2,-28(fp)
   3b200:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b204:	e0bffb17 	ldw	r2,-20(fp)
   3b208:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   3b20c:	e0fff517 	ldw	r3,-44(fp)
   3b210:	e0bffd17 	ldw	r2,-12(fp)
   3b214:	18800426 	beq	r3,r2,3b228 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   3b218:	e0fff517 	ldw	r3,-44(fp)
   3b21c:	e0bffd17 	ldw	r2,-12(fp)
   3b220:	1885c83a 	sub	r2,r3,r2
   3b224:	00000606 	br	3b240 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   3b228:	e0bfff17 	ldw	r2,-4(fp)
   3b22c:	1090000c 	andi	r2,r2,16384
   3b230:	10000226 	beq	r2,zero,3b23c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   3b234:	00bffd44 	movi	r2,-11
   3b238:	00000106 	br	3b240 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   3b23c:	00bffec4 	movi	r2,-5
}
   3b240:	e037883a 	mov	sp,fp
   3b244:	dfc00117 	ldw	ra,4(sp)
   3b248:	df000017 	ldw	fp,0(sp)
   3b24c:	dec00204 	addi	sp,sp,8
   3b250:	f800283a 	ret

0003b254 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   3b254:	defff304 	addi	sp,sp,-52
   3b258:	dfc00c15 	stw	ra,48(sp)
   3b25c:	df000b15 	stw	fp,44(sp)
   3b260:	df000b04 	addi	fp,sp,44
   3b264:	e13ffc15 	stw	r4,-16(fp)
   3b268:	e17ffd15 	stw	r5,-12(fp)
   3b26c:	e1bffe15 	stw	r6,-8(fp)
   3b270:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   3b274:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   3b278:	e0bffd17 	ldw	r2,-12(fp)
   3b27c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b280:	00003706 	br	3b360 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   3b284:	e0bffc17 	ldw	r2,-16(fp)
   3b288:	10800c17 	ldw	r2,48(r2)
   3b28c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   3b290:	e0bffc17 	ldw	r2,-16(fp)
   3b294:	10800d17 	ldw	r2,52(r2)
   3b298:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   3b29c:	e0fff817 	ldw	r3,-32(fp)
   3b2a0:	e0bff517 	ldw	r2,-44(fp)
   3b2a4:	1880062e 	bgeu	r3,r2,3b2c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   3b2a8:	e0fff517 	ldw	r3,-44(fp)
   3b2ac:	e0bff817 	ldw	r2,-32(fp)
   3b2b0:	1885c83a 	sub	r2,r3,r2
   3b2b4:	10bfffc4 	addi	r2,r2,-1
   3b2b8:	e0bff615 	stw	r2,-40(fp)
   3b2bc:	00000b06 	br	3b2ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   3b2c0:	e0bff517 	ldw	r2,-44(fp)
   3b2c4:	10000526 	beq	r2,zero,3b2dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   3b2c8:	00c20004 	movi	r3,2048
   3b2cc:	e0bff817 	ldw	r2,-32(fp)
   3b2d0:	1885c83a 	sub	r2,r3,r2
   3b2d4:	e0bff615 	stw	r2,-40(fp)
   3b2d8:	00000406 	br	3b2ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   3b2dc:	00c1ffc4 	movi	r3,2047
   3b2e0:	e0bff817 	ldw	r2,-32(fp)
   3b2e4:	1885c83a 	sub	r2,r3,r2
   3b2e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3b2ec:	e0bff617 	ldw	r2,-40(fp)
   3b2f0:	10001e26 	beq	r2,zero,3b36c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   3b2f4:	e0fffe17 	ldw	r3,-8(fp)
   3b2f8:	e0bff617 	ldw	r2,-40(fp)
   3b2fc:	1880022e 	bgeu	r3,r2,3b308 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   3b300:	e0bffe17 	ldw	r2,-8(fp)
   3b304:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   3b308:	e0bff817 	ldw	r2,-32(fp)
   3b30c:	10820e04 	addi	r2,r2,2104
   3b310:	e0fffc17 	ldw	r3,-16(fp)
   3b314:	1885883a 	add	r2,r3,r2
   3b318:	1009883a 	mov	r4,r2
   3b31c:	e17ffd17 	ldw	r5,-12(fp)
   3b320:	e1bff617 	ldw	r6,-40(fp)
   3b324:	00358200 	call	35820 <memcpy>
      ptr   += n;
   3b328:	e0fffd17 	ldw	r3,-12(fp)
   3b32c:	e0bff617 	ldw	r2,-40(fp)
   3b330:	1885883a 	add	r2,r3,r2
   3b334:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   3b338:	e0fffe17 	ldw	r3,-8(fp)
   3b33c:	e0bff617 	ldw	r2,-40(fp)
   3b340:	1885c83a 	sub	r2,r3,r2
   3b344:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b348:	e0fff817 	ldw	r3,-32(fp)
   3b34c:	e0bff617 	ldw	r2,-40(fp)
   3b350:	1885883a 	add	r2,r3,r2
   3b354:	10c1ffcc 	andi	r3,r2,2047
   3b358:	e0bffc17 	ldw	r2,-16(fp)
   3b35c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b360:	e0bffe17 	ldw	r2,-8(fp)
   3b364:	00bfc716 	blt	zero,r2,3b284 <altera_avalon_jtag_uart_write+0x30>
   3b368:	00000106 	br	3b370 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   3b36c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b370:	0005303a 	rdctl	r2,status
   3b374:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b378:	e0fffa17 	ldw	r3,-24(fp)
   3b37c:	00bfff84 	movi	r2,-2
   3b380:	1884703a 	and	r2,r3,r2
   3b384:	1001703a 	wrctl	status,r2
  
  return context;
   3b388:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   3b38c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3b390:	e0bffc17 	ldw	r2,-16(fp)
   3b394:	10800817 	ldw	r2,32(r2)
   3b398:	10c00094 	ori	r3,r2,2
   3b39c:	e0bffc17 	ldw	r2,-16(fp)
   3b3a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b3a4:	e0bffc17 	ldw	r2,-16(fp)
   3b3a8:	10800017 	ldw	r2,0(r2)
   3b3ac:	10800104 	addi	r2,r2,4
   3b3b0:	e0fffc17 	ldw	r3,-16(fp)
   3b3b4:	18c00817 	ldw	r3,32(r3)
   3b3b8:	10c00035 	stwio	r3,0(r2)
   3b3bc:	e0bff917 	ldw	r2,-28(fp)
   3b3c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b3c4:	e0bffb17 	ldw	r2,-20(fp)
   3b3c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   3b3cc:	e0bffe17 	ldw	r2,-8(fp)
   3b3d0:	0080110e 	bge	zero,r2,3b418 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   3b3d4:	e0bfff17 	ldw	r2,-4(fp)
   3b3d8:	1090000c 	andi	r2,r2,16384
   3b3dc:	1000111e 	bne	r2,zero,3b424 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   3b3e0:	0001883a 	nop
   3b3e4:	e0bffc17 	ldw	r2,-16(fp)
   3b3e8:	10c00d17 	ldw	r3,52(r2)
   3b3ec:	e0bff517 	ldw	r2,-44(fp)
   3b3f0:	1880051e 	bne	r3,r2,3b408 <altera_avalon_jtag_uart_write+0x1b4>
   3b3f4:	e0bffc17 	ldw	r2,-16(fp)
   3b3f8:	10c00917 	ldw	r3,36(r2)
   3b3fc:	e0bffc17 	ldw	r2,-16(fp)
   3b400:	10800117 	ldw	r2,4(r2)
   3b404:	18bff736 	bltu	r3,r2,3b3e4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   3b408:	e0bffc17 	ldw	r2,-16(fp)
   3b40c:	10c00d17 	ldw	r3,52(r2)
   3b410:	e0bff517 	ldw	r2,-44(fp)
   3b414:	18800526 	beq	r3,r2,3b42c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   3b418:	e0bffe17 	ldw	r2,-8(fp)
   3b41c:	00bfd016 	blt	zero,r2,3b360 <altera_avalon_jtag_uart_write+0x10c>
   3b420:	00000306 	br	3b430 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   3b424:	0001883a 	nop
   3b428:	00000106 	br	3b430 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   3b42c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   3b430:	e0fffd17 	ldw	r3,-12(fp)
   3b434:	e0bff717 	ldw	r2,-36(fp)
   3b438:	18800426 	beq	r3,r2,3b44c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   3b43c:	e0fffd17 	ldw	r3,-12(fp)
   3b440:	e0bff717 	ldw	r2,-36(fp)
   3b444:	1885c83a 	sub	r2,r3,r2
   3b448:	00000606 	br	3b464 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   3b44c:	e0bfff17 	ldw	r2,-4(fp)
   3b450:	1090000c 	andi	r2,r2,16384
   3b454:	10000226 	beq	r2,zero,3b460 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   3b458:	00bffd44 	movi	r2,-11
   3b45c:	00000106 	br	3b464 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   3b460:	00bffec4 	movi	r2,-5
}
   3b464:	e037883a 	mov	sp,fp
   3b468:	dfc00117 	ldw	ra,4(sp)
   3b46c:	df000017 	ldw	fp,0(sp)
   3b470:	dec00204 	addi	sp,sp,8
   3b474:	f800283a 	ret

0003b478 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3b478:	defffa04 	addi	sp,sp,-24
   3b47c:	dfc00515 	stw	ra,20(sp)
   3b480:	df000415 	stw	fp,16(sp)
   3b484:	df000404 	addi	fp,sp,16
   3b488:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   3b48c:	0007883a 	mov	r3,zero
   3b490:	e0bfff17 	ldw	r2,-4(fp)
   3b494:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   3b498:	e0bfff17 	ldw	r2,-4(fp)
   3b49c:	10800104 	addi	r2,r2,4
   3b4a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b4a4:	0005303a 	rdctl	r2,status
   3b4a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b4ac:	e0fffd17 	ldw	r3,-12(fp)
   3b4b0:	00bfff84 	movi	r2,-2
   3b4b4:	1884703a 	and	r2,r3,r2
   3b4b8:	1001703a 	wrctl	status,r2
  
  return context;
   3b4bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   3b4c0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   3b4c4:	003bfe40 	call	3bfe4 <alt_tick>
   3b4c8:	e0bffc17 	ldw	r2,-16(fp)
   3b4cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b4d0:	e0bffe17 	ldw	r2,-8(fp)
   3b4d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   3b4d8:	e037883a 	mov	sp,fp
   3b4dc:	dfc00117 	ldw	ra,4(sp)
   3b4e0:	df000017 	ldw	fp,0(sp)
   3b4e4:	dec00204 	addi	sp,sp,8
   3b4e8:	f800283a 	ret

0003b4ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   3b4ec:	defff804 	addi	sp,sp,-32
   3b4f0:	dfc00715 	stw	ra,28(sp)
   3b4f4:	df000615 	stw	fp,24(sp)
   3b4f8:	df000604 	addi	fp,sp,24
   3b4fc:	e13ffc15 	stw	r4,-16(fp)
   3b500:	e17ffd15 	stw	r5,-12(fp)
   3b504:	e1bffe15 	stw	r6,-8(fp)
   3b508:	e1ffff15 	stw	r7,-4(fp)
   3b50c:	e0bfff17 	ldw	r2,-4(fp)
   3b510:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   3b514:	00800034 	movhi	r2,0
   3b518:	10877c04 	addi	r2,r2,7664
   3b51c:	10800017 	ldw	r2,0(r2)
   3b520:	1000041e 	bne	r2,zero,3b534 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   3b524:	00800034 	movhi	r2,0
   3b528:	10877c04 	addi	r2,r2,7664
   3b52c:	e0fffb17 	ldw	r3,-20(fp)
   3b530:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   3b534:	e0bffc17 	ldw	r2,-16(fp)
   3b538:	10800104 	addi	r2,r2,4
   3b53c:	00c001c4 	movi	r3,7
   3b540:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   3b544:	d8000015 	stw	zero,0(sp)
   3b548:	e13ffd17 	ldw	r4,-12(fp)
   3b54c:	e17ffe17 	ldw	r5,-8(fp)
   3b550:	01800134 	movhi	r6,4
   3b554:	31ad1e04 	addi	r6,r6,-19336
   3b558:	e1fffc17 	ldw	r7,-16(fp)
   3b55c:	003b8940 	call	3b894 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   3b560:	e037883a 	mov	sp,fp
   3b564:	dfc00117 	ldw	ra,4(sp)
   3b568:	df000017 	ldw	fp,0(sp)
   3b56c:	dec00204 	addi	sp,sp,8
   3b570:	f800283a 	ret

0003b574 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3b574:	defff504 	addi	sp,sp,-44
   3b578:	df000a15 	stw	fp,40(sp)
   3b57c:	df000a04 	addi	fp,sp,40
   3b580:	e13ffc15 	stw	r4,-16(fp)
   3b584:	e17ffd15 	stw	r5,-12(fp)
   3b588:	e1bffe15 	stw	r6,-8(fp)
   3b58c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   3b590:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3b594:	00800034 	movhi	r2,0
   3b598:	10877c04 	addi	r2,r2,7664
   3b59c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   3b5a0:	10003f26 	beq	r2,zero,3b6a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   3b5a4:	e0bffc17 	ldw	r2,-16(fp)
   3b5a8:	10003b26 	beq	r2,zero,3b698 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   3b5ac:	e0bffc17 	ldw	r2,-16(fp)
   3b5b0:	e0fffe17 	ldw	r3,-8(fp)
   3b5b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   3b5b8:	e0bffc17 	ldw	r2,-16(fp)
   3b5bc:	e0ffff17 	ldw	r3,-4(fp)
   3b5c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b5c4:	0005303a 	rdctl	r2,status
   3b5c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b5cc:	e0fff817 	ldw	r3,-32(fp)
   3b5d0:	00bfff84 	movi	r2,-2
   3b5d4:	1884703a 	and	r2,r3,r2
   3b5d8:	1001703a 	wrctl	status,r2
  
  return context;
   3b5dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   3b5e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   3b5e4:	00800034 	movhi	r2,0
   3b5e8:	10877d04 	addi	r2,r2,7668
   3b5ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   3b5f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3b5f4:	e0fffd17 	ldw	r3,-12(fp)
   3b5f8:	e0bff617 	ldw	r2,-40(fp)
   3b5fc:	1885883a 	add	r2,r3,r2
   3b600:	10c00044 	addi	r3,r2,1
   3b604:	e0bffc17 	ldw	r2,-16(fp)
   3b608:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   3b60c:	e0bffc17 	ldw	r2,-16(fp)
   3b610:	10c00217 	ldw	r3,8(r2)
   3b614:	e0bff617 	ldw	r2,-40(fp)
   3b618:	1880042e 	bgeu	r3,r2,3b62c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   3b61c:	e0bffc17 	ldw	r2,-16(fp)
   3b620:	00c00044 	movi	r3,1
   3b624:	10c00405 	stb	r3,16(r2)
   3b628:	00000206 	br	3b634 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   3b62c:	e0bffc17 	ldw	r2,-16(fp)
   3b630:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   3b634:	e0bffc17 	ldw	r2,-16(fp)
   3b638:	00c00034 	movhi	r3,0
   3b63c:	18c76f04 	addi	r3,r3,7612
   3b640:	e0fff915 	stw	r3,-28(fp)
   3b644:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b648:	e0bffa17 	ldw	r2,-24(fp)
   3b64c:	e0fff917 	ldw	r3,-28(fp)
   3b650:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3b654:	e0bff917 	ldw	r2,-28(fp)
   3b658:	10c00017 	ldw	r3,0(r2)
   3b65c:	e0bffa17 	ldw	r2,-24(fp)
   3b660:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b664:	e0bff917 	ldw	r2,-28(fp)
   3b668:	10800017 	ldw	r2,0(r2)
   3b66c:	e0fffa17 	ldw	r3,-24(fp)
   3b670:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3b674:	e0bff917 	ldw	r2,-28(fp)
   3b678:	e0fffa17 	ldw	r3,-24(fp)
   3b67c:	10c00015 	stw	r3,0(r2)
   3b680:	e0bff717 	ldw	r2,-36(fp)
   3b684:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b688:	e0bffb17 	ldw	r2,-20(fp)
   3b68c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   3b690:	0005883a 	mov	r2,zero
   3b694:	00000306 	br	3b6a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   3b698:	00bffa84 	movi	r2,-22
   3b69c:	00000106 	br	3b6a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   3b6a0:	00bfde84 	movi	r2,-134
  }
}
   3b6a4:	e037883a 	mov	sp,fp
   3b6a8:	df000017 	ldw	fp,0(sp)
   3b6ac:	dec00104 	addi	sp,sp,4
   3b6b0:	f800283a 	ret

0003b6b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   3b6b4:	deffff04 	addi	sp,sp,-4
   3b6b8:	df000015 	stw	fp,0(sp)
   3b6bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3b6c0:	e037883a 	mov	sp,fp
   3b6c4:	df000017 	ldw	fp,0(sp)
   3b6c8:	dec00104 	addi	sp,sp,4
   3b6cc:	f800283a 	ret

0003b6d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3b6d0:	defffe04 	addi	sp,sp,-8
   3b6d4:	dfc00115 	stw	ra,4(sp)
   3b6d8:	df000015 	stw	fp,0(sp)
   3b6dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3b6e0:	00800034 	movhi	r2,0
   3b6e4:	10876c04 	addi	r2,r2,7600
   3b6e8:	10800017 	ldw	r2,0(r2)
   3b6ec:	10000526 	beq	r2,zero,3b704 <alt_get_errno+0x34>
   3b6f0:	00800034 	movhi	r2,0
   3b6f4:	10876c04 	addi	r2,r2,7600
   3b6f8:	10800017 	ldw	r2,0(r2)
   3b6fc:	103ee83a 	callr	r2
   3b700:	00000206 	br	3b70c <alt_get_errno+0x3c>
   3b704:	00800034 	movhi	r2,0
   3b708:	10877704 	addi	r2,r2,7644
}
   3b70c:	e037883a 	mov	sp,fp
   3b710:	dfc00117 	ldw	ra,4(sp)
   3b714:	df000017 	ldw	fp,0(sp)
   3b718:	dec00204 	addi	sp,sp,8
   3b71c:	f800283a 	ret

0003b720 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   3b720:	defffa04 	addi	sp,sp,-24
   3b724:	dfc00515 	stw	ra,20(sp)
   3b728:	df000415 	stw	fp,16(sp)
   3b72c:	df000404 	addi	fp,sp,16
   3b730:	e13ffe15 	stw	r4,-8(fp)
   3b734:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3b738:	e0bffe17 	ldw	r2,-8(fp)
   3b73c:	10000326 	beq	r2,zero,3b74c <alt_dev_llist_insert+0x2c>
   3b740:	e0bffe17 	ldw	r2,-8(fp)
   3b744:	10800217 	ldw	r2,8(r2)
   3b748:	1000051e 	bne	r2,zero,3b760 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   3b74c:	003b6d00 	call	3b6d0 <alt_get_errno>
   3b750:	00c00584 	movi	r3,22
   3b754:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   3b758:	00bffa84 	movi	r2,-22
   3b75c:	00001306 	br	3b7ac <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   3b760:	e0bffe17 	ldw	r2,-8(fp)
   3b764:	e0ffff17 	ldw	r3,-4(fp)
   3b768:	e0fffc15 	stw	r3,-16(fp)
   3b76c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b770:	e0bffd17 	ldw	r2,-12(fp)
   3b774:	e0fffc17 	ldw	r3,-16(fp)
   3b778:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3b77c:	e0bffc17 	ldw	r2,-16(fp)
   3b780:	10c00017 	ldw	r3,0(r2)
   3b784:	e0bffd17 	ldw	r2,-12(fp)
   3b788:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b78c:	e0bffc17 	ldw	r2,-16(fp)
   3b790:	10800017 	ldw	r2,0(r2)
   3b794:	e0fffd17 	ldw	r3,-12(fp)
   3b798:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3b79c:	e0bffc17 	ldw	r2,-16(fp)
   3b7a0:	e0fffd17 	ldw	r3,-12(fp)
   3b7a4:	10c00015 	stw	r3,0(r2)

  return 0;  
   3b7a8:	0005883a 	mov	r2,zero
}
   3b7ac:	e037883a 	mov	sp,fp
   3b7b0:	dfc00117 	ldw	ra,4(sp)
   3b7b4:	df000017 	ldw	fp,0(sp)
   3b7b8:	dec00204 	addi	sp,sp,8
   3b7bc:	f800283a 	ret

0003b7c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   3b7c0:	defffd04 	addi	sp,sp,-12
   3b7c4:	dfc00215 	stw	ra,8(sp)
   3b7c8:	df000115 	stw	fp,4(sp)
   3b7cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b7d0:	00800134 	movhi	r2,4
   3b7d4:	10b1d404 	addi	r2,r2,-14512
   3b7d8:	e0bfff15 	stw	r2,-4(fp)
   3b7dc:	00000606 	br	3b7f8 <_do_ctors+0x38>
        (*ctor) (); 
   3b7e0:	e0bfff17 	ldw	r2,-4(fp)
   3b7e4:	10800017 	ldw	r2,0(r2)
   3b7e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b7ec:	e0bfff17 	ldw	r2,-4(fp)
   3b7f0:	10bfff04 	addi	r2,r2,-4
   3b7f4:	e0bfff15 	stw	r2,-4(fp)
   3b7f8:	e0ffff17 	ldw	r3,-4(fp)
   3b7fc:	00800134 	movhi	r2,4
   3b800:	10b1d504 	addi	r2,r2,-14508
   3b804:	18bff62e 	bgeu	r3,r2,3b7e0 <_do_ctors+0x20>
        (*ctor) (); 
}
   3b808:	e037883a 	mov	sp,fp
   3b80c:	dfc00117 	ldw	ra,4(sp)
   3b810:	df000017 	ldw	fp,0(sp)
   3b814:	dec00204 	addi	sp,sp,8
   3b818:	f800283a 	ret

0003b81c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3b81c:	defffd04 	addi	sp,sp,-12
   3b820:	dfc00215 	stw	ra,8(sp)
   3b824:	df000115 	stw	fp,4(sp)
   3b828:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b82c:	00800134 	movhi	r2,4
   3b830:	10b1d404 	addi	r2,r2,-14512
   3b834:	e0bfff15 	stw	r2,-4(fp)
   3b838:	00000606 	br	3b854 <_do_dtors+0x38>
        (*dtor) (); 
   3b83c:	e0bfff17 	ldw	r2,-4(fp)
   3b840:	10800017 	ldw	r2,0(r2)
   3b844:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b848:	e0bfff17 	ldw	r2,-4(fp)
   3b84c:	10bfff04 	addi	r2,r2,-4
   3b850:	e0bfff15 	stw	r2,-4(fp)
   3b854:	e0ffff17 	ldw	r3,-4(fp)
   3b858:	00800134 	movhi	r2,4
   3b85c:	10b1d504 	addi	r2,r2,-14508
   3b860:	18bff62e 	bgeu	r3,r2,3b83c <_do_dtors+0x20>
        (*dtor) (); 
}
   3b864:	e037883a 	mov	sp,fp
   3b868:	dfc00117 	ldw	ra,4(sp)
   3b86c:	df000017 	ldw	fp,0(sp)
   3b870:	dec00204 	addi	sp,sp,8
   3b874:	f800283a 	ret

0003b878 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   3b878:	deffff04 	addi	sp,sp,-4
   3b87c:	df000015 	stw	fp,0(sp)
   3b880:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   3b884:	e037883a 	mov	sp,fp
   3b888:	df000017 	ldw	fp,0(sp)
   3b88c:	dec00104 	addi	sp,sp,4
   3b890:	f800283a 	ret

0003b894 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3b894:	defff904 	addi	sp,sp,-28
   3b898:	dfc00615 	stw	ra,24(sp)
   3b89c:	df000515 	stw	fp,20(sp)
   3b8a0:	df000504 	addi	fp,sp,20
   3b8a4:	e13ffc15 	stw	r4,-16(fp)
   3b8a8:	e17ffd15 	stw	r5,-12(fp)
   3b8ac:	e1bffe15 	stw	r6,-8(fp)
   3b8b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   3b8b4:	e0800217 	ldw	r2,8(fp)
   3b8b8:	d8800015 	stw	r2,0(sp)
   3b8bc:	e13ffc17 	ldw	r4,-16(fp)
   3b8c0:	e17ffd17 	ldw	r5,-12(fp)
   3b8c4:	e1bffe17 	ldw	r6,-8(fp)
   3b8c8:	e1ffff17 	ldw	r7,-4(fp)
   3b8cc:	003ba6c0 	call	3ba6c <alt_iic_isr_register>
}  
   3b8d0:	e037883a 	mov	sp,fp
   3b8d4:	dfc00117 	ldw	ra,4(sp)
   3b8d8:	df000017 	ldw	fp,0(sp)
   3b8dc:	dec00204 	addi	sp,sp,8
   3b8e0:	f800283a 	ret

0003b8e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   3b8e4:	defff904 	addi	sp,sp,-28
   3b8e8:	df000615 	stw	fp,24(sp)
   3b8ec:	df000604 	addi	fp,sp,24
   3b8f0:	e13ffe15 	stw	r4,-8(fp)
   3b8f4:	e17fff15 	stw	r5,-4(fp)
   3b8f8:	e0bfff17 	ldw	r2,-4(fp)
   3b8fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b900:	0005303a 	rdctl	r2,status
   3b904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b908:	e0fffb17 	ldw	r3,-20(fp)
   3b90c:	00bfff84 	movi	r2,-2
   3b910:	1884703a 	and	r2,r3,r2
   3b914:	1001703a 	wrctl	status,r2
  
  return context;
   3b918:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3b91c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   3b920:	e0bffa17 	ldw	r2,-24(fp)
   3b924:	00c00044 	movi	r3,1
   3b928:	1884983a 	sll	r2,r3,r2
   3b92c:	1007883a 	mov	r3,r2
   3b930:	00800034 	movhi	r2,0
   3b934:	10877b04 	addi	r2,r2,7660
   3b938:	10800017 	ldw	r2,0(r2)
   3b93c:	1886b03a 	or	r3,r3,r2
   3b940:	00800034 	movhi	r2,0
   3b944:	10877b04 	addi	r2,r2,7660
   3b948:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3b94c:	00800034 	movhi	r2,0
   3b950:	10877b04 	addi	r2,r2,7660
   3b954:	10800017 	ldw	r2,0(r2)
   3b958:	100170fa 	wrctl	ienable,r2
   3b95c:	e0bffc17 	ldw	r2,-16(fp)
   3b960:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b964:	e0bffd17 	ldw	r2,-12(fp)
   3b968:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3b96c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   3b970:	e037883a 	mov	sp,fp
   3b974:	df000017 	ldw	fp,0(sp)
   3b978:	dec00104 	addi	sp,sp,4
   3b97c:	f800283a 	ret

0003b980 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   3b980:	defff904 	addi	sp,sp,-28
   3b984:	df000615 	stw	fp,24(sp)
   3b988:	df000604 	addi	fp,sp,24
   3b98c:	e13ffe15 	stw	r4,-8(fp)
   3b990:	e17fff15 	stw	r5,-4(fp)
   3b994:	e0bfff17 	ldw	r2,-4(fp)
   3b998:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b99c:	0005303a 	rdctl	r2,status
   3b9a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b9a4:	e0fffb17 	ldw	r3,-20(fp)
   3b9a8:	00bfff84 	movi	r2,-2
   3b9ac:	1884703a 	and	r2,r3,r2
   3b9b0:	1001703a 	wrctl	status,r2
  
  return context;
   3b9b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3b9b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   3b9bc:	e0bffa17 	ldw	r2,-24(fp)
   3b9c0:	00c00044 	movi	r3,1
   3b9c4:	1884983a 	sll	r2,r3,r2
   3b9c8:	0084303a 	nor	r2,zero,r2
   3b9cc:	1007883a 	mov	r3,r2
   3b9d0:	00800034 	movhi	r2,0
   3b9d4:	10877b04 	addi	r2,r2,7660
   3b9d8:	10800017 	ldw	r2,0(r2)
   3b9dc:	1886703a 	and	r3,r3,r2
   3b9e0:	00800034 	movhi	r2,0
   3b9e4:	10877b04 	addi	r2,r2,7660
   3b9e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3b9ec:	00800034 	movhi	r2,0
   3b9f0:	10877b04 	addi	r2,r2,7660
   3b9f4:	10800017 	ldw	r2,0(r2)
   3b9f8:	100170fa 	wrctl	ienable,r2
   3b9fc:	e0bffc17 	ldw	r2,-16(fp)
   3ba00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3ba04:	e0bffd17 	ldw	r2,-12(fp)
   3ba08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3ba0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   3ba10:	e037883a 	mov	sp,fp
   3ba14:	df000017 	ldw	fp,0(sp)
   3ba18:	dec00104 	addi	sp,sp,4
   3ba1c:	f800283a 	ret

0003ba20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   3ba20:	defffc04 	addi	sp,sp,-16
   3ba24:	df000315 	stw	fp,12(sp)
   3ba28:	df000304 	addi	fp,sp,12
   3ba2c:	e13ffe15 	stw	r4,-8(fp)
   3ba30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3ba34:	000530fa 	rdctl	r2,ienable
   3ba38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   3ba3c:	e0bfff17 	ldw	r2,-4(fp)
   3ba40:	00c00044 	movi	r3,1
   3ba44:	1884983a 	sll	r2,r3,r2
   3ba48:	1007883a 	mov	r3,r2
   3ba4c:	e0bffd17 	ldw	r2,-12(fp)
   3ba50:	1884703a 	and	r2,r3,r2
   3ba54:	1004c03a 	cmpne	r2,r2,zero
   3ba58:	10803fcc 	andi	r2,r2,255
}
   3ba5c:	e037883a 	mov	sp,fp
   3ba60:	df000017 	ldw	fp,0(sp)
   3ba64:	dec00104 	addi	sp,sp,4
   3ba68:	f800283a 	ret

0003ba6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3ba6c:	defff504 	addi	sp,sp,-44
   3ba70:	dfc00a15 	stw	ra,40(sp)
   3ba74:	df000915 	stw	fp,36(sp)
   3ba78:	df000904 	addi	fp,sp,36
   3ba7c:	e13ffc15 	stw	r4,-16(fp)
   3ba80:	e17ffd15 	stw	r5,-12(fp)
   3ba84:	e1bffe15 	stw	r6,-8(fp)
   3ba88:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   3ba8c:	00bffa84 	movi	r2,-22
   3ba90:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   3ba94:	e0bffd17 	ldw	r2,-12(fp)
   3ba98:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   3ba9c:	e0bff817 	ldw	r2,-32(fp)
   3baa0:	10800808 	cmpgei	r2,r2,32
   3baa4:	1000271e 	bne	r2,zero,3bb44 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3baa8:	0005303a 	rdctl	r2,status
   3baac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3bab0:	e0fffa17 	ldw	r3,-24(fp)
   3bab4:	00bfff84 	movi	r2,-2
   3bab8:	1884703a 	and	r2,r3,r2
   3babc:	1001703a 	wrctl	status,r2
  
  return context;
   3bac0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   3bac4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   3bac8:	00c00034 	movhi	r3,0
   3bacc:	18c78804 	addi	r3,r3,7712
   3bad0:	e0bff817 	ldw	r2,-32(fp)
   3bad4:	100490fa 	slli	r2,r2,3
   3bad8:	1885883a 	add	r2,r3,r2
   3badc:	e0fffe17 	ldw	r3,-8(fp)
   3bae0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   3bae4:	00c00034 	movhi	r3,0
   3bae8:	18c78804 	addi	r3,r3,7712
   3baec:	e0bff817 	ldw	r2,-32(fp)
   3baf0:	100490fa 	slli	r2,r2,3
   3baf4:	1885883a 	add	r2,r3,r2
   3baf8:	10800104 	addi	r2,r2,4
   3bafc:	e0ffff17 	ldw	r3,-4(fp)
   3bb00:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   3bb04:	e0bffe17 	ldw	r2,-8(fp)
   3bb08:	10000526 	beq	r2,zero,3bb20 <alt_iic_isr_register+0xb4>
   3bb0c:	e0bff817 	ldw	r2,-32(fp)
   3bb10:	e13ffc17 	ldw	r4,-16(fp)
   3bb14:	100b883a 	mov	r5,r2
   3bb18:	003b8e40 	call	3b8e4 <alt_ic_irq_enable>
   3bb1c:	00000406 	br	3bb30 <alt_iic_isr_register+0xc4>
   3bb20:	e0bff817 	ldw	r2,-32(fp)
   3bb24:	e13ffc17 	ldw	r4,-16(fp)
   3bb28:	100b883a 	mov	r5,r2
   3bb2c:	003b9800 	call	3b980 <alt_ic_irq_disable>
   3bb30:	e0bff715 	stw	r2,-36(fp)
   3bb34:	e0bff917 	ldw	r2,-28(fp)
   3bb38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bb3c:	e0bffb17 	ldw	r2,-20(fp)
   3bb40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   3bb44:	e0bff717 	ldw	r2,-36(fp)
}
   3bb48:	e037883a 	mov	sp,fp
   3bb4c:	dfc00117 	ldw	ra,4(sp)
   3bb50:	df000017 	ldw	fp,0(sp)
   3bb54:	dec00204 	addi	sp,sp,8
   3bb58:	f800283a 	ret

0003bb5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   3bb5c:	defff804 	addi	sp,sp,-32
   3bb60:	dfc00715 	stw	ra,28(sp)
   3bb64:	df000615 	stw	fp,24(sp)
   3bb68:	dc000515 	stw	r16,20(sp)
   3bb6c:	df000504 	addi	fp,sp,20
   3bb70:	e13ffc15 	stw	r4,-16(fp)
   3bb74:	e17ffd15 	stw	r5,-12(fp)
   3bb78:	e1bffe15 	stw	r6,-8(fp)
   3bb7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   3bb80:	e13ffd17 	ldw	r4,-12(fp)
   3bb84:	e17ffe17 	ldw	r5,-8(fp)
   3bb88:	e1bfff17 	ldw	r6,-4(fp)
   3bb8c:	003bdf40 	call	3bdf4 <open>
   3bb90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3bb94:	e0bffb17 	ldw	r2,-20(fp)
   3bb98:	10002216 	blt	r2,zero,3bc24 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   3bb9c:	04000034 	movhi	r16,0
   3bba0:	8402ea04 	addi	r16,r16,2984
   3bba4:	e0bffb17 	ldw	r2,-20(fp)
   3bba8:	1009883a 	mov	r4,r2
   3bbac:	01400304 	movi	r5,12
   3bbb0:	00394380 	call	39438 <__mulsi3>
   3bbb4:	8085883a 	add	r2,r16,r2
   3bbb8:	10c00017 	ldw	r3,0(r2)
   3bbbc:	e0bffc17 	ldw	r2,-16(fp)
   3bbc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   3bbc4:	04000034 	movhi	r16,0
   3bbc8:	8402ea04 	addi	r16,r16,2984
   3bbcc:	e0bffb17 	ldw	r2,-20(fp)
   3bbd0:	1009883a 	mov	r4,r2
   3bbd4:	01400304 	movi	r5,12
   3bbd8:	00394380 	call	39438 <__mulsi3>
   3bbdc:	8085883a 	add	r2,r16,r2
   3bbe0:	10800104 	addi	r2,r2,4
   3bbe4:	10c00017 	ldw	r3,0(r2)
   3bbe8:	e0bffc17 	ldw	r2,-16(fp)
   3bbec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   3bbf0:	04000034 	movhi	r16,0
   3bbf4:	8402ea04 	addi	r16,r16,2984
   3bbf8:	e0bffb17 	ldw	r2,-20(fp)
   3bbfc:	1009883a 	mov	r4,r2
   3bc00:	01400304 	movi	r5,12
   3bc04:	00394380 	call	39438 <__mulsi3>
   3bc08:	8085883a 	add	r2,r16,r2
   3bc0c:	10800204 	addi	r2,r2,8
   3bc10:	10c00017 	ldw	r3,0(r2)
   3bc14:	e0bffc17 	ldw	r2,-16(fp)
   3bc18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   3bc1c:	e13ffb17 	ldw	r4,-20(fp)
   3bc20:	003a1e40 	call	3a1e4 <alt_release_fd>
  }
} 
   3bc24:	e037883a 	mov	sp,fp
   3bc28:	dfc00217 	ldw	ra,8(sp)
   3bc2c:	df000117 	ldw	fp,4(sp)
   3bc30:	dc000017 	ldw	r16,0(sp)
   3bc34:	dec00304 	addi	sp,sp,12
   3bc38:	f800283a 	ret

0003bc3c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   3bc3c:	defffb04 	addi	sp,sp,-20
   3bc40:	dfc00415 	stw	ra,16(sp)
   3bc44:	df000315 	stw	fp,12(sp)
   3bc48:	df000304 	addi	fp,sp,12
   3bc4c:	e13ffd15 	stw	r4,-12(fp)
   3bc50:	e17ffe15 	stw	r5,-8(fp)
   3bc54:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   3bc58:	01000034 	movhi	r4,0
   3bc5c:	2102ed04 	addi	r4,r4,2996
   3bc60:	e17ffd17 	ldw	r5,-12(fp)
   3bc64:	01800044 	movi	r6,1
   3bc68:	01c07fc4 	movi	r7,511
   3bc6c:	003bb5c0 	call	3bb5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3bc70:	01000034 	movhi	r4,0
   3bc74:	2102ea04 	addi	r4,r4,2984
   3bc78:	e17ffe17 	ldw	r5,-8(fp)
   3bc7c:	000d883a 	mov	r6,zero
   3bc80:	01c07fc4 	movi	r7,511
   3bc84:	003bb5c0 	call	3bb5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3bc88:	01000034 	movhi	r4,0
   3bc8c:	2102f004 	addi	r4,r4,3008
   3bc90:	e17fff17 	ldw	r5,-4(fp)
   3bc94:	01800044 	movi	r6,1
   3bc98:	01c07fc4 	movi	r7,511
   3bc9c:	003bb5c0 	call	3bb5c <alt_open_fd>
}  
   3bca0:	e037883a 	mov	sp,fp
   3bca4:	dfc00117 	ldw	ra,4(sp)
   3bca8:	df000017 	ldw	fp,0(sp)
   3bcac:	dec00204 	addi	sp,sp,8
   3bcb0:	f800283a 	ret

0003bcb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3bcb4:	defffe04 	addi	sp,sp,-8
   3bcb8:	dfc00115 	stw	ra,4(sp)
   3bcbc:	df000015 	stw	fp,0(sp)
   3bcc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3bcc4:	00800034 	movhi	r2,0
   3bcc8:	10876c04 	addi	r2,r2,7600
   3bccc:	10800017 	ldw	r2,0(r2)
   3bcd0:	10000526 	beq	r2,zero,3bce8 <alt_get_errno+0x34>
   3bcd4:	00800034 	movhi	r2,0
   3bcd8:	10876c04 	addi	r2,r2,7600
   3bcdc:	10800017 	ldw	r2,0(r2)
   3bce0:	103ee83a 	callr	r2
   3bce4:	00000206 	br	3bcf0 <alt_get_errno+0x3c>
   3bce8:	00800034 	movhi	r2,0
   3bcec:	10877704 	addi	r2,r2,7644
}
   3bcf0:	e037883a 	mov	sp,fp
   3bcf4:	dfc00117 	ldw	ra,4(sp)
   3bcf8:	df000017 	ldw	fp,0(sp)
   3bcfc:	dec00204 	addi	sp,sp,8
   3bd00:	f800283a 	ret

0003bd04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   3bd04:	defffb04 	addi	sp,sp,-20
   3bd08:	dfc00415 	stw	ra,16(sp)
   3bd0c:	df000315 	stw	fp,12(sp)
   3bd10:	dc000215 	stw	r16,8(sp)
   3bd14:	df000204 	addi	fp,sp,8
   3bd18:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   3bd1c:	e0bfff17 	ldw	r2,-4(fp)
   3bd20:	10800217 	ldw	r2,8(r2)
   3bd24:	10d00034 	orhi	r3,r2,16384
   3bd28:	e0bfff17 	ldw	r2,-4(fp)
   3bd2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3bd30:	e03ffe15 	stw	zero,-8(fp)
   3bd34:	00002206 	br	3bdc0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3bd38:	04000034 	movhi	r16,0
   3bd3c:	8402ea04 	addi	r16,r16,2984
   3bd40:	e0bffe17 	ldw	r2,-8(fp)
   3bd44:	1009883a 	mov	r4,r2
   3bd48:	01400304 	movi	r5,12
   3bd4c:	00394380 	call	39438 <__mulsi3>
   3bd50:	8085883a 	add	r2,r16,r2
   3bd54:	10c00017 	ldw	r3,0(r2)
   3bd58:	e0bfff17 	ldw	r2,-4(fp)
   3bd5c:	10800017 	ldw	r2,0(r2)
   3bd60:	1880141e 	bne	r3,r2,3bdb4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3bd64:	04000034 	movhi	r16,0
   3bd68:	8402ea04 	addi	r16,r16,2984
   3bd6c:	e0bffe17 	ldw	r2,-8(fp)
   3bd70:	1009883a 	mov	r4,r2
   3bd74:	01400304 	movi	r5,12
   3bd78:	00394380 	call	39438 <__mulsi3>
   3bd7c:	8085883a 	add	r2,r16,r2
   3bd80:	10800204 	addi	r2,r2,8
   3bd84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3bd88:	10000a0e 	bge	r2,zero,3bdb4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   3bd8c:	e13ffe17 	ldw	r4,-8(fp)
   3bd90:	01400304 	movi	r5,12
   3bd94:	00394380 	call	39438 <__mulsi3>
   3bd98:	00c00034 	movhi	r3,0
   3bd9c:	18c2ea04 	addi	r3,r3,2984
   3bda0:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3bda4:	e0bfff17 	ldw	r2,-4(fp)
   3bda8:	18800226 	beq	r3,r2,3bdb4 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   3bdac:	00bffcc4 	movi	r2,-13
   3bdb0:	00000a06 	br	3bddc <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3bdb4:	e0bffe17 	ldw	r2,-8(fp)
   3bdb8:	10800044 	addi	r2,r2,1
   3bdbc:	e0bffe15 	stw	r2,-8(fp)
   3bdc0:	00800034 	movhi	r2,0
   3bdc4:	10876b04 	addi	r2,r2,7596
   3bdc8:	10800017 	ldw	r2,0(r2)
   3bdcc:	1007883a 	mov	r3,r2
   3bdd0:	e0bffe17 	ldw	r2,-8(fp)
   3bdd4:	18bfd82e 	bgeu	r3,r2,3bd38 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3bdd8:	0005883a 	mov	r2,zero
}
   3bddc:	e037883a 	mov	sp,fp
   3bde0:	dfc00217 	ldw	ra,8(sp)
   3bde4:	df000117 	ldw	fp,4(sp)
   3bde8:	dc000017 	ldw	r16,0(sp)
   3bdec:	dec00304 	addi	sp,sp,12
   3bdf0:	f800283a 	ret

0003bdf4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3bdf4:	defff604 	addi	sp,sp,-40
   3bdf8:	dfc00915 	stw	ra,36(sp)
   3bdfc:	df000815 	stw	fp,32(sp)
   3be00:	df000804 	addi	fp,sp,32
   3be04:	e13ffd15 	stw	r4,-12(fp)
   3be08:	e17ffe15 	stw	r5,-8(fp)
   3be0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   3be10:	00bfffc4 	movi	r2,-1
   3be14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   3be18:	00bffb44 	movi	r2,-19
   3be1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   3be20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   3be24:	e13ffd17 	ldw	r4,-12(fp)
   3be28:	01400034 	movhi	r5,0
   3be2c:	29476904 	addi	r5,r5,7588
   3be30:	003c1080 	call	3c108 <alt_find_dev>
   3be34:	e0bff815 	stw	r2,-32(fp)
   3be38:	e0bff817 	ldw	r2,-32(fp)
   3be3c:	1000051e 	bne	r2,zero,3be54 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3be40:	e13ffd17 	ldw	r4,-12(fp)
   3be44:	003c1980 	call	3c198 <alt_find_file>
   3be48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   3be4c:	00800044 	movi	r2,1
   3be50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3be54:	e0bff817 	ldw	r2,-32(fp)
   3be58:	10002a26 	beq	r2,zero,3bf04 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   3be5c:	e13ff817 	ldw	r4,-32(fp)
   3be60:	003c2ac0 	call	3c2ac <alt_get_fd>
   3be64:	e0bff915 	stw	r2,-28(fp)
   3be68:	e0bff917 	ldw	r2,-28(fp)
   3be6c:	1000030e 	bge	r2,zero,3be7c <open+0x88>
    {
      status = index;
   3be70:	e0bff917 	ldw	r2,-28(fp)
   3be74:	e0bffa15 	stw	r2,-24(fp)
   3be78:	00002406 	br	3bf0c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   3be7c:	e13ff917 	ldw	r4,-28(fp)
   3be80:	01400304 	movi	r5,12
   3be84:	00394380 	call	39438 <__mulsi3>
   3be88:	00c00034 	movhi	r3,0
   3be8c:	18c2ea04 	addi	r3,r3,2984
   3be90:	10c5883a 	add	r2,r2,r3
   3be94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3be98:	e0fffe17 	ldw	r3,-8(fp)
   3be9c:	00900034 	movhi	r2,16384
   3bea0:	10bfffc4 	addi	r2,r2,-1
   3bea4:	1886703a 	and	r3,r3,r2
   3bea8:	e0bffc17 	ldw	r2,-16(fp)
   3beac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   3beb0:	e0bffb17 	ldw	r2,-20(fp)
   3beb4:	1000051e 	bne	r2,zero,3becc <open+0xd8>
   3beb8:	e13ffc17 	ldw	r4,-16(fp)
   3bebc:	003bd040 	call	3bd04 <alt_file_locked>
   3bec0:	e0bffa15 	stw	r2,-24(fp)
   3bec4:	e0bffa17 	ldw	r2,-24(fp)
   3bec8:	10001016 	blt	r2,zero,3bf0c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3becc:	e0bff817 	ldw	r2,-32(fp)
   3bed0:	10800317 	ldw	r2,12(r2)
   3bed4:	10000826 	beq	r2,zero,3bef8 <open+0x104>
   3bed8:	e0bff817 	ldw	r2,-32(fp)
   3bedc:	10800317 	ldw	r2,12(r2)
   3bee0:	e13ffc17 	ldw	r4,-16(fp)
   3bee4:	e17ffd17 	ldw	r5,-12(fp)
   3bee8:	e1bffe17 	ldw	r6,-8(fp)
   3beec:	e1ffff17 	ldw	r7,-4(fp)
   3bef0:	103ee83a 	callr	r2
   3bef4:	00000106 	br	3befc <open+0x108>
   3bef8:	0005883a 	mov	r2,zero
   3befc:	e0bffa15 	stw	r2,-24(fp)
   3bf00:	00000206 	br	3bf0c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3bf04:	00bffb44 	movi	r2,-19
   3bf08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   3bf0c:	e0bffa17 	ldw	r2,-24(fp)
   3bf10:	1000080e 	bge	r2,zero,3bf34 <open+0x140>
  {
    alt_release_fd (index);  
   3bf14:	e13ff917 	ldw	r4,-28(fp)
   3bf18:	003a1e40 	call	3a1e4 <alt_release_fd>
    ALT_ERRNO = -status;
   3bf1c:	003bcb40 	call	3bcb4 <alt_get_errno>
   3bf20:	e0fffa17 	ldw	r3,-24(fp)
   3bf24:	00c7c83a 	sub	r3,zero,r3
   3bf28:	10c00015 	stw	r3,0(r2)
    return -1;
   3bf2c:	00bfffc4 	movi	r2,-1
   3bf30:	00000106 	br	3bf38 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   3bf34:	e0bff917 	ldw	r2,-28(fp)
}
   3bf38:	e037883a 	mov	sp,fp
   3bf3c:	dfc00117 	ldw	ra,4(sp)
   3bf40:	df000017 	ldw	fp,0(sp)
   3bf44:	dec00204 	addi	sp,sp,8
   3bf48:	f800283a 	ret

0003bf4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3bf4c:	defffa04 	addi	sp,sp,-24
   3bf50:	df000515 	stw	fp,20(sp)
   3bf54:	df000504 	addi	fp,sp,20
   3bf58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3bf5c:	0005303a 	rdctl	r2,status
   3bf60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3bf64:	e0fffc17 	ldw	r3,-16(fp)
   3bf68:	00bfff84 	movi	r2,-2
   3bf6c:	1884703a 	and	r2,r3,r2
   3bf70:	1001703a 	wrctl	status,r2
  
  return context;
   3bf74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3bf78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   3bf7c:	e0bfff17 	ldw	r2,-4(fp)
   3bf80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3bf84:	e0bffd17 	ldw	r2,-12(fp)
   3bf88:	10800017 	ldw	r2,0(r2)
   3bf8c:	e0fffd17 	ldw	r3,-12(fp)
   3bf90:	18c00117 	ldw	r3,4(r3)
   3bf94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3bf98:	e0bffd17 	ldw	r2,-12(fp)
   3bf9c:	10800117 	ldw	r2,4(r2)
   3bfa0:	e0fffd17 	ldw	r3,-12(fp)
   3bfa4:	18c00017 	ldw	r3,0(r3)
   3bfa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3bfac:	e0bffd17 	ldw	r2,-12(fp)
   3bfb0:	e0fffd17 	ldw	r3,-12(fp)
   3bfb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3bfb8:	e0bffd17 	ldw	r2,-12(fp)
   3bfbc:	e0fffd17 	ldw	r3,-12(fp)
   3bfc0:	10c00015 	stw	r3,0(r2)
   3bfc4:	e0bffb17 	ldw	r2,-20(fp)
   3bfc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bfcc:	e0bffe17 	ldw	r2,-8(fp)
   3bfd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3bfd4:	e037883a 	mov	sp,fp
   3bfd8:	df000017 	ldw	fp,0(sp)
   3bfdc:	dec00104 	addi	sp,sp,4
   3bfe0:	f800283a 	ret

0003bfe4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3bfe4:	defffb04 	addi	sp,sp,-20
   3bfe8:	dfc00415 	stw	ra,16(sp)
   3bfec:	df000315 	stw	fp,12(sp)
   3bff0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3bff4:	d0a00d17 	ldw	r2,-32716(gp)
   3bff8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3bffc:	d0a01b17 	ldw	r2,-32660(gp)
   3c000:	10800044 	addi	r2,r2,1
   3c004:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3c008:	00002e06 	br	3c0c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   3c00c:	e0bffd17 	ldw	r2,-12(fp)
   3c010:	10800017 	ldw	r2,0(r2)
   3c014:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3c018:	e0bffd17 	ldw	r2,-12(fp)
   3c01c:	10800403 	ldbu	r2,16(r2)
   3c020:	10803fcc 	andi	r2,r2,255
   3c024:	10000426 	beq	r2,zero,3c038 <alt_tick+0x54>
   3c028:	d0a01b17 	ldw	r2,-32660(gp)
   3c02c:	1000021e 	bne	r2,zero,3c038 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   3c030:	e0bffd17 	ldw	r2,-12(fp)
   3c034:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3c038:	e0bffd17 	ldw	r2,-12(fp)
   3c03c:	10800217 	ldw	r2,8(r2)
   3c040:	d0e01b17 	ldw	r3,-32660(gp)
   3c044:	18801d36 	bltu	r3,r2,3c0bc <alt_tick+0xd8>
   3c048:	e0bffd17 	ldw	r2,-12(fp)
   3c04c:	10800403 	ldbu	r2,16(r2)
   3c050:	10803fcc 	andi	r2,r2,255
   3c054:	1000191e 	bne	r2,zero,3c0bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3c058:	e0bffd17 	ldw	r2,-12(fp)
   3c05c:	10c00317 	ldw	r3,12(r2)
   3c060:	e0bffd17 	ldw	r2,-12(fp)
   3c064:	10800517 	ldw	r2,20(r2)
   3c068:	1009883a 	mov	r4,r2
   3c06c:	183ee83a 	callr	r3
   3c070:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3c074:	e0bfff17 	ldw	r2,-4(fp)
   3c078:	1000031e 	bne	r2,zero,3c088 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   3c07c:	e13ffd17 	ldw	r4,-12(fp)
   3c080:	003bf4c0 	call	3bf4c <alt_alarm_stop>
   3c084:	00000d06 	br	3c0bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3c088:	e0bffd17 	ldw	r2,-12(fp)
   3c08c:	10c00217 	ldw	r3,8(r2)
   3c090:	e0bfff17 	ldw	r2,-4(fp)
   3c094:	1887883a 	add	r3,r3,r2
   3c098:	e0bffd17 	ldw	r2,-12(fp)
   3c09c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3c0a0:	e0bffd17 	ldw	r2,-12(fp)
   3c0a4:	10c00217 	ldw	r3,8(r2)
   3c0a8:	d0a01b17 	ldw	r2,-32660(gp)
   3c0ac:	1880032e 	bgeu	r3,r2,3c0bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   3c0b0:	e0bffd17 	ldw	r2,-12(fp)
   3c0b4:	00c00044 	movi	r3,1
   3c0b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   3c0bc:	e0bffe17 	ldw	r2,-8(fp)
   3c0c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3c0c4:	e0fffd17 	ldw	r3,-12(fp)
   3c0c8:	d0a00d04 	addi	r2,gp,-32716
   3c0cc:	18bfcf1e 	bne	r3,r2,3c00c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3c0d0:	0001883a 	nop
}
   3c0d4:	e037883a 	mov	sp,fp
   3c0d8:	dfc00117 	ldw	ra,4(sp)
   3c0dc:	df000017 	ldw	fp,0(sp)
   3c0e0:	dec00204 	addi	sp,sp,8
   3c0e4:	f800283a 	ret

0003c0e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   3c0e8:	deffff04 	addi	sp,sp,-4
   3c0ec:	df000015 	stw	fp,0(sp)
   3c0f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3c0f4:	000170fa 	wrctl	ienable,zero
}
   3c0f8:	e037883a 	mov	sp,fp
   3c0fc:	df000017 	ldw	fp,0(sp)
   3c100:	dec00104 	addi	sp,sp,4
   3c104:	f800283a 	ret

0003c108 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3c108:	defffa04 	addi	sp,sp,-24
   3c10c:	dfc00515 	stw	ra,20(sp)
   3c110:	df000415 	stw	fp,16(sp)
   3c114:	df000404 	addi	fp,sp,16
   3c118:	e13ffe15 	stw	r4,-8(fp)
   3c11c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   3c120:	e0bfff17 	ldw	r2,-4(fp)
   3c124:	10800017 	ldw	r2,0(r2)
   3c128:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3c12c:	e13ffe17 	ldw	r4,-8(fp)
   3c130:	00304a00 	call	304a0 <strlen>
   3c134:	10800044 	addi	r2,r2,1
   3c138:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c13c:	00000d06 	br	3c174 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   3c140:	e0bffc17 	ldw	r2,-16(fp)
   3c144:	10c00217 	ldw	r3,8(r2)
   3c148:	e0bffd17 	ldw	r2,-12(fp)
   3c14c:	1809883a 	mov	r4,r3
   3c150:	e17ffe17 	ldw	r5,-8(fp)
   3c154:	100d883a 	mov	r6,r2
   3c158:	003c3cc0 	call	3c3cc <memcmp>
   3c15c:	1000021e 	bne	r2,zero,3c168 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   3c160:	e0bffc17 	ldw	r2,-16(fp)
   3c164:	00000706 	br	3c184 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3c168:	e0bffc17 	ldw	r2,-16(fp)
   3c16c:	10800017 	ldw	r2,0(r2)
   3c170:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c174:	e0fffc17 	ldw	r3,-16(fp)
   3c178:	e0bfff17 	ldw	r2,-4(fp)
   3c17c:	18bff01e 	bne	r3,r2,3c140 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   3c180:	0005883a 	mov	r2,zero
}
   3c184:	e037883a 	mov	sp,fp
   3c188:	dfc00117 	ldw	ra,4(sp)
   3c18c:	df000017 	ldw	fp,0(sp)
   3c190:	dec00204 	addi	sp,sp,8
   3c194:	f800283a 	ret

0003c198 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3c198:	defffb04 	addi	sp,sp,-20
   3c19c:	dfc00415 	stw	ra,16(sp)
   3c1a0:	df000315 	stw	fp,12(sp)
   3c1a4:	df000304 	addi	fp,sp,12
   3c1a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   3c1ac:	00800034 	movhi	r2,0
   3c1b0:	10876704 	addi	r2,r2,7580
   3c1b4:	10800017 	ldw	r2,0(r2)
   3c1b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c1bc:	00003106 	br	3c284 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   3c1c0:	e0bffd17 	ldw	r2,-12(fp)
   3c1c4:	10800217 	ldw	r2,8(r2)
   3c1c8:	1009883a 	mov	r4,r2
   3c1cc:	00304a00 	call	304a0 <strlen>
   3c1d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   3c1d4:	e0bffd17 	ldw	r2,-12(fp)
   3c1d8:	10c00217 	ldw	r3,8(r2)
   3c1dc:	e0bffe17 	ldw	r2,-8(fp)
   3c1e0:	10bfffc4 	addi	r2,r2,-1
   3c1e4:	1885883a 	add	r2,r3,r2
   3c1e8:	10800003 	ldbu	r2,0(r2)
   3c1ec:	10803fcc 	andi	r2,r2,255
   3c1f0:	1080201c 	xori	r2,r2,128
   3c1f4:	10bfe004 	addi	r2,r2,-128
   3c1f8:	10800bd8 	cmpnei	r2,r2,47
   3c1fc:	1000031e 	bne	r2,zero,3c20c <alt_find_file+0x74>
    {
      len -= 1;
   3c200:	e0bffe17 	ldw	r2,-8(fp)
   3c204:	10bfffc4 	addi	r2,r2,-1
   3c208:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3c20c:	e0bffe17 	ldw	r2,-8(fp)
   3c210:	e0ffff17 	ldw	r3,-4(fp)
   3c214:	1885883a 	add	r2,r3,r2
   3c218:	10800003 	ldbu	r2,0(r2)
   3c21c:	10803fcc 	andi	r2,r2,255
   3c220:	1080201c 	xori	r2,r2,128
   3c224:	10bfe004 	addi	r2,r2,-128
   3c228:	10800be0 	cmpeqi	r2,r2,47
   3c22c:	1000081e 	bne	r2,zero,3c250 <alt_find_file+0xb8>
   3c230:	e0bffe17 	ldw	r2,-8(fp)
   3c234:	e0ffff17 	ldw	r3,-4(fp)
   3c238:	1885883a 	add	r2,r3,r2
   3c23c:	10800003 	ldbu	r2,0(r2)
   3c240:	10803fcc 	andi	r2,r2,255
   3c244:	1080201c 	xori	r2,r2,128
   3c248:	10bfe004 	addi	r2,r2,-128
   3c24c:	10000a1e 	bne	r2,zero,3c278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   3c250:	e0bffd17 	ldw	r2,-12(fp)
   3c254:	10c00217 	ldw	r3,8(r2)
   3c258:	e0bffe17 	ldw	r2,-8(fp)
   3c25c:	1809883a 	mov	r4,r3
   3c260:	e17fff17 	ldw	r5,-4(fp)
   3c264:	100d883a 	mov	r6,r2
   3c268:	003c3cc0 	call	3c3cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3c26c:	1000021e 	bne	r2,zero,3c278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3c270:	e0bffd17 	ldw	r2,-12(fp)
   3c274:	00000806 	br	3c298 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   3c278:	e0bffd17 	ldw	r2,-12(fp)
   3c27c:	10800017 	ldw	r2,0(r2)
   3c280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c284:	e0fffd17 	ldw	r3,-12(fp)
   3c288:	00800034 	movhi	r2,0
   3c28c:	10876704 	addi	r2,r2,7580
   3c290:	18bfcb1e 	bne	r3,r2,3c1c0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3c294:	0005883a 	mov	r2,zero
}
   3c298:	e037883a 	mov	sp,fp
   3c29c:	dfc00117 	ldw	ra,4(sp)
   3c2a0:	df000017 	ldw	fp,0(sp)
   3c2a4:	dec00204 	addi	sp,sp,8
   3c2a8:	f800283a 	ret

0003c2ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3c2ac:	defffa04 	addi	sp,sp,-24
   3c2b0:	dfc00515 	stw	ra,20(sp)
   3c2b4:	df000415 	stw	fp,16(sp)
   3c2b8:	dc000315 	stw	r16,12(sp)
   3c2bc:	df000304 	addi	fp,sp,12
   3c2c0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   3c2c4:	00bffa04 	movi	r2,-24
   3c2c8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c2cc:	e03ffd15 	stw	zero,-12(fp)
   3c2d0:	00002106 	br	3c358 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   3c2d4:	04000034 	movhi	r16,0
   3c2d8:	8402ea04 	addi	r16,r16,2984
   3c2dc:	e0bffd17 	ldw	r2,-12(fp)
   3c2e0:	1009883a 	mov	r4,r2
   3c2e4:	01400304 	movi	r5,12
   3c2e8:	00394380 	call	39438 <__mulsi3>
   3c2ec:	8085883a 	add	r2,r16,r2
   3c2f0:	10800017 	ldw	r2,0(r2)
   3c2f4:	1000151e 	bne	r2,zero,3c34c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   3c2f8:	04000034 	movhi	r16,0
   3c2fc:	8402ea04 	addi	r16,r16,2984
   3c300:	e0bffd17 	ldw	r2,-12(fp)
   3c304:	1009883a 	mov	r4,r2
   3c308:	01400304 	movi	r5,12
   3c30c:	00394380 	call	39438 <__mulsi3>
   3c310:	8085883a 	add	r2,r16,r2
   3c314:	e0ffff17 	ldw	r3,-4(fp)
   3c318:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   3c31c:	00800034 	movhi	r2,0
   3c320:	10876b04 	addi	r2,r2,7596
   3c324:	10c00017 	ldw	r3,0(r2)
   3c328:	e0bffd17 	ldw	r2,-12(fp)
   3c32c:	1880040e 	bge	r3,r2,3c340 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   3c330:	00800034 	movhi	r2,0
   3c334:	10876b04 	addi	r2,r2,7596
   3c338:	e0fffd17 	ldw	r3,-12(fp)
   3c33c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   3c340:	e0bffd17 	ldw	r2,-12(fp)
   3c344:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   3c348:	00000606 	br	3c364 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c34c:	e0bffd17 	ldw	r2,-12(fp)
   3c350:	10800044 	addi	r2,r2,1
   3c354:	e0bffd15 	stw	r2,-12(fp)
   3c358:	e0bffd17 	ldw	r2,-12(fp)
   3c35c:	10800810 	cmplti	r2,r2,32
   3c360:	103fdc1e 	bne	r2,zero,3c2d4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   3c364:	e0bffe17 	ldw	r2,-8(fp)
}
   3c368:	e037883a 	mov	sp,fp
   3c36c:	dfc00217 	ldw	ra,8(sp)
   3c370:	df000117 	ldw	fp,4(sp)
   3c374:	dc000017 	ldw	r16,0(sp)
   3c378:	dec00304 	addi	sp,sp,12
   3c37c:	f800283a 	ret

0003c380 <atexit>:
   3c380:	200b883a 	mov	r5,r4
   3c384:	000d883a 	mov	r6,zero
   3c388:	0009883a 	mov	r4,zero
   3c38c:	000f883a 	mov	r7,zero
   3c390:	003c4481 	jmpi	3c448 <__register_exitproc>

0003c394 <exit>:
   3c394:	defffe04 	addi	sp,sp,-8
   3c398:	000b883a 	mov	r5,zero
   3c39c:	dc000015 	stw	r16,0(sp)
   3c3a0:	dfc00115 	stw	ra,4(sp)
   3c3a4:	2021883a 	mov	r16,r4
   3c3a8:	003c5780 	call	3c578 <__call_exitprocs>
   3c3ac:	00800034 	movhi	r2,0
   3c3b0:	10876204 	addi	r2,r2,7560
   3c3b4:	11000017 	ldw	r4,0(r2)
   3c3b8:	20800f17 	ldw	r2,60(r4)
   3c3bc:	10000126 	beq	r2,zero,3c3c4 <exit+0x30>
   3c3c0:	103ee83a 	callr	r2
   3c3c4:	8009883a 	mov	r4,r16
   3c3c8:	003c7180 	call	3c718 <_exit>

0003c3cc <memcmp>:
   3c3cc:	01c000c4 	movi	r7,3
   3c3d0:	3980192e 	bgeu	r7,r6,3c438 <memcmp+0x6c>
   3c3d4:	2904b03a 	or	r2,r5,r4
   3c3d8:	11c4703a 	and	r2,r2,r7
   3c3dc:	10000f26 	beq	r2,zero,3c41c <memcmp+0x50>
   3c3e0:	20c00003 	ldbu	r3,0(r4)
   3c3e4:	28800003 	ldbu	r2,0(r5)
   3c3e8:	1880151e 	bne	r3,r2,3c440 <memcmp+0x74>
   3c3ec:	31bfff84 	addi	r6,r6,-2
   3c3f0:	01ffffc4 	movi	r7,-1
   3c3f4:	00000406 	br	3c408 <memcmp+0x3c>
   3c3f8:	20c00003 	ldbu	r3,0(r4)
   3c3fc:	28800003 	ldbu	r2,0(r5)
   3c400:	31bfffc4 	addi	r6,r6,-1
   3c404:	18800e1e 	bne	r3,r2,3c440 <memcmp+0x74>
   3c408:	21000044 	addi	r4,r4,1
   3c40c:	29400044 	addi	r5,r5,1
   3c410:	31fff91e 	bne	r6,r7,3c3f8 <memcmp+0x2c>
   3c414:	0005883a 	mov	r2,zero
   3c418:	f800283a 	ret
   3c41c:	20c00017 	ldw	r3,0(r4)
   3c420:	28800017 	ldw	r2,0(r5)
   3c424:	1880041e 	bne	r3,r2,3c438 <memcmp+0x6c>
   3c428:	31bfff04 	addi	r6,r6,-4
   3c42c:	21000104 	addi	r4,r4,4
   3c430:	29400104 	addi	r5,r5,4
   3c434:	39bff936 	bltu	r7,r6,3c41c <memcmp+0x50>
   3c438:	303fe91e 	bne	r6,zero,3c3e0 <memcmp+0x14>
   3c43c:	003ff506 	br	3c414 <memcmp+0x48>
   3c440:	1885c83a 	sub	r2,r3,r2
   3c444:	f800283a 	ret

0003c448 <__register_exitproc>:
   3c448:	defffa04 	addi	sp,sp,-24
   3c44c:	00800034 	movhi	r2,0
   3c450:	10876204 	addi	r2,r2,7560
   3c454:	dc000315 	stw	r16,12(sp)
   3c458:	14000017 	ldw	r16,0(r2)
   3c45c:	dc400415 	stw	r17,16(sp)
   3c460:	dfc00515 	stw	ra,20(sp)
   3c464:	80805217 	ldw	r2,328(r16)
   3c468:	2023883a 	mov	r17,r4
   3c46c:	10003e26 	beq	r2,zero,3c568 <__register_exitproc+0x120>
   3c470:	10c00117 	ldw	r3,4(r2)
   3c474:	020007c4 	movi	r8,31
   3c478:	40c0180e 	bge	r8,r3,3c4dc <__register_exitproc+0x94>
   3c47c:	00800034 	movhi	r2,0
   3c480:	10800004 	addi	r2,r2,0
   3c484:	1000061e 	bne	r2,zero,3c4a0 <__register_exitproc+0x58>
   3c488:	00bfffc4 	movi	r2,-1
   3c48c:	dfc00517 	ldw	ra,20(sp)
   3c490:	dc400417 	ldw	r17,16(sp)
   3c494:	dc000317 	ldw	r16,12(sp)
   3c498:	dec00604 	addi	sp,sp,24
   3c49c:	f800283a 	ret
   3c4a0:	01006404 	movi	r4,400
   3c4a4:	d9400015 	stw	r5,0(sp)
   3c4a8:	d9800115 	stw	r6,4(sp)
   3c4ac:	d9c00215 	stw	r7,8(sp)
   3c4b0:	00000000 	call	0 <__alt_mem_onchip_data_memory_cpu1>
   3c4b4:	d9400017 	ldw	r5,0(sp)
   3c4b8:	d9800117 	ldw	r6,4(sp)
   3c4bc:	d9c00217 	ldw	r7,8(sp)
   3c4c0:	103ff126 	beq	r2,zero,3c488 <__register_exitproc+0x40>
   3c4c4:	80c05217 	ldw	r3,328(r16)
   3c4c8:	10000115 	stw	zero,4(r2)
   3c4cc:	10c00015 	stw	r3,0(r2)
   3c4d0:	80805215 	stw	r2,328(r16)
   3c4d4:	10006215 	stw	zero,392(r2)
   3c4d8:	10006315 	stw	zero,396(r2)
   3c4dc:	10c00117 	ldw	r3,4(r2)
   3c4e0:	88000d1e 	bne	r17,zero,3c518 <__register_exitproc+0xd0>
   3c4e4:	19000084 	addi	r4,r3,2
   3c4e8:	2109883a 	add	r4,r4,r4
   3c4ec:	18c00044 	addi	r3,r3,1
   3c4f0:	2109883a 	add	r4,r4,r4
   3c4f4:	1109883a 	add	r4,r2,r4
   3c4f8:	10c00115 	stw	r3,4(r2)
   3c4fc:	0005883a 	mov	r2,zero
   3c500:	21400015 	stw	r5,0(r4)
   3c504:	dfc00517 	ldw	ra,20(sp)
   3c508:	dc400417 	ldw	r17,16(sp)
   3c50c:	dc000317 	ldw	r16,12(sp)
   3c510:	dec00604 	addi	sp,sp,24
   3c514:	f800283a 	ret
   3c518:	02400044 	movi	r9,1
   3c51c:	12806217 	ldw	r10,392(r2)
   3c520:	48d2983a 	sll	r9,r9,r3
   3c524:	19000804 	addi	r4,r3,32
   3c528:	18d1883a 	add	r8,r3,r3
   3c52c:	2109883a 	add	r4,r4,r4
   3c530:	4211883a 	add	r8,r8,r8
   3c534:	2109883a 	add	r4,r4,r4
   3c538:	1109883a 	add	r4,r2,r4
   3c53c:	1211883a 	add	r8,r2,r8
   3c540:	5254b03a 	or	r10,r10,r9
   3c544:	21c02215 	stw	r7,136(r4)
   3c548:	41802215 	stw	r6,136(r8)
   3c54c:	12806215 	stw	r10,392(r2)
   3c550:	01000084 	movi	r4,2
   3c554:	893fe31e 	bne	r17,r4,3c4e4 <__register_exitproc+0x9c>
   3c558:	11006317 	ldw	r4,396(r2)
   3c55c:	2252b03a 	or	r9,r4,r9
   3c560:	12406315 	stw	r9,396(r2)
   3c564:	003fdf06 	br	3c4e4 <__register_exitproc+0x9c>
   3c568:	00800034 	movhi	r2,0
   3c56c:	1087c804 	addi	r2,r2,7968
   3c570:	80805215 	stw	r2,328(r16)
   3c574:	003fbe06 	br	3c470 <__register_exitproc+0x28>

0003c578 <__call_exitprocs>:
   3c578:	00800034 	movhi	r2,0
   3c57c:	10876204 	addi	r2,r2,7560
   3c580:	10800017 	ldw	r2,0(r2)
   3c584:	defff304 	addi	sp,sp,-52
   3c588:	df000b15 	stw	fp,44(sp)
   3c58c:	d8800015 	stw	r2,0(sp)
   3c590:	10805204 	addi	r2,r2,328
   3c594:	dd400815 	stw	r21,32(sp)
   3c598:	dfc00c15 	stw	ra,48(sp)
   3c59c:	ddc00a15 	stw	r23,40(sp)
   3c5a0:	dd800915 	stw	r22,36(sp)
   3c5a4:	dd000715 	stw	r20,28(sp)
   3c5a8:	dcc00615 	stw	r19,24(sp)
   3c5ac:	dc800515 	stw	r18,20(sp)
   3c5b0:	dc400415 	stw	r17,16(sp)
   3c5b4:	dc000315 	stw	r16,12(sp)
   3c5b8:	d9000115 	stw	r4,4(sp)
   3c5bc:	2839883a 	mov	fp,r5
   3c5c0:	d8800215 	stw	r2,8(sp)
   3c5c4:	057fffc4 	movi	r21,-1
   3c5c8:	d8800017 	ldw	r2,0(sp)
   3c5cc:	ddc00217 	ldw	r23,8(sp)
   3c5d0:	14805217 	ldw	r18,328(r2)
   3c5d4:	90001726 	beq	r18,zero,3c634 <__call_exitprocs+0xbc>
   3c5d8:	94400117 	ldw	r17,4(r18)
   3c5dc:	8c3fffc4 	addi	r16,r17,-1
   3c5e0:	80001116 	blt	r16,zero,3c628 <__call_exitprocs+0xb0>
   3c5e4:	8c400044 	addi	r17,r17,1
   3c5e8:	8427883a 	add	r19,r16,r16
   3c5ec:	8c63883a 	add	r17,r17,r17
   3c5f0:	95802204 	addi	r22,r18,136
   3c5f4:	9ce7883a 	add	r19,r19,r19
   3c5f8:	8c63883a 	add	r17,r17,r17
   3c5fc:	b4e7883a 	add	r19,r22,r19
   3c600:	9463883a 	add	r17,r18,r17
   3c604:	e0001726 	beq	fp,zero,3c664 <__call_exitprocs+0xec>
   3c608:	8c87c83a 	sub	r3,r17,r18
   3c60c:	b0c7883a 	add	r3,r22,r3
   3c610:	18c01e17 	ldw	r3,120(r3)
   3c614:	1f001326 	beq	r3,fp,3c664 <__call_exitprocs+0xec>
   3c618:	843fffc4 	addi	r16,r16,-1
   3c61c:	9cffff04 	addi	r19,r19,-4
   3c620:	8c7fff04 	addi	r17,r17,-4
   3c624:	857ff71e 	bne	r16,r21,3c604 <__call_exitprocs+0x8c>
   3c628:	00800034 	movhi	r2,0
   3c62c:	10800004 	addi	r2,r2,0
   3c630:	10002a1e 	bne	r2,zero,3c6dc <__call_exitprocs+0x164>
   3c634:	dfc00c17 	ldw	ra,48(sp)
   3c638:	df000b17 	ldw	fp,44(sp)
   3c63c:	ddc00a17 	ldw	r23,40(sp)
   3c640:	dd800917 	ldw	r22,36(sp)
   3c644:	dd400817 	ldw	r21,32(sp)
   3c648:	dd000717 	ldw	r20,28(sp)
   3c64c:	dcc00617 	ldw	r19,24(sp)
   3c650:	dc800517 	ldw	r18,20(sp)
   3c654:	dc400417 	ldw	r17,16(sp)
   3c658:	dc000317 	ldw	r16,12(sp)
   3c65c:	dec00d04 	addi	sp,sp,52
   3c660:	f800283a 	ret
   3c664:	91000117 	ldw	r4,4(r18)
   3c668:	88c00017 	ldw	r3,0(r17)
   3c66c:	213fffc4 	addi	r4,r4,-1
   3c670:	24001526 	beq	r4,r16,3c6c8 <__call_exitprocs+0x150>
   3c674:	88000015 	stw	zero,0(r17)
   3c678:	183fe726 	beq	r3,zero,3c618 <__call_exitprocs+0xa0>
   3c67c:	00800044 	movi	r2,1
   3c680:	1408983a 	sll	r4,r2,r16
   3c684:	91406217 	ldw	r5,392(r18)
   3c688:	95000117 	ldw	r20,4(r18)
   3c68c:	214a703a 	and	r5,r4,r5
   3c690:	28000b26 	beq	r5,zero,3c6c0 <__call_exitprocs+0x148>
   3c694:	91406317 	ldw	r5,396(r18)
   3c698:	2148703a 	and	r4,r4,r5
   3c69c:	20000c1e 	bne	r4,zero,3c6d0 <__call_exitprocs+0x158>
   3c6a0:	99400017 	ldw	r5,0(r19)
   3c6a4:	d9000117 	ldw	r4,4(sp)
   3c6a8:	183ee83a 	callr	r3
   3c6ac:	90c00117 	ldw	r3,4(r18)
   3c6b0:	1d3fc51e 	bne	r3,r20,3c5c8 <__call_exitprocs+0x50>
   3c6b4:	b8c00017 	ldw	r3,0(r23)
   3c6b8:	1cbfd726 	beq	r3,r18,3c618 <__call_exitprocs+0xa0>
   3c6bc:	003fc206 	br	3c5c8 <__call_exitprocs+0x50>
   3c6c0:	183ee83a 	callr	r3
   3c6c4:	003ff906 	br	3c6ac <__call_exitprocs+0x134>
   3c6c8:	94000115 	stw	r16,4(r18)
   3c6cc:	003fea06 	br	3c678 <__call_exitprocs+0x100>
   3c6d0:	99000017 	ldw	r4,0(r19)
   3c6d4:	183ee83a 	callr	r3
   3c6d8:	003ff406 	br	3c6ac <__call_exitprocs+0x134>
   3c6dc:	90c00117 	ldw	r3,4(r18)
   3c6e0:	1800071e 	bne	r3,zero,3c700 <__call_exitprocs+0x188>
   3c6e4:	90c00017 	ldw	r3,0(r18)
   3c6e8:	18000926 	beq	r3,zero,3c710 <__call_exitprocs+0x198>
   3c6ec:	9009883a 	mov	r4,r18
   3c6f0:	b8c00015 	stw	r3,0(r23)
   3c6f4:	00000000 	call	0 <__alt_mem_onchip_data_memory_cpu1>
   3c6f8:	bc800017 	ldw	r18,0(r23)
   3c6fc:	003fb506 	br	3c5d4 <__call_exitprocs+0x5c>
   3c700:	90c00017 	ldw	r3,0(r18)
   3c704:	902f883a 	mov	r23,r18
   3c708:	1825883a 	mov	r18,r3
   3c70c:	003fb106 	br	3c5d4 <__call_exitprocs+0x5c>
   3c710:	0007883a 	mov	r3,zero
   3c714:	003ffb06 	br	3c704 <__call_exitprocs+0x18c>

0003c718 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3c718:	defffc04 	addi	sp,sp,-16
   3c71c:	df000315 	stw	fp,12(sp)
   3c720:	df000304 	addi	fp,sp,12
   3c724:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   3c728:	0001883a 	nop
   3c72c:	e0bfff17 	ldw	r2,-4(fp)
   3c730:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   3c734:	e0bffd17 	ldw	r2,-12(fp)
   3c738:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   3c73c:	e0bffe17 	ldw	r2,-8(fp)
   3c740:	10000226 	beq	r2,zero,3c74c <_exit+0x34>
    ALT_SIM_FAIL();
   3c744:	002af070 	cmpltui	zero,zero,43969
   3c748:	00000106 	br	3c750 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   3c74c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3c750:	003fff06 	br	3c750 <_exit+0x38>

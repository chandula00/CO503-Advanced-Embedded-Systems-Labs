
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000301b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00030000 paddr 0x00030000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00030020 paddr 0x00030020 align 2**12
         filesz 0x0000c744 memsz 0x0000c744 flags r-x
    LOAD off    0x0000e000 vaddr 0x00000000 paddr 0x0003c764 align 2**12
         filesz 0x00001db4 memsz 0x000020a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00030000  00030000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00030020  00030020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c5ac  000301b8  000301b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000035c  00000000  0003c764  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0000035c  0003cac0  0000e35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00001db4  0003e518  0000fdb4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fdb4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  0000fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022d6f  00000000  00000000  00010b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008f5c  00000000  00000000  000338c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a10c  00000000  00000000  0003c823  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a64  00000000  00000000  00046930  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000304c  00000000  00000000  00048394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011002  00000000  00000000  0004b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005c3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00060176  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00060179  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0006017d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006017e  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006017f  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00060183  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00060187  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000a  00000000  00000000  0006018b  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000a  00000000  00000000  00060195  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000a  00000000  00000000  0006019f  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  000601a9  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  000601ac  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000776aa  00000000  00000000  000601fd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00030000 l    d  .entry	00000000 .entry
00030020 l    d  .exceptions	00000000 .exceptions
000301b8 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
0000035c l    d  .rwdata	00000000 .rwdata
00001db4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../producer_bsp//obj/HAL/src/crt0.o
000301f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00030094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0003053c l     F .text	00000034 __sprint_r
00000082 l     O .rodata	00000010 blanks.3515
00000092 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00032584 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00033ff4 l     F .text	00000008 __fp_lock
00033ffc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000035c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000000c8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00000210 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000385d8 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00039318 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00039aac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00039bc8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00039bf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00039cf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00039de8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00039ed4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0003a0b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001da4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0003a324 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0003a464 l     F .text	00000038 alt_dev_reg
00000d18 l     O .rwdata	00001060 jtag_uart0
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0003ac48 l     F .text	00000204 altera_avalon_jtag_uart_irq
0003ae4c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003b488 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003b6e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0003bb6c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0003bcc4 l     F .text	00000050 alt_get_errno
0003bd14 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00036ab4 g     F .text	00000074 _mprec_log10
00036ba4 g     F .text	00000084 __any_on
00037824 g     F .text	00000064 _isatty_r
000000f8 g     O .rodata	00000028 __mprec_tinytens
00039ff8 g     F .text	00000078 alt_main
00039a68 g     F .text	00000044 __ashldi3
00030418 g     F .text	00000084 _puts_r
00001e10 g     O .bss	00000100 alt_irq
00037888 g     F .text	0000006c _lseek_r
0003a7b4 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0003cac0 g       *ABS*	00000000 __flash_rwdata_start
00038e78 g     F .text	0000005c __eqdf2
00030280 g     F .text	0000003c FIFO_1_INIT
000020a0 g       *ABS*	00000000 __alt_heap_start
000303dc g     F .text	0000003c printf
000373c8 g     F .text	0000005c __sseek
00034098 g     F .text	0000010c __sinit
00034d30 g     F .text	0000009c _setlocale_r
00034010 g     F .text	00000078 __sfmoreglue
0003a090 g     F .text	00000020 __malloc_unlock
00035970 g     F .text	0000018c memmove
0003a534 g     F .text	00000098 altera_avalon_fifo_init
00034088 g     F .text	00000010 _cleanup
0003a864 g     F .text	00000058 altera_avalon_fifo_write_fifo
00035bd8 g     F .text	000000a8 _Balloc
00038f30 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00030000 g       *ABS*	00000000 __alt_mem_onchip_instruction_memory0
00030000 g     F .entry	0000000c __reset
0003a9fc g     F .text	00000028 altera_avalon_fifo_read_backpressure
00030020 g       *ABS*	00000000 __flash_exceptions_start
000377bc g     F .text	00000068 _fstat_r
00001dcc g     O .bss	00000004 errno
00001dd4 g     O .bss	00000004 alt_argv
00009d78 g       *ABS*	00000000 _gp
0003a700 g     F .text	0000005c altera_avalon_fifo_clear_event
00000b98 g     O .rwdata	00000180 alt_fd_list
0003c118 g     F .text	00000090 alt_find_dev
00035830 g     F .text	00000140 memcpy
00034004 g     F .text	0000000c _cleanup_r
00039054 g     F .text	000000d4 __floatsidf
0003bc4c g     F .text	00000078 alt_io_redirect
00038ff8 g     F .text	0000005c __ltdf2
0003c764 g       *ABS*	00000000 __DTOR_END__
0003049c g     F .text	00000014 puts
00036a10 g     F .text	000000a4 __ratio
0003b04c g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000303b0 g     F .text	0000002c _printf_r
00039438 g     F .text	00000008 __udivsi3
00039d44 g     F .text	000000a4 isatty
00000148 g     O .rodata	000000c8 __mprec_tens
00034dcc g     F .text	0000000c __locale_charset
00001dc8 g     O .bss	00000004 __malloc_top_pad
00001d80 g     O .rwdata	00000004 __mb_cur_max
00034dd8 g     F .text	0000000c _localeconv_r
00036008 g     F .text	0000003c __i2b
000346ec g     F .text	000004e4 __sfvwrite_r
00037288 g     F .text	00000064 _sbrk_r
000378f4 g     F .text	0000006c _read_r
0000075c g     O .rwdata	0000000c __lc_ctype
00001d9c g     O .rwdata	00000004 alt_max_fd
00039850 g     F .text	00000104 __unpack_d
0003766c g     F .text	0000013c _fclose_r
00033fc4 g     F .text	00000030 fflush
00001dc4 g     O .bss	00000004 __malloc_max_sbrked_mem
0003892c g     F .text	00000054 __adddf3
00036784 g     F .text	00000148 __b2d
00037fb0 g     F .text	00000628 __umoddi3
00039f24 g     F .text	000000d4 lseek
00001d78 g     O .rwdata	00000004 _global_impure_ptr
00036c28 g     F .text	000005fc _realloc_r
000020a0 g       *ABS*	00000000 __bss_end
0003ba7c g     F .text	000000f0 alt_iic_isr_register
0003bff4 g     F .text	00000104 alt_tick
00037960 g     F .text	00000650 __udivdi3
00000120 g     O .rodata	00000028 __mprec_bigtens
00035dec g     F .text	00000104 __s2b
000391fc g     F .text	0000011c __floatunsidf
00036524 g     F .text	00000058 __mcmp
000342b0 g     F .text	00000018 __fp_lock_all
0003ba30 g     F .text	0000004c alt_ic_irq_enabled
000302d4 g     F .text	0000009c producer
0003bf5c g     F .text	00000098 alt_alarm_stop
00001ddc g     O .bss	00000004 alt_irq_active
000300ec g     F .exceptions	000000cc alt_irq_handler
00000b70 g     O .rwdata	00000028 alt_dev_null
0003b6c4 g     F .text	0000001c alt_dcache_flush_all
00035ef0 g     F .text	00000068 __hi0bits
00039128 g     F .text	000000d4 __fixdfsi
0003a75c g     F .text	00000058 altera_avalon_fifo_write_ienable
00001db4 g       *ABS*	00000000 __ram_rwdata_end
0003a670 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00001d94 g     O .rwdata	00000008 alt_dev_list
0003a374 g     F .text	000000f0 write
0000035c g       *ABS*	00000000 __ram_rodata_end
00039c44 g     F .text	000000b0 fstat
00039a24 g     F .text	00000044 __lshrdi3
0003629c g     F .text	0000012c __pow5mult
00001dbc g     O .bss	00000004 __nlocale_changed
00039440 g     F .text	00000008 __umodsi3
000020a0 g       *ABS*	00000000 end
0003ab88 g     F .text	000000c0 altera_avalon_jtag_uart_init
0003a69c g     F .text	0000003c altera_avalon_fifo_read_event
0003c764 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0003b4fc g     F .text	00000088 alt_avalon_timer_sc_init
00039580 g     F .text	000000ac __clzsi2
0003b264 g     F .text	00000224 altera_avalon_jtag_uart_write
000342a0 g     F .text	00000004 __sfp_lock_acquire
0003a928 g     F .text	0000004c altera_avalon_fifo_read_fifo
00035738 g     F .text	000000f8 memchr
00030570 g     F .text	00001e7c ___vfprintf_internal_r
0003441c g     F .text	000002d0 _free_r
0003c588 g     F .text	000001a0 __call_exitprocs
00001db8 g     O .bss	00000004 __mlocale_changed
00001d84 g     O .rwdata	00000004 __malloc_sbrk_base
000301b8 g     F .text	0000003c _start
00001de0 g     O .bss	00000004 _alt_tick_rate
000363c8 g     F .text	0000015c __lshift
00001de4 g     O .bss	00000004 _alt_nticks
0003a100 g     F .text	000000f4 read
0003a4d0 g     F .text	00000064 alt_sys_init
0003c458 g     F .text	00000130 __register_exitproc
00036044 g     F .text	00000258 __multiply
0003aef0 g     F .text	00000068 altera_avalon_jtag_uart_close
00039448 g     F .text	00000028 __mulsi3
0000035c g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001de8 g     O .bss	00000028 __malloc_current_mallinfo
000368cc g     F .text	00000144 __d2b
0003aa24 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0003c2bc g     F .text	000000d4 alt_get_fd
00039954 g     F .text	000000d0 __fpcmp_parts_d
00037608 g     F .text	00000064 _close_r
0003c3dc g     F .text	0000007c memcmp
0003aae4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000020a0 g       *ABS*	00000000 __alt_stack_base
0003ab34 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00032410 g     F .text	00000174 __swsetup_r
0003a5cc g     F .text	0000003c altera_avalon_fifo_read_status
00038cc4 g     F .text	000001b4 __divdf3
000341a4 g     F .text	000000fc __sfp
00036b28 g     F .text	0000007c __copybits
00000768 g     O .rwdata	00000408 __malloc_av_
000342ac g     F .text	00000004 __sinit_lock_release
000389e0 g     F .text	000002e4 __muldf3
000372ec g     F .text	00000054 __sread
0003a9d0 g     F .text	0000002c altera_avalon_fifo_read_other_info
0003c1a8 g     F .text	00000114 alt_find_file
0003b730 g     F .text	000000a0 alt_dev_llist_insert
0003a070 g     F .text	00000020 __malloc_lock
0003a274 g     F .text	000000b0 sbrk
00033ddc g     F .text	000001e8 _fflush_r
0003753c g     F .text	000000cc _calloc_r
00001db4 g       *ABS*	00000000 __bss_start
00035afc g     F .text	000000dc memset
000302bc g     F .text	00000018 main
00001dd8 g     O .bss	00000004 alt_envp
00001dc0 g     O .bss	00000004 __malloc_max_total_mem
0003aa84 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0003a6d8 g     F .text	00000028 altera_avalon_fifo_read_level
00037424 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000377a8 g     F .text	00000014 fclose
00001f10 g     O .bss	00000190 _atexit0
000327c0 g     F .text	0000161c _dtoa_r
00034fb4 g     F .text	00000784 _malloc_r
00001da0 g     O .rwdata	00000004 alt_errno
00034bd0 g     F .text	000000a8 _fwalk
000301f4 g     F .text	00000048 WRITE_FIFO_1
0003938c g     F .text	00000050 __divsi3
0000021c g     O .rodata	00000014 __thenan_df
000342e0 g     F .text	0000013c _malloc_trim_r
0003c764 g       *ABS*	00000000 __CTOR_END__
0003742c g     F .text	000000a4 strcmp
0003c764 g       *ABS*	00000000 __flash_rodata_start
0003c764 g       *ABS*	00000000 __DTOR_LIST__
00030370 g     F .text	00000040 delay
00038ed4 g     F .text	0000005c __nedf2
0003a49c g     F .text	00000034 alt_irq_init
0003a1f4 g     F .text	00000080 alt_release_fd
00000230 g     O .rodata	00000100 __clz_tab
00001db4 g     O .bss	00000004 _PathLocale
0003c390 g     F .text	00000014 atexit
000374d0 g     F .text	0000006c _write_r
00034de4 g     F .text	0000001c setlocale
00001d7c g     O .rwdata	00000004 _impure_ptr
00001dd0 g     O .bss	00000004 alt_argc
0003b82c g     F .text	0000005c _do_dtors
00030020 g       .exceptions	00000000 alt_irq_entry
00036724 g     F .text	00000060 __ulp
00037224 g     F .text	00000038 __isinfd
000342c8 g     F .text	00000018 __fp_unlock_all
00001d8c g     O .rwdata	00000008 alt_fs_list
00030020 g       *ABS*	00000000 __ram_exceptions_start
00034e00 g     F .text	0000000c localeconv
0003a974 g     F .text	0000005c altera_avalon_fifo_write_other_info
0003b8a4 g     F .text	00000050 alt_ic_isr_register
00001db4 g       *ABS*	00000000 _edata
000020a0 g       *ABS*	00000000 _end
000301b8 g       *ABS*	00000000 __ram_exceptions_end
0003af58 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0003b990 g     F .text	000000a0 alt_ic_irq_disable
00037340 g     F .text	00000088 __swrite
00001d88 g     O .rwdata	00000004 __malloc_trim_threshold
0003c0f8 g     F .text	00000020 altera_nios2_qsys_irq_init
0003c3a4 g     F .text	00000038 exit
00034c78 g     F .text	000000b8 _fwalk_reent
0003657c g     F .text	000001a8 __mdiff
000393dc g     F .text	0000005c __modsi3
0003a608 g     F .text	0000003c altera_avalon_fifo_read_ienable
00020000 g       *ABS*	00000000 __alt_data_end
00030020 g     F .exceptions	00000000 alt_exception
000342a4 g     F .text	00000004 __sfp_lock_release
0003c728 g     F .text	0000003c _exit
0003725c g     F .text	0000002c __isnand
0003b584 g     F .text	00000140 alt_alarm_start
00039470 g     F .text	00000110 __muldi3
0003a644 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00034e0c g     F .text	000001a8 __smakebuf_r
000304b0 g     F .text	0000008c strlen
0003be04 g     F .text	00000158 open
0003a8bc g     F .text	0000006c altera_avalon_read_fifo
00038f94 g     F .text	00000064 __gedf2
0003023c g     F .text	00000044 READ_FIFO_1
00000000 g       *ABS*	00000000 __alt_mem_onchip_data_memory_cpu0
0003b888 g     F .text	0000001c alt_icache_flush_all
00001da8 g     O .rwdata	00000004 alt_priority_mask
0003b8f4 g     F .text	0000009c alt_ic_irq_enable
000323ec g     F .text	00000024 __vfprintf_internal
00038980 g     F .text	00000060 __subdf3
00035f58 g     F .text	000000b0 __lo0bits
0003a80c g     F .text	00000058 altera_avalon_fifo_write_almostempty
00001dac g     O .rwdata	00000008 alt_alarm_list
0003b7d0 g     F .text	0000005c _do_ctors
00039afc g     F .text	000000cc close
00039e54 g     F .text	00000080 alt_load
0003962c g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000342a8 g     F .text	00000004 __sinit_lock_acquire
00035ca8 g     F .text	00000144 __multadd
00035c80 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00030000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   30000:	004000f4 	movhi	at,3
    ori r1, r1, %lo(_start)
   30004:	08406e14 	ori	at,at,440
    jmp r1
   30008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00030020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   30020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   30024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   30028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   3002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   30030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   30034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   30038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   3003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   30040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   30044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   30048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   3004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   30050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   30054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   30058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   3005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   30060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   30064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   30068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   3006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   30070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   30074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   30078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   3007c:	10000326 	beq	r2,zero,3008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   30080:	20000226 	beq	r4,zero,3008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   30084:	00300ec0 	call	300ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   30088:	00000306 	br	30098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   3008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   30090:	e8bfff17 	ldw	r2,-4(ea)

00030094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   30094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   30098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   3009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   300a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   300a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   300a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   300ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   300b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   300b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   300b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   300bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   300c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   300c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   300c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   300cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   300d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   300d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   300d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   300dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   300e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   300e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   300e8:	ef80083a 	eret

000300ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   300ec:	defff904 	addi	sp,sp,-28
   300f0:	dfc00615 	stw	ra,24(sp)
   300f4:	df000515 	stw	fp,20(sp)
   300f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   300fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   30100:	0005313a 	rdctl	r2,ipending
   30104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   30108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   3010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   30110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   30114:	00800044 	movi	r2,1
   30118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   3011c:	e0fffb17 	ldw	r3,-20(fp)
   30120:	e0bffc17 	ldw	r2,-16(fp)
   30124:	1884703a 	and	r2,r3,r2
   30128:	10001726 	beq	r2,zero,30188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   3012c:	00c00034 	movhi	r3,0
   30130:	18c78404 	addi	r3,r3,7696
   30134:	e0bffd17 	ldw	r2,-12(fp)
   30138:	100490fa 	slli	r2,r2,3
   3013c:	1885883a 	add	r2,r3,r2
   30140:	10c00017 	ldw	r3,0(r2)
   30144:	01000034 	movhi	r4,0
   30148:	21078404 	addi	r4,r4,7696
   3014c:	e0bffd17 	ldw	r2,-12(fp)
   30150:	100490fa 	slli	r2,r2,3
   30154:	2085883a 	add	r2,r4,r2
   30158:	10800104 	addi	r2,r2,4
   3015c:	10800017 	ldw	r2,0(r2)
   30160:	1009883a 	mov	r4,r2
   30164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   30168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   3016c:	0005313a 	rdctl	r2,ipending
   30170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   30174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   30178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   3017c:	e0bffb17 	ldw	r2,-20(fp)
   30180:	103fe31e 	bne	r2,zero,30110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   30184:	00000706 	br	301a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   30188:	e0bffc17 	ldw	r2,-16(fp)
   3018c:	1085883a 	add	r2,r2,r2
   30190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   30194:	e0bffd17 	ldw	r2,-12(fp)
   30198:	10800044 	addi	r2,r2,1
   3019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   301a0:	003fde06 	br	3011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   301a4:	e037883a 	mov	sp,fp
   301a8:	dfc00117 	ldw	ra,4(sp)
   301ac:	df000017 	ldw	fp,0(sp)
   301b0:	dec00204 	addi	sp,sp,8
   301b4:	f800283a 	ret

Disassembly of section .text:

000301b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   301b8:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   301bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   301c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
   301c4:	d6a75e14 	ori	gp,gp,40312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   301c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
   301cc:	10876d14 	ori	r2,r2,7604

    movhi r3, %hi(__bss_end)
   301d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
   301d4:	18c82814 	ori	r3,r3,8352

    beq r2, r3, 1f
   301d8:	10c00326 	beq	r2,r3,301e8 <_start+0x30>

0:
    stw zero, (r2)
   301dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   301e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   301e4:	10fffd36 	bltu	r2,r3,301dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   301e8:	0039e540 	call	39e54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   301ec:	0039ff80 	call	39ff8 <alt_main>

000301f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   301f0:	003fff06 	br	301f0 <alt_after_alt_main>

000301f4 <WRITE_FIFO_1>:
 */

#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   301f4:	defffd04 	addi	sp,sp,-12
   301f8:	dfc00215 	stw	ra,8(sp)
   301fc:	df000115 	stw	fp,4(sp)
   30200:	df000104 	addi	fp,sp,4
   30204:	e13fff15 	stw	r4,-4(fp)
	// 									  ALTERA_AVALON_FIFO_STATUS_FULL))
	// {
	// }

	// Write data to FIFO
	altera_avalon_fifo_write_fifo(IN_BASE, CONTROL_BASE, *buffer);
   30208:	e0bfff17 	ldw	r2,-4(fp)
   3020c:	10800017 	ldw	r2,0(r2)
   30210:	01000134 	movhi	r4,4
   30214:	21041404 	addi	r4,r4,4176
   30218:	01400134 	movhi	r5,4
   3021c:	29440004 	addi	r5,r5,4096
   30220:	100d883a 	mov	r6,r2
   30224:	003a8640 	call	3a864 <altera_avalon_fifo_write_fifo>
}
   30228:	e037883a 	mov	sp,fp
   3022c:	dfc00117 	ldw	ra,4(sp)
   30230:	df000017 	ldw	fp,0(sp)
   30234:	dec00204 	addi	sp,sp,8
   30238:	f800283a 	ret

0003023c <READ_FIFO_1>:

void READ_FIFO_1(int *buffer)
{
   3023c:	defffd04 	addi	sp,sp,-12
   30240:	dfc00215 	stw	ra,8(sp)
   30244:	df000115 	stw	fp,4(sp)
   30248:	df000104 	addi	fp,sp,4
   3024c:	e13fff15 	stw	r4,-4(fp)
	// Wait if the FIFO is empty
	// while (altera_avalon_fifo_read_status(FIFO_MEM_IN_CSR_BASE, ALTERA_AVALON_FIFO_STATUS_EMPTY))
	// 	;

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(OUT_BASE, CONTROL_BASE);
   30250:	01000134 	movhi	r4,4
   30254:	21041404 	addi	r4,r4,4176
   30258:	01400134 	movhi	r5,4
   3025c:	29440004 	addi	r5,r5,4096
   30260:	003a9280 	call	3a928 <altera_avalon_fifo_read_fifo>
   30264:	e0ffff17 	ldw	r3,-4(fp)
   30268:	18800015 	stw	r2,0(r3)
}
   3026c:	e037883a 	mov	sp,fp
   30270:	dfc00117 	ldw	ra,4(sp)
   30274:	df000017 	ldw	fp,0(sp)
   30278:	dec00204 	addi	sp,sp,8
   3027c:	f800283a 	ret

00030280 <FIFO_1_INIT>:

// Initialization
void FIFO_1_INIT()
{
   30280:	defffe04 	addi	sp,sp,-8
   30284:	dfc00115 	stw	ra,4(sp)
   30288:	df000015 	stw	fp,0(sp)
   3028c:	d839883a 	mov	fp,sp
	// Clear event register, set enable all interrupts, set almostempty and almostfull thresholds
	altera_avalon_fifo_init(CONTROL_BASE,
   30290:	01000134 	movhi	r4,4
   30294:	21040004 	addi	r4,r4,4096
   30298:	000b883a 	mov	r5,zero
   3029c:	01800044 	movi	r6,1
   302a0:	01c003c4 	movi	r7,15
   302a4:	003a5340 	call	3a534 <altera_avalon_fifo_init>
							0,
							1,				 // Almost empty threshold
							FIFO_DEPTH - 1); // Almost full threshold
   302a8:	e037883a 	mov	sp,fp
   302ac:	dfc00117 	ldw	ra,4(sp)
   302b0:	df000017 	ldw	fp,0(sp)
   302b4:	dec00204 	addi	sp,sp,8
   302b8:	f800283a 	ret

000302bc <main>:

void delay(int n);
int producer();

int main()
{
   302bc:	defffe04 	addi	sp,sp,-8
   302c0:	dfc00115 	stw	ra,4(sp)
   302c4:	df000015 	stw	fp,0(sp)
   302c8:	d839883a 	mov	fp,sp
	producer();
   302cc:	00302d40 	call	302d4 <producer>

	while (1)
	{
	}
   302d0:	003fff06 	br	302d0 <main+0x14>

000302d4 <producer>:

	return 0;
}

int producer()
{
   302d4:	defffd04 	addi	sp,sp,-12
   302d8:	dfc00215 	stw	ra,8(sp)
   302dc:	df000115 	stw	fp,4(sp)
   302e0:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
   302e4:	01000034 	movhi	r4,0
   302e8:	21000004 	addi	r4,r4,0
   302ec:	003049c0 	call	3049c <puts>

	FIFO_1_INIT(); // Initialize the FIFO
   302f0:	00302800 	call	30280 <FIFO_1_INIT>

	int j = 5;
   302f4:	00800144 	movi	r2,5
   302f8:	e0bfff15 	stw	r2,-4(fp)
	while (j <= 500)
   302fc:	00001006 	br	30340 <producer+0x6c>
	{
		delay(100000);
   30300:	010000b4 	movhi	r4,2
   30304:	2121a804 	addi	r4,r4,-31072
   30308:	00303700 	call	30370 <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   3030c:	e13fff04 	addi	r4,fp,-4
   30310:	00301f40 	call	301f4 <WRITE_FIFO_1>
		delay(100000);
   30314:	010000b4 	movhi	r4,2
   30318:	2121a804 	addi	r4,r4,-31072
   3031c:	00303700 	call	30370 <delay>

		printf("Producer sent [%i]\n", j);
   30320:	e0bfff17 	ldw	r2,-4(fp)
   30324:	01000034 	movhi	r4,0
   30328:	21000504 	addi	r4,r4,20
   3032c:	100b883a 	mov	r5,r2
   30330:	00303dc0 	call	303dc <printf>
		j += 10;
   30334:	e0bfff17 	ldw	r2,-4(fp)
   30338:	10800284 	addi	r2,r2,10
   3033c:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while (j <= 500)
   30340:	e0bfff17 	ldw	r2,-4(fp)
   30344:	10807d50 	cmplti	r2,r2,501
   30348:	103fed1e 	bne	r2,zero,30300 <producer+0x2c>

		printf("Producer sent [%i]\n", j);
		j += 10;
	}

	printf("Producer finished..\n");
   3034c:	01000034 	movhi	r4,0
   30350:	21000a04 	addi	r4,r4,40
   30354:	003049c0 	call	3049c <puts>
	return 0;
   30358:	0005883a 	mov	r2,zero
}
   3035c:	e037883a 	mov	sp,fp
   30360:	dfc00117 	ldw	ra,4(sp)
   30364:	df000017 	ldw	fp,0(sp)
   30368:	dec00204 	addi	sp,sp,8
   3036c:	f800283a 	ret

00030370 <delay>:

void delay(int n)
{
   30370:	defffd04 	addi	sp,sp,-12
   30374:	df000215 	stw	fp,8(sp)
   30378:	df000204 	addi	fp,sp,8
   3037c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = n; i > 0; i--)
   30380:	e0bfff17 	ldw	r2,-4(fp)
   30384:	e0bffe15 	stw	r2,-8(fp)
   30388:	00000306 	br	30398 <delay+0x28>
   3038c:	e0bffe17 	ldw	r2,-8(fp)
   30390:	10bfffc4 	addi	r2,r2,-1
   30394:	e0bffe15 	stw	r2,-8(fp)
   30398:	e0bffe17 	ldw	r2,-8(fp)
   3039c:	00bffb16 	blt	zero,r2,3038c <delay+0x1c>
	{
		continue;
	}
   303a0:	e037883a 	mov	sp,fp
   303a4:	df000017 	ldw	fp,0(sp)
   303a8:	dec00104 	addi	sp,sp,4
   303ac:	f800283a 	ret

000303b0 <_printf_r>:
   303b0:	defffd04 	addi	sp,sp,-12
   303b4:	dfc00015 	stw	ra,0(sp)
   303b8:	d9800115 	stw	r6,4(sp)
   303bc:	d9c00215 	stw	r7,8(sp)
   303c0:	280d883a 	mov	r6,r5
   303c4:	21400217 	ldw	r5,8(r4)
   303c8:	d9c00104 	addi	r7,sp,4
   303cc:	00305700 	call	30570 <___vfprintf_internal_r>
   303d0:	dfc00017 	ldw	ra,0(sp)
   303d4:	dec00304 	addi	sp,sp,12
   303d8:	f800283a 	ret

000303dc <printf>:
   303dc:	defffc04 	addi	sp,sp,-16
   303e0:	dfc00015 	stw	ra,0(sp)
   303e4:	d9400115 	stw	r5,4(sp)
   303e8:	d9800215 	stw	r6,8(sp)
   303ec:	d9c00315 	stw	r7,12(sp)
   303f0:	00800034 	movhi	r2,0
   303f4:	10875f04 	addi	r2,r2,7548
   303f8:	10800017 	ldw	r2,0(r2)
   303fc:	200b883a 	mov	r5,r4
   30400:	d9800104 	addi	r6,sp,4
   30404:	11000217 	ldw	r4,8(r2)
   30408:	00323ec0 	call	323ec <__vfprintf_internal>
   3040c:	dfc00017 	ldw	ra,0(sp)
   30410:	dec00404 	addi	sp,sp,16
   30414:	f800283a 	ret

00030418 <_puts_r>:
   30418:	defff604 	addi	sp,sp,-40
   3041c:	dc400815 	stw	r17,32(sp)
   30420:	2023883a 	mov	r17,r4
   30424:	2809883a 	mov	r4,r5
   30428:	dc000715 	stw	r16,28(sp)
   3042c:	dfc00915 	stw	ra,36(sp)
   30430:	2821883a 	mov	r16,r5
   30434:	00304b00 	call	304b0 <strlen>
   30438:	10c00044 	addi	r3,r2,1
   3043c:	d8800115 	stw	r2,4(sp)
   30440:	89400217 	ldw	r5,8(r17)
   30444:	00800034 	movhi	r2,0
   30448:	10800f04 	addi	r2,r2,60
   3044c:	d8800215 	stw	r2,8(sp)
   30450:	00800044 	movi	r2,1
   30454:	d8800315 	stw	r2,12(sp)
   30458:	8809883a 	mov	r4,r17
   3045c:	00800084 	movi	r2,2
   30460:	d9800404 	addi	r6,sp,16
   30464:	dc000015 	stw	r16,0(sp)
   30468:	d8c00615 	stw	r3,24(sp)
   3046c:	dec00415 	stw	sp,16(sp)
   30470:	d8800515 	stw	r2,20(sp)
   30474:	00346ec0 	call	346ec <__sfvwrite_r>
   30478:	1000061e 	bne	r2,zero,30494 <_puts_r+0x7c>
   3047c:	00800284 	movi	r2,10
   30480:	dfc00917 	ldw	ra,36(sp)
   30484:	dc400817 	ldw	r17,32(sp)
   30488:	dc000717 	ldw	r16,28(sp)
   3048c:	dec00a04 	addi	sp,sp,40
   30490:	f800283a 	ret
   30494:	00bfffc4 	movi	r2,-1
   30498:	003ff906 	br	30480 <_puts_r+0x68>

0003049c <puts>:
   3049c:	00800034 	movhi	r2,0
   304a0:	10875f04 	addi	r2,r2,7548
   304a4:	200b883a 	mov	r5,r4
   304a8:	11000017 	ldw	r4,0(r2)
   304ac:	00304181 	jmpi	30418 <_puts_r>

000304b0 <strlen>:
   304b0:	208000cc 	andi	r2,r4,3
   304b4:	10001f1e 	bne	r2,zero,30534 <strlen+0x84>
   304b8:	20800017 	ldw	r2,0(r4)
   304bc:	01ffbff4 	movhi	r7,65279
   304c0:	39ffbfc4 	addi	r7,r7,-257
   304c4:	01a02074 	movhi	r6,32897
   304c8:	31a02004 	addi	r6,r6,-32640
   304cc:	11c7883a 	add	r3,r2,r7
   304d0:	0084303a 	nor	r2,zero,r2
   304d4:	1886703a 	and	r3,r3,r2
   304d8:	1986703a 	and	r3,r3,r6
   304dc:	2005883a 	mov	r2,r4
   304e0:	1800101e 	bne	r3,zero,30524 <strlen+0x74>
   304e4:	10800104 	addi	r2,r2,4
   304e8:	10c00017 	ldw	r3,0(r2)
   304ec:	19cb883a 	add	r5,r3,r7
   304f0:	00c6303a 	nor	r3,zero,r3
   304f4:	28c6703a 	and	r3,r5,r3
   304f8:	1986703a 	and	r3,r3,r6
   304fc:	1800091e 	bne	r3,zero,30524 <strlen+0x74>
   30500:	10800104 	addi	r2,r2,4
   30504:	10c00017 	ldw	r3,0(r2)
   30508:	19cb883a 	add	r5,r3,r7
   3050c:	00c6303a 	nor	r3,zero,r3
   30510:	28c6703a 	and	r3,r5,r3
   30514:	1986703a 	and	r3,r3,r6
   30518:	183ff226 	beq	r3,zero,304e4 <strlen+0x34>
   3051c:	00000106 	br	30524 <strlen+0x74>
   30520:	10800044 	addi	r2,r2,1
   30524:	10c00007 	ldb	r3,0(r2)
   30528:	183ffd1e 	bne	r3,zero,30520 <strlen+0x70>
   3052c:	1105c83a 	sub	r2,r2,r4
   30530:	f800283a 	ret
   30534:	2005883a 	mov	r2,r4
   30538:	003ffa06 	br	30524 <strlen+0x74>

0003053c <__sprint_r>:
   3053c:	30800217 	ldw	r2,8(r6)
   30540:	defffe04 	addi	sp,sp,-8
   30544:	dc000015 	stw	r16,0(sp)
   30548:	dfc00115 	stw	ra,4(sp)
   3054c:	3021883a 	mov	r16,r6
   30550:	10000226 	beq	r2,zero,3055c <__sprint_r+0x20>
   30554:	00346ec0 	call	346ec <__sfvwrite_r>
   30558:	80000215 	stw	zero,8(r16)
   3055c:	80000115 	stw	zero,4(r16)
   30560:	dfc00117 	ldw	ra,4(sp)
   30564:	dc000017 	ldw	r16,0(sp)
   30568:	dec00204 	addi	sp,sp,8
   3056c:	f800283a 	ret

00030570 <___vfprintf_internal_r>:
   30570:	defeb904 	addi	sp,sp,-1308
   30574:	dc013d15 	stw	r16,1268(sp)
   30578:	d9013015 	stw	r4,1216(sp)
   3057c:	dfc14615 	stw	ra,1304(sp)
   30580:	df014515 	stw	fp,1300(sp)
   30584:	ddc14415 	stw	r23,1296(sp)
   30588:	dd814315 	stw	r22,1292(sp)
   3058c:	dd414215 	stw	r21,1288(sp)
   30590:	dd014115 	stw	r20,1284(sp)
   30594:	dcc14015 	stw	r19,1280(sp)
   30598:	dc813f15 	stw	r18,1276(sp)
   3059c:	dc413e15 	stw	r17,1272(sp)
   305a0:	d9412915 	stw	r5,1188(sp)
   305a4:	3021883a 	mov	r16,r6
   305a8:	d9c12d15 	stw	r7,1204(sp)
   305ac:	0034dd80 	call	34dd8 <_localeconv_r>
   305b0:	10800017 	ldw	r2,0(r2)
   305b4:	d9013017 	ldw	r4,1216(sp)
   305b8:	d8013315 	stw	zero,1228(sp)
   305bc:	d8813715 	stw	r2,1244(sp)
   305c0:	d8013415 	stw	zero,1232(sp)
   305c4:	20000226 	beq	r4,zero,305d0 <___vfprintf_internal_r+0x60>
   305c8:	20800e17 	ldw	r2,56(r4)
   305cc:	10014b26 	beq	r2,zero,30afc <___vfprintf_internal_r+0x58c>
   305d0:	d8c12917 	ldw	r3,1188(sp)
   305d4:	1880030b 	ldhu	r2,12(r3)
   305d8:	10c0020c 	andi	r3,r2,8
   305dc:	18ffffcc 	andi	r3,r3,65535
   305e0:	18e0001c 	xori	r3,r3,32768
   305e4:	18e00004 	addi	r3,r3,-32768
   305e8:	1800ed26 	beq	r3,zero,309a0 <___vfprintf_internal_r+0x430>
   305ec:	d9012917 	ldw	r4,1188(sp)
   305f0:	20c00417 	ldw	r3,16(r4)
   305f4:	1800ea26 	beq	r3,zero,309a0 <___vfprintf_internal_r+0x430>
   305f8:	1100068c 	andi	r4,r2,26
   305fc:	00c00284 	movi	r3,10
   30600:	20c0f026 	beq	r4,r3,309c4 <___vfprintf_internal_r+0x454>
   30604:	d9010dc4 	addi	r4,sp,1079
   30608:	d8810e04 	addi	r2,sp,1080
   3060c:	dc413017 	ldw	r17,1216(sp)
   30610:	d8c00404 	addi	r3,sp,16
   30614:	d9012615 	stw	r4,1176(sp)
   30618:	1109c83a 	sub	r4,r2,r4
   3061c:	d8812715 	stw	r2,1180(sp)
   30620:	d8c11b15 	stw	r3,1132(sp)
   30624:	d8011d15 	stw	zero,1140(sp)
   30628:	d8011c15 	stw	zero,1136(sp)
   3062c:	802b883a 	mov	r21,r16
   30630:	d8013215 	stw	zero,1224(sp)
   30634:	d8013615 	stw	zero,1240(sp)
   30638:	d8013515 	stw	zero,1236(sp)
   3063c:	d8012c15 	stw	zero,1200(sp)
   30640:	1813883a 	mov	r9,r3
   30644:	d9013915 	stw	r4,1252(sp)
   30648:	a8800007 	ldb	r2,0(r21)
   3064c:	1002f326 	beq	r2,zero,3121c <___vfprintf_internal_r+0xcac>
   30650:	00c00944 	movi	r3,37
   30654:	a825883a 	mov	r18,r21
   30658:	10c0021e 	bne	r2,r3,30664 <___vfprintf_internal_r+0xf4>
   3065c:	00001406 	br	306b0 <___vfprintf_internal_r+0x140>
   30660:	10c00326 	beq	r2,r3,30670 <___vfprintf_internal_r+0x100>
   30664:	94800044 	addi	r18,r18,1
   30668:	90800007 	ldb	r2,0(r18)
   3066c:	103ffc1e 	bne	r2,zero,30660 <___vfprintf_internal_r+0xf0>
   30670:	9561c83a 	sub	r16,r18,r21
   30674:	80000e26 	beq	r16,zero,306b0 <___vfprintf_internal_r+0x140>
   30678:	da011d17 	ldw	r8,1140(sp)
   3067c:	d8c11c17 	ldw	r3,1136(sp)
   30680:	4d400015 	stw	r21,0(r9)
   30684:	4c000115 	stw	r16,4(r9)
   30688:	4411883a 	add	r8,r8,r16
   3068c:	18c00044 	addi	r3,r3,1
   30690:	da011d15 	stw	r8,1140(sp)
   30694:	d8c11c15 	stw	r3,1136(sp)
   30698:	008001c4 	movi	r2,7
   3069c:	10c11016 	blt	r2,r3,30ae0 <___vfprintf_internal_r+0x570>
   306a0:	4a400204 	addi	r9,r9,8
   306a4:	d8812c17 	ldw	r2,1200(sp)
   306a8:	1405883a 	add	r2,r2,r16
   306ac:	d8812c15 	stw	r2,1200(sp)
   306b0:	90800007 	ldb	r2,0(r18)
   306b4:	1000ee26 	beq	r2,zero,30a70 <___vfprintf_internal_r+0x500>
   306b8:	95400044 	addi	r21,r18,1
   306bc:	94800047 	ldb	r18,1(r18)
   306c0:	073fffc4 	movi	fp,-1
   306c4:	e007883a 	mov	r3,fp
   306c8:	d8012585 	stb	zero,1174(sp)
   306cc:	d8012e15 	stw	zero,1208(sp)
   306d0:	0021883a 	mov	r16,zero
   306d4:	05001604 	movi	r20,88
   306d8:	04c00244 	movi	r19,9
   306dc:	4839883a 	mov	fp,r9
   306e0:	ad400044 	addi	r21,r21,1
   306e4:	90bff804 	addi	r2,r18,-32
   306e8:	a080462e 	bgeu	r20,r2,30804 <___vfprintf_internal_r+0x294>
   306ec:	e013883a 	mov	r9,fp
   306f0:	9000df26 	beq	r18,zero,30a70 <___vfprintf_internal_r+0x500>
   306f4:	00c00044 	movi	r3,1
   306f8:	d8c12815 	stw	r3,1184(sp)
   306fc:	dc810405 	stb	r18,1040(sp)
   30700:	d8012585 	stb	zero,1174(sp)
   30704:	d8c12b15 	stw	r3,1196(sp)
   30708:	dcc10404 	addi	r19,sp,1040
   3070c:	d8013115 	stw	zero,1220(sp)
   30710:	80c0008c 	andi	r3,r16,2
   30714:	d8c12a15 	stw	r3,1192(sp)
   30718:	18000326 	beq	r3,zero,30728 <___vfprintf_internal_r+0x1b8>
   3071c:	d8c12817 	ldw	r3,1184(sp)
   30720:	18c00084 	addi	r3,r3,2
   30724:	d8c12815 	stw	r3,1184(sp)
   30728:	80c0210c 	andi	r3,r16,132
   3072c:	d8c12f15 	stw	r3,1212(sp)
   30730:	1802251e 	bne	r3,zero,30fc8 <___vfprintf_internal_r+0xa58>
   30734:	d9012e17 	ldw	r4,1208(sp)
   30738:	d8c12817 	ldw	r3,1184(sp)
   3073c:	20edc83a 	sub	r22,r4,r3
   30740:	0582210e 	bge	zero,r22,30fc8 <___vfprintf_internal_r+0xa58>
   30744:	02800404 	movi	r10,16
   30748:	da011d17 	ldw	r8,1140(sp)
   3074c:	d8c11c17 	ldw	r3,1136(sp)
   30750:	05c00034 	movhi	r23,0
   30754:	bdc02084 	addi	r23,r23,130
   30758:	5580200e 	bge	r10,r22,307dc <___vfprintf_internal_r+0x26c>
   3075c:	dc813815 	stw	r18,1248(sp)
   30760:	5039883a 	mov	fp,r10
   30764:	b825883a 	mov	r18,r23
   30768:	050001c4 	movi	r20,7
   3076c:	b02f883a 	mov	r23,r22
   30770:	802d883a 	mov	r22,r16
   30774:	dc012917 	ldw	r16,1188(sp)
   30778:	00000306 	br	30788 <___vfprintf_internal_r+0x218>
   3077c:	bdfffc04 	addi	r23,r23,-16
   30780:	4a400204 	addi	r9,r9,8
   30784:	e5c0110e 	bge	fp,r23,307cc <___vfprintf_internal_r+0x25c>
   30788:	4c800015 	stw	r18,0(r9)
   3078c:	4f000115 	stw	fp,4(r9)
   30790:	42000404 	addi	r8,r8,16
   30794:	18c00044 	addi	r3,r3,1
   30798:	da011d15 	stw	r8,1140(sp)
   3079c:	d8c11c15 	stw	r3,1136(sp)
   307a0:	a0fff60e 	bge	r20,r3,3077c <___vfprintf_internal_r+0x20c>
   307a4:	8809883a 	mov	r4,r17
   307a8:	800b883a 	mov	r5,r16
   307ac:	d9811b04 	addi	r6,sp,1132
   307b0:	003053c0 	call	3053c <__sprint_r>
   307b4:	1000b41e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   307b8:	bdfffc04 	addi	r23,r23,-16
   307bc:	da011d17 	ldw	r8,1140(sp)
   307c0:	d8c11c17 	ldw	r3,1136(sp)
   307c4:	da400404 	addi	r9,sp,16
   307c8:	e5ffef16 	blt	fp,r23,30788 <___vfprintf_internal_r+0x218>
   307cc:	b021883a 	mov	r16,r22
   307d0:	b82d883a 	mov	r22,r23
   307d4:	902f883a 	mov	r23,r18
   307d8:	dc813817 	ldw	r18,1248(sp)
   307dc:	4dc00015 	stw	r23,0(r9)
   307e0:	4d800115 	stw	r22,4(r9)
   307e4:	4591883a 	add	r8,r8,r22
   307e8:	18c00044 	addi	r3,r3,1
   307ec:	da011d15 	stw	r8,1140(sp)
   307f0:	d8c11c15 	stw	r3,1136(sp)
   307f4:	008001c4 	movi	r2,7
   307f8:	10c3fe16 	blt	r2,r3,317f4 <___vfprintf_internal_r+0x1284>
   307fc:	4a400204 	addi	r9,r9,8
   30800:	0001f306 	br	30fd0 <___vfprintf_internal_r+0xa60>
   30804:	1085883a 	add	r2,r2,r2
   30808:	1085883a 	add	r2,r2,r2
   3080c:	010000f4 	movhi	r4,3
   30810:	21020804 	addi	r4,r4,2080
   30814:	1105883a 	add	r2,r2,r4
   30818:	10800017 	ldw	r2,0(r2)
   3081c:	1000683a 	jmp	r2
   30820:	00030efc 	xorhi	zero,zero,3131
   30824:	000306ec 	andhi	zero,zero,3099
   30828:	000306ec 	andhi	zero,zero,3099
   3082c:	00030f14 	movui	zero,3132
   30830:	000306ec 	andhi	zero,zero,3099
   30834:	000306ec 	andhi	zero,zero,3099
   30838:	000306ec 	andhi	zero,zero,3099
   3083c:	000306ec 	andhi	zero,zero,3099
   30840:	000306ec 	andhi	zero,zero,3099
   30844:	000306ec 	andhi	zero,zero,3099
   30848:	00030dcc 	andi	zero,zero,3127
   3084c:	00030f60 	cmpeqi	zero,zero,3133
   30850:	000306ec 	andhi	zero,zero,3099
   30854:	00030994 	movui	zero,3110
   30858:	00030d34 	movhi	zero,3124
   3085c:	000306ec 	andhi	zero,zero,3099
   30860:	00030f20 	cmpeqi	zero,zero,3132
   30864:	00030f2c 	andhi	zero,zero,3132
   30868:	00030f2c 	andhi	zero,zero,3132
   3086c:	00030f2c 	andhi	zero,zero,3132
   30870:	00030f2c 	andhi	zero,zero,3132
   30874:	00030f2c 	andhi	zero,zero,3132
   30878:	00030f2c 	andhi	zero,zero,3132
   3087c:	00030f2c 	andhi	zero,zero,3132
   30880:	00030f2c 	andhi	zero,zero,3132
   30884:	00030f2c 	andhi	zero,zero,3132
   30888:	000306ec 	andhi	zero,zero,3099
   3088c:	000306ec 	andhi	zero,zero,3099
   30890:	000306ec 	andhi	zero,zero,3099
   30894:	000306ec 	andhi	zero,zero,3099
   30898:	000306ec 	andhi	zero,zero,3099
   3089c:	000306ec 	andhi	zero,zero,3099
   308a0:	000306ec 	andhi	zero,zero,3099
   308a4:	000306ec 	andhi	zero,zero,3099
   308a8:	000306ec 	andhi	zero,zero,3099
   308ac:	000306ec 	andhi	zero,zero,3099
   308b0:	00030b04 	movi	zero,3116
   308b4:	00030bc4 	movi	zero,3119
   308b8:	000306ec 	andhi	zero,zero,3099
   308bc:	00030bc4 	movi	zero,3119
   308c0:	000306ec 	andhi	zero,zero,3099
   308c4:	000306ec 	andhi	zero,zero,3099
   308c8:	000306ec 	andhi	zero,zero,3099
   308cc:	000306ec 	andhi	zero,zero,3099
   308d0:	00030c58 	cmpnei	zero,zero,3121
   308d4:	000306ec 	andhi	zero,zero,3099
   308d8:	000306ec 	andhi	zero,zero,3099
   308dc:	00030c64 	muli	zero,zero,3121
   308e0:	000306ec 	andhi	zero,zero,3099
   308e4:	000306ec 	andhi	zero,zero,3099
   308e8:	000306ec 	andhi	zero,zero,3099
   308ec:	000306ec 	andhi	zero,zero,3099
   308f0:	000306ec 	andhi	zero,zero,3099
   308f4:	00030c9c 	xori	zero,zero,3122
   308f8:	000306ec 	andhi	zero,zero,3099
   308fc:	000306ec 	andhi	zero,zero,3099
   30900:	00030cd8 	cmpnei	zero,zero,3123
   30904:	000306ec 	andhi	zero,zero,3099
   30908:	000306ec 	andhi	zero,zero,3099
   3090c:	000306ec 	andhi	zero,zero,3099
   30910:	000306ec 	andhi	zero,zero,3099
   30914:	000306ec 	andhi	zero,zero,3099
   30918:	000306ec 	andhi	zero,zero,3099
   3091c:	000306ec 	andhi	zero,zero,3099
   30920:	000306ec 	andhi	zero,zero,3099
   30924:	000306ec 	andhi	zero,zero,3099
   30928:	000306ec 	andhi	zero,zero,3099
   3092c:	00030f70 	cmpltui	zero,zero,3133
   30930:	00030fa4 	muli	zero,zero,3134
   30934:	00030bc4 	movi	zero,3119
   30938:	00030bc4 	movi	zero,3119
   3093c:	00030bc4 	movi	zero,3119
   30940:	00030ef0 	cmpltui	zero,zero,3131
   30944:	00030fa4 	muli	zero,zero,3134
   30948:	000306ec 	andhi	zero,zero,3099
   3094c:	000306ec 	andhi	zero,zero,3099
   30950:	00030d7c 	xorhi	zero,zero,3125
   30954:	000306ec 	andhi	zero,zero,3099
   30958:	00030d94 	movui	zero,3126
   3095c:	00030fb0 	cmpltui	zero,zero,3134
   30960:	00030df4 	movhi	zero,3127
   30964:	00030e44 	movi	zero,3129
   30968:	000306ec 	andhi	zero,zero,3099
   3096c:	00030e50 	cmplti	zero,zero,3129
   30970:	000306ec 	andhi	zero,zero,3099
   30974:	00030fbc 	xorhi	zero,zero,3134
   30978:	000306ec 	andhi	zero,zero,3099
   3097c:	000306ec 	andhi	zero,zero,3099
   30980:	00030eb4 	movhi	zero,3130
   30984:	d9012e17 	ldw	r4,1208(sp)
   30988:	d8812d15 	stw	r2,1204(sp)
   3098c:	0109c83a 	sub	r4,zero,r4
   30990:	d9012e15 	stw	r4,1208(sp)
   30994:	84000114 	ori	r16,r16,4
   30998:	ac800007 	ldb	r18,0(r21)
   3099c:	003f5006 	br	306e0 <___vfprintf_internal_r+0x170>
   309a0:	d9013017 	ldw	r4,1216(sp)
   309a4:	d9412917 	ldw	r5,1188(sp)
   309a8:	00324100 	call	32410 <__swsetup_r>
   309ac:	10003d1e 	bne	r2,zero,30aa4 <___vfprintf_internal_r+0x534>
   309b0:	d8c12917 	ldw	r3,1188(sp)
   309b4:	1880030b 	ldhu	r2,12(r3)
   309b8:	00c00284 	movi	r3,10
   309bc:	1100068c 	andi	r4,r2,26
   309c0:	20ff101e 	bne	r4,r3,30604 <___vfprintf_internal_r+0x94>
   309c4:	d9012917 	ldw	r4,1188(sp)
   309c8:	20c0038b 	ldhu	r3,14(r4)
   309cc:	193fffcc 	andi	r4,r3,65535
   309d0:	2120001c 	xori	r4,r4,32768
   309d4:	21200004 	addi	r4,r4,-32768
   309d8:	203f0a16 	blt	r4,zero,30604 <___vfprintf_internal_r+0x94>
   309dc:	d9012917 	ldw	r4,1188(sp)
   309e0:	d9c12d17 	ldw	r7,1204(sp)
   309e4:	10bfff4c 	andi	r2,r2,65533
   309e8:	22800717 	ldw	r10,28(r4)
   309ec:	22400917 	ldw	r9,36(r4)
   309f0:	d9013017 	ldw	r4,1216(sp)
   309f4:	02010004 	movi	r8,1024
   309f8:	d881070d 	sth	r2,1052(sp)
   309fc:	d9410404 	addi	r5,sp,1040
   30a00:	d8800404 	addi	r2,sp,16
   30a04:	800d883a 	mov	r6,r16
   30a08:	d8c1078d 	sth	r3,1054(sp)
   30a0c:	da810b15 	stw	r10,1068(sp)
   30a10:	da410d15 	stw	r9,1076(sp)
   30a14:	d8810415 	stw	r2,1040(sp)
   30a18:	d8810815 	stw	r2,1056(sp)
   30a1c:	da010615 	stw	r8,1048(sp)
   30a20:	da010915 	stw	r8,1060(sp)
   30a24:	d8010a15 	stw	zero,1064(sp)
   30a28:	00305700 	call	30570 <___vfprintf_internal_r>
   30a2c:	d8812c15 	stw	r2,1200(sp)
   30a30:	10000416 	blt	r2,zero,30a44 <___vfprintf_internal_r+0x4d4>
   30a34:	d9013017 	ldw	r4,1216(sp)
   30a38:	d9410404 	addi	r5,sp,1040
   30a3c:	0033ddc0 	call	33ddc <_fflush_r>
   30a40:	1006501e 	bne	r2,zero,32384 <___vfprintf_internal_r+0x1e14>
   30a44:	d881070b 	ldhu	r2,1052(sp)
   30a48:	1080100c 	andi	r2,r2,64
   30a4c:	10bfffcc 	andi	r2,r2,65535
   30a50:	10a0001c 	xori	r2,r2,32768
   30a54:	10a00004 	addi	r2,r2,-32768
   30a58:	10001426 	beq	r2,zero,30aac <___vfprintf_internal_r+0x53c>
   30a5c:	d8c12917 	ldw	r3,1188(sp)
   30a60:	1880030b 	ldhu	r2,12(r3)
   30a64:	10801014 	ori	r2,r2,64
   30a68:	1880030d 	sth	r2,12(r3)
   30a6c:	00000f06 	br	30aac <___vfprintf_internal_r+0x53c>
   30a70:	d8811d17 	ldw	r2,1140(sp)
   30a74:	10000426 	beq	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   30a78:	d9013017 	ldw	r4,1216(sp)
   30a7c:	d9412917 	ldw	r5,1188(sp)
   30a80:	d9811b04 	addi	r6,sp,1132
   30a84:	003053c0 	call	3053c <__sprint_r>
   30a88:	d8c12917 	ldw	r3,1188(sp)
   30a8c:	1880030b 	ldhu	r2,12(r3)
   30a90:	1080100c 	andi	r2,r2,64
   30a94:	10bfffcc 	andi	r2,r2,65535
   30a98:	10a0001c 	xori	r2,r2,32768
   30a9c:	10a00004 	addi	r2,r2,-32768
   30aa0:	10000226 	beq	r2,zero,30aac <___vfprintf_internal_r+0x53c>
   30aa4:	00bfffc4 	movi	r2,-1
   30aa8:	d8812c15 	stw	r2,1200(sp)
   30aac:	d8812c17 	ldw	r2,1200(sp)
   30ab0:	dfc14617 	ldw	ra,1304(sp)
   30ab4:	df014517 	ldw	fp,1300(sp)
   30ab8:	ddc14417 	ldw	r23,1296(sp)
   30abc:	dd814317 	ldw	r22,1292(sp)
   30ac0:	dd414217 	ldw	r21,1288(sp)
   30ac4:	dd014117 	ldw	r20,1284(sp)
   30ac8:	dcc14017 	ldw	r19,1280(sp)
   30acc:	dc813f17 	ldw	r18,1276(sp)
   30ad0:	dc413e17 	ldw	r17,1272(sp)
   30ad4:	dc013d17 	ldw	r16,1268(sp)
   30ad8:	dec14704 	addi	sp,sp,1308
   30adc:	f800283a 	ret
   30ae0:	d9412917 	ldw	r5,1188(sp)
   30ae4:	8809883a 	mov	r4,r17
   30ae8:	d9811b04 	addi	r6,sp,1132
   30aec:	003053c0 	call	3053c <__sprint_r>
   30af0:	103fe51e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   30af4:	da400404 	addi	r9,sp,16
   30af8:	003eea06 	br	306a4 <___vfprintf_internal_r+0x134>
   30afc:	00340980 	call	34098 <__sinit>
   30b00:	003eb306 	br	305d0 <___vfprintf_internal_r+0x60>
   30b04:	e013883a 	mov	r9,fp
   30b08:	84000414 	ori	r16,r16,16
   30b0c:	1839883a 	mov	fp,r3
   30b10:	8080080c 	andi	r2,r16,32
   30b14:	10034426 	beq	r2,zero,31828 <___vfprintf_internal_r+0x12b8>
   30b18:	d8c12d17 	ldw	r3,1204(sp)
   30b1c:	18800117 	ldw	r2,4(r3)
   30b20:	1dc00017 	ldw	r23,0(r3)
   30b24:	18c00204 	addi	r3,r3,8
   30b28:	d8c12d15 	stw	r3,1204(sp)
   30b2c:	102d883a 	mov	r22,r2
   30b30:	1003020e 	bge	r2,zero,3173c <___vfprintf_internal_r+0x11cc>
   30b34:	05efc83a 	sub	r23,zero,r23
   30b38:	b804c03a 	cmpne	r2,r23,zero
   30b3c:	05adc83a 	sub	r22,zero,r22
   30b40:	b0adc83a 	sub	r22,r22,r2
   30b44:	00800b44 	movi	r2,45
   30b48:	d8812585 	stb	r2,1174(sp)
   30b4c:	00c00044 	movi	r3,1
   30b50:	bd84b03a 	or	r2,r23,r22
   30b54:	e0000216 	blt	fp,zero,30b60 <___vfprintf_internal_r+0x5f0>
   30b58:	013fdfc4 	movi	r4,-129
   30b5c:	8120703a 	and	r16,r16,r4
   30b60:	1001cc1e 	bne	r2,zero,31294 <___vfprintf_internal_r+0xd24>
   30b64:	e001cb1e 	bne	fp,zero,31294 <___vfprintf_internal_r+0xd24>
   30b68:	18c03fcc 	andi	r3,r3,255
   30b6c:	1802ca1e 	bne	r3,zero,31698 <___vfprintf_internal_r+0x1128>
   30b70:	8080004c 	andi	r2,r16,1
   30b74:	1002c826 	beq	r2,zero,31698 <___vfprintf_internal_r+0x1128>
   30b78:	d8c13917 	ldw	r3,1252(sp)
   30b7c:	00800c04 	movi	r2,48
   30b80:	d8810dc5 	stb	r2,1079(sp)
   30b84:	d8c12b15 	stw	r3,1196(sp)
   30b88:	dcc10dc4 	addi	r19,sp,1079
   30b8c:	d8812b17 	ldw	r2,1196(sp)
   30b90:	d8812815 	stw	r2,1184(sp)
   30b94:	1700010e 	bge	r2,fp,30b9c <___vfprintf_internal_r+0x62c>
   30b98:	df012815 	stw	fp,1184(sp)
   30b9c:	d8812583 	ldbu	r2,1174(sp)
   30ba0:	df013115 	stw	fp,1220(sp)
   30ba4:	10803fcc 	andi	r2,r2,255
   30ba8:	1080201c 	xori	r2,r2,128
   30bac:	10bfe004 	addi	r2,r2,-128
   30bb0:	103ed726 	beq	r2,zero,30710 <___vfprintf_internal_r+0x1a0>
   30bb4:	d8c12817 	ldw	r3,1184(sp)
   30bb8:	18c00044 	addi	r3,r3,1
   30bbc:	d8c12815 	stw	r3,1184(sp)
   30bc0:	003ed306 	br	30710 <___vfprintf_internal_r+0x1a0>
   30bc4:	8080020c 	andi	r2,r16,8
   30bc8:	e013883a 	mov	r9,fp
   30bcc:	1839883a 	mov	fp,r3
   30bd0:	1003a626 	beq	r2,zero,31a6c <___vfprintf_internal_r+0x14fc>
   30bd4:	d9012d17 	ldw	r4,1204(sp)
   30bd8:	25800017 	ldw	r22,0(r4)
   30bdc:	25000117 	ldw	r20,4(r4)
   30be0:	21000204 	addi	r4,r4,8
   30be4:	d9012d15 	stw	r4,1204(sp)
   30be8:	dd813315 	stw	r22,1228(sp)
   30bec:	dd013415 	stw	r20,1232(sp)
   30bf0:	b009883a 	mov	r4,r22
   30bf4:	a00b883a 	mov	r5,r20
   30bf8:	da413c15 	stw	r9,1264(sp)
   30bfc:	00372240 	call	37224 <__isinfd>
   30c00:	da413c17 	ldw	r9,1264(sp)
   30c04:	b009883a 	mov	r4,r22
   30c08:	a00b883a 	mov	r5,r20
   30c0c:	10041d26 	beq	r2,zero,31c84 <___vfprintf_internal_r+0x1714>
   30c10:	000d883a 	mov	r6,zero
   30c14:	000f883a 	mov	r7,zero
   30c18:	0038ff80 	call	38ff8 <__ltdf2>
   30c1c:	da413c17 	ldw	r9,1264(sp)
   30c20:	1004da16 	blt	r2,zero,31f8c <___vfprintf_internal_r+0x1a1c>
   30c24:	d8812583 	ldbu	r2,1174(sp)
   30c28:	00c011c4 	movi	r3,71
   30c2c:	1c83d116 	blt	r3,r18,31b74 <___vfprintf_internal_r+0x1604>
   30c30:	04c00034 	movhi	r19,0
   30c34:	9cc01004 	addi	r19,r19,64
   30c38:	00c000c4 	movi	r3,3
   30c3c:	d8c12815 	stw	r3,1184(sp)
   30c40:	00ffdfc4 	movi	r3,-129
   30c44:	80e0703a 	and	r16,r16,r3
   30c48:	d8c12817 	ldw	r3,1184(sp)
   30c4c:	d8013115 	stw	zero,1220(sp)
   30c50:	d8c12b15 	stw	r3,1196(sp)
   30c54:	003fd306 	br	30ba4 <___vfprintf_internal_r+0x634>
   30c58:	84000214 	ori	r16,r16,8
   30c5c:	ac800007 	ldb	r18,0(r21)
   30c60:	003e9f06 	br	306e0 <___vfprintf_internal_r+0x170>
   30c64:	e013883a 	mov	r9,fp
   30c68:	84000414 	ori	r16,r16,16
   30c6c:	1839883a 	mov	fp,r3
   30c70:	8080080c 	andi	r2,r16,32
   30c74:	10031d26 	beq	r2,zero,318ec <___vfprintf_internal_r+0x137c>
   30c78:	d8812d17 	ldw	r2,1204(sp)
   30c7c:	0007883a 	mov	r3,zero
   30c80:	15c00017 	ldw	r23,0(r2)
   30c84:	15800117 	ldw	r22,4(r2)
   30c88:	10800204 	addi	r2,r2,8
   30c8c:	d8812d15 	stw	r2,1204(sp)
   30c90:	d8012585 	stb	zero,1174(sp)
   30c94:	bd84b03a 	or	r2,r23,r22
   30c98:	003fae06 	br	30b54 <___vfprintf_internal_r+0x5e4>
   30c9c:	e013883a 	mov	r9,fp
   30ca0:	84000414 	ori	r16,r16,16
   30ca4:	1839883a 	mov	fp,r3
   30ca8:	8080080c 	andi	r2,r16,32
   30cac:	1002e726 	beq	r2,zero,3184c <___vfprintf_internal_r+0x12dc>
   30cb0:	d8c12d17 	ldw	r3,1204(sp)
   30cb4:	d9012d17 	ldw	r4,1204(sp)
   30cb8:	1dc00017 	ldw	r23,0(r3)
   30cbc:	1d800117 	ldw	r22,4(r3)
   30cc0:	21000204 	addi	r4,r4,8
   30cc4:	00c00044 	movi	r3,1
   30cc8:	d9012d15 	stw	r4,1204(sp)
   30ccc:	bd84b03a 	or	r2,r23,r22
   30cd0:	d8012585 	stb	zero,1174(sp)
   30cd4:	003f9f06 	br	30b54 <___vfprintf_internal_r+0x5e4>
   30cd8:	e013883a 	mov	r9,fp
   30cdc:	1839883a 	mov	fp,r3
   30ce0:	00c00034 	movhi	r3,0
   30ce4:	18c01404 	addi	r3,r3,80
   30ce8:	d8c13615 	stw	r3,1240(sp)
   30cec:	8080080c 	andi	r2,r16,32
   30cf0:	10007726 	beq	r2,zero,30ed0 <___vfprintf_internal_r+0x960>
   30cf4:	d9012d17 	ldw	r4,1204(sp)
   30cf8:	25c00017 	ldw	r23,0(r4)
   30cfc:	25800117 	ldw	r22,4(r4)
   30d00:	21000204 	addi	r4,r4,8
   30d04:	d9012d15 	stw	r4,1204(sp)
   30d08:	8080004c 	andi	r2,r16,1
   30d0c:	1002c226 	beq	r2,zero,31818 <___vfprintf_internal_r+0x12a8>
   30d10:	bd84b03a 	or	r2,r23,r22
   30d14:	10035d26 	beq	r2,zero,31a8c <___vfprintf_internal_r+0x151c>
   30d18:	00c00c04 	movi	r3,48
   30d1c:	d8c12505 	stb	r3,1172(sp)
   30d20:	dc812545 	stb	r18,1173(sp)
   30d24:	84000094 	ori	r16,r16,2
   30d28:	00c00084 	movi	r3,2
   30d2c:	d8012585 	stb	zero,1174(sp)
   30d30:	003f8806 	br	30b54 <___vfprintf_internal_r+0x5e4>
   30d34:	ac800007 	ldb	r18,0(r21)
   30d38:	00c00a84 	movi	r3,42
   30d3c:	adc00044 	addi	r23,r21,1
   30d40:	90c57526 	beq	r18,r3,32318 <___vfprintf_internal_r+0x1da8>
   30d44:	95bff404 	addi	r22,r18,-48
   30d48:	0009883a 	mov	r4,zero
   30d4c:	9d84ff36 	bltu	r19,r22,3214c <___vfprintf_internal_r+0x1bdc>
   30d50:	01400284 	movi	r5,10
   30d54:	00394480 	call	39448 <__mulsi3>
   30d58:	bc800007 	ldb	r18,0(r23)
   30d5c:	b089883a 	add	r4,r22,r2
   30d60:	bdc00044 	addi	r23,r23,1
   30d64:	95bff404 	addi	r22,r18,-48
   30d68:	9dbff92e 	bgeu	r19,r22,30d50 <___vfprintf_internal_r+0x7e0>
   30d6c:	2007883a 	mov	r3,r4
   30d70:	20044316 	blt	r4,zero,31e80 <___vfprintf_internal_r+0x1910>
   30d74:	b82b883a 	mov	r21,r23
   30d78:	003e5a06 	br	306e4 <___vfprintf_internal_r+0x174>
   30d7c:	ac800007 	ldb	r18,0(r21)
   30d80:	01001b04 	movi	r4,108
   30d84:	a805883a 	mov	r2,r21
   30d88:	91045526 	beq	r18,r4,31ee0 <___vfprintf_internal_r+0x1970>
   30d8c:	84000414 	ori	r16,r16,16
   30d90:	003e5306 	br	306e0 <___vfprintf_internal_r+0x170>
   30d94:	8080080c 	andi	r2,r16,32
   30d98:	e013883a 	mov	r9,fp
   30d9c:	10034026 	beq	r2,zero,31aa0 <___vfprintf_internal_r+0x1530>
   30da0:	d9012d17 	ldw	r4,1204(sp)
   30da4:	20800017 	ldw	r2,0(r4)
   30da8:	d9012c17 	ldw	r4,1200(sp)
   30dac:	2007d7fa 	srai	r3,r4,31
   30db0:	d9012d17 	ldw	r4,1204(sp)
   30db4:	10c00115 	stw	r3,4(r2)
   30db8:	21000104 	addi	r4,r4,4
   30dbc:	d9012d15 	stw	r4,1204(sp)
   30dc0:	d9012c17 	ldw	r4,1200(sp)
   30dc4:	11000015 	stw	r4,0(r2)
   30dc8:	003e1f06 	br	30648 <___vfprintf_internal_r+0xd8>
   30dcc:	d9012d17 	ldw	r4,1204(sp)
   30dd0:	21000017 	ldw	r4,0(r4)
   30dd4:	d9012e15 	stw	r4,1208(sp)
   30dd8:	d9012d17 	ldw	r4,1204(sp)
   30ddc:	20800104 	addi	r2,r4,4
   30de0:	d9012e17 	ldw	r4,1208(sp)
   30de4:	203ee716 	blt	r4,zero,30984 <___vfprintf_internal_r+0x414>
   30de8:	d8812d15 	stw	r2,1204(sp)
   30dec:	ac800007 	ldb	r18,0(r21)
   30df0:	003e3b06 	br	306e0 <___vfprintf_internal_r+0x170>
   30df4:	e013883a 	mov	r9,fp
   30df8:	1839883a 	mov	fp,r3
   30dfc:	d8c12d17 	ldw	r3,1204(sp)
   30e00:	00800c04 	movi	r2,48
   30e04:	01000034 	movhi	r4,0
   30e08:	21001904 	addi	r4,r4,100
   30e0c:	1dc00017 	ldw	r23,0(r3)
   30e10:	18c00104 	addi	r3,r3,4
   30e14:	d8812505 	stb	r2,1172(sp)
   30e18:	00801e04 	movi	r2,120
   30e1c:	d8812545 	stb	r2,1173(sp)
   30e20:	d8c12d15 	stw	r3,1204(sp)
   30e24:	002d883a 	mov	r22,zero
   30e28:	84000094 	ori	r16,r16,2
   30e2c:	d9013615 	stw	r4,1240(sp)
   30e30:	00c00084 	movi	r3,2
   30e34:	04801e04 	movi	r18,120
   30e38:	b805883a 	mov	r2,r23
   30e3c:	d8012585 	stb	zero,1174(sp)
   30e40:	003f4406 	br	30b54 <___vfprintf_internal_r+0x5e4>
   30e44:	84000814 	ori	r16,r16,32
   30e48:	ac800007 	ldb	r18,0(r21)
   30e4c:	003e2406 	br	306e0 <___vfprintf_internal_r+0x170>
   30e50:	d8812d17 	ldw	r2,1204(sp)
   30e54:	d8012585 	stb	zero,1174(sp)
   30e58:	e013883a 	mov	r9,fp
   30e5c:	14c00017 	ldw	r19,0(r2)
   30e60:	1839883a 	mov	fp,r3
   30e64:	15c00104 	addi	r23,r2,4
   30e68:	98045526 	beq	r19,zero,31fc0 <___vfprintf_internal_r+0x1a50>
   30e6c:	9809883a 	mov	r4,r19
   30e70:	18043116 	blt	r3,zero,31f38 <___vfprintf_internal_r+0x19c8>
   30e74:	000b883a 	mov	r5,zero
   30e78:	180d883a 	mov	r6,r3
   30e7c:	da413c15 	stw	r9,1264(sp)
   30e80:	00357380 	call	35738 <memchr>
   30e84:	da413c17 	ldw	r9,1264(sp)
   30e88:	10047a26 	beq	r2,zero,32074 <___vfprintf_internal_r+0x1b04>
   30e8c:	14c5c83a 	sub	r2,r2,r19
   30e90:	d8812b15 	stw	r2,1196(sp)
   30e94:	e083d40e 	bge	fp,r2,31de8 <___vfprintf_internal_r+0x1878>
   30e98:	df012815 	stw	fp,1184(sp)
   30e9c:	e004e416 	blt	fp,zero,32230 <___vfprintf_internal_r+0x1cc0>
   30ea0:	d8812583 	ldbu	r2,1174(sp)
   30ea4:	df012b15 	stw	fp,1196(sp)
   30ea8:	ddc12d15 	stw	r23,1204(sp)
   30eac:	d8013115 	stw	zero,1220(sp)
   30eb0:	003f3c06 	br	30ba4 <___vfprintf_internal_r+0x634>
   30eb4:	00800034 	movhi	r2,0
   30eb8:	10801904 	addi	r2,r2,100
   30ebc:	d8813615 	stw	r2,1240(sp)
   30ec0:	8080080c 	andi	r2,r16,32
   30ec4:	e013883a 	mov	r9,fp
   30ec8:	1839883a 	mov	fp,r3
   30ecc:	103f891e 	bne	r2,zero,30cf4 <___vfprintf_internal_r+0x784>
   30ed0:	8080040c 	andi	r2,r16,16
   30ed4:	1002c326 	beq	r2,zero,319e4 <___vfprintf_internal_r+0x1474>
   30ed8:	d8812d17 	ldw	r2,1204(sp)
   30edc:	002d883a 	mov	r22,zero
   30ee0:	15c00017 	ldw	r23,0(r2)
   30ee4:	10800104 	addi	r2,r2,4
   30ee8:	d8812d15 	stw	r2,1204(sp)
   30eec:	003f8606 	br	30d08 <___vfprintf_internal_r+0x798>
   30ef0:	84001014 	ori	r16,r16,64
   30ef4:	ac800007 	ldb	r18,0(r21)
   30ef8:	003df906 	br	306e0 <___vfprintf_internal_r+0x170>
   30efc:	d8812587 	ldb	r2,1174(sp)
   30f00:	1002e51e 	bne	r2,zero,31a98 <___vfprintf_internal_r+0x1528>
   30f04:	00800804 	movi	r2,32
   30f08:	d8812585 	stb	r2,1174(sp)
   30f0c:	ac800007 	ldb	r18,0(r21)
   30f10:	003df306 	br	306e0 <___vfprintf_internal_r+0x170>
   30f14:	84000054 	ori	r16,r16,1
   30f18:	ac800007 	ldb	r18,0(r21)
   30f1c:	003df006 	br	306e0 <___vfprintf_internal_r+0x170>
   30f20:	84002014 	ori	r16,r16,128
   30f24:	ac800007 	ldb	r18,0(r21)
   30f28:	003ded06 	br	306e0 <___vfprintf_internal_r+0x170>
   30f2c:	0009883a 	mov	r4,zero
   30f30:	95bff404 	addi	r22,r18,-48
   30f34:	182f883a 	mov	r23,r3
   30f38:	01400284 	movi	r5,10
   30f3c:	00394480 	call	39448 <__mulsi3>
   30f40:	ac800007 	ldb	r18,0(r21)
   30f44:	1589883a 	add	r4,r2,r22
   30f48:	ad400044 	addi	r21,r21,1
   30f4c:	95bff404 	addi	r22,r18,-48
   30f50:	9dbff92e 	bgeu	r19,r22,30f38 <___vfprintf_internal_r+0x9c8>
   30f54:	b807883a 	mov	r3,r23
   30f58:	d9012e15 	stw	r4,1208(sp)
   30f5c:	003de106 	br	306e4 <___vfprintf_internal_r+0x174>
   30f60:	00800ac4 	movi	r2,43
   30f64:	d8812585 	stb	r2,1174(sp)
   30f68:	ac800007 	ldb	r18,0(r21)
   30f6c:	003ddc06 	br	306e0 <___vfprintf_internal_r+0x170>
   30f70:	d8c12d17 	ldw	r3,1204(sp)
   30f74:	d9012d17 	ldw	r4,1204(sp)
   30f78:	e013883a 	mov	r9,fp
   30f7c:	18800017 	ldw	r2,0(r3)
   30f80:	21000104 	addi	r4,r4,4
   30f84:	00c00044 	movi	r3,1
   30f88:	d8c12815 	stw	r3,1184(sp)
   30f8c:	d8012585 	stb	zero,1174(sp)
   30f90:	d8810405 	stb	r2,1040(sp)
   30f94:	d9012d15 	stw	r4,1204(sp)
   30f98:	d8c12b15 	stw	r3,1196(sp)
   30f9c:	dcc10404 	addi	r19,sp,1040
   30fa0:	003dda06 	br	3070c <___vfprintf_internal_r+0x19c>
   30fa4:	e013883a 	mov	r9,fp
   30fa8:	1839883a 	mov	fp,r3
   30fac:	003ed806 	br	30b10 <___vfprintf_internal_r+0x5a0>
   30fb0:	e013883a 	mov	r9,fp
   30fb4:	1839883a 	mov	fp,r3
   30fb8:	003f2d06 	br	30c70 <___vfprintf_internal_r+0x700>
   30fbc:	e013883a 	mov	r9,fp
   30fc0:	1839883a 	mov	fp,r3
   30fc4:	003f3806 	br	30ca8 <___vfprintf_internal_r+0x738>
   30fc8:	da011d17 	ldw	r8,1140(sp)
   30fcc:	d8c11c17 	ldw	r3,1136(sp)
   30fd0:	d8812587 	ldb	r2,1174(sp)
   30fd4:	10000b26 	beq	r2,zero,31004 <___vfprintf_internal_r+0xa94>
   30fd8:	d8812584 	addi	r2,sp,1174
   30fdc:	48800015 	stw	r2,0(r9)
   30fe0:	00800044 	movi	r2,1
   30fe4:	48800115 	stw	r2,4(r9)
   30fe8:	4091883a 	add	r8,r8,r2
   30fec:	1887883a 	add	r3,r3,r2
   30ff0:	da011d15 	stw	r8,1140(sp)
   30ff4:	d8c11c15 	stw	r3,1136(sp)
   30ff8:	008001c4 	movi	r2,7
   30ffc:	10c18e16 	blt	r2,r3,31638 <___vfprintf_internal_r+0x10c8>
   31000:	4a400204 	addi	r9,r9,8
   31004:	d9012a17 	ldw	r4,1192(sp)
   31008:	20000b26 	beq	r4,zero,31038 <___vfprintf_internal_r+0xac8>
   3100c:	d8812504 	addi	r2,sp,1172
   31010:	48800015 	stw	r2,0(r9)
   31014:	00800084 	movi	r2,2
   31018:	48800115 	stw	r2,4(r9)
   3101c:	4091883a 	add	r8,r8,r2
   31020:	18c00044 	addi	r3,r3,1
   31024:	da011d15 	stw	r8,1140(sp)
   31028:	d8c11c15 	stw	r3,1136(sp)
   3102c:	008001c4 	movi	r2,7
   31030:	10c17816 	blt	r2,r3,31614 <___vfprintf_internal_r+0x10a4>
   31034:	4a400204 	addi	r9,r9,8
   31038:	d9012f17 	ldw	r4,1212(sp)
   3103c:	00802004 	movi	r2,128
   31040:	2080fc26 	beq	r4,r2,31434 <___vfprintf_internal_r+0xec4>
   31044:	d8813117 	ldw	r2,1220(sp)
   31048:	d9012b17 	ldw	r4,1196(sp)
   3104c:	112fc83a 	sub	r23,r2,r4
   31050:	05c02a0e 	bge	zero,r23,310fc <___vfprintf_internal_r+0xb8c>
   31054:	07000404 	movi	fp,16
   31058:	05000034 	movhi	r20,0
   3105c:	a5002484 	addi	r20,r20,146
   31060:	e5c01d0e 	bge	fp,r23,310d8 <___vfprintf_internal_r+0xb68>
   31064:	dc812a15 	stw	r18,1192(sp)
   31068:	058001c4 	movi	r22,7
   3106c:	a025883a 	mov	r18,r20
   31070:	8029883a 	mov	r20,r16
   31074:	dc012917 	ldw	r16,1188(sp)
   31078:	00000306 	br	31088 <___vfprintf_internal_r+0xb18>
   3107c:	bdfffc04 	addi	r23,r23,-16
   31080:	4a400204 	addi	r9,r9,8
   31084:	e5c0110e 	bge	fp,r23,310cc <___vfprintf_internal_r+0xb5c>
   31088:	4c800015 	stw	r18,0(r9)
   3108c:	4f000115 	stw	fp,4(r9)
   31090:	42000404 	addi	r8,r8,16
   31094:	18c00044 	addi	r3,r3,1
   31098:	da011d15 	stw	r8,1140(sp)
   3109c:	d8c11c15 	stw	r3,1136(sp)
   310a0:	b0fff60e 	bge	r22,r3,3107c <___vfprintf_internal_r+0xb0c>
   310a4:	8809883a 	mov	r4,r17
   310a8:	800b883a 	mov	r5,r16
   310ac:	d9811b04 	addi	r6,sp,1132
   310b0:	003053c0 	call	3053c <__sprint_r>
   310b4:	103e741e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   310b8:	bdfffc04 	addi	r23,r23,-16
   310bc:	da011d17 	ldw	r8,1140(sp)
   310c0:	d8c11c17 	ldw	r3,1136(sp)
   310c4:	da400404 	addi	r9,sp,16
   310c8:	e5ffef16 	blt	fp,r23,31088 <___vfprintf_internal_r+0xb18>
   310cc:	a021883a 	mov	r16,r20
   310d0:	9029883a 	mov	r20,r18
   310d4:	dc812a17 	ldw	r18,1192(sp)
   310d8:	4d000015 	stw	r20,0(r9)
   310dc:	4dc00115 	stw	r23,4(r9)
   310e0:	45d1883a 	add	r8,r8,r23
   310e4:	18c00044 	addi	r3,r3,1
   310e8:	da011d15 	stw	r8,1140(sp)
   310ec:	d8c11c15 	stw	r3,1136(sp)
   310f0:	008001c4 	movi	r2,7
   310f4:	10c13e16 	blt	r2,r3,315f0 <___vfprintf_internal_r+0x1080>
   310f8:	4a400204 	addi	r9,r9,8
   310fc:	8080400c 	andi	r2,r16,256
   31100:	1000831e 	bne	r2,zero,31310 <___vfprintf_internal_r+0xda0>
   31104:	d8812b17 	ldw	r2,1196(sp)
   31108:	4cc00015 	stw	r19,0(r9)
   3110c:	48800115 	stw	r2,4(r9)
   31110:	4091883a 	add	r8,r8,r2
   31114:	18c00044 	addi	r3,r3,1
   31118:	da011d15 	stw	r8,1140(sp)
   3111c:	d8c11c15 	stw	r3,1136(sp)
   31120:	008001c4 	movi	r2,7
   31124:	10c05316 	blt	r2,r3,31274 <___vfprintf_internal_r+0xd04>
   31128:	4a400204 	addi	r9,r9,8
   3112c:	8400010c 	andi	r16,r16,4
   31130:	80002e26 	beq	r16,zero,311ec <___vfprintf_internal_r+0xc7c>
   31134:	d8812e17 	ldw	r2,1208(sp)
   31138:	d8c12817 	ldw	r3,1184(sp)
   3113c:	10e1c83a 	sub	r16,r2,r3
   31140:	04002a0e 	bge	zero,r16,311ec <___vfprintf_internal_r+0xc7c>
   31144:	04800404 	movi	r18,16
   31148:	d8c11c17 	ldw	r3,1136(sp)
   3114c:	05c00034 	movhi	r23,0
   31150:	bdc02084 	addi	r23,r23,130
   31154:	9400170e 	bge	r18,r16,311b4 <___vfprintf_internal_r+0xc44>
   31158:	04c001c4 	movi	r19,7
   3115c:	dd012917 	ldw	r20,1188(sp)
   31160:	00000306 	br	31170 <___vfprintf_internal_r+0xc00>
   31164:	843ffc04 	addi	r16,r16,-16
   31168:	4a400204 	addi	r9,r9,8
   3116c:	9400110e 	bge	r18,r16,311b4 <___vfprintf_internal_r+0xc44>
   31170:	4dc00015 	stw	r23,0(r9)
   31174:	4c800115 	stw	r18,4(r9)
   31178:	42000404 	addi	r8,r8,16
   3117c:	18c00044 	addi	r3,r3,1
   31180:	da011d15 	stw	r8,1140(sp)
   31184:	d8c11c15 	stw	r3,1136(sp)
   31188:	98fff60e 	bge	r19,r3,31164 <___vfprintf_internal_r+0xbf4>
   3118c:	8809883a 	mov	r4,r17
   31190:	a00b883a 	mov	r5,r20
   31194:	d9811b04 	addi	r6,sp,1132
   31198:	003053c0 	call	3053c <__sprint_r>
   3119c:	103e3a1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   311a0:	843ffc04 	addi	r16,r16,-16
   311a4:	da011d17 	ldw	r8,1140(sp)
   311a8:	d8c11c17 	ldw	r3,1136(sp)
   311ac:	da400404 	addi	r9,sp,16
   311b0:	943fef16 	blt	r18,r16,31170 <___vfprintf_internal_r+0xc00>
   311b4:	4dc00015 	stw	r23,0(r9)
   311b8:	4c000115 	stw	r16,4(r9)
   311bc:	8211883a 	add	r8,r16,r8
   311c0:	18c00044 	addi	r3,r3,1
   311c4:	da011d15 	stw	r8,1140(sp)
   311c8:	d8c11c15 	stw	r3,1136(sp)
   311cc:	008001c4 	movi	r2,7
   311d0:	10c0060e 	bge	r2,r3,311ec <___vfprintf_internal_r+0xc7c>
   311d4:	d9412917 	ldw	r5,1188(sp)
   311d8:	8809883a 	mov	r4,r17
   311dc:	d9811b04 	addi	r6,sp,1132
   311e0:	003053c0 	call	3053c <__sprint_r>
   311e4:	103e281e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   311e8:	da011d17 	ldw	r8,1140(sp)
   311ec:	dd012817 	ldw	r20,1184(sp)
   311f0:	d9012e17 	ldw	r4,1208(sp)
   311f4:	a100010e 	bge	r20,r4,311fc <___vfprintf_internal_r+0xc8c>
   311f8:	2029883a 	mov	r20,r4
   311fc:	d8812c17 	ldw	r2,1200(sp)
   31200:	1505883a 	add	r2,r2,r20
   31204:	d8812c15 	stw	r2,1200(sp)
   31208:	4000b91e 	bne	r8,zero,314f0 <___vfprintf_internal_r+0xf80>
   3120c:	d8011c15 	stw	zero,1136(sp)
   31210:	a8800007 	ldb	r2,0(r21)
   31214:	da400404 	addi	r9,sp,16
   31218:	103d0d1e 	bne	r2,zero,30650 <___vfprintf_internal_r+0xe0>
   3121c:	a825883a 	mov	r18,r21
   31220:	003d2306 	br	306b0 <___vfprintf_internal_r+0x140>
   31224:	d9412917 	ldw	r5,1188(sp)
   31228:	8809883a 	mov	r4,r17
   3122c:	d9811b04 	addi	r6,sp,1132
   31230:	003053c0 	call	3053c <__sprint_r>
   31234:	103e141e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31238:	da011d17 	ldw	r8,1140(sp)
   3123c:	da400404 	addi	r9,sp,16
   31240:	8080004c 	andi	r2,r16,1
   31244:	103fb926 	beq	r2,zero,3112c <___vfprintf_internal_r+0xbbc>
   31248:	d8c11c17 	ldw	r3,1136(sp)
   3124c:	d9013717 	ldw	r4,1244(sp)
   31250:	00800044 	movi	r2,1
   31254:	48800115 	stw	r2,4(r9)
   31258:	49000015 	stw	r4,0(r9)
   3125c:	4091883a 	add	r8,r8,r2
   31260:	1887883a 	add	r3,r3,r2
   31264:	da011d15 	stw	r8,1140(sp)
   31268:	d8c11c15 	stw	r3,1136(sp)
   3126c:	008001c4 	movi	r2,7
   31270:	10ffad0e 	bge	r2,r3,31128 <___vfprintf_internal_r+0xbb8>
   31274:	d9412917 	ldw	r5,1188(sp)
   31278:	8809883a 	mov	r4,r17
   3127c:	d9811b04 	addi	r6,sp,1132
   31280:	003053c0 	call	3053c <__sprint_r>
   31284:	103e001e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31288:	da400404 	addi	r9,sp,16
   3128c:	da011d17 	ldw	r8,1140(sp)
   31290:	003fa606 	br	3112c <___vfprintf_internal_r+0xbbc>
   31294:	18803fcc 	andi	r2,r3,255
   31298:	00c00044 	movi	r3,1
   3129c:	10c10126 	beq	r2,r3,316a4 <___vfprintf_internal_r+0x1134>
   312a0:	00c00084 	movi	r3,2
   312a4:	10c0ed26 	beq	r2,r3,3165c <___vfprintf_internal_r+0x10ec>
   312a8:	d8c10dc4 	addi	r3,sp,1079
   312ac:	b808d0fa 	srli	r4,r23,3
   312b0:	b00a977a 	slli	r5,r22,29
   312b4:	b02cd0fa 	srli	r22,r22,3
   312b8:	bdc001cc 	andi	r23,r23,7
   312bc:	b8800c04 	addi	r2,r23,48
   312c0:	292eb03a 	or	r23,r5,r4
   312c4:	18800005 	stb	r2,0(r3)
   312c8:	bd88b03a 	or	r4,r23,r22
   312cc:	1827883a 	mov	r19,r3
   312d0:	18ffffc4 	addi	r3,r3,-1
   312d4:	203ff51e 	bne	r4,zero,312ac <___vfprintf_internal_r+0xd3c>
   312d8:	8100004c 	andi	r4,r16,1
   312dc:	980b883a 	mov	r5,r19
   312e0:	20000726 	beq	r4,zero,31300 <___vfprintf_internal_r+0xd90>
   312e4:	10803fcc 	andi	r2,r2,255
   312e8:	1080201c 	xori	r2,r2,128
   312ec:	10bfe004 	addi	r2,r2,-128
   312f0:	01000c04 	movi	r4,48
   312f4:	11000226 	beq	r2,r4,31300 <___vfprintf_internal_r+0xd90>
   312f8:	1827883a 	mov	r19,r3
   312fc:	293fffc5 	stb	r4,-1(r5)
   31300:	d8812717 	ldw	r2,1180(sp)
   31304:	14c5c83a 	sub	r2,r2,r19
   31308:	d8812b15 	stw	r2,1196(sp)
   3130c:	003e1f06 	br	30b8c <___vfprintf_internal_r+0x61c>
   31310:	00801944 	movi	r2,101
   31314:	14807c0e 	bge	r2,r18,31508 <___vfprintf_internal_r+0xf98>
   31318:	d9013317 	ldw	r4,1228(sp)
   3131c:	d9413417 	ldw	r5,1232(sp)
   31320:	000d883a 	mov	r6,zero
   31324:	000f883a 	mov	r7,zero
   31328:	d8c13b15 	stw	r3,1260(sp)
   3132c:	da013a15 	stw	r8,1256(sp)
   31330:	da413c15 	stw	r9,1264(sp)
   31334:	0038e780 	call	38e78 <__eqdf2>
   31338:	d8c13b17 	ldw	r3,1260(sp)
   3133c:	da013a17 	ldw	r8,1256(sp)
   31340:	da413c17 	ldw	r9,1264(sp)
   31344:	1001001e 	bne	r2,zero,31748 <___vfprintf_internal_r+0x11d8>
   31348:	00800034 	movhi	r2,0
   3134c:	10802004 	addi	r2,r2,128
   31350:	48800015 	stw	r2,0(r9)
   31354:	00800044 	movi	r2,1
   31358:	48800115 	stw	r2,4(r9)
   3135c:	4091883a 	add	r8,r8,r2
   31360:	1887883a 	add	r3,r3,r2
   31364:	da011d15 	stw	r8,1140(sp)
   31368:	d8c11c15 	stw	r3,1136(sp)
   3136c:	008001c4 	movi	r2,7
   31370:	10c20316 	blt	r2,r3,31b80 <___vfprintf_internal_r+0x1610>
   31374:	4a400204 	addi	r9,r9,8
   31378:	d8812417 	ldw	r2,1168(sp)
   3137c:	d8c13217 	ldw	r3,1224(sp)
   31380:	10c00216 	blt	r2,r3,3138c <___vfprintf_internal_r+0xe1c>
   31384:	8080004c 	andi	r2,r16,1
   31388:	103f6826 	beq	r2,zero,3112c <___vfprintf_internal_r+0xbbc>
   3138c:	d8c11c17 	ldw	r3,1136(sp)
   31390:	d9013717 	ldw	r4,1244(sp)
   31394:	00800044 	movi	r2,1
   31398:	48800115 	stw	r2,4(r9)
   3139c:	49000015 	stw	r4,0(r9)
   313a0:	4091883a 	add	r8,r8,r2
   313a4:	1887883a 	add	r3,r3,r2
   313a8:	da011d15 	stw	r8,1140(sp)
   313ac:	d8c11c15 	stw	r3,1136(sp)
   313b0:	008001c4 	movi	r2,7
   313b4:	10c2ce16 	blt	r2,r3,31ef0 <___vfprintf_internal_r+0x1980>
   313b8:	4a400204 	addi	r9,r9,8
   313bc:	d8813217 	ldw	r2,1224(sp)
   313c0:	14bfffc4 	addi	r18,r2,-1
   313c4:	04bf590e 	bge	zero,r18,3112c <___vfprintf_internal_r+0xbbc>
   313c8:	04c00404 	movi	r19,16
   313cc:	d8c11c17 	ldw	r3,1136(sp)
   313d0:	05000034 	movhi	r20,0
   313d4:	a5002484 	addi	r20,r20,146
   313d8:	9c818a0e 	bge	r19,r18,31a04 <___vfprintf_internal_r+0x1494>
   313dc:	058001c4 	movi	r22,7
   313e0:	ddc12917 	ldw	r23,1188(sp)
   313e4:	00000306 	br	313f4 <___vfprintf_internal_r+0xe84>
   313e8:	4a400204 	addi	r9,r9,8
   313ec:	94bffc04 	addi	r18,r18,-16
   313f0:	9c81840e 	bge	r19,r18,31a04 <___vfprintf_internal_r+0x1494>
   313f4:	4d000015 	stw	r20,0(r9)
   313f8:	4cc00115 	stw	r19,4(r9)
   313fc:	42000404 	addi	r8,r8,16
   31400:	18c00044 	addi	r3,r3,1
   31404:	da011d15 	stw	r8,1140(sp)
   31408:	d8c11c15 	stw	r3,1136(sp)
   3140c:	b0fff60e 	bge	r22,r3,313e8 <___vfprintf_internal_r+0xe78>
   31410:	8809883a 	mov	r4,r17
   31414:	b80b883a 	mov	r5,r23
   31418:	d9811b04 	addi	r6,sp,1132
   3141c:	003053c0 	call	3053c <__sprint_r>
   31420:	103d991e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31424:	da011d17 	ldw	r8,1140(sp)
   31428:	d8c11c17 	ldw	r3,1136(sp)
   3142c:	da400404 	addi	r9,sp,16
   31430:	003fee06 	br	313ec <___vfprintf_internal_r+0xe7c>
   31434:	d8812e17 	ldw	r2,1208(sp)
   31438:	d9012817 	ldw	r4,1184(sp)
   3143c:	112fc83a 	sub	r23,r2,r4
   31440:	05ff000e 	bge	zero,r23,31044 <___vfprintf_internal_r+0xad4>
   31444:	07000404 	movi	fp,16
   31448:	05000034 	movhi	r20,0
   3144c:	a5002484 	addi	r20,r20,146
   31450:	e5c01d0e 	bge	fp,r23,314c8 <___vfprintf_internal_r+0xf58>
   31454:	dc812a15 	stw	r18,1192(sp)
   31458:	058001c4 	movi	r22,7
   3145c:	a025883a 	mov	r18,r20
   31460:	8029883a 	mov	r20,r16
   31464:	dc012917 	ldw	r16,1188(sp)
   31468:	00000306 	br	31478 <___vfprintf_internal_r+0xf08>
   3146c:	bdfffc04 	addi	r23,r23,-16
   31470:	4a400204 	addi	r9,r9,8
   31474:	e5c0110e 	bge	fp,r23,314bc <___vfprintf_internal_r+0xf4c>
   31478:	4c800015 	stw	r18,0(r9)
   3147c:	4f000115 	stw	fp,4(r9)
   31480:	42000404 	addi	r8,r8,16
   31484:	18c00044 	addi	r3,r3,1
   31488:	da011d15 	stw	r8,1140(sp)
   3148c:	d8c11c15 	stw	r3,1136(sp)
   31490:	b0fff60e 	bge	r22,r3,3146c <___vfprintf_internal_r+0xefc>
   31494:	8809883a 	mov	r4,r17
   31498:	800b883a 	mov	r5,r16
   3149c:	d9811b04 	addi	r6,sp,1132
   314a0:	003053c0 	call	3053c <__sprint_r>
   314a4:	103d781e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   314a8:	bdfffc04 	addi	r23,r23,-16
   314ac:	da011d17 	ldw	r8,1140(sp)
   314b0:	d8c11c17 	ldw	r3,1136(sp)
   314b4:	da400404 	addi	r9,sp,16
   314b8:	e5ffef16 	blt	fp,r23,31478 <___vfprintf_internal_r+0xf08>
   314bc:	a021883a 	mov	r16,r20
   314c0:	9029883a 	mov	r20,r18
   314c4:	dc812a17 	ldw	r18,1192(sp)
   314c8:	4d000015 	stw	r20,0(r9)
   314cc:	4dc00115 	stw	r23,4(r9)
   314d0:	45d1883a 	add	r8,r8,r23
   314d4:	18c00044 	addi	r3,r3,1
   314d8:	da011d15 	stw	r8,1140(sp)
   314dc:	d8c11c15 	stw	r3,1136(sp)
   314e0:	008001c4 	movi	r2,7
   314e4:	10c13616 	blt	r2,r3,319c0 <___vfprintf_internal_r+0x1450>
   314e8:	4a400204 	addi	r9,r9,8
   314ec:	003ed506 	br	31044 <___vfprintf_internal_r+0xad4>
   314f0:	d9412917 	ldw	r5,1188(sp)
   314f4:	8809883a 	mov	r4,r17
   314f8:	d9811b04 	addi	r6,sp,1132
   314fc:	003053c0 	call	3053c <__sprint_r>
   31500:	103f4226 	beq	r2,zero,3120c <___vfprintf_internal_r+0xc9c>
   31504:	003d6006 	br	30a88 <___vfprintf_internal_r+0x518>
   31508:	d9013217 	ldw	r4,1224(sp)
   3150c:	00800044 	movi	r2,1
   31510:	4cc00015 	stw	r19,0(r9)
   31514:	1101000e 	bge	r2,r4,31918 <___vfprintf_internal_r+0x13a8>
   31518:	00800044 	movi	r2,1
   3151c:	48800115 	stw	r2,4(r9)
   31520:	4091883a 	add	r8,r8,r2
   31524:	1887883a 	add	r3,r3,r2
   31528:	da011d15 	stw	r8,1140(sp)
   3152c:	d8c11c15 	stw	r3,1136(sp)
   31530:	008001c4 	movi	r2,7
   31534:	10c10c16 	blt	r2,r3,31968 <___vfprintf_internal_r+0x13f8>
   31538:	4a400204 	addi	r9,r9,8
   3153c:	d8813717 	ldw	r2,1244(sp)
   31540:	48800015 	stw	r2,0(r9)
   31544:	00800044 	movi	r2,1
   31548:	48800115 	stw	r2,4(r9)
   3154c:	4091883a 	add	r8,r8,r2
   31550:	1887883a 	add	r3,r3,r2
   31554:	da011d15 	stw	r8,1140(sp)
   31558:	d8c11c15 	stw	r3,1136(sp)
   3155c:	008001c4 	movi	r2,7
   31560:	10c10a16 	blt	r2,r3,3198c <___vfprintf_internal_r+0x141c>
   31564:	4c800204 	addi	r18,r9,8
   31568:	d9013317 	ldw	r4,1228(sp)
   3156c:	d9413417 	ldw	r5,1232(sp)
   31570:	000d883a 	mov	r6,zero
   31574:	000f883a 	mov	r7,zero
   31578:	d8c13b15 	stw	r3,1260(sp)
   3157c:	da013a15 	stw	r8,1256(sp)
   31580:	0038ed40 	call	38ed4 <__nedf2>
   31584:	d8c13b17 	ldw	r3,1260(sp)
   31588:	da013a17 	ldw	r8,1256(sp)
   3158c:	1000ba26 	beq	r2,zero,31878 <___vfprintf_internal_r+0x1308>
   31590:	d9013217 	ldw	r4,1224(sp)
   31594:	9cc00044 	addi	r19,r19,1
   31598:	94c00015 	stw	r19,0(r18)
   3159c:	20bfffc4 	addi	r2,r4,-1
   315a0:	90800115 	stw	r2,4(r18)
   315a4:	4091883a 	add	r8,r8,r2
   315a8:	18c00044 	addi	r3,r3,1
   315ac:	da011d15 	stw	r8,1140(sp)
   315b0:	d8c11c15 	stw	r3,1136(sp)
   315b4:	008001c4 	movi	r2,7
   315b8:	10c0e216 	blt	r2,r3,31944 <___vfprintf_internal_r+0x13d4>
   315bc:	94800204 	addi	r18,r18,8
   315c0:	d9013517 	ldw	r4,1236(sp)
   315c4:	d8811fc4 	addi	r2,sp,1151
   315c8:	90800015 	stw	r2,0(r18)
   315cc:	91000115 	stw	r4,4(r18)
   315d0:	4111883a 	add	r8,r8,r4
   315d4:	18c00044 	addi	r3,r3,1
   315d8:	da011d15 	stw	r8,1140(sp)
   315dc:	d8c11c15 	stw	r3,1136(sp)
   315e0:	008001c4 	movi	r2,7
   315e4:	10ff2316 	blt	r2,r3,31274 <___vfprintf_internal_r+0xd04>
   315e8:	92400204 	addi	r9,r18,8
   315ec:	003ecf06 	br	3112c <___vfprintf_internal_r+0xbbc>
   315f0:	d9412917 	ldw	r5,1188(sp)
   315f4:	8809883a 	mov	r4,r17
   315f8:	d9811b04 	addi	r6,sp,1132
   315fc:	003053c0 	call	3053c <__sprint_r>
   31600:	103d211e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31604:	da011d17 	ldw	r8,1140(sp)
   31608:	d8c11c17 	ldw	r3,1136(sp)
   3160c:	da400404 	addi	r9,sp,16
   31610:	003eba06 	br	310fc <___vfprintf_internal_r+0xb8c>
   31614:	d9412917 	ldw	r5,1188(sp)
   31618:	8809883a 	mov	r4,r17
   3161c:	d9811b04 	addi	r6,sp,1132
   31620:	003053c0 	call	3053c <__sprint_r>
   31624:	103d181e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31628:	da011d17 	ldw	r8,1140(sp)
   3162c:	d8c11c17 	ldw	r3,1136(sp)
   31630:	da400404 	addi	r9,sp,16
   31634:	003e8006 	br	31038 <___vfprintf_internal_r+0xac8>
   31638:	d9412917 	ldw	r5,1188(sp)
   3163c:	8809883a 	mov	r4,r17
   31640:	d9811b04 	addi	r6,sp,1132
   31644:	003053c0 	call	3053c <__sprint_r>
   31648:	103d0f1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   3164c:	da011d17 	ldw	r8,1140(sp)
   31650:	d8c11c17 	ldw	r3,1136(sp)
   31654:	da400404 	addi	r9,sp,16
   31658:	003e6a06 	br	31004 <___vfprintf_internal_r+0xa94>
   3165c:	d9413617 	ldw	r5,1240(sp)
   31660:	d8810dc4 	addi	r2,sp,1079
   31664:	b8c003cc 	andi	r3,r23,15
   31668:	b008973a 	slli	r4,r22,28
   3166c:	28c7883a 	add	r3,r5,r3
   31670:	b82ed13a 	srli	r23,r23,4
   31674:	18c00003 	ldbu	r3,0(r3)
   31678:	b02cd13a 	srli	r22,r22,4
   3167c:	25eeb03a 	or	r23,r4,r23
   31680:	10c00005 	stb	r3,0(r2)
   31684:	bd86b03a 	or	r3,r23,r22
   31688:	1027883a 	mov	r19,r2
   3168c:	10bfffc4 	addi	r2,r2,-1
   31690:	183ff41e 	bne	r3,zero,31664 <___vfprintf_internal_r+0x10f4>
   31694:	003f1a06 	br	31300 <___vfprintf_internal_r+0xd90>
   31698:	d8012b15 	stw	zero,1196(sp)
   3169c:	dcc10e04 	addi	r19,sp,1080
   316a0:	003d3a06 	br	30b8c <___vfprintf_internal_r+0x61c>
   316a4:	b0025426 	beq	r22,zero,31ff8 <___vfprintf_internal_r+0x1a88>
   316a8:	b807883a 	mov	r3,r23
   316ac:	d8810dc4 	addi	r2,sp,1079
   316b0:	882f883a 	mov	r23,r17
   316b4:	04c00244 	movi	r19,9
   316b8:	8023883a 	mov	r17,r16
   316bc:	da412815 	stw	r9,1184(sp)
   316c0:	1821883a 	mov	r16,r3
   316c4:	8009883a 	mov	r4,r16
   316c8:	b00b883a 	mov	r5,r22
   316cc:	01800284 	movi	r6,10
   316d0:	000f883a 	mov	r7,zero
   316d4:	1029883a 	mov	r20,r2
   316d8:	0037fb00 	call	37fb0 <__umoddi3>
   316dc:	10800c04 	addi	r2,r2,48
   316e0:	8009883a 	mov	r4,r16
   316e4:	b00b883a 	mov	r5,r22
   316e8:	a0800005 	stb	r2,0(r20)
   316ec:	01800284 	movi	r6,10
   316f0:	000f883a 	mov	r7,zero
   316f4:	00379600 	call	37960 <__udivdi3>
   316f8:	1021883a 	mov	r16,r2
   316fc:	182d883a 	mov	r22,r3
   31700:	a0bfffc4 	addi	r2,r20,-1
   31704:	183fef1e 	bne	r3,zero,316c4 <___vfprintf_internal_r+0x1154>
   31708:	9c3fee36 	bltu	r19,r16,316c4 <___vfprintf_internal_r+0x1154>
   3170c:	da412817 	ldw	r9,1184(sp)
   31710:	8005883a 	mov	r2,r16
   31714:	8821883a 	mov	r16,r17
   31718:	b823883a 	mov	r17,r23
   3171c:	102f883a 	mov	r23,r2
   31720:	d8812717 	ldw	r2,1180(sp)
   31724:	a4ffffc4 	addi	r19,r20,-1
   31728:	bdc00c04 	addi	r23,r23,48
   3172c:	14c5c83a 	sub	r2,r2,r19
   31730:	a5ffffc5 	stb	r23,-1(r20)
   31734:	d8812b15 	stw	r2,1196(sp)
   31738:	003d1406 	br	30b8c <___vfprintf_internal_r+0x61c>
   3173c:	00c00044 	movi	r3,1
   31740:	bd84b03a 	or	r2,r23,r22
   31744:	003d0306 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31748:	dc812417 	ldw	r18,1168(sp)
   3174c:	0481140e 	bge	zero,r18,31ba0 <___vfprintf_internal_r+0x1630>
   31750:	d9013217 	ldw	r4,1224(sp)
   31754:	4cc00015 	stw	r19,0(r9)
   31758:	9100ec16 	blt	r18,r4,31b0c <___vfprintf_internal_r+0x159c>
   3175c:	49000115 	stw	r4,4(r9)
   31760:	4111883a 	add	r8,r8,r4
   31764:	18c00044 	addi	r3,r3,1
   31768:	da011d15 	stw	r8,1140(sp)
   3176c:	d8c11c15 	stw	r3,1136(sp)
   31770:	008001c4 	movi	r2,7
   31774:	10c23616 	blt	r2,r3,32050 <___vfprintf_internal_r+0x1ae0>
   31778:	4a400204 	addi	r9,r9,8
   3177c:	d8813217 	ldw	r2,1224(sp)
   31780:	90a5c83a 	sub	r18,r18,r2
   31784:	04beae0e 	bge	zero,r18,31240 <___vfprintf_internal_r+0xcd0>
   31788:	04c00404 	movi	r19,16
   3178c:	d8c11c17 	ldw	r3,1136(sp)
   31790:	05000034 	movhi	r20,0
   31794:	a5002484 	addi	r20,r20,146
   31798:	9c81dd0e 	bge	r19,r18,31f10 <___vfprintf_internal_r+0x19a0>
   3179c:	058001c4 	movi	r22,7
   317a0:	ddc12917 	ldw	r23,1188(sp)
   317a4:	00000306 	br	317b4 <___vfprintf_internal_r+0x1244>
   317a8:	4a400204 	addi	r9,r9,8
   317ac:	94bffc04 	addi	r18,r18,-16
   317b0:	9c81d70e 	bge	r19,r18,31f10 <___vfprintf_internal_r+0x19a0>
   317b4:	4d000015 	stw	r20,0(r9)
   317b8:	4cc00115 	stw	r19,4(r9)
   317bc:	42000404 	addi	r8,r8,16
   317c0:	18c00044 	addi	r3,r3,1
   317c4:	da011d15 	stw	r8,1140(sp)
   317c8:	d8c11c15 	stw	r3,1136(sp)
   317cc:	b0fff60e 	bge	r22,r3,317a8 <___vfprintf_internal_r+0x1238>
   317d0:	8809883a 	mov	r4,r17
   317d4:	b80b883a 	mov	r5,r23
   317d8:	d9811b04 	addi	r6,sp,1132
   317dc:	003053c0 	call	3053c <__sprint_r>
   317e0:	103ca91e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   317e4:	da011d17 	ldw	r8,1140(sp)
   317e8:	d8c11c17 	ldw	r3,1136(sp)
   317ec:	da400404 	addi	r9,sp,16
   317f0:	003fee06 	br	317ac <___vfprintf_internal_r+0x123c>
   317f4:	d9412917 	ldw	r5,1188(sp)
   317f8:	8809883a 	mov	r4,r17
   317fc:	d9811b04 	addi	r6,sp,1132
   31800:	003053c0 	call	3053c <__sprint_r>
   31804:	103ca01e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31808:	da011d17 	ldw	r8,1140(sp)
   3180c:	d8c11c17 	ldw	r3,1136(sp)
   31810:	da400404 	addi	r9,sp,16
   31814:	003dee06 	br	30fd0 <___vfprintf_internal_r+0xa60>
   31818:	00c00084 	movi	r3,2
   3181c:	bd84b03a 	or	r2,r23,r22
   31820:	d8012585 	stb	zero,1174(sp)
   31824:	003ccb06 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31828:	8080040c 	andi	r2,r16,16
   3182c:	1000ae26 	beq	r2,zero,31ae8 <___vfprintf_internal_r+0x1578>
   31830:	d9012d17 	ldw	r4,1204(sp)
   31834:	25c00017 	ldw	r23,0(r4)
   31838:	21000104 	addi	r4,r4,4
   3183c:	d9012d15 	stw	r4,1204(sp)
   31840:	b82dd7fa 	srai	r22,r23,31
   31844:	b005883a 	mov	r2,r22
   31848:	003cb906 	br	30b30 <___vfprintf_internal_r+0x5c0>
   3184c:	8080040c 	andi	r2,r16,16
   31850:	10007026 	beq	r2,zero,31a14 <___vfprintf_internal_r+0x14a4>
   31854:	d8812d17 	ldw	r2,1204(sp)
   31858:	002d883a 	mov	r22,zero
   3185c:	00c00044 	movi	r3,1
   31860:	15c00017 	ldw	r23,0(r2)
   31864:	10800104 	addi	r2,r2,4
   31868:	d8812d15 	stw	r2,1204(sp)
   3186c:	d8012585 	stb	zero,1174(sp)
   31870:	b805883a 	mov	r2,r23
   31874:	003cb706 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31878:	d8813217 	ldw	r2,1224(sp)
   3187c:	14ffffc4 	addi	r19,r2,-1
   31880:	04ff4f0e 	bge	zero,r19,315c0 <___vfprintf_internal_r+0x1050>
   31884:	05800404 	movi	r22,16
   31888:	05000034 	movhi	r20,0
   3188c:	a5002484 	addi	r20,r20,146
   31890:	b4c0470e 	bge	r22,r19,319b0 <___vfprintf_internal_r+0x1440>
   31894:	05c001c4 	movi	r23,7
   31898:	df012917 	ldw	fp,1188(sp)
   3189c:	00000306 	br	318ac <___vfprintf_internal_r+0x133c>
   318a0:	94800204 	addi	r18,r18,8
   318a4:	9cfffc04 	addi	r19,r19,-16
   318a8:	b4c0410e 	bge	r22,r19,319b0 <___vfprintf_internal_r+0x1440>
   318ac:	95000015 	stw	r20,0(r18)
   318b0:	95800115 	stw	r22,4(r18)
   318b4:	42000404 	addi	r8,r8,16
   318b8:	18c00044 	addi	r3,r3,1
   318bc:	da011d15 	stw	r8,1140(sp)
   318c0:	d8c11c15 	stw	r3,1136(sp)
   318c4:	b8fff60e 	bge	r23,r3,318a0 <___vfprintf_internal_r+0x1330>
   318c8:	8809883a 	mov	r4,r17
   318cc:	e00b883a 	mov	r5,fp
   318d0:	d9811b04 	addi	r6,sp,1132
   318d4:	003053c0 	call	3053c <__sprint_r>
   318d8:	103c6b1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   318dc:	da011d17 	ldw	r8,1140(sp)
   318e0:	d8c11c17 	ldw	r3,1136(sp)
   318e4:	dc800404 	addi	r18,sp,16
   318e8:	003fee06 	br	318a4 <___vfprintf_internal_r+0x1334>
   318ec:	8080040c 	andi	r2,r16,16
   318f0:	10005326 	beq	r2,zero,31a40 <___vfprintf_internal_r+0x14d0>
   318f4:	d8c12d17 	ldw	r3,1204(sp)
   318f8:	002d883a 	mov	r22,zero
   318fc:	1dc00017 	ldw	r23,0(r3)
   31900:	18c00104 	addi	r3,r3,4
   31904:	d8c12d15 	stw	r3,1204(sp)
   31908:	b805883a 	mov	r2,r23
   3190c:	0007883a 	mov	r3,zero
   31910:	d8012585 	stb	zero,1174(sp)
   31914:	003c8f06 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31918:	8088703a 	and	r4,r16,r2
   3191c:	203efe1e 	bne	r4,zero,31518 <___vfprintf_internal_r+0xfa8>
   31920:	48800115 	stw	r2,4(r9)
   31924:	42000044 	addi	r8,r8,1
   31928:	18c00044 	addi	r3,r3,1
   3192c:	da011d15 	stw	r8,1140(sp)
   31930:	d8c11c15 	stw	r3,1136(sp)
   31934:	008001c4 	movi	r2,7
   31938:	10c00216 	blt	r2,r3,31944 <___vfprintf_internal_r+0x13d4>
   3193c:	4c800204 	addi	r18,r9,8
   31940:	003f1f06 	br	315c0 <___vfprintf_internal_r+0x1050>
   31944:	d9412917 	ldw	r5,1188(sp)
   31948:	8809883a 	mov	r4,r17
   3194c:	d9811b04 	addi	r6,sp,1132
   31950:	003053c0 	call	3053c <__sprint_r>
   31954:	103c4c1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31958:	dc800404 	addi	r18,sp,16
   3195c:	da011d17 	ldw	r8,1140(sp)
   31960:	d8c11c17 	ldw	r3,1136(sp)
   31964:	003f1606 	br	315c0 <___vfprintf_internal_r+0x1050>
   31968:	d9412917 	ldw	r5,1188(sp)
   3196c:	8809883a 	mov	r4,r17
   31970:	d9811b04 	addi	r6,sp,1132
   31974:	003053c0 	call	3053c <__sprint_r>
   31978:	103c431e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   3197c:	da011d17 	ldw	r8,1140(sp)
   31980:	d8c11c17 	ldw	r3,1136(sp)
   31984:	da400404 	addi	r9,sp,16
   31988:	003eec06 	br	3153c <___vfprintf_internal_r+0xfcc>
   3198c:	d9412917 	ldw	r5,1188(sp)
   31990:	8809883a 	mov	r4,r17
   31994:	d9811b04 	addi	r6,sp,1132
   31998:	003053c0 	call	3053c <__sprint_r>
   3199c:	103c3a1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   319a0:	da011d17 	ldw	r8,1140(sp)
   319a4:	d8c11c17 	ldw	r3,1136(sp)
   319a8:	dc800404 	addi	r18,sp,16
   319ac:	003eee06 	br	31568 <___vfprintf_internal_r+0xff8>
   319b0:	95000015 	stw	r20,0(r18)
   319b4:	94c00115 	stw	r19,4(r18)
   319b8:	44d1883a 	add	r8,r8,r19
   319bc:	003efa06 	br	315a8 <___vfprintf_internal_r+0x1038>
   319c0:	d9412917 	ldw	r5,1188(sp)
   319c4:	8809883a 	mov	r4,r17
   319c8:	d9811b04 	addi	r6,sp,1132
   319cc:	003053c0 	call	3053c <__sprint_r>
   319d0:	103c2d1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   319d4:	da011d17 	ldw	r8,1140(sp)
   319d8:	d8c11c17 	ldw	r3,1136(sp)
   319dc:	da400404 	addi	r9,sp,16
   319e0:	003d9806 	br	31044 <___vfprintf_internal_r+0xad4>
   319e4:	8080100c 	andi	r2,r16,64
   319e8:	10011626 	beq	r2,zero,31e44 <___vfprintf_internal_r+0x18d4>
   319ec:	d8c12d17 	ldw	r3,1204(sp)
   319f0:	002d883a 	mov	r22,zero
   319f4:	1dc0000b 	ldhu	r23,0(r3)
   319f8:	18c00104 	addi	r3,r3,4
   319fc:	d8c12d15 	stw	r3,1204(sp)
   31a00:	003cc106 	br	30d08 <___vfprintf_internal_r+0x798>
   31a04:	4d000015 	stw	r20,0(r9)
   31a08:	4c800115 	stw	r18,4(r9)
   31a0c:	4491883a 	add	r8,r8,r18
   31a10:	003dc006 	br	31114 <___vfprintf_internal_r+0xba4>
   31a14:	8080100c 	andi	r2,r16,64
   31a18:	10010126 	beq	r2,zero,31e20 <___vfprintf_internal_r+0x18b0>
   31a1c:	d8c12d17 	ldw	r3,1204(sp)
   31a20:	002d883a 	mov	r22,zero
   31a24:	1dc0000b 	ldhu	r23,0(r3)
   31a28:	18c00104 	addi	r3,r3,4
   31a2c:	d8c12d15 	stw	r3,1204(sp)
   31a30:	b805883a 	mov	r2,r23
   31a34:	00c00044 	movi	r3,1
   31a38:	d8012585 	stb	zero,1174(sp)
   31a3c:	003c4506 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31a40:	8080100c 	andi	r2,r16,64
   31a44:	10010526 	beq	r2,zero,31e5c <___vfprintf_internal_r+0x18ec>
   31a48:	d9012d17 	ldw	r4,1204(sp)
   31a4c:	002d883a 	mov	r22,zero
   31a50:	0007883a 	mov	r3,zero
   31a54:	25c0000b 	ldhu	r23,0(r4)
   31a58:	21000104 	addi	r4,r4,4
   31a5c:	d9012d15 	stw	r4,1204(sp)
   31a60:	b805883a 	mov	r2,r23
   31a64:	d8012585 	stb	zero,1174(sp)
   31a68:	003c3a06 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31a6c:	d8812d17 	ldw	r2,1204(sp)
   31a70:	15800017 	ldw	r22,0(r2)
   31a74:	15000117 	ldw	r20,4(r2)
   31a78:	10800204 	addi	r2,r2,8
   31a7c:	d8812d15 	stw	r2,1204(sp)
   31a80:	dd813315 	stw	r22,1228(sp)
   31a84:	dd013415 	stw	r20,1232(sp)
   31a88:	003c5906 	br	30bf0 <___vfprintf_internal_r+0x680>
   31a8c:	00c00084 	movi	r3,2
   31a90:	d8012585 	stb	zero,1174(sp)
   31a94:	003c2f06 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31a98:	ac800007 	ldb	r18,0(r21)
   31a9c:	003b1006 	br	306e0 <___vfprintf_internal_r+0x170>
   31aa0:	8080040c 	andi	r2,r16,16
   31aa4:	1000091e 	bne	r2,zero,31acc <___vfprintf_internal_r+0x155c>
   31aa8:	8400100c 	andi	r16,r16,64
   31aac:	80000726 	beq	r16,zero,31acc <___vfprintf_internal_r+0x155c>
   31ab0:	d8c12d17 	ldw	r3,1204(sp)
   31ab4:	d9012c17 	ldw	r4,1200(sp)
   31ab8:	18800017 	ldw	r2,0(r3)
   31abc:	18c00104 	addi	r3,r3,4
   31ac0:	d8c12d15 	stw	r3,1204(sp)
   31ac4:	1100000d 	sth	r4,0(r2)
   31ac8:	003adf06 	br	30648 <___vfprintf_internal_r+0xd8>
   31acc:	d8c12d17 	ldw	r3,1204(sp)
   31ad0:	d9012c17 	ldw	r4,1200(sp)
   31ad4:	18800017 	ldw	r2,0(r3)
   31ad8:	18c00104 	addi	r3,r3,4
   31adc:	d8c12d15 	stw	r3,1204(sp)
   31ae0:	11000015 	stw	r4,0(r2)
   31ae4:	003ad806 	br	30648 <___vfprintf_internal_r+0xd8>
   31ae8:	8080100c 	andi	r2,r16,64
   31aec:	1000c526 	beq	r2,zero,31e04 <___vfprintf_internal_r+0x1894>
   31af0:	d8812d17 	ldw	r2,1204(sp)
   31af4:	15c0000f 	ldh	r23,0(r2)
   31af8:	10800104 	addi	r2,r2,4
   31afc:	d8812d15 	stw	r2,1204(sp)
   31b00:	b82dd7fa 	srai	r22,r23,31
   31b04:	b005883a 	mov	r2,r22
   31b08:	003c0906 	br	30b30 <___vfprintf_internal_r+0x5c0>
   31b0c:	4c800115 	stw	r18,4(r9)
   31b10:	9211883a 	add	r8,r18,r8
   31b14:	18c00044 	addi	r3,r3,1
   31b18:	da011d15 	stw	r8,1140(sp)
   31b1c:	d8c11c15 	stw	r3,1136(sp)
   31b20:	008001c4 	movi	r2,7
   31b24:	10c14016 	blt	r2,r3,32028 <___vfprintf_internal_r+0x1ab8>
   31b28:	4a400204 	addi	r9,r9,8
   31b2c:	d8813717 	ldw	r2,1244(sp)
   31b30:	9ca7883a 	add	r19,r19,r18
   31b34:	48800015 	stw	r2,0(r9)
   31b38:	00800044 	movi	r2,1
   31b3c:	48800115 	stw	r2,4(r9)
   31b40:	4091883a 	add	r8,r8,r2
   31b44:	1887883a 	add	r3,r3,r2
   31b48:	da011d15 	stw	r8,1140(sp)
   31b4c:	d8c11c15 	stw	r3,1136(sp)
   31b50:	008001c4 	movi	r2,7
   31b54:	10c12c16 	blt	r2,r3,32008 <___vfprintf_internal_r+0x1a98>
   31b58:	4a400204 	addi	r9,r9,8
   31b5c:	d9013217 	ldw	r4,1224(sp)
   31b60:	da011d17 	ldw	r8,1140(sp)
   31b64:	d8c11c17 	ldw	r3,1136(sp)
   31b68:	24a5c83a 	sub	r18,r4,r18
   31b6c:	4cc00015 	stw	r19,0(r9)
   31b70:	003fa506 	br	31a08 <___vfprintf_internal_r+0x1498>
   31b74:	04c00034 	movhi	r19,0
   31b78:	9cc01104 	addi	r19,r19,68
   31b7c:	003c2e06 	br	30c38 <___vfprintf_internal_r+0x6c8>
   31b80:	d9412917 	ldw	r5,1188(sp)
   31b84:	8809883a 	mov	r4,r17
   31b88:	d9811b04 	addi	r6,sp,1132
   31b8c:	003053c0 	call	3053c <__sprint_r>
   31b90:	103bbd1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31b94:	da011d17 	ldw	r8,1140(sp)
   31b98:	da400404 	addi	r9,sp,16
   31b9c:	003df606 	br	31378 <___vfprintf_internal_r+0xe08>
   31ba0:	00800034 	movhi	r2,0
   31ba4:	10802004 	addi	r2,r2,128
   31ba8:	48800015 	stw	r2,0(r9)
   31bac:	00800044 	movi	r2,1
   31bb0:	48800115 	stw	r2,4(r9)
   31bb4:	4091883a 	add	r8,r8,r2
   31bb8:	1887883a 	add	r3,r3,r2
   31bbc:	da011d15 	stw	r8,1140(sp)
   31bc0:	d8c11c15 	stw	r3,1136(sp)
   31bc4:	008001c4 	movi	r2,7
   31bc8:	10c0bc16 	blt	r2,r3,31ebc <___vfprintf_internal_r+0x194c>
   31bcc:	4a400204 	addi	r9,r9,8
   31bd0:	9000041e 	bne	r18,zero,31be4 <___vfprintf_internal_r+0x1674>
   31bd4:	d8c13217 	ldw	r3,1224(sp)
   31bd8:	1800021e 	bne	r3,zero,31be4 <___vfprintf_internal_r+0x1674>
   31bdc:	8080004c 	andi	r2,r16,1
   31be0:	103d5226 	beq	r2,zero,3112c <___vfprintf_internal_r+0xbbc>
   31be4:	d8c11c17 	ldw	r3,1136(sp)
   31be8:	d9013717 	ldw	r4,1244(sp)
   31bec:	00800044 	movi	r2,1
   31bf0:	48800115 	stw	r2,4(r9)
   31bf4:	49000015 	stw	r4,0(r9)
   31bf8:	4091883a 	add	r8,r8,r2
   31bfc:	1887883a 	add	r3,r3,r2
   31c00:	da011d15 	stw	r8,1140(sp)
   31c04:	d8c11c15 	stw	r3,1136(sp)
   31c08:	008001c4 	movi	r2,7
   31c0c:	10c14516 	blt	r2,r3,32124 <___vfprintf_internal_r+0x1bb4>
   31c10:	4a400204 	addi	r9,r9,8
   31c14:	04a5c83a 	sub	r18,zero,r18
   31c18:	0480d70e 	bge	zero,r18,31f78 <___vfprintf_internal_r+0x1a08>
   31c1c:	05800404 	movi	r22,16
   31c20:	05000034 	movhi	r20,0
   31c24:	a5002484 	addi	r20,r20,146
   31c28:	b480db0e 	bge	r22,r18,31f98 <___vfprintf_internal_r+0x1a28>
   31c2c:	05c001c4 	movi	r23,7
   31c30:	df012917 	ldw	fp,1188(sp)
   31c34:	00000306 	br	31c44 <___vfprintf_internal_r+0x16d4>
   31c38:	4a400204 	addi	r9,r9,8
   31c3c:	94bffc04 	addi	r18,r18,-16
   31c40:	b480d50e 	bge	r22,r18,31f98 <___vfprintf_internal_r+0x1a28>
   31c44:	4d000015 	stw	r20,0(r9)
   31c48:	4d800115 	stw	r22,4(r9)
   31c4c:	42000404 	addi	r8,r8,16
   31c50:	18c00044 	addi	r3,r3,1
   31c54:	da011d15 	stw	r8,1140(sp)
   31c58:	d8c11c15 	stw	r3,1136(sp)
   31c5c:	b8fff60e 	bge	r23,r3,31c38 <___vfprintf_internal_r+0x16c8>
   31c60:	8809883a 	mov	r4,r17
   31c64:	e00b883a 	mov	r5,fp
   31c68:	d9811b04 	addi	r6,sp,1132
   31c6c:	003053c0 	call	3053c <__sprint_r>
   31c70:	103b851e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31c74:	da011d17 	ldw	r8,1140(sp)
   31c78:	d8c11c17 	ldw	r3,1136(sp)
   31c7c:	da400404 	addi	r9,sp,16
   31c80:	003fee06 	br	31c3c <___vfprintf_internal_r+0x16cc>
   31c84:	da413c15 	stw	r9,1264(sp)
   31c88:	003725c0 	call	3725c <__isnand>
   31c8c:	da413c17 	ldw	r9,1264(sp)
   31c90:	10007e1e 	bne	r2,zero,31e8c <___vfprintf_internal_r+0x191c>
   31c94:	00bfffc4 	movi	r2,-1
   31c98:	e0816a26 	beq	fp,r2,32244 <___vfprintf_internal_r+0x1cd4>
   31c9c:	008019c4 	movi	r2,103
   31ca0:	90816526 	beq	r18,r2,32238 <___vfprintf_internal_r+0x1cc8>
   31ca4:	008011c4 	movi	r2,71
   31ca8:	90816326 	beq	r18,r2,32238 <___vfprintf_internal_r+0x1cc8>
   31cac:	80c04014 	ori	r3,r16,256
   31cb0:	d8c12a15 	stw	r3,1192(sp)
   31cb4:	a0016516 	blt	r20,zero,3224c <___vfprintf_internal_r+0x1cdc>
   31cb8:	d8012f05 	stb	zero,1212(sp)
   31cbc:	00801984 	movi	r2,102
   31cc0:	9080f226 	beq	r18,r2,3208c <___vfprintf_internal_r+0x1b1c>
   31cc4:	00801184 	movi	r2,70
   31cc8:	9080f026 	beq	r18,r2,3208c <___vfprintf_internal_r+0x1b1c>
   31ccc:	00801944 	movi	r2,101
   31cd0:	90818d26 	beq	r18,r2,32308 <___vfprintf_internal_r+0x1d98>
   31cd4:	00801144 	movi	r2,69
   31cd8:	90818b26 	beq	r18,r2,32308 <___vfprintf_internal_r+0x1d98>
   31cdc:	e02f883a 	mov	r23,fp
   31ce0:	d8812404 	addi	r2,sp,1168
   31ce4:	d8800115 	stw	r2,4(sp)
   31ce8:	d8812304 	addi	r2,sp,1164
   31cec:	d8800215 	stw	r2,8(sp)
   31cf0:	d8812204 	addi	r2,sp,1160
   31cf4:	ddc00015 	stw	r23,0(sp)
   31cf8:	d8800315 	stw	r2,12(sp)
   31cfc:	8809883a 	mov	r4,r17
   31d00:	b00b883a 	mov	r5,r22
   31d04:	a00d883a 	mov	r6,r20
   31d08:	01c00084 	movi	r7,2
   31d0c:	da413c15 	stw	r9,1264(sp)
   31d10:	00327c00 	call	327c0 <_dtoa_r>
   31d14:	1027883a 	mov	r19,r2
   31d18:	008019c4 	movi	r2,103
   31d1c:	da413c17 	ldw	r9,1264(sp)
   31d20:	9081951e 	bne	r18,r2,32378 <___vfprintf_internal_r+0x1e08>
   31d24:	8080004c 	andi	r2,r16,1
   31d28:	10017926 	beq	r2,zero,32310 <___vfprintf_internal_r+0x1da0>
   31d2c:	00801184 	movi	r2,70
   31d30:	9dc7883a 	add	r3,r19,r23
   31d34:	9080e626 	beq	r18,r2,320d0 <___vfprintf_internal_r+0x1b60>
   31d38:	b009883a 	mov	r4,r22
   31d3c:	a00b883a 	mov	r5,r20
   31d40:	000d883a 	mov	r6,zero
   31d44:	000f883a 	mov	r7,zero
   31d48:	d8c13b15 	stw	r3,1260(sp)
   31d4c:	da413c15 	stw	r9,1264(sp)
   31d50:	0038e780 	call	38e78 <__eqdf2>
   31d54:	d8c13b17 	ldw	r3,1260(sp)
   31d58:	da413c17 	ldw	r9,1264(sp)
   31d5c:	10000726 	beq	r2,zero,31d7c <___vfprintf_internal_r+0x180c>
   31d60:	d8812217 	ldw	r2,1160(sp)
   31d64:	10c18a2e 	bgeu	r2,r3,32390 <___vfprintf_internal_r+0x1e20>
   31d68:	01000c04 	movi	r4,48
   31d6c:	11000005 	stb	r4,0(r2)
   31d70:	10800044 	addi	r2,r2,1
   31d74:	d8812215 	stw	r2,1160(sp)
   31d78:	10fffc1e 	bne	r2,r3,31d6c <___vfprintf_internal_r+0x17fc>
   31d7c:	1cc7c83a 	sub	r3,r3,r19
   31d80:	d8c13215 	stw	r3,1224(sp)
   31d84:	008019c4 	movi	r2,103
   31d88:	9080fa26 	beq	r18,r2,32174 <___vfprintf_internal_r+0x1c04>
   31d8c:	008011c4 	movi	r2,71
   31d90:	9080f826 	beq	r18,r2,32174 <___vfprintf_internal_r+0x1c04>
   31d94:	00801984 	movi	r2,102
   31d98:	90818e1e 	bne	r18,r2,323d4 <___vfprintf_internal_r+0x1e64>
   31d9c:	d8812417 	ldw	r2,1168(sp)
   31da0:	d8812b15 	stw	r2,1196(sp)
   31da4:	00817c0e 	bge	zero,r2,32398 <___vfprintf_internal_r+0x1e28>
   31da8:	e000021e 	bne	fp,zero,31db4 <___vfprintf_internal_r+0x1844>
   31dac:	8400004c 	andi	r16,r16,1
   31db0:	80000426 	beq	r16,zero,31dc4 <___vfprintf_internal_r+0x1854>
   31db4:	d8812b17 	ldw	r2,1196(sp)
   31db8:	e2000044 	addi	r8,fp,1
   31dbc:	1205883a 	add	r2,r2,r8
   31dc0:	d8812b15 	stw	r2,1196(sp)
   31dc4:	d8812815 	stw	r2,1184(sp)
   31dc8:	10010b16 	blt	r2,zero,321f8 <___vfprintf_internal_r+0x1c88>
   31dcc:	ddc12f07 	ldb	r23,1212(sp)
   31dd0:	b800e426 	beq	r23,zero,32164 <___vfprintf_internal_r+0x1bf4>
   31dd4:	00800b44 	movi	r2,45
   31dd8:	d8812585 	stb	r2,1174(sp)
   31ddc:	dc012a17 	ldw	r16,1192(sp)
   31de0:	d8013115 	stw	zero,1220(sp)
   31de4:	003b7306 	br	30bb4 <___vfprintf_internal_r+0x644>
   31de8:	d8812b17 	ldw	r2,1196(sp)
   31dec:	d8812815 	stw	r2,1184(sp)
   31df0:	10005716 	blt	r2,zero,31f50 <___vfprintf_internal_r+0x19e0>
   31df4:	d8812583 	ldbu	r2,1174(sp)
   31df8:	ddc12d15 	stw	r23,1204(sp)
   31dfc:	d8013115 	stw	zero,1220(sp)
   31e00:	003b6806 	br	30ba4 <___vfprintf_internal_r+0x634>
   31e04:	d8c12d17 	ldw	r3,1204(sp)
   31e08:	1dc00017 	ldw	r23,0(r3)
   31e0c:	18c00104 	addi	r3,r3,4
   31e10:	d8c12d15 	stw	r3,1204(sp)
   31e14:	b82dd7fa 	srai	r22,r23,31
   31e18:	b005883a 	mov	r2,r22
   31e1c:	003b4406 	br	30b30 <___vfprintf_internal_r+0x5c0>
   31e20:	d9012d17 	ldw	r4,1204(sp)
   31e24:	002d883a 	mov	r22,zero
   31e28:	00c00044 	movi	r3,1
   31e2c:	25c00017 	ldw	r23,0(r4)
   31e30:	21000104 	addi	r4,r4,4
   31e34:	d9012d15 	stw	r4,1204(sp)
   31e38:	b805883a 	mov	r2,r23
   31e3c:	d8012585 	stb	zero,1174(sp)
   31e40:	003b4406 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31e44:	d9012d17 	ldw	r4,1204(sp)
   31e48:	002d883a 	mov	r22,zero
   31e4c:	25c00017 	ldw	r23,0(r4)
   31e50:	21000104 	addi	r4,r4,4
   31e54:	d9012d15 	stw	r4,1204(sp)
   31e58:	003bab06 	br	30d08 <___vfprintf_internal_r+0x798>
   31e5c:	d8812d17 	ldw	r2,1204(sp)
   31e60:	002d883a 	mov	r22,zero
   31e64:	0007883a 	mov	r3,zero
   31e68:	15c00017 	ldw	r23,0(r2)
   31e6c:	10800104 	addi	r2,r2,4
   31e70:	d8812d15 	stw	r2,1204(sp)
   31e74:	d8012585 	stb	zero,1174(sp)
   31e78:	b805883a 	mov	r2,r23
   31e7c:	003b3506 	br	30b54 <___vfprintf_internal_r+0x5e4>
   31e80:	00ffffc4 	movi	r3,-1
   31e84:	b82b883a 	mov	r21,r23
   31e88:	003a1606 	br	306e4 <___vfprintf_internal_r+0x174>
   31e8c:	008011c4 	movi	r2,71
   31e90:	1480b116 	blt	r2,r18,32158 <___vfprintf_internal_r+0x1be8>
   31e94:	04c00034 	movhi	r19,0
   31e98:	9cc01204 	addi	r19,r19,72
   31e9c:	00c000c4 	movi	r3,3
   31ea0:	00bfdfc4 	movi	r2,-129
   31ea4:	80a0703a 	and	r16,r16,r2
   31ea8:	d8c12815 	stw	r3,1184(sp)
   31eac:	d8812583 	ldbu	r2,1174(sp)
   31eb0:	d8c12b15 	stw	r3,1196(sp)
   31eb4:	d8013115 	stw	zero,1220(sp)
   31eb8:	003b3a06 	br	30ba4 <___vfprintf_internal_r+0x634>
   31ebc:	d9412917 	ldw	r5,1188(sp)
   31ec0:	8809883a 	mov	r4,r17
   31ec4:	d9811b04 	addi	r6,sp,1132
   31ec8:	003053c0 	call	3053c <__sprint_r>
   31ecc:	103aee1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31ed0:	dc812417 	ldw	r18,1168(sp)
   31ed4:	da011d17 	ldw	r8,1140(sp)
   31ed8:	da400404 	addi	r9,sp,16
   31edc:	003f3c06 	br	31bd0 <___vfprintf_internal_r+0x1660>
   31ee0:	ad400044 	addi	r21,r21,1
   31ee4:	84000814 	ori	r16,r16,32
   31ee8:	14800047 	ldb	r18,1(r2)
   31eec:	0039fc06 	br	306e0 <___vfprintf_internal_r+0x170>
   31ef0:	d9412917 	ldw	r5,1188(sp)
   31ef4:	8809883a 	mov	r4,r17
   31ef8:	d9811b04 	addi	r6,sp,1132
   31efc:	003053c0 	call	3053c <__sprint_r>
   31f00:	103ae11e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31f04:	da011d17 	ldw	r8,1140(sp)
   31f08:	da400404 	addi	r9,sp,16
   31f0c:	003d2b06 	br	313bc <___vfprintf_internal_r+0xe4c>
   31f10:	4d000015 	stw	r20,0(r9)
   31f14:	4c800115 	stw	r18,4(r9)
   31f18:	4491883a 	add	r8,r8,r18
   31f1c:	18c00044 	addi	r3,r3,1
   31f20:	da011d15 	stw	r8,1140(sp)
   31f24:	d8c11c15 	stw	r3,1136(sp)
   31f28:	008001c4 	movi	r2,7
   31f2c:	10fcbd16 	blt	r2,r3,31224 <___vfprintf_internal_r+0xcb4>
   31f30:	4a400204 	addi	r9,r9,8
   31f34:	003cc206 	br	31240 <___vfprintf_internal_r+0xcd0>
   31f38:	da413c15 	stw	r9,1264(sp)
   31f3c:	00304b00 	call	304b0 <strlen>
   31f40:	d8812b15 	stw	r2,1196(sp)
   31f44:	d8812815 	stw	r2,1184(sp)
   31f48:	da413c17 	ldw	r9,1264(sp)
   31f4c:	103fa90e 	bge	r2,zero,31df4 <___vfprintf_internal_r+0x1884>
   31f50:	d8012815 	stw	zero,1184(sp)
   31f54:	003fa706 	br	31df4 <___vfprintf_internal_r+0x1884>
   31f58:	d9412917 	ldw	r5,1188(sp)
   31f5c:	8809883a 	mov	r4,r17
   31f60:	d9811b04 	addi	r6,sp,1132
   31f64:	003053c0 	call	3053c <__sprint_r>
   31f68:	103ac71e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   31f6c:	da011d17 	ldw	r8,1140(sp)
   31f70:	d8c11c17 	ldw	r3,1136(sp)
   31f74:	da400404 	addi	r9,sp,16
   31f78:	d8813217 	ldw	r2,1224(sp)
   31f7c:	4cc00015 	stw	r19,0(r9)
   31f80:	48800115 	stw	r2,4(r9)
   31f84:	4091883a 	add	r8,r8,r2
   31f88:	003c6206 	br	31114 <___vfprintf_internal_r+0xba4>
   31f8c:	00800b44 	movi	r2,45
   31f90:	d8812585 	stb	r2,1174(sp)
   31f94:	003b2406 	br	30c28 <___vfprintf_internal_r+0x6b8>
   31f98:	4d000015 	stw	r20,0(r9)
   31f9c:	4c800115 	stw	r18,4(r9)
   31fa0:	4491883a 	add	r8,r8,r18
   31fa4:	18c00044 	addi	r3,r3,1
   31fa8:	da011d15 	stw	r8,1140(sp)
   31fac:	d8c11c15 	stw	r3,1136(sp)
   31fb0:	008001c4 	movi	r2,7
   31fb4:	10ffe816 	blt	r2,r3,31f58 <___vfprintf_internal_r+0x19e8>
   31fb8:	4a400204 	addi	r9,r9,8
   31fbc:	003fee06 	br	31f78 <___vfprintf_internal_r+0x1a08>
   31fc0:	d8c12b15 	stw	r3,1196(sp)
   31fc4:	00800184 	movi	r2,6
   31fc8:	10c0062e 	bgeu	r2,r3,31fe4 <___vfprintf_internal_r+0x1a74>
   31fcc:	d8812b15 	stw	r2,1196(sp)
   31fd0:	d8812815 	stw	r2,1184(sp)
   31fd4:	ddc12d15 	stw	r23,1204(sp)
   31fd8:	04c00034 	movhi	r19,0
   31fdc:	9cc01e04 	addi	r19,r19,120
   31fe0:	0039ca06 	br	3070c <___vfprintf_internal_r+0x19c>
   31fe4:	d8812b17 	ldw	r2,1196(sp)
   31fe8:	d8812815 	stw	r2,1184(sp)
   31fec:	103ff90e 	bge	r2,zero,31fd4 <___vfprintf_internal_r+0x1a64>
   31ff0:	d8012815 	stw	zero,1184(sp)
   31ff4:	003ff706 	br	31fd4 <___vfprintf_internal_r+0x1a64>
   31ff8:	00800244 	movi	r2,9
   31ffc:	15fdaa36 	bltu	r2,r23,316a8 <___vfprintf_internal_r+0x1138>
   32000:	dd010e04 	addi	r20,sp,1080
   32004:	003dc606 	br	31720 <___vfprintf_internal_r+0x11b0>
   32008:	d9412917 	ldw	r5,1188(sp)
   3200c:	8809883a 	mov	r4,r17
   32010:	d9811b04 	addi	r6,sp,1132
   32014:	003053c0 	call	3053c <__sprint_r>
   32018:	103a9b1e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   3201c:	dc812417 	ldw	r18,1168(sp)
   32020:	da400404 	addi	r9,sp,16
   32024:	003ecd06 	br	31b5c <___vfprintf_internal_r+0x15ec>
   32028:	d9412917 	ldw	r5,1188(sp)
   3202c:	8809883a 	mov	r4,r17
   32030:	d9811b04 	addi	r6,sp,1132
   32034:	003053c0 	call	3053c <__sprint_r>
   32038:	103a931e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   3203c:	dc812417 	ldw	r18,1168(sp)
   32040:	da011d17 	ldw	r8,1140(sp)
   32044:	d8c11c17 	ldw	r3,1136(sp)
   32048:	da400404 	addi	r9,sp,16
   3204c:	003eb706 	br	31b2c <___vfprintf_internal_r+0x15bc>
   32050:	d9412917 	ldw	r5,1188(sp)
   32054:	8809883a 	mov	r4,r17
   32058:	d9811b04 	addi	r6,sp,1132
   3205c:	003053c0 	call	3053c <__sprint_r>
   32060:	103a891e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   32064:	dc812417 	ldw	r18,1168(sp)
   32068:	da011d17 	ldw	r8,1140(sp)
   3206c:	da400404 	addi	r9,sp,16
   32070:	003dc206 	br	3177c <___vfprintf_internal_r+0x120c>
   32074:	df012815 	stw	fp,1184(sp)
   32078:	d8812583 	ldbu	r2,1174(sp)
   3207c:	df012b15 	stw	fp,1196(sp)
   32080:	ddc12d15 	stw	r23,1204(sp)
   32084:	d8013115 	stw	zero,1220(sp)
   32088:	003ac606 	br	30ba4 <___vfprintf_internal_r+0x634>
   3208c:	d8812404 	addi	r2,sp,1168
   32090:	d8800115 	stw	r2,4(sp)
   32094:	d8812304 	addi	r2,sp,1164
   32098:	d8800215 	stw	r2,8(sp)
   3209c:	d8812204 	addi	r2,sp,1160
   320a0:	df000015 	stw	fp,0(sp)
   320a4:	d8800315 	stw	r2,12(sp)
   320a8:	8809883a 	mov	r4,r17
   320ac:	b00b883a 	mov	r5,r22
   320b0:	a00d883a 	mov	r6,r20
   320b4:	01c000c4 	movi	r7,3
   320b8:	da413c15 	stw	r9,1264(sp)
   320bc:	00327c00 	call	327c0 <_dtoa_r>
   320c0:	da413c17 	ldw	r9,1264(sp)
   320c4:	1027883a 	mov	r19,r2
   320c8:	1707883a 	add	r3,r2,fp
   320cc:	e02f883a 	mov	r23,fp
   320d0:	99000007 	ldb	r4,0(r19)
   320d4:	00800c04 	movi	r2,48
   320d8:	20800326 	beq	r4,r2,320e8 <___vfprintf_internal_r+0x1b78>
   320dc:	da812417 	ldw	r10,1168(sp)
   320e0:	1a87883a 	add	r3,r3,r10
   320e4:	003f1406 	br	31d38 <___vfprintf_internal_r+0x17c8>
   320e8:	b009883a 	mov	r4,r22
   320ec:	a00b883a 	mov	r5,r20
   320f0:	000d883a 	mov	r6,zero
   320f4:	000f883a 	mov	r7,zero
   320f8:	d8c13b15 	stw	r3,1260(sp)
   320fc:	da413c15 	stw	r9,1264(sp)
   32100:	0038ed40 	call	38ed4 <__nedf2>
   32104:	d8c13b17 	ldw	r3,1260(sp)
   32108:	da413c17 	ldw	r9,1264(sp)
   3210c:	103ff326 	beq	r2,zero,320dc <___vfprintf_internal_r+0x1b6c>
   32110:	00800044 	movi	r2,1
   32114:	15d5c83a 	sub	r10,r2,r23
   32118:	da812415 	stw	r10,1168(sp)
   3211c:	1a87883a 	add	r3,r3,r10
   32120:	003f0506 	br	31d38 <___vfprintf_internal_r+0x17c8>
   32124:	d9412917 	ldw	r5,1188(sp)
   32128:	8809883a 	mov	r4,r17
   3212c:	d9811b04 	addi	r6,sp,1132
   32130:	003053c0 	call	3053c <__sprint_r>
   32134:	103a541e 	bne	r2,zero,30a88 <___vfprintf_internal_r+0x518>
   32138:	dc812417 	ldw	r18,1168(sp)
   3213c:	da011d17 	ldw	r8,1140(sp)
   32140:	d8c11c17 	ldw	r3,1136(sp)
   32144:	da400404 	addi	r9,sp,16
   32148:	003eb206 	br	31c14 <___vfprintf_internal_r+0x16a4>
   3214c:	b82b883a 	mov	r21,r23
   32150:	0007883a 	mov	r3,zero
   32154:	00396306 	br	306e4 <___vfprintf_internal_r+0x174>
   32158:	04c00034 	movhi	r19,0
   3215c:	9cc01304 	addi	r19,r19,76
   32160:	003f4e06 	br	31e9c <___vfprintf_internal_r+0x192c>
   32164:	d8812583 	ldbu	r2,1174(sp)
   32168:	dc012a17 	ldw	r16,1192(sp)
   3216c:	d8013115 	stw	zero,1220(sp)
   32170:	003a8c06 	br	30ba4 <___vfprintf_internal_r+0x634>
   32174:	d8812417 	ldw	r2,1168(sp)
   32178:	d8812b15 	stw	r2,1196(sp)
   3217c:	1029883a 	mov	r20,r2
   32180:	00bfff44 	movi	r2,-3
   32184:	a0800116 	blt	r20,r2,3218c <___vfprintf_internal_r+0x1c1c>
   32188:	e5001d0e 	bge	fp,r20,32200 <___vfprintf_internal_r+0x1c90>
   3218c:	94bfff84 	addi	r18,r18,-2
   32190:	a53fffc4 	addi	r20,r20,-1
   32194:	dd012415 	stw	r20,1168(sp)
   32198:	dc811fc5 	stb	r18,1151(sp)
   3219c:	a0007216 	blt	r20,zero,32368 <___vfprintf_internal_r+0x1df8>
   321a0:	00800ac4 	movi	r2,43
   321a4:	d8812005 	stb	r2,1152(sp)
   321a8:	00800244 	movi	r2,9
   321ac:	15003516 	blt	r2,r20,32284 <___vfprintf_internal_r+0x1d14>
   321b0:	00800c04 	movi	r2,48
   321b4:	a5000c04 	addi	r20,r20,48
   321b8:	d8812045 	stb	r2,1153(sp)
   321bc:	dd012085 	stb	r20,1154(sp)
   321c0:	d8c120c4 	addi	r3,sp,1155
   321c4:	d8811fc4 	addi	r2,sp,1151
   321c8:	1885c83a 	sub	r2,r3,r2
   321cc:	d8c13217 	ldw	r3,1224(sp)
   321d0:	d8813515 	stw	r2,1236(sp)
   321d4:	1885883a 	add	r2,r3,r2
   321d8:	d8812b15 	stw	r2,1196(sp)
   321dc:	00800044 	movi	r2,1
   321e0:	10c0580e 	bge	r2,r3,32344 <___vfprintf_internal_r+0x1dd4>
   321e4:	d8812b17 	ldw	r2,1196(sp)
   321e8:	10800044 	addi	r2,r2,1
   321ec:	d8812b15 	stw	r2,1196(sp)
   321f0:	d8812815 	stw	r2,1184(sp)
   321f4:	103ef50e 	bge	r2,zero,31dcc <___vfprintf_internal_r+0x185c>
   321f8:	d8012815 	stw	zero,1184(sp)
   321fc:	003ef306 	br	31dcc <___vfprintf_internal_r+0x185c>
   32200:	d8812b17 	ldw	r2,1196(sp)
   32204:	d8c13217 	ldw	r3,1224(sp)
   32208:	10c01416 	blt	r2,r3,3225c <___vfprintf_internal_r+0x1cec>
   3220c:	8400004c 	andi	r16,r16,1
   32210:	80000326 	beq	r16,zero,32220 <___vfprintf_internal_r+0x1cb0>
   32214:	d8812b17 	ldw	r2,1196(sp)
   32218:	10800044 	addi	r2,r2,1
   3221c:	d8812b15 	stw	r2,1196(sp)
   32220:	d8812815 	stw	r2,1184(sp)
   32224:	10001416 	blt	r2,zero,32278 <___vfprintf_internal_r+0x1d08>
   32228:	048019c4 	movi	r18,103
   3222c:	003ee706 	br	31dcc <___vfprintf_internal_r+0x185c>
   32230:	d8012815 	stw	zero,1184(sp)
   32234:	003b1a06 	br	30ea0 <___vfprintf_internal_r+0x930>
   32238:	e03e9c1e 	bne	fp,zero,31cac <___vfprintf_internal_r+0x173c>
   3223c:	07000044 	movi	fp,1
   32240:	003e9a06 	br	31cac <___vfprintf_internal_r+0x173c>
   32244:	07000184 	movi	fp,6
   32248:	003e9806 	br	31cac <___vfprintf_internal_r+0x173c>
   3224c:	00c00b44 	movi	r3,45
   32250:	a520003c 	xorhi	r20,r20,32768
   32254:	d8c12f05 	stb	r3,1212(sp)
   32258:	003e9806 	br	31cbc <___vfprintf_internal_r+0x174c>
   3225c:	05003f0e 	bge	zero,r20,3235c <___vfprintf_internal_r+0x1dec>
   32260:	05000044 	movi	r20,1
   32264:	d8c13217 	ldw	r3,1224(sp)
   32268:	a0e9883a 	add	r20,r20,r3
   3226c:	dd012b15 	stw	r20,1196(sp)
   32270:	dd012815 	stw	r20,1184(sp)
   32274:	a03fec0e 	bge	r20,zero,32228 <___vfprintf_internal_r+0x1cb8>
   32278:	d8012815 	stw	zero,1184(sp)
   3227c:	048019c4 	movi	r18,103
   32280:	003ed206 	br	31dcc <___vfprintf_internal_r+0x185c>
   32284:	d8c11f84 	addi	r3,sp,1150
   32288:	102f883a 	mov	r23,r2
   3228c:	4839883a 	mov	fp,r9
   32290:	a009883a 	mov	r4,r20
   32294:	01400284 	movi	r5,10
   32298:	182d883a 	mov	r22,r3
   3229c:	00393dc0 	call	393dc <__modsi3>
   322a0:	10800c04 	addi	r2,r2,48
   322a4:	a009883a 	mov	r4,r20
   322a8:	b0800005 	stb	r2,0(r22)
   322ac:	01400284 	movi	r5,10
   322b0:	003938c0 	call	3938c <__divsi3>
   322b4:	1029883a 	mov	r20,r2
   322b8:	b0ffffc4 	addi	r3,r22,-1
   322bc:	b8bff416 	blt	r23,r2,32290 <___vfprintf_internal_r+0x1d20>
   322c0:	11400c04 	addi	r5,r2,48
   322c4:	b17fffc5 	stb	r5,-1(r22)
   322c8:	d8811fc4 	addi	r2,sp,1151
   322cc:	e013883a 	mov	r9,fp
   322d0:	18803e2e 	bgeu	r3,r2,323cc <___vfprintf_internal_r+0x1e5c>
   322d4:	b007883a 	mov	r3,r22
   322d8:	d9012044 	addi	r4,sp,1153
   322dc:	00000206 	br	322e8 <___vfprintf_internal_r+0x1d78>
   322e0:	19400003 	ldbu	r5,0(r3)
   322e4:	18c00044 	addi	r3,r3,1
   322e8:	21400005 	stb	r5,0(r4)
   322ec:	21000044 	addi	r4,r4,1
   322f0:	10fffb1e 	bne	r2,r3,322e0 <___vfprintf_internal_r+0x1d70>
   322f4:	d8c12004 	addi	r3,sp,1152
   322f8:	1d87c83a 	sub	r3,r3,r22
   322fc:	d9012044 	addi	r4,sp,1153
   32300:	20c7883a 	add	r3,r4,r3
   32304:	003fb006 	br	321c8 <___vfprintf_internal_r+0x1c58>
   32308:	e5c00044 	addi	r23,fp,1
   3230c:	003e7406 	br	31ce0 <___vfprintf_internal_r+0x1770>
   32310:	d8c12217 	ldw	r3,1160(sp)
   32314:	003e9906 	br	31d7c <___vfprintf_internal_r+0x180c>
   32318:	d9012d17 	ldw	r4,1204(sp)
   3231c:	ac800043 	ldbu	r18,1(r21)
   32320:	b82b883a 	mov	r21,r23
   32324:	20c00017 	ldw	r3,0(r4)
   32328:	20800104 	addi	r2,r4,4
   3232c:	d8812d15 	stw	r2,1204(sp)
   32330:	18002116 	blt	r3,zero,323b8 <___vfprintf_internal_r+0x1e48>
   32334:	94803fcc 	andi	r18,r18,255
   32338:	9480201c 	xori	r18,r18,128
   3233c:	94bfe004 	addi	r18,r18,-128
   32340:	0038e706 	br	306e0 <___vfprintf_internal_r+0x170>
   32344:	80a0703a 	and	r16,r16,r2
   32348:	803fa61e 	bne	r16,zero,321e4 <___vfprintf_internal_r+0x1c74>
   3234c:	d8812b17 	ldw	r2,1196(sp)
   32350:	d8812815 	stw	r2,1184(sp)
   32354:	103e9d0e 	bge	r2,zero,31dcc <___vfprintf_internal_r+0x185c>
   32358:	003fa706 	br	321f8 <___vfprintf_internal_r+0x1c88>
   3235c:	00800084 	movi	r2,2
   32360:	1529c83a 	sub	r20,r2,r20
   32364:	003fbf06 	br	32264 <___vfprintf_internal_r+0x1cf4>
   32368:	00800b44 	movi	r2,45
   3236c:	0529c83a 	sub	r20,zero,r20
   32370:	d8812005 	stb	r2,1152(sp)
   32374:	003f8c06 	br	321a8 <___vfprintf_internal_r+0x1c38>
   32378:	008011c4 	movi	r2,71
   3237c:	90be6926 	beq	r18,r2,31d24 <___vfprintf_internal_r+0x17b4>
   32380:	003e6a06 	br	31d2c <___vfprintf_internal_r+0x17bc>
   32384:	00bfffc4 	movi	r2,-1
   32388:	d8812c15 	stw	r2,1200(sp)
   3238c:	0039ad06 	br	30a44 <___vfprintf_internal_r+0x4d4>
   32390:	1007883a 	mov	r3,r2
   32394:	003e7906 	br	31d7c <___vfprintf_internal_r+0x180c>
   32398:	e000021e 	bne	fp,zero,323a4 <___vfprintf_internal_r+0x1e34>
   3239c:	8400004c 	andi	r16,r16,1
   323a0:	80000e26 	beq	r16,zero,323dc <___vfprintf_internal_r+0x1e6c>
   323a4:	e7000084 	addi	fp,fp,2
   323a8:	df012b15 	stw	fp,1196(sp)
   323ac:	df012815 	stw	fp,1184(sp)
   323b0:	e03e860e 	bge	fp,zero,31dcc <___vfprintf_internal_r+0x185c>
   323b4:	003f9006 	br	321f8 <___vfprintf_internal_r+0x1c88>
   323b8:	94803fcc 	andi	r18,r18,255
   323bc:	9480201c 	xori	r18,r18,128
   323c0:	00ffffc4 	movi	r3,-1
   323c4:	94bfe004 	addi	r18,r18,-128
   323c8:	0038c506 	br	306e0 <___vfprintf_internal_r+0x170>
   323cc:	d8c12044 	addi	r3,sp,1153
   323d0:	003f7d06 	br	321c8 <___vfprintf_internal_r+0x1c58>
   323d4:	dd012417 	ldw	r20,1168(sp)
   323d8:	003f6d06 	br	32190 <___vfprintf_internal_r+0x1c20>
   323dc:	00c00044 	movi	r3,1
   323e0:	d8c12815 	stw	r3,1184(sp)
   323e4:	d8c12b15 	stw	r3,1196(sp)
   323e8:	003e7806 	br	31dcc <___vfprintf_internal_r+0x185c>

000323ec <__vfprintf_internal>:
   323ec:	00800034 	movhi	r2,0
   323f0:	10875f04 	addi	r2,r2,7548
   323f4:	2007883a 	mov	r3,r4
   323f8:	11000017 	ldw	r4,0(r2)
   323fc:	2805883a 	mov	r2,r5
   32400:	300f883a 	mov	r7,r6
   32404:	180b883a 	mov	r5,r3
   32408:	100d883a 	mov	r6,r2
   3240c:	00305701 	jmpi	30570 <___vfprintf_internal_r>

00032410 <__swsetup_r>:
   32410:	00800034 	movhi	r2,0
   32414:	10875f04 	addi	r2,r2,7548
   32418:	10800017 	ldw	r2,0(r2)
   3241c:	defffd04 	addi	sp,sp,-12
   32420:	dc400115 	stw	r17,4(sp)
   32424:	dc000015 	stw	r16,0(sp)
   32428:	dfc00215 	stw	ra,8(sp)
   3242c:	2023883a 	mov	r17,r4
   32430:	2821883a 	mov	r16,r5
   32434:	10000226 	beq	r2,zero,32440 <__swsetup_r+0x30>
   32438:	10c00e17 	ldw	r3,56(r2)
   3243c:	18003d26 	beq	r3,zero,32534 <__swsetup_r+0x124>
   32440:	8080030b 	ldhu	r2,12(r16)
   32444:	10c0020c 	andi	r3,r2,8
   32448:	18ffffcc 	andi	r3,r3,65535
   3244c:	18e0001c 	xori	r3,r3,32768
   32450:	18e00004 	addi	r3,r3,-32768
   32454:	18001226 	beq	r3,zero,324a0 <__swsetup_r+0x90>
   32458:	80c00417 	ldw	r3,16(r16)
   3245c:	18001f26 	beq	r3,zero,324dc <__swsetup_r+0xcc>
   32460:	1100004c 	andi	r4,r2,1
   32464:	2000261e 	bne	r4,zero,32500 <__swsetup_r+0xf0>
   32468:	1080008c 	andi	r2,r2,2
   3246c:	10bfffcc 	andi	r2,r2,65535
   32470:	10a0001c 	xori	r2,r2,32768
   32474:	10a00004 	addi	r2,r2,-32768
   32478:	1000311e 	bne	r2,zero,32540 <__swsetup_r+0x130>
   3247c:	80800517 	ldw	r2,20(r16)
   32480:	80800215 	stw	r2,8(r16)
   32484:	18002326 	beq	r3,zero,32514 <__swsetup_r+0x104>
   32488:	0005883a 	mov	r2,zero
   3248c:	dfc00217 	ldw	ra,8(sp)
   32490:	dc400117 	ldw	r17,4(sp)
   32494:	dc000017 	ldw	r16,0(sp)
   32498:	dec00304 	addi	sp,sp,12
   3249c:	f800283a 	ret
   324a0:	10c0040c 	andi	r3,r2,16
   324a4:	18ffffcc 	andi	r3,r3,65535
   324a8:	18e0001c 	xori	r3,r3,32768
   324ac:	18e00004 	addi	r3,r3,-32768
   324b0:	18001e26 	beq	r3,zero,3252c <__swsetup_r+0x11c>
   324b4:	10c0010c 	andi	r3,r2,4
   324b8:	18ffffcc 	andi	r3,r3,65535
   324bc:	18e0001c 	xori	r3,r3,32768
   324c0:	18e00004 	addi	r3,r3,-32768
   324c4:	1800211e 	bne	r3,zero,3254c <__swsetup_r+0x13c>
   324c8:	80c00417 	ldw	r3,16(r16)
   324cc:	11400214 	ori	r5,r2,8
   324d0:	8140030d 	sth	r5,12(r16)
   324d4:	2805883a 	mov	r2,r5
   324d8:	183fe11e 	bne	r3,zero,32460 <__swsetup_r+0x50>
   324dc:	1140a00c 	andi	r5,r2,640
   324e0:	01008004 	movi	r4,512
   324e4:	293fde26 	beq	r5,r4,32460 <__swsetup_r+0x50>
   324e8:	8809883a 	mov	r4,r17
   324ec:	800b883a 	mov	r5,r16
   324f0:	0034e0c0 	call	34e0c <__smakebuf_r>
   324f4:	8080030b 	ldhu	r2,12(r16)
   324f8:	80c00417 	ldw	r3,16(r16)
   324fc:	003fd806 	br	32460 <__swsetup_r+0x50>
   32500:	80800517 	ldw	r2,20(r16)
   32504:	80000215 	stw	zero,8(r16)
   32508:	0085c83a 	sub	r2,zero,r2
   3250c:	80800615 	stw	r2,24(r16)
   32510:	183fdd1e 	bne	r3,zero,32488 <__swsetup_r+0x78>
   32514:	8080030b 	ldhu	r2,12(r16)
   32518:	1080200c 	andi	r2,r2,128
   3251c:	10bfffcc 	andi	r2,r2,65535
   32520:	10a0001c 	xori	r2,r2,32768
   32524:	10a00004 	addi	r2,r2,-32768
   32528:	103fd826 	beq	r2,zero,3248c <__swsetup_r+0x7c>
   3252c:	00bfffc4 	movi	r2,-1
   32530:	003fd606 	br	3248c <__swsetup_r+0x7c>
   32534:	1009883a 	mov	r4,r2
   32538:	00340980 	call	34098 <__sinit>
   3253c:	003fc006 	br	32440 <__swsetup_r+0x30>
   32540:	0005883a 	mov	r2,zero
   32544:	80800215 	stw	r2,8(r16)
   32548:	003fce06 	br	32484 <__swsetup_r+0x74>
   3254c:	81400c17 	ldw	r5,48(r16)
   32550:	28000626 	beq	r5,zero,3256c <__swsetup_r+0x15c>
   32554:	80c01004 	addi	r3,r16,64
   32558:	28c00326 	beq	r5,r3,32568 <__swsetup_r+0x158>
   3255c:	8809883a 	mov	r4,r17
   32560:	003441c0 	call	3441c <_free_r>
   32564:	8080030b 	ldhu	r2,12(r16)
   32568:	80000c15 	stw	zero,48(r16)
   3256c:	80c00417 	ldw	r3,16(r16)
   32570:	013ff6c4 	movi	r4,-37
   32574:	2084703a 	and	r2,r4,r2
   32578:	80000115 	stw	zero,4(r16)
   3257c:	80c00015 	stw	r3,0(r16)
   32580:	003fd206 	br	324cc <__swsetup_r+0xbc>

00032584 <quorem>:
   32584:	defff204 	addi	sp,sp,-56
   32588:	dd000815 	stw	r20,32(sp)
   3258c:	20800417 	ldw	r2,16(r4)
   32590:	2d000417 	ldw	r20,16(r5)
   32594:	dcc00715 	stw	r19,28(sp)
   32598:	dfc00d15 	stw	ra,52(sp)
   3259c:	df000c15 	stw	fp,48(sp)
   325a0:	ddc00b15 	stw	r23,44(sp)
   325a4:	dd800a15 	stw	r22,40(sp)
   325a8:	dd400915 	stw	r21,36(sp)
   325ac:	dc800615 	stw	r18,24(sp)
   325b0:	dc400515 	stw	r17,20(sp)
   325b4:	dc000415 	stw	r16,16(sp)
   325b8:	d9400015 	stw	r5,0(sp)
   325bc:	2027883a 	mov	r19,r4
   325c0:	15007d16 	blt	r2,r20,327b8 <quorem+0x234>
   325c4:	a0800104 	addi	r2,r20,4
   325c8:	1085883a 	add	r2,r2,r2
   325cc:	1085883a 	add	r2,r2,r2
   325d0:	28ad883a 	add	r22,r5,r2
   325d4:	2085883a 	add	r2,r4,r2
   325d8:	10800017 	ldw	r2,0(r2)
   325dc:	b1400017 	ldw	r5,0(r22)
   325e0:	a53fffc4 	addi	r20,r20,-1
   325e4:	1009883a 	mov	r4,r2
   325e8:	29400044 	addi	r5,r5,1
   325ec:	d8800115 	stw	r2,4(sp)
   325f0:	00394380 	call	39438 <__udivsi3>
   325f4:	1025883a 	mov	r18,r2
   325f8:	d8800017 	ldw	r2,0(sp)
   325fc:	9f000504 	addi	fp,r19,20
   32600:	14000504 	addi	r16,r2,20
   32604:	90003626 	beq	r18,zero,326e0 <quorem+0x15c>
   32608:	802b883a 	mov	r21,r16
   3260c:	e023883a 	mov	r17,fp
   32610:	0007883a 	mov	r3,zero
   32614:	002f883a 	mov	r23,zero
   32618:	a9800017 	ldw	r6,0(r21)
   3261c:	900b883a 	mov	r5,r18
   32620:	d8c00315 	stw	r3,12(sp)
   32624:	313fffcc 	andi	r4,r6,65535
   32628:	d9800215 	stw	r6,8(sp)
   3262c:	00394480 	call	39448 <__mulsi3>
   32630:	d9800217 	ldw	r6,8(sp)
   32634:	d8c00317 	ldw	r3,12(sp)
   32638:	900b883a 	mov	r5,r18
   3263c:	3008d43a 	srli	r4,r6,16
   32640:	1887883a 	add	r3,r3,r2
   32644:	d8c00315 	stw	r3,12(sp)
   32648:	00394480 	call	39448 <__mulsi3>
   3264c:	89400017 	ldw	r5,0(r17)
   32650:	d8c00317 	ldw	r3,12(sp)
   32654:	ad400104 	addi	r21,r21,4
   32658:	293fffcc 	andi	r4,r5,65535
   3265c:	1810d43a 	srli	r8,r3,16
   32660:	25c9883a 	add	r4,r4,r23
   32664:	18ffffcc 	andi	r3,r3,65535
   32668:	20c9c83a 	sub	r4,r4,r3
   3266c:	280cd43a 	srli	r6,r5,16
   32670:	4085883a 	add	r2,r8,r2
   32674:	2007d43a 	srai	r3,r4,16
   32678:	117fffcc 	andi	r5,r2,65535
   3267c:	314bc83a 	sub	r5,r6,r5
   32680:	28cb883a 	add	r5,r5,r3
   32684:	8940008d 	sth	r5,2(r17)
   32688:	8900000d 	sth	r4,0(r17)
   3268c:	1006d43a 	srli	r3,r2,16
   32690:	282fd43a 	srai	r23,r5,16
   32694:	8c400104 	addi	r17,r17,4
   32698:	b57fdf2e 	bgeu	r22,r21,32618 <quorem+0x94>
   3269c:	d8c00117 	ldw	r3,4(sp)
   326a0:	18000f1e 	bne	r3,zero,326e0 <quorem+0x15c>
   326a4:	a0800144 	addi	r2,r20,5
   326a8:	1085883a 	add	r2,r2,r2
   326ac:	1085883a 	add	r2,r2,r2
   326b0:	9887883a 	add	r3,r19,r2
   326b4:	18bfff04 	addi	r2,r3,-4
   326b8:	e080082e 	bgeu	fp,r2,326dc <quorem+0x158>
   326bc:	18ffff17 	ldw	r3,-4(r3)
   326c0:	18000326 	beq	r3,zero,326d0 <quorem+0x14c>
   326c4:	00000506 	br	326dc <quorem+0x158>
   326c8:	10c00017 	ldw	r3,0(r2)
   326cc:	1800031e 	bne	r3,zero,326dc <quorem+0x158>
   326d0:	10bfff04 	addi	r2,r2,-4
   326d4:	a53fffc4 	addi	r20,r20,-1
   326d8:	e0bffb36 	bltu	fp,r2,326c8 <quorem+0x144>
   326dc:	9d000415 	stw	r20,16(r19)
   326e0:	d9400017 	ldw	r5,0(sp)
   326e4:	9809883a 	mov	r4,r19
   326e8:	00365240 	call	36524 <__mcmp>
   326ec:	10002516 	blt	r2,zero,32784 <quorem+0x200>
   326f0:	94800044 	addi	r18,r18,1
   326f4:	e007883a 	mov	r3,fp
   326f8:	000d883a 	mov	r6,zero
   326fc:	18800017 	ldw	r2,0(r3)
   32700:	82000017 	ldw	r8,0(r16)
   32704:	84000104 	addi	r16,r16,4
   32708:	11ffffcc 	andi	r7,r2,65535
   3270c:	413fffcc 	andi	r4,r8,65535
   32710:	398d883a 	add	r6,r7,r6
   32714:	310fc83a 	sub	r7,r6,r4
   32718:	4010d43a 	srli	r8,r8,16
   3271c:	100cd43a 	srli	r6,r2,16
   32720:	3809d43a 	srai	r4,r7,16
   32724:	19c0000d 	sth	r7,0(r3)
   32728:	320dc83a 	sub	r6,r6,r8
   3272c:	310d883a 	add	r6,r6,r4
   32730:	1980008d 	sth	r6,2(r3)
   32734:	300dd43a 	srai	r6,r6,16
   32738:	18c00104 	addi	r3,r3,4
   3273c:	b43fef2e 	bgeu	r22,r16,326fc <quorem+0x178>
   32740:	a0800144 	addi	r2,r20,5
   32744:	1085883a 	add	r2,r2,r2
   32748:	1085883a 	add	r2,r2,r2
   3274c:	9885883a 	add	r2,r19,r2
   32750:	10c00017 	ldw	r3,0(r2)
   32754:	18000b1e 	bne	r3,zero,32784 <quorem+0x200>
   32758:	10ffff04 	addi	r3,r2,-4
   3275c:	e0c0082e 	bgeu	fp,r3,32780 <quorem+0x1fc>
   32760:	10bfff17 	ldw	r2,-4(r2)
   32764:	10000326 	beq	r2,zero,32774 <quorem+0x1f0>
   32768:	00000506 	br	32780 <quorem+0x1fc>
   3276c:	18800017 	ldw	r2,0(r3)
   32770:	1000031e 	bne	r2,zero,32780 <quorem+0x1fc>
   32774:	18ffff04 	addi	r3,r3,-4
   32778:	a53fffc4 	addi	r20,r20,-1
   3277c:	e0fffb36 	bltu	fp,r3,3276c <quorem+0x1e8>
   32780:	9d000415 	stw	r20,16(r19)
   32784:	9005883a 	mov	r2,r18
   32788:	dfc00d17 	ldw	ra,52(sp)
   3278c:	df000c17 	ldw	fp,48(sp)
   32790:	ddc00b17 	ldw	r23,44(sp)
   32794:	dd800a17 	ldw	r22,40(sp)
   32798:	dd400917 	ldw	r21,36(sp)
   3279c:	dd000817 	ldw	r20,32(sp)
   327a0:	dcc00717 	ldw	r19,28(sp)
   327a4:	dc800617 	ldw	r18,24(sp)
   327a8:	dc400517 	ldw	r17,20(sp)
   327ac:	dc000417 	ldw	r16,16(sp)
   327b0:	dec00e04 	addi	sp,sp,56
   327b4:	f800283a 	ret
   327b8:	0005883a 	mov	r2,zero
   327bc:	003ff206 	br	32788 <quorem+0x204>

000327c0 <_dtoa_r>:
   327c0:	20801017 	ldw	r2,64(r4)
   327c4:	deffdf04 	addi	sp,sp,-132
   327c8:	dcc01a15 	stw	r19,104(sp)
   327cc:	dc801915 	stw	r18,100(sp)
   327d0:	dc401815 	stw	r17,96(sp)
   327d4:	dc001715 	stw	r16,92(sp)
   327d8:	dfc02015 	stw	ra,128(sp)
   327dc:	df001f15 	stw	fp,124(sp)
   327e0:	ddc01e15 	stw	r23,120(sp)
   327e4:	dd801d15 	stw	r22,116(sp)
   327e8:	dd401c15 	stw	r21,112(sp)
   327ec:	dd001b15 	stw	r20,108(sp)
   327f0:	d9400315 	stw	r5,12(sp)
   327f4:	d9c00415 	stw	r7,16(sp)
   327f8:	2021883a 	mov	r16,r4
   327fc:	3025883a 	mov	r18,r6
   32800:	dcc02317 	ldw	r19,140(sp)
   32804:	3023883a 	mov	r17,r6
   32808:	10000826 	beq	r2,zero,3282c <_dtoa_r+0x6c>
   3280c:	20c01117 	ldw	r3,68(r4)
   32810:	01800044 	movi	r6,1
   32814:	100b883a 	mov	r5,r2
   32818:	30cc983a 	sll	r6,r6,r3
   3281c:	10c00115 	stw	r3,4(r2)
   32820:	11800215 	stw	r6,8(r2)
   32824:	0035c800 	call	35c80 <_Bfree>
   32828:	80001015 	stw	zero,64(r16)
   3282c:	90002f16 	blt	r18,zero,328ec <_dtoa_r+0x12c>
   32830:	98000015 	stw	zero,0(r19)
   32834:	90dffc2c 	andhi	r3,r18,32752
   32838:	009ffc34 	movhi	r2,32752
   3283c:	18801c26 	beq	r3,r2,328b0 <_dtoa_r+0xf0>
   32840:	d9000317 	ldw	r4,12(sp)
   32844:	880b883a 	mov	r5,r17
   32848:	000d883a 	mov	r6,zero
   3284c:	000f883a 	mov	r7,zero
   32850:	0038e780 	call	38e78 <__eqdf2>
   32854:	10002c1e 	bne	r2,zero,32908 <_dtoa_r+0x148>
   32858:	d9002217 	ldw	r4,136(sp)
   3285c:	d9c02417 	ldw	r7,144(sp)
   32860:	00800044 	movi	r2,1
   32864:	20800015 	stw	r2,0(r4)
   32868:	38019426 	beq	r7,zero,32ebc <_dtoa_r+0x6fc>
   3286c:	00800034 	movhi	r2,0
   32870:	10802044 	addi	r2,r2,129
   32874:	38800015 	stw	r2,0(r7)
   32878:	15ffffc4 	addi	r23,r2,-1
   3287c:	b805883a 	mov	r2,r23
   32880:	dfc02017 	ldw	ra,128(sp)
   32884:	df001f17 	ldw	fp,124(sp)
   32888:	ddc01e17 	ldw	r23,120(sp)
   3288c:	dd801d17 	ldw	r22,116(sp)
   32890:	dd401c17 	ldw	r21,112(sp)
   32894:	dd001b17 	ldw	r20,108(sp)
   32898:	dcc01a17 	ldw	r19,104(sp)
   3289c:	dc801917 	ldw	r18,100(sp)
   328a0:	dc401817 	ldw	r17,96(sp)
   328a4:	dc001717 	ldw	r16,92(sp)
   328a8:	dec02104 	addi	sp,sp,132
   328ac:	f800283a 	ret
   328b0:	d8c02217 	ldw	r3,136(sp)
   328b4:	d9000317 	ldw	r4,12(sp)
   328b8:	0089c3c4 	movi	r2,9999
   328bc:	18800015 	stw	r2,0(r3)
   328c0:	20016c26 	beq	r4,zero,32e74 <_dtoa_r+0x6b4>
   328c4:	05c00034 	movhi	r23,0
   328c8:	bdc02c04 	addi	r23,r23,176
   328cc:	d9c02417 	ldw	r7,144(sp)
   328d0:	383fea26 	beq	r7,zero,3287c <_dtoa_r+0xbc>
   328d4:	b88000c7 	ldb	r2,3(r23)
   328d8:	10016d1e 	bne	r2,zero,32e90 <_dtoa_r+0x6d0>
   328dc:	b88000c4 	addi	r2,r23,3
   328e0:	d8c02417 	ldw	r3,144(sp)
   328e4:	18800015 	stw	r2,0(r3)
   328e8:	003fe406 	br	3287c <_dtoa_r+0xbc>
   328ec:	04600034 	movhi	r17,32768
   328f0:	8c7fffc4 	addi	r17,r17,-1
   328f4:	9462703a 	and	r17,r18,r17
   328f8:	00800044 	movi	r2,1
   328fc:	98800015 	stw	r2,0(r19)
   32900:	8825883a 	mov	r18,r17
   32904:	003fcb06 	br	32834 <_dtoa_r+0x74>
   32908:	d9400317 	ldw	r5,12(sp)
   3290c:	9028d53a 	srli	r20,r18,20
   32910:	d8800204 	addi	r2,sp,8
   32914:	d8800015 	stw	r2,0(sp)
   32918:	8009883a 	mov	r4,r16
   3291c:	880d883a 	mov	r6,r17
   32920:	d9c00104 	addi	r7,sp,4
   32924:	00368cc0 	call	368cc <__d2b>
   32928:	a501ffcc 	andi	r20,r20,2047
   3292c:	1039883a 	mov	fp,r2
   32930:	a001591e 	bne	r20,zero,32e98 <_dtoa_r+0x6d8>
   32934:	dd400217 	ldw	r21,8(sp)
   32938:	dd000117 	ldw	r20,4(sp)
   3293c:	00befbc4 	movi	r2,-1041
   32940:	ad29883a 	add	r20,r21,r20
   32944:	a082d216 	blt	r20,r2,33490 <_dtoa_r+0xcd0>
   32948:	d8c00317 	ldw	r3,12(sp)
   3294c:	013f0384 	movi	r4,-1010
   32950:	2509c83a 	sub	r4,r4,r20
   32954:	a0810484 	addi	r2,r20,1042
   32958:	9124983a 	sll	r18,r18,r4
   3295c:	1884d83a 	srl	r2,r3,r2
   32960:	9088b03a 	or	r4,r18,r2
   32964:	00391fc0 	call	391fc <__floatunsidf>
   32968:	1009883a 	mov	r4,r2
   3296c:	017f8434 	movhi	r5,65040
   32970:	00800044 	movi	r2,1
   32974:	194b883a 	add	r5,r3,r5
   32978:	a53fffc4 	addi	r20,r20,-1
   3297c:	d8800f15 	stw	r2,60(sp)
   32980:	000d883a 	mov	r6,zero
   32984:	01cffe34 	movhi	r7,16376
   32988:	00389800 	call	38980 <__subdf3>
   3298c:	1009883a 	mov	r4,r2
   32990:	180b883a 	mov	r5,r3
   32994:	0198dbf4 	movhi	r6,25455
   32998:	3190d844 	addi	r6,r6,17249
   3299c:	01cff4f4 	movhi	r7,16339
   329a0:	39e1e9c4 	addi	r7,r7,-30809
   329a4:	00389e00 	call	389e0 <__muldf3>
   329a8:	180b883a 	mov	r5,r3
   329ac:	01a2d874 	movhi	r6,35681
   329b0:	31b22cc4 	addi	r6,r6,-14157
   329b4:	01cff1f4 	movhi	r7,16327
   329b8:	39e28a04 	addi	r7,r7,-30168
   329bc:	1009883a 	mov	r4,r2
   329c0:	003892c0 	call	3892c <__adddf3>
   329c4:	a009883a 	mov	r4,r20
   329c8:	1027883a 	mov	r19,r2
   329cc:	1825883a 	mov	r18,r3
   329d0:	00390540 	call	39054 <__floatsidf>
   329d4:	1009883a 	mov	r4,r2
   329d8:	180b883a 	mov	r5,r3
   329dc:	019427f4 	movhi	r6,20639
   329e0:	319e7ec4 	addi	r6,r6,31227
   329e4:	01cff4f4 	movhi	r7,16339
   329e8:	39d104c4 	addi	r7,r7,17427
   329ec:	00389e00 	call	389e0 <__muldf3>
   329f0:	9809883a 	mov	r4,r19
   329f4:	900b883a 	mov	r5,r18
   329f8:	100d883a 	mov	r6,r2
   329fc:	180f883a 	mov	r7,r3
   32a00:	003892c0 	call	3892c <__adddf3>
   32a04:	1009883a 	mov	r4,r2
   32a08:	180b883a 	mov	r5,r3
   32a0c:	1027883a 	mov	r19,r2
   32a10:	1825883a 	mov	r18,r3
   32a14:	00391280 	call	39128 <__fixdfsi>
   32a18:	9809883a 	mov	r4,r19
   32a1c:	900b883a 	mov	r5,r18
   32a20:	000d883a 	mov	r6,zero
   32a24:	000f883a 	mov	r7,zero
   32a28:	d8800615 	stw	r2,24(sp)
   32a2c:	0038ff80 	call	38ff8 <__ltdf2>
   32a30:	10027e16 	blt	r2,zero,3342c <_dtoa_r+0xc6c>
   32a34:	d8c00617 	ldw	r3,24(sp)
   32a38:	00800584 	movi	r2,22
   32a3c:	10c26c36 	bltu	r2,r3,333f0 <_dtoa_r+0xc30>
   32a40:	180490fa 	slli	r2,r3,3
   32a44:	00c00034 	movhi	r3,0
   32a48:	18c05204 	addi	r3,r3,328
   32a4c:	d9800317 	ldw	r6,12(sp)
   32a50:	1885883a 	add	r2,r3,r2
   32a54:	11000017 	ldw	r4,0(r2)
   32a58:	11400117 	ldw	r5,4(r2)
   32a5c:	880f883a 	mov	r7,r17
   32a60:	0038f300 	call	38f30 <__gtdf2>
   32a64:	00828f0e 	bge	zero,r2,334a4 <_dtoa_r+0xce4>
   32a68:	d8800617 	ldw	r2,24(sp)
   32a6c:	d8000d15 	stw	zero,52(sp)
   32a70:	10bfffc4 	addi	r2,r2,-1
   32a74:	d8800615 	stw	r2,24(sp)
   32a78:	ad29c83a 	sub	r20,r21,r20
   32a7c:	a53fffc4 	addi	r20,r20,-1
   32a80:	a0026616 	blt	r20,zero,3341c <_dtoa_r+0xc5c>
   32a84:	dd000715 	stw	r20,28(sp)
   32a88:	d8000815 	stw	zero,32(sp)
   32a8c:	d8800617 	ldw	r2,24(sp)
   32a90:	10025a16 	blt	r2,zero,333fc <_dtoa_r+0xc3c>
   32a94:	d8c00717 	ldw	r3,28(sp)
   32a98:	d8800b15 	stw	r2,44(sp)
   32a9c:	d8000a15 	stw	zero,40(sp)
   32aa0:	1887883a 	add	r3,r3,r2
   32aa4:	d8c00715 	stw	r3,28(sp)
   32aa8:	d9c00417 	ldw	r7,16(sp)
   32aac:	00800244 	movi	r2,9
   32ab0:	11c10536 	bltu	r2,r7,32ec8 <_dtoa_r+0x708>
   32ab4:	00800144 	movi	r2,5
   32ab8:	11c4c60e 	bge	r2,r7,33dd4 <_dtoa_r+0x1614>
   32abc:	39ffff04 	addi	r7,r7,-4
   32ac0:	d9c00415 	stw	r7,16(sp)
   32ac4:	0027883a 	mov	r19,zero
   32ac8:	d9c00417 	ldw	r7,16(sp)
   32acc:	008000c4 	movi	r2,3
   32ad0:	3883a226 	beq	r7,r2,3395c <_dtoa_r+0x119c>
   32ad4:	11c2bc16 	blt	r2,r7,335c8 <_dtoa_r+0xe08>
   32ad8:	00800084 	movi	r2,2
   32adc:	3880fb1e 	bne	r7,r2,32ecc <_dtoa_r+0x70c>
   32ae0:	d8000c15 	stw	zero,48(sp)
   32ae4:	d9002117 	ldw	r4,132(sp)
   32ae8:	0103ae0e 	bge	zero,r4,339a4 <_dtoa_r+0x11e4>
   32aec:	2025883a 	mov	r18,r4
   32af0:	d9000e15 	stw	r4,56(sp)
   32af4:	d9000915 	stw	r4,36(sp)
   32af8:	80001115 	stw	zero,68(r16)
   32afc:	008005c4 	movi	r2,23
   32b00:	1484b22e 	bgeu	r2,r18,33dcc <_dtoa_r+0x160c>
   32b04:	00c00044 	movi	r3,1
   32b08:	00800104 	movi	r2,4
   32b0c:	1085883a 	add	r2,r2,r2
   32b10:	11000504 	addi	r4,r2,20
   32b14:	180b883a 	mov	r5,r3
   32b18:	18c00044 	addi	r3,r3,1
   32b1c:	913ffb2e 	bgeu	r18,r4,32b0c <_dtoa_r+0x34c>
   32b20:	81401115 	stw	r5,68(r16)
   32b24:	8009883a 	mov	r4,r16
   32b28:	0035bd80 	call	35bd8 <_Balloc>
   32b2c:	102f883a 	mov	r23,r2
   32b30:	80801015 	stw	r2,64(r16)
   32b34:	00800384 	movi	r2,14
   32b38:	1480f036 	bltu	r2,r18,32efc <_dtoa_r+0x73c>
   32b3c:	9800ef26 	beq	r19,zero,32efc <_dtoa_r+0x73c>
   32b40:	d8800617 	ldw	r2,24(sp)
   32b44:	00839c0e 	bge	zero,r2,339b8 <_dtoa_r+0x11f8>
   32b48:	d8c00617 	ldw	r3,24(sp)
   32b4c:	108003cc 	andi	r2,r2,15
   32b50:	100490fa 	slli	r2,r2,3
   32b54:	182bd13a 	srai	r21,r3,4
   32b58:	00c00034 	movhi	r3,0
   32b5c:	18c05204 	addi	r3,r3,328
   32b60:	1885883a 	add	r2,r3,r2
   32b64:	a8c0040c 	andi	r3,r21,16
   32b68:	12800017 	ldw	r10,0(r2)
   32b6c:	15800117 	ldw	r22,4(r2)
   32b70:	18038726 	beq	r3,zero,33990 <_dtoa_r+0x11d0>
   32b74:	00800034 	movhi	r2,0
   32b78:	10804804 	addi	r2,r2,288
   32b7c:	11800817 	ldw	r6,32(r2)
   32b80:	11c00917 	ldw	r7,36(r2)
   32b84:	d9000317 	ldw	r4,12(sp)
   32b88:	880b883a 	mov	r5,r17
   32b8c:	da801515 	stw	r10,84(sp)
   32b90:	0038cc40 	call	38cc4 <__divdf3>
   32b94:	da801517 	ldw	r10,84(sp)
   32b98:	d8801015 	stw	r2,64(sp)
   32b9c:	1829883a 	mov	r20,r3
   32ba0:	ad4003cc 	andi	r21,r21,15
   32ba4:	048000c4 	movi	r18,3
   32ba8:	a8001126 	beq	r21,zero,32bf0 <_dtoa_r+0x430>
   32bac:	04c00034 	movhi	r19,0
   32bb0:	9cc04804 	addi	r19,r19,288
   32bb4:	5005883a 	mov	r2,r10
   32bb8:	b007883a 	mov	r3,r22
   32bbc:	a980004c 	andi	r6,r21,1
   32bc0:	1009883a 	mov	r4,r2
   32bc4:	a82bd07a 	srai	r21,r21,1
   32bc8:	180b883a 	mov	r5,r3
   32bcc:	30000426 	beq	r6,zero,32be0 <_dtoa_r+0x420>
   32bd0:	99800017 	ldw	r6,0(r19)
   32bd4:	99c00117 	ldw	r7,4(r19)
   32bd8:	94800044 	addi	r18,r18,1
   32bdc:	00389e00 	call	389e0 <__muldf3>
   32be0:	9cc00204 	addi	r19,r19,8
   32be4:	a83ff51e 	bne	r21,zero,32bbc <_dtoa_r+0x3fc>
   32be8:	1015883a 	mov	r10,r2
   32bec:	182d883a 	mov	r22,r3
   32bf0:	d9001017 	ldw	r4,64(sp)
   32bf4:	a00b883a 	mov	r5,r20
   32bf8:	500d883a 	mov	r6,r10
   32bfc:	b00f883a 	mov	r7,r22
   32c00:	0038cc40 	call	38cc4 <__divdf3>
   32c04:	1027883a 	mov	r19,r2
   32c08:	1829883a 	mov	r20,r3
   32c0c:	d8c00d17 	ldw	r3,52(sp)
   32c10:	18000626 	beq	r3,zero,32c2c <_dtoa_r+0x46c>
   32c14:	9809883a 	mov	r4,r19
   32c18:	a00b883a 	mov	r5,r20
   32c1c:	000d883a 	mov	r6,zero
   32c20:	01cffc34 	movhi	r7,16368
   32c24:	0038ff80 	call	38ff8 <__ltdf2>
   32c28:	10040e16 	blt	r2,zero,33c64 <_dtoa_r+0x14a4>
   32c2c:	9009883a 	mov	r4,r18
   32c30:	00390540 	call	39054 <__floatsidf>
   32c34:	1009883a 	mov	r4,r2
   32c38:	180b883a 	mov	r5,r3
   32c3c:	980d883a 	mov	r6,r19
   32c40:	a00f883a 	mov	r7,r20
   32c44:	00389e00 	call	389e0 <__muldf3>
   32c48:	1009883a 	mov	r4,r2
   32c4c:	180b883a 	mov	r5,r3
   32c50:	000d883a 	mov	r6,zero
   32c54:	01d00734 	movhi	r7,16412
   32c58:	003892c0 	call	3892c <__adddf3>
   32c5c:	057f3034 	movhi	r21,64704
   32c60:	1d6b883a 	add	r21,r3,r21
   32c64:	d8c00917 	ldw	r3,36(sp)
   32c68:	1025883a 	mov	r18,r2
   32c6c:	18031f26 	beq	r3,zero,338ec <_dtoa_r+0x112c>
   32c70:	d8800617 	ldw	r2,24(sp)
   32c74:	dac00917 	ldw	r11,36(sp)
   32c78:	d8801315 	stw	r2,76(sp)
   32c7c:	d8c00c17 	ldw	r3,48(sp)
   32c80:	18039026 	beq	r3,zero,33ac4 <_dtoa_r+0x1304>
   32c84:	58bfffc4 	addi	r2,r11,-1
   32c88:	100490fa 	slli	r2,r2,3
   32c8c:	00c00034 	movhi	r3,0
   32c90:	18c05204 	addi	r3,r3,328
   32c94:	0009883a 	mov	r4,zero
   32c98:	1885883a 	add	r2,r3,r2
   32c9c:	11800017 	ldw	r6,0(r2)
   32ca0:	11c00117 	ldw	r7,4(r2)
   32ca4:	014ff834 	movhi	r5,16352
   32ca8:	dac01615 	stw	r11,88(sp)
   32cac:	0038cc40 	call	38cc4 <__divdf3>
   32cb0:	900d883a 	mov	r6,r18
   32cb4:	a80f883a 	mov	r7,r21
   32cb8:	1009883a 	mov	r4,r2
   32cbc:	180b883a 	mov	r5,r3
   32cc0:	00389800 	call	38980 <__subdf3>
   32cc4:	a00b883a 	mov	r5,r20
   32cc8:	9809883a 	mov	r4,r19
   32ccc:	182b883a 	mov	r21,r3
   32cd0:	d8801015 	stw	r2,64(sp)
   32cd4:	00391280 	call	39128 <__fixdfsi>
   32cd8:	1009883a 	mov	r4,r2
   32cdc:	d8801515 	stw	r2,84(sp)
   32ce0:	00390540 	call	39054 <__floatsidf>
   32ce4:	9809883a 	mov	r4,r19
   32ce8:	a00b883a 	mov	r5,r20
   32cec:	100d883a 	mov	r6,r2
   32cf0:	180f883a 	mov	r7,r3
   32cf4:	00389800 	call	38980 <__subdf3>
   32cf8:	da401517 	ldw	r9,84(sp)
   32cfc:	d9001017 	ldw	r4,64(sp)
   32d00:	a80b883a 	mov	r5,r21
   32d04:	4d000c04 	addi	r20,r9,48
   32d08:	bd000005 	stb	r20,0(r23)
   32d0c:	100d883a 	mov	r6,r2
   32d10:	180f883a 	mov	r7,r3
   32d14:	bd800044 	addi	r22,r23,1
   32d18:	1025883a 	mov	r18,r2
   32d1c:	1827883a 	mov	r19,r3
   32d20:	0038f300 	call	38f30 <__gtdf2>
   32d24:	00842216 	blt	zero,r2,33db0 <_dtoa_r+0x15f0>
   32d28:	0009883a 	mov	r4,zero
   32d2c:	014ffc34 	movhi	r5,16368
   32d30:	900d883a 	mov	r6,r18
   32d34:	980f883a 	mov	r7,r19
   32d38:	00389800 	call	38980 <__subdf3>
   32d3c:	d9001017 	ldw	r4,64(sp)
   32d40:	a80b883a 	mov	r5,r21
   32d44:	100d883a 	mov	r6,r2
   32d48:	180f883a 	mov	r7,r3
   32d4c:	0038f300 	call	38f30 <__gtdf2>
   32d50:	dac01617 	ldw	r11,88(sp)
   32d54:	00841316 	blt	zero,r2,33da4 <_dtoa_r+0x15e4>
   32d58:	00800044 	movi	r2,1
   32d5c:	12c0670e 	bge	r2,r11,32efc <_dtoa_r+0x73c>
   32d60:	bad7883a 	add	r11,r23,r11
   32d64:	df001115 	stw	fp,68(sp)
   32d68:	dc401215 	stw	r17,72(sp)
   32d6c:	5839883a 	mov	fp,r11
   32d70:	dc401017 	ldw	r17,64(sp)
   32d74:	00000806 	br	32d98 <_dtoa_r+0x5d8>
   32d78:	00389800 	call	38980 <__subdf3>
   32d7c:	1009883a 	mov	r4,r2
   32d80:	180b883a 	mov	r5,r3
   32d84:	880d883a 	mov	r6,r17
   32d88:	a80f883a 	mov	r7,r21
   32d8c:	0038ff80 	call	38ff8 <__ltdf2>
   32d90:	1003ee16 	blt	r2,zero,33d4c <_dtoa_r+0x158c>
   32d94:	b703f126 	beq	r22,fp,33d5c <_dtoa_r+0x159c>
   32d98:	8809883a 	mov	r4,r17
   32d9c:	a80b883a 	mov	r5,r21
   32da0:	000d883a 	mov	r6,zero
   32da4:	01d00934 	movhi	r7,16420
   32da8:	00389e00 	call	389e0 <__muldf3>
   32dac:	000d883a 	mov	r6,zero
   32db0:	01d00934 	movhi	r7,16420
   32db4:	9009883a 	mov	r4,r18
   32db8:	980b883a 	mov	r5,r19
   32dbc:	1023883a 	mov	r17,r2
   32dc0:	182b883a 	mov	r21,r3
   32dc4:	00389e00 	call	389e0 <__muldf3>
   32dc8:	180b883a 	mov	r5,r3
   32dcc:	1009883a 	mov	r4,r2
   32dd0:	1825883a 	mov	r18,r3
   32dd4:	1027883a 	mov	r19,r2
   32dd8:	00391280 	call	39128 <__fixdfsi>
   32ddc:	1009883a 	mov	r4,r2
   32de0:	1029883a 	mov	r20,r2
   32de4:	00390540 	call	39054 <__floatsidf>
   32de8:	9809883a 	mov	r4,r19
   32dec:	900b883a 	mov	r5,r18
   32df0:	100d883a 	mov	r6,r2
   32df4:	180f883a 	mov	r7,r3
   32df8:	00389800 	call	38980 <__subdf3>
   32dfc:	a5000c04 	addi	r20,r20,48
   32e00:	b5000005 	stb	r20,0(r22)
   32e04:	1009883a 	mov	r4,r2
   32e08:	180b883a 	mov	r5,r3
   32e0c:	880d883a 	mov	r6,r17
   32e10:	a80f883a 	mov	r7,r21
   32e14:	1025883a 	mov	r18,r2
   32e18:	1827883a 	mov	r19,r3
   32e1c:	0038ff80 	call	38ff8 <__ltdf2>
   32e20:	b5800044 	addi	r22,r22,1
   32e24:	0009883a 	mov	r4,zero
   32e28:	014ffc34 	movhi	r5,16368
   32e2c:	900d883a 	mov	r6,r18
   32e30:	980f883a 	mov	r7,r19
   32e34:	103fd00e 	bge	r2,zero,32d78 <_dtoa_r+0x5b8>
   32e38:	d9001317 	ldw	r4,76(sp)
   32e3c:	df001117 	ldw	fp,68(sp)
   32e40:	d9000615 	stw	r4,24(sp)
   32e44:	8009883a 	mov	r4,r16
   32e48:	e00b883a 	mov	r5,fp
   32e4c:	0035c800 	call	35c80 <_Bfree>
   32e50:	d9c00617 	ldw	r7,24(sp)
   32e54:	d8c02217 	ldw	r3,136(sp)
   32e58:	d9002417 	ldw	r4,144(sp)
   32e5c:	b0000005 	stb	zero,0(r22)
   32e60:	38800044 	addi	r2,r7,1
   32e64:	18800015 	stw	r2,0(r3)
   32e68:	203e8426 	beq	r4,zero,3287c <_dtoa_r+0xbc>
   32e6c:	25800015 	stw	r22,0(r4)
   32e70:	003e8206 	br	3287c <_dtoa_r+0xbc>
   32e74:	00800434 	movhi	r2,16
   32e78:	10bfffc4 	addi	r2,r2,-1
   32e7c:	90a4703a 	and	r18,r18,r2
   32e80:	903e901e 	bne	r18,zero,328c4 <_dtoa_r+0x104>
   32e84:	05c00034 	movhi	r23,0
   32e88:	bdc02904 	addi	r23,r23,164
   32e8c:	003e8f06 	br	328cc <_dtoa_r+0x10c>
   32e90:	b8800204 	addi	r2,r23,8
   32e94:	003e9206 	br	328e0 <_dtoa_r+0x120>
   32e98:	01400434 	movhi	r5,16
   32e9c:	297fffc4 	addi	r5,r5,-1
   32ea0:	894a703a 	and	r5,r17,r5
   32ea4:	d9000317 	ldw	r4,12(sp)
   32ea8:	294ffc34 	orhi	r5,r5,16368
   32eac:	a53f0044 	addi	r20,r20,-1023
   32eb0:	dd400217 	ldw	r21,8(sp)
   32eb4:	d8000f15 	stw	zero,60(sp)
   32eb8:	003eb106 	br	32980 <_dtoa_r+0x1c0>
   32ebc:	05c00034 	movhi	r23,0
   32ec0:	bdc02004 	addi	r23,r23,128
   32ec4:	003e6d06 	br	3287c <_dtoa_r+0xbc>
   32ec8:	d8000415 	stw	zero,16(sp)
   32ecc:	80001115 	stw	zero,68(r16)
   32ed0:	8009883a 	mov	r4,r16
   32ed4:	000b883a 	mov	r5,zero
   32ed8:	0035bd80 	call	35bd8 <_Balloc>
   32edc:	01ffffc4 	movi	r7,-1
   32ee0:	102f883a 	mov	r23,r2
   32ee4:	80801015 	stw	r2,64(r16)
   32ee8:	00800044 	movi	r2,1
   32eec:	d9c00915 	stw	r7,36(sp)
   32ef0:	d8002115 	stw	zero,132(sp)
   32ef4:	d9c00e15 	stw	r7,56(sp)
   32ef8:	d8800c15 	stw	r2,48(sp)
   32efc:	d8800117 	ldw	r2,4(sp)
   32f00:	10008b16 	blt	r2,zero,33130 <_dtoa_r+0x970>
   32f04:	d9000617 	ldw	r4,24(sp)
   32f08:	00c00384 	movi	r3,14
   32f0c:	19008816 	blt	r3,r4,33130 <_dtoa_r+0x970>
   32f10:	200490fa 	slli	r2,r4,3
   32f14:	d9c02117 	ldw	r7,132(sp)
   32f18:	00c00034 	movhi	r3,0
   32f1c:	18c05204 	addi	r3,r3,328
   32f20:	1885883a 	add	r2,r3,r2
   32f24:	14800017 	ldw	r18,0(r2)
   32f28:	14c00117 	ldw	r19,4(r2)
   32f2c:	3801c916 	blt	r7,zero,33654 <_dtoa_r+0xe94>
   32f30:	d9000317 	ldw	r4,12(sp)
   32f34:	900d883a 	mov	r6,r18
   32f38:	980f883a 	mov	r7,r19
   32f3c:	880b883a 	mov	r5,r17
   32f40:	0038cc40 	call	38cc4 <__divdf3>
   32f44:	180b883a 	mov	r5,r3
   32f48:	1009883a 	mov	r4,r2
   32f4c:	00391280 	call	39128 <__fixdfsi>
   32f50:	1009883a 	mov	r4,r2
   32f54:	102b883a 	mov	r21,r2
   32f58:	00390540 	call	39054 <__floatsidf>
   32f5c:	1009883a 	mov	r4,r2
   32f60:	180b883a 	mov	r5,r3
   32f64:	900d883a 	mov	r6,r18
   32f68:	980f883a 	mov	r7,r19
   32f6c:	00389e00 	call	389e0 <__muldf3>
   32f70:	d9000317 	ldw	r4,12(sp)
   32f74:	880b883a 	mov	r5,r17
   32f78:	100d883a 	mov	r6,r2
   32f7c:	180f883a 	mov	r7,r3
   32f80:	00389800 	call	38980 <__subdf3>
   32f84:	d9c00917 	ldw	r7,36(sp)
   32f88:	1009883a 	mov	r4,r2
   32f8c:	a8800c04 	addi	r2,r21,48
   32f90:	b8800005 	stb	r2,0(r23)
   32f94:	01800044 	movi	r6,1
   32f98:	180b883a 	mov	r5,r3
   32f9c:	2005883a 	mov	r2,r4
   32fa0:	bd800044 	addi	r22,r23,1
   32fa4:	39803726 	beq	r7,r6,33084 <_dtoa_r+0x8c4>
   32fa8:	000d883a 	mov	r6,zero
   32fac:	01d00934 	movhi	r7,16420
   32fb0:	00389e00 	call	389e0 <__muldf3>
   32fb4:	1009883a 	mov	r4,r2
   32fb8:	180b883a 	mov	r5,r3
   32fbc:	000d883a 	mov	r6,zero
   32fc0:	000f883a 	mov	r7,zero
   32fc4:	1029883a 	mov	r20,r2
   32fc8:	1823883a 	mov	r17,r3
   32fcc:	0038e780 	call	38e78 <__eqdf2>
   32fd0:	103f9c26 	beq	r2,zero,32e44 <_dtoa_r+0x684>
   32fd4:	dd400917 	ldw	r21,36(sp)
   32fd8:	dc000415 	stw	r16,16(sp)
   32fdc:	00000906 	br	33004 <_dtoa_r+0x844>
   32fe0:	00389e00 	call	389e0 <__muldf3>
   32fe4:	1009883a 	mov	r4,r2
   32fe8:	180b883a 	mov	r5,r3
   32fec:	000d883a 	mov	r6,zero
   32ff0:	000f883a 	mov	r7,zero
   32ff4:	1029883a 	mov	r20,r2
   32ff8:	1823883a 	mov	r17,r3
   32ffc:	0038e780 	call	38e78 <__eqdf2>
   33000:	10022926 	beq	r2,zero,338a8 <_dtoa_r+0x10e8>
   33004:	900d883a 	mov	r6,r18
   33008:	980f883a 	mov	r7,r19
   3300c:	a009883a 	mov	r4,r20
   33010:	880b883a 	mov	r5,r17
   33014:	0038cc40 	call	38cc4 <__divdf3>
   33018:	180b883a 	mov	r5,r3
   3301c:	1009883a 	mov	r4,r2
   33020:	00391280 	call	39128 <__fixdfsi>
   33024:	1009883a 	mov	r4,r2
   33028:	1021883a 	mov	r16,r2
   3302c:	00390540 	call	39054 <__floatsidf>
   33030:	1009883a 	mov	r4,r2
   33034:	180b883a 	mov	r5,r3
   33038:	900d883a 	mov	r6,r18
   3303c:	980f883a 	mov	r7,r19
   33040:	00389e00 	call	389e0 <__muldf3>
   33044:	a009883a 	mov	r4,r20
   33048:	880b883a 	mov	r5,r17
   3304c:	100d883a 	mov	r6,r2
   33050:	180f883a 	mov	r7,r3
   33054:	00389800 	call	38980 <__subdf3>
   33058:	82400c04 	addi	r9,r16,48
   3305c:	b2400005 	stb	r9,0(r22)
   33060:	b5800044 	addi	r22,r22,1
   33064:	b5d3c83a 	sub	r9,r22,r23
   33068:	000d883a 	mov	r6,zero
   3306c:	01d00934 	movhi	r7,16420
   33070:	1009883a 	mov	r4,r2
   33074:	180b883a 	mov	r5,r3
   33078:	aa7fd91e 	bne	r21,r9,32fe0 <_dtoa_r+0x820>
   3307c:	802b883a 	mov	r21,r16
   33080:	dc000417 	ldw	r16,16(sp)
   33084:	1009883a 	mov	r4,r2
   33088:	180b883a 	mov	r5,r3
   3308c:	100d883a 	mov	r6,r2
   33090:	180f883a 	mov	r7,r3
   33094:	003892c0 	call	3892c <__adddf3>
   33098:	9009883a 	mov	r4,r18
   3309c:	980b883a 	mov	r5,r19
   330a0:	100d883a 	mov	r6,r2
   330a4:	180f883a 	mov	r7,r3
   330a8:	1023883a 	mov	r17,r2
   330ac:	1829883a 	mov	r20,r3
   330b0:	0038ff80 	call	38ff8 <__ltdf2>
   330b4:	10000816 	blt	r2,zero,330d8 <_dtoa_r+0x918>
   330b8:	9009883a 	mov	r4,r18
   330bc:	980b883a 	mov	r5,r19
   330c0:	880d883a 	mov	r6,r17
   330c4:	a00f883a 	mov	r7,r20
   330c8:	0038e780 	call	38e78 <__eqdf2>
   330cc:	103f5d1e 	bne	r2,zero,32e44 <_dtoa_r+0x684>
   330d0:	ad40004c 	andi	r21,r21,1
   330d4:	a83f5b26 	beq	r21,zero,32e44 <_dtoa_r+0x684>
   330d8:	b53fffc3 	ldbu	r20,-1(r22)
   330dc:	b0ffff84 	addi	r3,r22,-2
   330e0:	01400e44 	movi	r5,57
   330e4:	00000306 	br	330f4 <_dtoa_r+0x934>
   330e8:	1d000003 	ldbu	r20,0(r3)
   330ec:	102d883a 	mov	r22,r2
   330f0:	18ffffc4 	addi	r3,r3,-1
   330f4:	a1003fcc 	andi	r4,r20,255
   330f8:	2100201c 	xori	r4,r4,128
   330fc:	213fe004 	addi	r4,r4,-128
   33100:	b0bfffc4 	addi	r2,r22,-1
   33104:	2142ca1e 	bne	r4,r5,33c30 <_dtoa_r+0x1470>
   33108:	b8bff71e 	bne	r23,r2,330e8 <_dtoa_r+0x928>
   3310c:	d8800617 	ldw	r2,24(sp)
   33110:	05000c44 	movi	r20,49
   33114:	10800044 	addi	r2,r2,1
   33118:	d8800615 	stw	r2,24(sp)
   3311c:	00800c04 	movi	r2,48
   33120:	b8800005 	stb	r2,0(r23)
   33124:	b805883a 	mov	r2,r23
   33128:	15000005 	stb	r20,0(r2)
   3312c:	003f4506 	br	32e44 <_dtoa_r+0x684>
   33130:	d9c00c17 	ldw	r7,48(sp)
   33134:	3800c926 	beq	r7,zero,3345c <_dtoa_r+0xc9c>
   33138:	d9c00417 	ldw	r7,16(sp)
   3313c:	00c00044 	movi	r3,1
   33140:	19c16c0e 	bge	r3,r7,336f4 <_dtoa_r+0xf34>
   33144:	d9000917 	ldw	r4,36(sp)
   33148:	d9c00a17 	ldw	r7,40(sp)
   3314c:	24ffffc4 	addi	r19,r4,-1
   33150:	3cc20716 	blt	r7,r19,33970 <_dtoa_r+0x11b0>
   33154:	3ce7c83a 	sub	r19,r7,r19
   33158:	d9c00917 	ldw	r7,36(sp)
   3315c:	3802ae16 	blt	r7,zero,33c18 <_dtoa_r+0x1458>
   33160:	dc800817 	ldw	r18,32(sp)
   33164:	d8800917 	ldw	r2,36(sp)
   33168:	d8c00817 	ldw	r3,32(sp)
   3316c:	d9c00717 	ldw	r7,28(sp)
   33170:	8009883a 	mov	r4,r16
   33174:	1887883a 	add	r3,r3,r2
   33178:	388f883a 	add	r7,r7,r2
   3317c:	01400044 	movi	r5,1
   33180:	d8c00815 	stw	r3,32(sp)
   33184:	d9c00715 	stw	r7,28(sp)
   33188:	00360080 	call	36008 <__i2b>
   3318c:	102b883a 	mov	r21,r2
   33190:	90000a26 	beq	r18,zero,331bc <_dtoa_r+0x9fc>
   33194:	d8800717 	ldw	r2,28(sp)
   33198:	0080080e 	bge	zero,r2,331bc <_dtoa_r+0x9fc>
   3319c:	90812b16 	blt	r18,r2,3364c <_dtoa_r+0xe8c>
   331a0:	d8c00817 	ldw	r3,32(sp)
   331a4:	d9000717 	ldw	r4,28(sp)
   331a8:	90a5c83a 	sub	r18,r18,r2
   331ac:	1887c83a 	sub	r3,r3,r2
   331b0:	2089c83a 	sub	r4,r4,r2
   331b4:	d8c00815 	stw	r3,32(sp)
   331b8:	d9000715 	stw	r4,28(sp)
   331bc:	d9c00a17 	ldw	r7,40(sp)
   331c0:	01c0140e 	bge	zero,r7,33214 <_dtoa_r+0xa54>
   331c4:	d8800c17 	ldw	r2,48(sp)
   331c8:	1001de26 	beq	r2,zero,33944 <_dtoa_r+0x1184>
   331cc:	04c00e0e 	bge	zero,r19,33208 <_dtoa_r+0xa48>
   331d0:	a80b883a 	mov	r5,r21
   331d4:	8009883a 	mov	r4,r16
   331d8:	980d883a 	mov	r6,r19
   331dc:	003629c0 	call	3629c <__pow5mult>
   331e0:	e00d883a 	mov	r6,fp
   331e4:	8009883a 	mov	r4,r16
   331e8:	100b883a 	mov	r5,r2
   331ec:	102b883a 	mov	r21,r2
   331f0:	00360440 	call	36044 <__multiply>
   331f4:	1029883a 	mov	r20,r2
   331f8:	e00b883a 	mov	r5,fp
   331fc:	8009883a 	mov	r4,r16
   33200:	0035c800 	call	35c80 <_Bfree>
   33204:	a039883a 	mov	fp,r20
   33208:	d8c00a17 	ldw	r3,40(sp)
   3320c:	1ccdc83a 	sub	r6,r3,r19
   33210:	3001291e 	bne	r6,zero,336b8 <_dtoa_r+0xef8>
   33214:	8009883a 	mov	r4,r16
   33218:	01400044 	movi	r5,1
   3321c:	00360080 	call	36008 <__i2b>
   33220:	d9000b17 	ldw	r4,44(sp)
   33224:	1029883a 	mov	r20,r2
   33228:	0100050e 	bge	zero,r4,33240 <_dtoa_r+0xa80>
   3322c:	d9800b17 	ldw	r6,44(sp)
   33230:	8009883a 	mov	r4,r16
   33234:	100b883a 	mov	r5,r2
   33238:	003629c0 	call	3629c <__pow5mult>
   3323c:	1029883a 	mov	r20,r2
   33240:	d9c00417 	ldw	r7,16(sp)
   33244:	00800044 	movi	r2,1
   33248:	11c0f00e 	bge	r2,r7,3360c <_dtoa_r+0xe4c>
   3324c:	0023883a 	mov	r17,zero
   33250:	d8800b17 	ldw	r2,44(sp)
   33254:	1001741e 	bne	r2,zero,33828 <_dtoa_r+0x1068>
   33258:	00800044 	movi	r2,1
   3325c:	d8c00717 	ldw	r3,28(sp)
   33260:	10c5883a 	add	r2,r2,r3
   33264:	108007cc 	andi	r2,r2,31
   33268:	10008026 	beq	r2,zero,3346c <_dtoa_r+0xcac>
   3326c:	01000804 	movi	r4,32
   33270:	2089c83a 	sub	r4,r4,r2
   33274:	00c00104 	movi	r3,4
   33278:	1902d00e 	bge	r3,r4,33dbc <_dtoa_r+0x15fc>
   3327c:	d9000817 	ldw	r4,32(sp)
   33280:	d9c00717 	ldw	r7,28(sp)
   33284:	00c00704 	movi	r3,28
   33288:	1885c83a 	sub	r2,r3,r2
   3328c:	2089883a 	add	r4,r4,r2
   33290:	388f883a 	add	r7,r7,r2
   33294:	d9000815 	stw	r4,32(sp)
   33298:	90a5883a 	add	r18,r18,r2
   3329c:	d9c00715 	stw	r7,28(sp)
   332a0:	d9c00817 	ldw	r7,32(sp)
   332a4:	01c0050e 	bge	zero,r7,332bc <_dtoa_r+0xafc>
   332a8:	e00b883a 	mov	r5,fp
   332ac:	8009883a 	mov	r4,r16
   332b0:	380d883a 	mov	r6,r7
   332b4:	00363c80 	call	363c8 <__lshift>
   332b8:	1039883a 	mov	fp,r2
   332bc:	d8800717 	ldw	r2,28(sp)
   332c0:	0080050e 	bge	zero,r2,332d8 <_dtoa_r+0xb18>
   332c4:	a00b883a 	mov	r5,r20
   332c8:	8009883a 	mov	r4,r16
   332cc:	100d883a 	mov	r6,r2
   332d0:	00363c80 	call	363c8 <__lshift>
   332d4:	1029883a 	mov	r20,r2
   332d8:	d8c00d17 	ldw	r3,52(sp)
   332dc:	1801401e 	bne	r3,zero,337e0 <_dtoa_r+0x1020>
   332e0:	d8800917 	ldw	r2,36(sp)
   332e4:	00815a0e 	bge	zero,r2,33850 <_dtoa_r+0x1090>
   332e8:	d8c00c17 	ldw	r3,48(sp)
   332ec:	18006f1e 	bne	r3,zero,334ac <_dtoa_r+0xcec>
   332f0:	b823883a 	mov	r17,r23
   332f4:	dc800917 	ldw	r18,36(sp)
   332f8:	00000206 	br	33304 <_dtoa_r+0xb44>
   332fc:	0035ca80 	call	35ca8 <__multadd>
   33300:	1039883a 	mov	fp,r2
   33304:	e009883a 	mov	r4,fp
   33308:	a00b883a 	mov	r5,r20
   3330c:	00325840 	call	32584 <quorem>
   33310:	10800c04 	addi	r2,r2,48
   33314:	88800005 	stb	r2,0(r17)
   33318:	8c400044 	addi	r17,r17,1
   3331c:	8dc7c83a 	sub	r3,r17,r23
   33320:	8009883a 	mov	r4,r16
   33324:	e00b883a 	mov	r5,fp
   33328:	01800284 	movi	r6,10
   3332c:	000f883a 	mov	r7,zero
   33330:	1cbff216 	blt	r3,r18,332fc <_dtoa_r+0xb3c>
   33334:	dd800917 	ldw	r22,36(sp)
   33338:	1007883a 	mov	r3,r2
   3333c:	05823a0e 	bge	zero,r22,33c28 <_dtoa_r+0x1468>
   33340:	bdad883a 	add	r22,r23,r22
   33344:	0023883a 	mov	r17,zero
   33348:	e00b883a 	mov	r5,fp
   3334c:	01800044 	movi	r6,1
   33350:	8009883a 	mov	r4,r16
   33354:	d8c01515 	stw	r3,84(sp)
   33358:	00363c80 	call	363c8 <__lshift>
   3335c:	1009883a 	mov	r4,r2
   33360:	a00b883a 	mov	r5,r20
   33364:	1039883a 	mov	fp,r2
   33368:	00365240 	call	36524 <__mcmp>
   3336c:	d8c01517 	ldw	r3,84(sp)
   33370:	0080d60e 	bge	zero,r2,336cc <_dtoa_r+0xf0c>
   33374:	b13fffc3 	ldbu	r4,-1(r22)
   33378:	b0ffff84 	addi	r3,r22,-2
   3337c:	01800e44 	movi	r6,57
   33380:	00000306 	br	33390 <_dtoa_r+0xbd0>
   33384:	19000003 	ldbu	r4,0(r3)
   33388:	102d883a 	mov	r22,r2
   3338c:	18ffffc4 	addi	r3,r3,-1
   33390:	21403fcc 	andi	r5,r4,255
   33394:	2940201c 	xori	r5,r5,128
   33398:	297fe004 	addi	r5,r5,-128
   3339c:	b0bfffc4 	addi	r2,r22,-1
   333a0:	2981a71e 	bne	r5,r6,33a40 <_dtoa_r+0x1280>
   333a4:	b8bff71e 	bne	r23,r2,33384 <_dtoa_r+0xbc4>
   333a8:	d8800617 	ldw	r2,24(sp)
   333ac:	10800044 	addi	r2,r2,1
   333b0:	d8800615 	stw	r2,24(sp)
   333b4:	00800c44 	movi	r2,49
   333b8:	b8800005 	stb	r2,0(r23)
   333bc:	8009883a 	mov	r4,r16
   333c0:	a00b883a 	mov	r5,r20
   333c4:	0035c800 	call	35c80 <_Bfree>
   333c8:	a83e9e26 	beq	r21,zero,32e44 <_dtoa_r+0x684>
   333cc:	88000426 	beq	r17,zero,333e0 <_dtoa_r+0xc20>
   333d0:	8d400326 	beq	r17,r21,333e0 <_dtoa_r+0xc20>
   333d4:	8009883a 	mov	r4,r16
   333d8:	880b883a 	mov	r5,r17
   333dc:	0035c800 	call	35c80 <_Bfree>
   333e0:	8009883a 	mov	r4,r16
   333e4:	a80b883a 	mov	r5,r21
   333e8:	0035c800 	call	35c80 <_Bfree>
   333ec:	003e9506 	br	32e44 <_dtoa_r+0x684>
   333f0:	00c00044 	movi	r3,1
   333f4:	d8c00d15 	stw	r3,52(sp)
   333f8:	003d9f06 	br	32a78 <_dtoa_r+0x2b8>
   333fc:	d9000817 	ldw	r4,32(sp)
   33400:	d8800617 	ldw	r2,24(sp)
   33404:	d8000b15 	stw	zero,44(sp)
   33408:	2089c83a 	sub	r4,r4,r2
   3340c:	0087c83a 	sub	r3,zero,r2
   33410:	d9000815 	stw	r4,32(sp)
   33414:	d8c00a15 	stw	r3,40(sp)
   33418:	003da306 	br	32aa8 <_dtoa_r+0x2e8>
   3341c:	0529c83a 	sub	r20,zero,r20
   33420:	dd000815 	stw	r20,32(sp)
   33424:	d8000715 	stw	zero,28(sp)
   33428:	003d9806 	br	32a8c <_dtoa_r+0x2cc>
   3342c:	d9000617 	ldw	r4,24(sp)
   33430:	00390540 	call	39054 <__floatsidf>
   33434:	1009883a 	mov	r4,r2
   33438:	180b883a 	mov	r5,r3
   3343c:	980d883a 	mov	r6,r19
   33440:	900f883a 	mov	r7,r18
   33444:	0038ed40 	call	38ed4 <__nedf2>
   33448:	103d7a26 	beq	r2,zero,32a34 <_dtoa_r+0x274>
   3344c:	d8800617 	ldw	r2,24(sp)
   33450:	10bfffc4 	addi	r2,r2,-1
   33454:	d8800615 	stw	r2,24(sp)
   33458:	003d7606 	br	32a34 <_dtoa_r+0x274>
   3345c:	dcc00a17 	ldw	r19,40(sp)
   33460:	dc800817 	ldw	r18,32(sp)
   33464:	002b883a 	mov	r21,zero
   33468:	003f4906 	br	33190 <_dtoa_r+0x9d0>
   3346c:	00800704 	movi	r2,28
   33470:	d8c00817 	ldw	r3,32(sp)
   33474:	d9000717 	ldw	r4,28(sp)
   33478:	90a5883a 	add	r18,r18,r2
   3347c:	1887883a 	add	r3,r3,r2
   33480:	2089883a 	add	r4,r4,r2
   33484:	d8c00815 	stw	r3,32(sp)
   33488:	d9000715 	stw	r4,28(sp)
   3348c:	003f8406 	br	332a0 <_dtoa_r+0xae0>
   33490:	d9c00317 	ldw	r7,12(sp)
   33494:	013efb84 	movi	r4,-1042
   33498:	2509c83a 	sub	r4,r4,r20
   3349c:	3908983a 	sll	r4,r7,r4
   334a0:	003d3006 	br	32964 <_dtoa_r+0x1a4>
   334a4:	d8000d15 	stw	zero,52(sp)
   334a8:	003d7306 	br	32a78 <_dtoa_r+0x2b8>
   334ac:	0480050e 	bge	zero,r18,334c4 <_dtoa_r+0xd04>
   334b0:	a80b883a 	mov	r5,r21
   334b4:	8009883a 	mov	r4,r16
   334b8:	900d883a 	mov	r6,r18
   334bc:	00363c80 	call	363c8 <__lshift>
   334c0:	102b883a 	mov	r21,r2
   334c4:	8801611e 	bne	r17,zero,33a4c <_dtoa_r+0x128c>
   334c8:	a827883a 	mov	r19,r21
   334cc:	d8c00317 	ldw	r3,12(sp)
   334d0:	d9000917 	ldw	r4,36(sp)
   334d4:	b8bfffc4 	addi	r2,r23,-1
   334d8:	18c0004c 	andi	r3,r3,1
   334dc:	1105883a 	add	r2,r2,r4
   334e0:	b825883a 	mov	r18,r23
   334e4:	d8800515 	stw	r2,20(sp)
   334e8:	a823883a 	mov	r17,r21
   334ec:	d8c00315 	stw	r3,12(sp)
   334f0:	ddc00715 	stw	r23,28(sp)
   334f4:	e009883a 	mov	r4,fp
   334f8:	a00b883a 	mov	r5,r20
   334fc:	00325840 	call	32584 <quorem>
   33500:	e009883a 	mov	r4,fp
   33504:	880b883a 	mov	r5,r17
   33508:	102d883a 	mov	r22,r2
   3350c:	00365240 	call	36524 <__mcmp>
   33510:	980d883a 	mov	r6,r19
   33514:	8009883a 	mov	r4,r16
   33518:	a00b883a 	mov	r5,r20
   3351c:	102b883a 	mov	r21,r2
   33520:	003657c0 	call	3657c <__mdiff>
   33524:	100d883a 	mov	r6,r2
   33528:	10800317 	ldw	r2,12(r2)
   3352c:	b5c00c04 	addi	r23,r22,48
   33530:	10008c26 	beq	r2,zero,33764 <_dtoa_r+0xfa4>
   33534:	8009883a 	mov	r4,r16
   33538:	300b883a 	mov	r5,r6
   3353c:	0035c800 	call	35c80 <_Bfree>
   33540:	00800044 	movi	r2,1
   33544:	a8007116 	blt	r21,zero,3370c <_dtoa_r+0xf4c>
   33548:	a800041e 	bne	r21,zero,3355c <_dtoa_r+0xd9c>
   3354c:	d9c00417 	ldw	r7,16(sp)
   33550:	3800021e 	bne	r7,zero,3355c <_dtoa_r+0xd9c>
   33554:	d8c00317 	ldw	r3,12(sp)
   33558:	18006c26 	beq	r3,zero,3370c <_dtoa_r+0xf4c>
   3355c:	00814c16 	blt	zero,r2,33a90 <_dtoa_r+0x12d0>
   33560:	d8c00517 	ldw	r3,20(sp)
   33564:	95400044 	addi	r21,r18,1
   33568:	95c00005 	stb	r23,0(r18)
   3356c:	a82d883a 	mov	r22,r21
   33570:	90c14d26 	beq	r18,r3,33aa8 <_dtoa_r+0x12e8>
   33574:	e00b883a 	mov	r5,fp
   33578:	8009883a 	mov	r4,r16
   3357c:	01800284 	movi	r6,10
   33580:	000f883a 	mov	r7,zero
   33584:	0035ca80 	call	35ca8 <__multadd>
   33588:	1039883a 	mov	fp,r2
   3358c:	8cc08b26 	beq	r17,r19,337bc <_dtoa_r+0xffc>
   33590:	880b883a 	mov	r5,r17
   33594:	01800284 	movi	r6,10
   33598:	000f883a 	mov	r7,zero
   3359c:	8009883a 	mov	r4,r16
   335a0:	0035ca80 	call	35ca8 <__multadd>
   335a4:	980b883a 	mov	r5,r19
   335a8:	8009883a 	mov	r4,r16
   335ac:	01800284 	movi	r6,10
   335b0:	000f883a 	mov	r7,zero
   335b4:	1023883a 	mov	r17,r2
   335b8:	0035ca80 	call	35ca8 <__multadd>
   335bc:	1027883a 	mov	r19,r2
   335c0:	a825883a 	mov	r18,r21
   335c4:	003fcb06 	br	334f4 <_dtoa_r+0xd34>
   335c8:	d9c00417 	ldw	r7,16(sp)
   335cc:	00800104 	movi	r2,4
   335d0:	3880e426 	beq	r7,r2,33964 <_dtoa_r+0x11a4>
   335d4:	00800144 	movi	r2,5
   335d8:	38be3c1e 	bne	r7,r2,32ecc <_dtoa_r+0x70c>
   335dc:	00c00044 	movi	r3,1
   335e0:	d8c00c15 	stw	r3,48(sp)
   335e4:	d9c02117 	ldw	r7,132(sp)
   335e8:	d8800617 	ldw	r2,24(sp)
   335ec:	388f883a 	add	r7,r7,r2
   335f0:	3c800044 	addi	r18,r7,1
   335f4:	d9c00e15 	stw	r7,56(sp)
   335f8:	dc800915 	stw	r18,36(sp)
   335fc:	04bd3e16 	blt	zero,r18,32af8 <_dtoa_r+0x338>
   33600:	80001115 	stw	zero,68(r16)
   33604:	000b883a 	mov	r5,zero
   33608:	003d4606 	br	32b24 <_dtoa_r+0x364>
   3360c:	d8c00317 	ldw	r3,12(sp)
   33610:	183f0e1e 	bne	r3,zero,3324c <_dtoa_r+0xa8c>
   33614:	00c00434 	movhi	r3,16
   33618:	18ffffc4 	addi	r3,r3,-1
   3361c:	88c6703a 	and	r3,r17,r3
   33620:	183f0a1e 	bne	r3,zero,3324c <_dtoa_r+0xa8c>
   33624:	8c5ffc2c 	andhi	r17,r17,32752
   33628:	883f0826 	beq	r17,zero,3324c <_dtoa_r+0xa8c>
   3362c:	d9000817 	ldw	r4,32(sp)
   33630:	d9c00717 	ldw	r7,28(sp)
   33634:	1023883a 	mov	r17,r2
   33638:	2089883a 	add	r4,r4,r2
   3363c:	388f883a 	add	r7,r7,r2
   33640:	d9000815 	stw	r4,32(sp)
   33644:	d9c00715 	stw	r7,28(sp)
   33648:	003f0106 	br	33250 <_dtoa_r+0xa90>
   3364c:	9005883a 	mov	r2,r18
   33650:	003ed306 	br	331a0 <_dtoa_r+0x9e0>
   33654:	d8800917 	ldw	r2,36(sp)
   33658:	00be3516 	blt	zero,r2,32f30 <_dtoa_r+0x770>
   3365c:	1000b61e 	bne	r2,zero,33938 <_dtoa_r+0x1178>
   33660:	9009883a 	mov	r4,r18
   33664:	980b883a 	mov	r5,r19
   33668:	000d883a 	mov	r6,zero
   3366c:	01d00534 	movhi	r7,16404
   33670:	00389e00 	call	389e0 <__muldf3>
   33674:	d9800317 	ldw	r6,12(sp)
   33678:	1009883a 	mov	r4,r2
   3367c:	180b883a 	mov	r5,r3
   33680:	880f883a 	mov	r7,r17
   33684:	0038f940 	call	38f94 <__gedf2>
   33688:	0029883a 	mov	r20,zero
   3368c:	002b883a 	mov	r21,zero
   33690:	10007e16 	blt	r2,zero,3388c <_dtoa_r+0x10cc>
   33694:	d8802117 	ldw	r2,132(sp)
   33698:	b82d883a 	mov	r22,r23
   3369c:	0084303a 	nor	r2,zero,r2
   336a0:	d8800615 	stw	r2,24(sp)
   336a4:	8009883a 	mov	r4,r16
   336a8:	a00b883a 	mov	r5,r20
   336ac:	0035c800 	call	35c80 <_Bfree>
   336b0:	a83f4b1e 	bne	r21,zero,333e0 <_dtoa_r+0xc20>
   336b4:	003de306 	br	32e44 <_dtoa_r+0x684>
   336b8:	e00b883a 	mov	r5,fp
   336bc:	8009883a 	mov	r4,r16
   336c0:	003629c0 	call	3629c <__pow5mult>
   336c4:	1039883a 	mov	fp,r2
   336c8:	003ed206 	br	33214 <_dtoa_r+0xa54>
   336cc:	1000021e 	bne	r2,zero,336d8 <_dtoa_r+0xf18>
   336d0:	18c0004c 	andi	r3,r3,1
   336d4:	183f271e 	bne	r3,zero,33374 <_dtoa_r+0xbb4>
   336d8:	01000c04 	movi	r4,48
   336dc:	00000106 	br	336e4 <_dtoa_r+0xf24>
   336e0:	102d883a 	mov	r22,r2
   336e4:	b0bfffc4 	addi	r2,r22,-1
   336e8:	10c00007 	ldb	r3,0(r2)
   336ec:	193ffc26 	beq	r3,r4,336e0 <_dtoa_r+0xf20>
   336f0:	003f3206 	br	333bc <_dtoa_r+0xbfc>
   336f4:	d8c00f17 	ldw	r3,60(sp)
   336f8:	18015026 	beq	r3,zero,33c3c <_dtoa_r+0x147c>
   336fc:	10810cc4 	addi	r2,r2,1075
   33700:	dcc00a17 	ldw	r19,40(sp)
   33704:	dc800817 	ldw	r18,32(sp)
   33708:	003e9706 	br	33168 <_dtoa_r+0x9a8>
   3370c:	b807883a 	mov	r3,r23
   33710:	182b883a 	mov	r21,r3
   33714:	ddc00717 	ldw	r23,28(sp)
   33718:	00800e0e 	bge	zero,r2,33754 <_dtoa_r+0xf94>
   3371c:	e00b883a 	mov	r5,fp
   33720:	01800044 	movi	r6,1
   33724:	8009883a 	mov	r4,r16
   33728:	d8c01515 	stw	r3,84(sp)
   3372c:	00363c80 	call	363c8 <__lshift>
   33730:	1009883a 	mov	r4,r2
   33734:	a00b883a 	mov	r5,r20
   33738:	1039883a 	mov	fp,r2
   3373c:	00365240 	call	36524 <__mcmp>
   33740:	d8c01517 	ldw	r3,84(sp)
   33744:	0081880e 	bge	zero,r2,33d68 <_dtoa_r+0x15a8>
   33748:	00800e44 	movi	r2,57
   3374c:	b0c00c44 	addi	r3,r22,49
   33750:	a8816326 	beq	r21,r2,33ce0 <_dtoa_r+0x1520>
   33754:	90c00005 	stb	r3,0(r18)
   33758:	95800044 	addi	r22,r18,1
   3375c:	982b883a 	mov	r21,r19
   33760:	003f1606 	br	333bc <_dtoa_r+0xbfc>
   33764:	300b883a 	mov	r5,r6
   33768:	e009883a 	mov	r4,fp
   3376c:	d9801515 	stw	r6,84(sp)
   33770:	00365240 	call	36524 <__mcmp>
   33774:	d9801517 	ldw	r6,84(sp)
   33778:	8009883a 	mov	r4,r16
   3377c:	d8801515 	stw	r2,84(sp)
   33780:	300b883a 	mov	r5,r6
   33784:	0035c800 	call	35c80 <_Bfree>
   33788:	d8801517 	ldw	r2,84(sp)
   3378c:	103f6d1e 	bne	r2,zero,33544 <_dtoa_r+0xd84>
   33790:	d9c00417 	ldw	r7,16(sp)
   33794:	383f6b1e 	bne	r7,zero,33544 <_dtoa_r+0xd84>
   33798:	d8c00317 	ldw	r3,12(sp)
   3379c:	183f691e 	bne	r3,zero,33544 <_dtoa_r+0xd84>
   337a0:	b807883a 	mov	r3,r23
   337a4:	00800e44 	movi	r2,57
   337a8:	ddc00717 	ldw	r23,28(sp)
   337ac:	18814c26 	beq	r3,r2,33ce0 <_dtoa_r+0x1520>
   337b0:	057fe80e 	bge	zero,r21,33754 <_dtoa_r+0xf94>
   337b4:	b0c00c44 	addi	r3,r22,49
   337b8:	003fe606 	br	33754 <_dtoa_r+0xf94>
   337bc:	880b883a 	mov	r5,r17
   337c0:	8009883a 	mov	r4,r16
   337c4:	01800284 	movi	r6,10
   337c8:	000f883a 	mov	r7,zero
   337cc:	0035ca80 	call	35ca8 <__multadd>
   337d0:	1023883a 	mov	r17,r2
   337d4:	1027883a 	mov	r19,r2
   337d8:	a825883a 	mov	r18,r21
   337dc:	003f4506 	br	334f4 <_dtoa_r+0xd34>
   337e0:	e009883a 	mov	r4,fp
   337e4:	a00b883a 	mov	r5,r20
   337e8:	00365240 	call	36524 <__mcmp>
   337ec:	103ebc0e 	bge	r2,zero,332e0 <_dtoa_r+0xb20>
   337f0:	e00b883a 	mov	r5,fp
   337f4:	8009883a 	mov	r4,r16
   337f8:	01800284 	movi	r6,10
   337fc:	000f883a 	mov	r7,zero
   33800:	0035ca80 	call	35ca8 <__multadd>
   33804:	1039883a 	mov	fp,r2
   33808:	d8800617 	ldw	r2,24(sp)
   3380c:	d8c00c17 	ldw	r3,48(sp)
   33810:	10bfffc4 	addi	r2,r2,-1
   33814:	d8800615 	stw	r2,24(sp)
   33818:	1801571e 	bne	r3,zero,33d78 <_dtoa_r+0x15b8>
   3381c:	d9c00e17 	ldw	r7,56(sp)
   33820:	d9c00915 	stw	r7,36(sp)
   33824:	003eae06 	br	332e0 <_dtoa_r+0xb20>
   33828:	a0800417 	ldw	r2,16(r20)
   3382c:	10800104 	addi	r2,r2,4
   33830:	1085883a 	add	r2,r2,r2
   33834:	1085883a 	add	r2,r2,r2
   33838:	a085883a 	add	r2,r20,r2
   3383c:	11000017 	ldw	r4,0(r2)
   33840:	0035ef00 	call	35ef0 <__hi0bits>
   33844:	00c00804 	movi	r3,32
   33848:	1885c83a 	sub	r2,r3,r2
   3384c:	003e8306 	br	3325c <_dtoa_r+0xa9c>
   33850:	d9c00417 	ldw	r7,16(sp)
   33854:	00800084 	movi	r2,2
   33858:	11fea30e 	bge	r2,r7,332e8 <_dtoa_r+0xb28>
   3385c:	d8800917 	ldw	r2,36(sp)
   33860:	103f8c1e 	bne	r2,zero,33694 <_dtoa_r+0xed4>
   33864:	a00b883a 	mov	r5,r20
   33868:	8009883a 	mov	r4,r16
   3386c:	01800144 	movi	r6,5
   33870:	000f883a 	mov	r7,zero
   33874:	0035ca80 	call	35ca8 <__multadd>
   33878:	e009883a 	mov	r4,fp
   3387c:	100b883a 	mov	r5,r2
   33880:	1029883a 	mov	r20,r2
   33884:	00365240 	call	36524 <__mcmp>
   33888:	00bf820e 	bge	zero,r2,33694 <_dtoa_r+0xed4>
   3388c:	00800c44 	movi	r2,49
   33890:	b8800005 	stb	r2,0(r23)
   33894:	d8800617 	ldw	r2,24(sp)
   33898:	bd800044 	addi	r22,r23,1
   3389c:	10800044 	addi	r2,r2,1
   338a0:	d8800615 	stw	r2,24(sp)
   338a4:	003f7f06 	br	336a4 <_dtoa_r+0xee4>
   338a8:	dc000417 	ldw	r16,16(sp)
   338ac:	003d6506 	br	32e44 <_dtoa_r+0x684>
   338b0:	9009883a 	mov	r4,r18
   338b4:	00390540 	call	39054 <__floatsidf>
   338b8:	1009883a 	mov	r4,r2
   338bc:	180b883a 	mov	r5,r3
   338c0:	980d883a 	mov	r6,r19
   338c4:	a00f883a 	mov	r7,r20
   338c8:	00389e00 	call	389e0 <__muldf3>
   338cc:	1009883a 	mov	r4,r2
   338d0:	180b883a 	mov	r5,r3
   338d4:	000d883a 	mov	r6,zero
   338d8:	01d00734 	movhi	r7,16412
   338dc:	003892c0 	call	3892c <__adddf3>
   338e0:	057f3034 	movhi	r21,64704
   338e4:	1025883a 	mov	r18,r2
   338e8:	1d6b883a 	add	r21,r3,r21
   338ec:	9809883a 	mov	r4,r19
   338f0:	a00b883a 	mov	r5,r20
   338f4:	000d883a 	mov	r6,zero
   338f8:	01d00534 	movhi	r7,16404
   338fc:	00389800 	call	38980 <__subdf3>
   33900:	1009883a 	mov	r4,r2
   33904:	180b883a 	mov	r5,r3
   33908:	900d883a 	mov	r6,r18
   3390c:	a80f883a 	mov	r7,r21
   33910:	1027883a 	mov	r19,r2
   33914:	1829883a 	mov	r20,r3
   33918:	0038f300 	call	38f30 <__gtdf2>
   3391c:	00806616 	blt	zero,r2,33ab8 <_dtoa_r+0x12f8>
   33920:	a9e0003c 	xorhi	r7,r21,32768
   33924:	9809883a 	mov	r4,r19
   33928:	a00b883a 	mov	r5,r20
   3392c:	900d883a 	mov	r6,r18
   33930:	0038ff80 	call	38ff8 <__ltdf2>
   33934:	103d710e 	bge	r2,zero,32efc <_dtoa_r+0x73c>
   33938:	0029883a 	mov	r20,zero
   3393c:	002b883a 	mov	r21,zero
   33940:	003f5406 	br	33694 <_dtoa_r+0xed4>
   33944:	d9800a17 	ldw	r6,40(sp)
   33948:	e00b883a 	mov	r5,fp
   3394c:	8009883a 	mov	r4,r16
   33950:	003629c0 	call	3629c <__pow5mult>
   33954:	1039883a 	mov	fp,r2
   33958:	003e2e06 	br	33214 <_dtoa_r+0xa54>
   3395c:	d8000c15 	stw	zero,48(sp)
   33960:	003f2006 	br	335e4 <_dtoa_r+0xe24>
   33964:	00800044 	movi	r2,1
   33968:	d8800c15 	stw	r2,48(sp)
   3396c:	003c5d06 	br	32ae4 <_dtoa_r+0x324>
   33970:	d8c00a17 	ldw	r3,40(sp)
   33974:	d9000b17 	ldw	r4,44(sp)
   33978:	dcc00a15 	stw	r19,40(sp)
   3397c:	98c5c83a 	sub	r2,r19,r3
   33980:	2089883a 	add	r4,r4,r2
   33984:	d9000b15 	stw	r4,44(sp)
   33988:	0027883a 	mov	r19,zero
   3398c:	003df206 	br	33158 <_dtoa_r+0x998>
   33990:	d9000317 	ldw	r4,12(sp)
   33994:	8829883a 	mov	r20,r17
   33998:	04800084 	movi	r18,2
   3399c:	d9001015 	stw	r4,64(sp)
   339a0:	003c8106 	br	32ba8 <_dtoa_r+0x3e8>
   339a4:	04800044 	movi	r18,1
   339a8:	dc800e15 	stw	r18,56(sp)
   339ac:	dc800915 	stw	r18,36(sp)
   339b0:	dc802115 	stw	r18,132(sp)
   339b4:	003f1206 	br	33600 <_dtoa_r+0xe40>
   339b8:	d8800617 	ldw	r2,24(sp)
   339bc:	00abc83a 	sub	r21,zero,r2
   339c0:	a800a426 	beq	r21,zero,33c54 <_dtoa_r+0x1494>
   339c4:	a88003cc 	andi	r2,r21,15
   339c8:	100490fa 	slli	r2,r2,3
   339cc:	00c00034 	movhi	r3,0
   339d0:	18c05204 	addi	r3,r3,328
   339d4:	d9000317 	ldw	r4,12(sp)
   339d8:	1885883a 	add	r2,r3,r2
   339dc:	11800017 	ldw	r6,0(r2)
   339e0:	11c00117 	ldw	r7,4(r2)
   339e4:	a82bd13a 	srai	r21,r21,4
   339e8:	880b883a 	mov	r5,r17
   339ec:	00389e00 	call	389e0 <__muldf3>
   339f0:	1027883a 	mov	r19,r2
   339f4:	1829883a 	mov	r20,r3
   339f8:	a800e826 	beq	r21,zero,33d9c <_dtoa_r+0x15dc>
   339fc:	05800034 	movhi	r22,0
   33a00:	b5804804 	addi	r22,r22,288
   33a04:	04800084 	movi	r18,2
   33a08:	a980004c 	andi	r6,r21,1
   33a0c:	1009883a 	mov	r4,r2
   33a10:	a82bd07a 	srai	r21,r21,1
   33a14:	180b883a 	mov	r5,r3
   33a18:	30000426 	beq	r6,zero,33a2c <_dtoa_r+0x126c>
   33a1c:	b1800017 	ldw	r6,0(r22)
   33a20:	b1c00117 	ldw	r7,4(r22)
   33a24:	94800044 	addi	r18,r18,1
   33a28:	00389e00 	call	389e0 <__muldf3>
   33a2c:	b5800204 	addi	r22,r22,8
   33a30:	a83ff51e 	bne	r21,zero,33a08 <_dtoa_r+0x1248>
   33a34:	1027883a 	mov	r19,r2
   33a38:	1829883a 	mov	r20,r3
   33a3c:	003c7306 	br	32c0c <_dtoa_r+0x44c>
   33a40:	21000044 	addi	r4,r4,1
   33a44:	11000005 	stb	r4,0(r2)
   33a48:	003e5c06 	br	333bc <_dtoa_r+0xbfc>
   33a4c:	a9400117 	ldw	r5,4(r21)
   33a50:	8009883a 	mov	r4,r16
   33a54:	0035bd80 	call	35bd8 <_Balloc>
   33a58:	a9800417 	ldw	r6,16(r21)
   33a5c:	11000304 	addi	r4,r2,12
   33a60:	a9400304 	addi	r5,r21,12
   33a64:	31800084 	addi	r6,r6,2
   33a68:	318d883a 	add	r6,r6,r6
   33a6c:	318d883a 	add	r6,r6,r6
   33a70:	1023883a 	mov	r17,r2
   33a74:	00358300 	call	35830 <memcpy>
   33a78:	8009883a 	mov	r4,r16
   33a7c:	880b883a 	mov	r5,r17
   33a80:	01800044 	movi	r6,1
   33a84:	00363c80 	call	363c8 <__lshift>
   33a88:	1027883a 	mov	r19,r2
   33a8c:	003e8f06 	br	334cc <_dtoa_r+0xd0c>
   33a90:	b807883a 	mov	r3,r23
   33a94:	00800e44 	movi	r2,57
   33a98:	ddc00717 	ldw	r23,28(sp)
   33a9c:	18809026 	beq	r3,r2,33ce0 <_dtoa_r+0x1520>
   33aa0:	18c00044 	addi	r3,r3,1
   33aa4:	003f2b06 	br	33754 <_dtoa_r+0xf94>
   33aa8:	b807883a 	mov	r3,r23
   33aac:	982b883a 	mov	r21,r19
   33ab0:	ddc00717 	ldw	r23,28(sp)
   33ab4:	003e2406 	br	33348 <_dtoa_r+0xb88>
   33ab8:	0029883a 	mov	r20,zero
   33abc:	002b883a 	mov	r21,zero
   33ac0:	003f7206 	br	3388c <_dtoa_r+0x10cc>
   33ac4:	593fffc4 	addi	r4,r11,-1
   33ac8:	200490fa 	slli	r2,r4,3
   33acc:	00c00034 	movhi	r3,0
   33ad0:	18c05204 	addi	r3,r3,328
   33ad4:	d9001015 	stw	r4,64(sp)
   33ad8:	1885883a 	add	r2,r3,r2
   33adc:	11000017 	ldw	r4,0(r2)
   33ae0:	11400117 	ldw	r5,4(r2)
   33ae4:	900d883a 	mov	r6,r18
   33ae8:	a80f883a 	mov	r7,r21
   33aec:	dac01615 	stw	r11,88(sp)
   33af0:	00389e00 	call	389e0 <__muldf3>
   33af4:	a00b883a 	mov	r5,r20
   33af8:	9809883a 	mov	r4,r19
   33afc:	d8c01215 	stw	r3,72(sp)
   33b00:	d8801115 	stw	r2,68(sp)
   33b04:	00391280 	call	39128 <__fixdfsi>
   33b08:	1009883a 	mov	r4,r2
   33b0c:	1025883a 	mov	r18,r2
   33b10:	00390540 	call	39054 <__floatsidf>
   33b14:	9809883a 	mov	r4,r19
   33b18:	a00b883a 	mov	r5,r20
   33b1c:	100d883a 	mov	r6,r2
   33b20:	180f883a 	mov	r7,r3
   33b24:	94800c04 	addi	r18,r18,48
   33b28:	00389800 	call	38980 <__subdf3>
   33b2c:	bc800005 	stb	r18,0(r23)
   33b30:	dac01617 	ldw	r11,88(sp)
   33b34:	102b883a 	mov	r21,r2
   33b38:	00800044 	movi	r2,1
   33b3c:	bd800044 	addi	r22,r23,1
   33b40:	1815883a 	mov	r10,r3
   33b44:	58802226 	beq	r11,r2,33bd0 <_dtoa_r+0x1410>
   33b48:	bad7883a 	add	r11,r23,r11
   33b4c:	dc001415 	stw	r16,80(sp)
   33b50:	a805883a 	mov	r2,r21
   33b54:	b027883a 	mov	r19,r22
   33b58:	5821883a 	mov	r16,r11
   33b5c:	882b883a 	mov	r21,r17
   33b60:	000d883a 	mov	r6,zero
   33b64:	01d00934 	movhi	r7,16420
   33b68:	1009883a 	mov	r4,r2
   33b6c:	180b883a 	mov	r5,r3
   33b70:	00389e00 	call	389e0 <__muldf3>
   33b74:	180b883a 	mov	r5,r3
   33b78:	1009883a 	mov	r4,r2
   33b7c:	1829883a 	mov	r20,r3
   33b80:	1023883a 	mov	r17,r2
   33b84:	00391280 	call	39128 <__fixdfsi>
   33b88:	1009883a 	mov	r4,r2
   33b8c:	1025883a 	mov	r18,r2
   33b90:	00390540 	call	39054 <__floatsidf>
   33b94:	8809883a 	mov	r4,r17
   33b98:	a00b883a 	mov	r5,r20
   33b9c:	100d883a 	mov	r6,r2
   33ba0:	180f883a 	mov	r7,r3
   33ba4:	94800c04 	addi	r18,r18,48
   33ba8:	00389800 	call	38980 <__subdf3>
   33bac:	9cc00044 	addi	r19,r19,1
   33bb0:	9cbfffc5 	stb	r18,-1(r19)
   33bb4:	9c3fea1e 	bne	r19,r16,33b60 <_dtoa_r+0x13a0>
   33bb8:	1815883a 	mov	r10,r3
   33bbc:	d8c01017 	ldw	r3,64(sp)
   33bc0:	dc001417 	ldw	r16,80(sp)
   33bc4:	a823883a 	mov	r17,r21
   33bc8:	b0ed883a 	add	r22,r22,r3
   33bcc:	102b883a 	mov	r21,r2
   33bd0:	d9001117 	ldw	r4,68(sp)
   33bd4:	d9401217 	ldw	r5,72(sp)
   33bd8:	000d883a 	mov	r6,zero
   33bdc:	01cff834 	movhi	r7,16352
   33be0:	da801515 	stw	r10,84(sp)
   33be4:	003892c0 	call	3892c <__adddf3>
   33be8:	da801517 	ldw	r10,84(sp)
   33bec:	1009883a 	mov	r4,r2
   33bf0:	180b883a 	mov	r5,r3
   33bf4:	500f883a 	mov	r7,r10
   33bf8:	a80d883a 	mov	r6,r21
   33bfc:	0038ff80 	call	38ff8 <__ltdf2>
   33c00:	da801517 	ldw	r10,84(sp)
   33c04:	10003b0e 	bge	r2,zero,33cf4 <_dtoa_r+0x1534>
   33c08:	d9c01317 	ldw	r7,76(sp)
   33c0c:	b53fffc3 	ldbu	r20,-1(r22)
   33c10:	d9c00615 	stw	r7,24(sp)
   33c14:	003d3106 	br	330dc <_dtoa_r+0x91c>
   33c18:	d8800817 	ldw	r2,32(sp)
   33c1c:	11e5c83a 	sub	r18,r2,r7
   33c20:	0005883a 	mov	r2,zero
   33c24:	003d5006 	br	33168 <_dtoa_r+0x9a8>
   33c28:	05800044 	movi	r22,1
   33c2c:	003dc406 	br	33340 <_dtoa_r+0xb80>
   33c30:	a5000044 	addi	r20,r20,1
   33c34:	15000005 	stb	r20,0(r2)
   33c38:	003c8206 	br	32e44 <_dtoa_r+0x684>
   33c3c:	d8800217 	ldw	r2,8(sp)
   33c40:	00c00d84 	movi	r3,54
   33c44:	dcc00a17 	ldw	r19,40(sp)
   33c48:	1885c83a 	sub	r2,r3,r2
   33c4c:	dc800817 	ldw	r18,32(sp)
   33c50:	003d4506 	br	33168 <_dtoa_r+0x9a8>
   33c54:	dcc00317 	ldw	r19,12(sp)
   33c58:	8829883a 	mov	r20,r17
   33c5c:	04800084 	movi	r18,2
   33c60:	003bea06 	br	32c0c <_dtoa_r+0x44c>
   33c64:	d9000917 	ldw	r4,36(sp)
   33c68:	203f1126 	beq	r4,zero,338b0 <_dtoa_r+0x10f0>
   33c6c:	d9c00e17 	ldw	r7,56(sp)
   33c70:	01fca20e 	bge	zero,r7,32efc <_dtoa_r+0x73c>
   33c74:	a00b883a 	mov	r5,r20
   33c78:	9809883a 	mov	r4,r19
   33c7c:	000d883a 	mov	r6,zero
   33c80:	01d00934 	movhi	r7,16420
   33c84:	00389e00 	call	389e0 <__muldf3>
   33c88:	91000044 	addi	r4,r18,1
   33c8c:	1027883a 	mov	r19,r2
   33c90:	1829883a 	mov	r20,r3
   33c94:	00390540 	call	39054 <__floatsidf>
   33c98:	9809883a 	mov	r4,r19
   33c9c:	a00b883a 	mov	r5,r20
   33ca0:	100d883a 	mov	r6,r2
   33ca4:	180f883a 	mov	r7,r3
   33ca8:	00389e00 	call	389e0 <__muldf3>
   33cac:	1009883a 	mov	r4,r2
   33cb0:	180b883a 	mov	r5,r3
   33cb4:	000d883a 	mov	r6,zero
   33cb8:	01d00734 	movhi	r7,16412
   33cbc:	003892c0 	call	3892c <__adddf3>
   33cc0:	1025883a 	mov	r18,r2
   33cc4:	d8800617 	ldw	r2,24(sp)
   33cc8:	057f3034 	movhi	r21,64704
   33ccc:	1d6b883a 	add	r21,r3,r21
   33cd0:	10bfffc4 	addi	r2,r2,-1
   33cd4:	d8801315 	stw	r2,76(sp)
   33cd8:	dac00e17 	ldw	r11,56(sp)
   33cdc:	003be706 	br	32c7c <_dtoa_r+0x4bc>
   33ce0:	01000e44 	movi	r4,57
   33ce4:	91000005 	stb	r4,0(r18)
   33ce8:	95800044 	addi	r22,r18,1
   33cec:	982b883a 	mov	r21,r19
   33cf0:	003da106 	br	33378 <_dtoa_r+0xbb8>
   33cf4:	d9801117 	ldw	r6,68(sp)
   33cf8:	d9c01217 	ldw	r7,72(sp)
   33cfc:	0009883a 	mov	r4,zero
   33d00:	014ff834 	movhi	r5,16352
   33d04:	da801515 	stw	r10,84(sp)
   33d08:	00389800 	call	38980 <__subdf3>
   33d0c:	da801517 	ldw	r10,84(sp)
   33d10:	1009883a 	mov	r4,r2
   33d14:	180b883a 	mov	r5,r3
   33d18:	a80d883a 	mov	r6,r21
   33d1c:	500f883a 	mov	r7,r10
   33d20:	0038f300 	call	38f30 <__gtdf2>
   33d24:	00bc750e 	bge	zero,r2,32efc <_dtoa_r+0x73c>
   33d28:	01000c04 	movi	r4,48
   33d2c:	00000106 	br	33d34 <_dtoa_r+0x1574>
   33d30:	102d883a 	mov	r22,r2
   33d34:	b0bfffc4 	addi	r2,r22,-1
   33d38:	10c00007 	ldb	r3,0(r2)
   33d3c:	193ffc26 	beq	r3,r4,33d30 <_dtoa_r+0x1570>
   33d40:	d8801317 	ldw	r2,76(sp)
   33d44:	d8800615 	stw	r2,24(sp)
   33d48:	003c3e06 	br	32e44 <_dtoa_r+0x684>
   33d4c:	d9001317 	ldw	r4,76(sp)
   33d50:	df001117 	ldw	fp,68(sp)
   33d54:	d9000615 	stw	r4,24(sp)
   33d58:	003ce006 	br	330dc <_dtoa_r+0x91c>
   33d5c:	df001117 	ldw	fp,68(sp)
   33d60:	dc401217 	ldw	r17,72(sp)
   33d64:	003c6506 	br	32efc <_dtoa_r+0x73c>
   33d68:	103e7a1e 	bne	r2,zero,33754 <_dtoa_r+0xf94>
   33d6c:	1880004c 	andi	r2,r3,1
   33d70:	103e7826 	beq	r2,zero,33754 <_dtoa_r+0xf94>
   33d74:	003e7406 	br	33748 <_dtoa_r+0xf88>
   33d78:	8009883a 	mov	r4,r16
   33d7c:	a80b883a 	mov	r5,r21
   33d80:	01800284 	movi	r6,10
   33d84:	000f883a 	mov	r7,zero
   33d88:	0035ca80 	call	35ca8 <__multadd>
   33d8c:	d9000e17 	ldw	r4,56(sp)
   33d90:	102b883a 	mov	r21,r2
   33d94:	d9000915 	stw	r4,36(sp)
   33d98:	003d5106 	br	332e0 <_dtoa_r+0xb20>
   33d9c:	04800084 	movi	r18,2
   33da0:	003b9a06 	br	32c0c <_dtoa_r+0x44c>
   33da4:	d8c01317 	ldw	r3,76(sp)
   33da8:	d8c00615 	stw	r3,24(sp)
   33dac:	003ccb06 	br	330dc <_dtoa_r+0x91c>
   33db0:	d8c01317 	ldw	r3,76(sp)
   33db4:	d8c00615 	stw	r3,24(sp)
   33db8:	003c2206 	br	32e44 <_dtoa_r+0x684>
   33dbc:	20fd3826 	beq	r4,r3,332a0 <_dtoa_r+0xae0>
   33dc0:	00c00f04 	movi	r3,60
   33dc4:	1885c83a 	sub	r2,r3,r2
   33dc8:	003da906 	br	33470 <_dtoa_r+0xcb0>
   33dcc:	000b883a 	mov	r5,zero
   33dd0:	003b5406 	br	32b24 <_dtoa_r+0x364>
   33dd4:	04c00044 	movi	r19,1
   33dd8:	003b3b06 	br	32ac8 <_dtoa_r+0x308>

00033ddc <_fflush_r>:
   33ddc:	defffb04 	addi	sp,sp,-20
   33de0:	dcc00315 	stw	r19,12(sp)
   33de4:	dc400115 	stw	r17,4(sp)
   33de8:	dfc00415 	stw	ra,16(sp)
   33dec:	dc800215 	stw	r18,8(sp)
   33df0:	dc000015 	stw	r16,0(sp)
   33df4:	2027883a 	mov	r19,r4
   33df8:	2823883a 	mov	r17,r5
   33dfc:	20000226 	beq	r4,zero,33e08 <_fflush_r+0x2c>
   33e00:	20800e17 	ldw	r2,56(r4)
   33e04:	10005726 	beq	r2,zero,33f64 <_fflush_r+0x188>
   33e08:	8880030b 	ldhu	r2,12(r17)
   33e0c:	10c0020c 	andi	r3,r2,8
   33e10:	18ffffcc 	andi	r3,r3,65535
   33e14:	18e0001c 	xori	r3,r3,32768
   33e18:	18e00004 	addi	r3,r3,-32768
   33e1c:	1800311e 	bne	r3,zero,33ee4 <_fflush_r+0x108>
   33e20:	89000117 	ldw	r4,4(r17)
   33e24:	10c20014 	ori	r3,r2,2048
   33e28:	88c0030d 	sth	r3,12(r17)
   33e2c:	180b883a 	mov	r5,r3
   33e30:	0100520e 	bge	zero,r4,33f7c <_fflush_r+0x1a0>
   33e34:	88c00a17 	ldw	r3,40(r17)
   33e38:	18002226 	beq	r3,zero,33ec4 <_fflush_r+0xe8>
   33e3c:	1084000c 	andi	r2,r2,4096
   33e40:	10bfffcc 	andi	r2,r2,65535
   33e44:	10a0001c 	xori	r2,r2,32768
   33e48:	10a00004 	addi	r2,r2,-32768
   33e4c:	10004e26 	beq	r2,zero,33f88 <_fflush_r+0x1ac>
   33e50:	8c001417 	ldw	r16,80(r17)
   33e54:	2940010c 	andi	r5,r5,4
   33e58:	297fffcc 	andi	r5,r5,65535
   33e5c:	2960001c 	xori	r5,r5,32768
   33e60:	29600004 	addi	r5,r5,-32768
   33e64:	28000626 	beq	r5,zero,33e80 <_fflush_r+0xa4>
   33e68:	89000117 	ldw	r4,4(r17)
   33e6c:	88800c17 	ldw	r2,48(r17)
   33e70:	8121c83a 	sub	r16,r16,r4
   33e74:	10000226 	beq	r2,zero,33e80 <_fflush_r+0xa4>
   33e78:	88800f17 	ldw	r2,60(r17)
   33e7c:	80a1c83a 	sub	r16,r16,r2
   33e80:	89400717 	ldw	r5,28(r17)
   33e84:	9809883a 	mov	r4,r19
   33e88:	800d883a 	mov	r6,r16
   33e8c:	000f883a 	mov	r7,zero
   33e90:	183ee83a 	callr	r3
   33e94:	8080281e 	bne	r16,r2,33f38 <_fflush_r+0x15c>
   33e98:	8880030b 	ldhu	r2,12(r17)
   33e9c:	88c00417 	ldw	r3,16(r17)
   33ea0:	88000115 	stw	zero,4(r17)
   33ea4:	113dffcc 	andi	r4,r2,63487
   33ea8:	1084000c 	andi	r2,r2,4096
   33eac:	10bfffcc 	andi	r2,r2,65535
   33eb0:	10a0001c 	xori	r2,r2,32768
   33eb4:	8900030d 	sth	r4,12(r17)
   33eb8:	88c00015 	stw	r3,0(r17)
   33ebc:	10a00004 	addi	r2,r2,-32768
   33ec0:	10002c1e 	bne	r2,zero,33f74 <_fflush_r+0x198>
   33ec4:	0005883a 	mov	r2,zero
   33ec8:	dfc00417 	ldw	ra,16(sp)
   33ecc:	dcc00317 	ldw	r19,12(sp)
   33ed0:	dc800217 	ldw	r18,8(sp)
   33ed4:	dc400117 	ldw	r17,4(sp)
   33ed8:	dc000017 	ldw	r16,0(sp)
   33edc:	dec00504 	addi	sp,sp,20
   33ee0:	f800283a 	ret
   33ee4:	8c800417 	ldw	r18,16(r17)
   33ee8:	903ff626 	beq	r18,zero,33ec4 <_fflush_r+0xe8>
   33eec:	8c000017 	ldw	r16,0(r17)
   33ef0:	108000cc 	andi	r2,r2,3
   33ef4:	8c800015 	stw	r18,0(r17)
   33ef8:	84a1c83a 	sub	r16,r16,r18
   33efc:	10001b1e 	bne	r2,zero,33f6c <_fflush_r+0x190>
   33f00:	88800517 	ldw	r2,20(r17)
   33f04:	88800215 	stw	r2,8(r17)
   33f08:	04000316 	blt	zero,r16,33f18 <_fflush_r+0x13c>
   33f0c:	003fed06 	br	33ec4 <_fflush_r+0xe8>
   33f10:	90a5883a 	add	r18,r18,r2
   33f14:	043feb0e 	bge	zero,r16,33ec4 <_fflush_r+0xe8>
   33f18:	88800917 	ldw	r2,36(r17)
   33f1c:	89400717 	ldw	r5,28(r17)
   33f20:	800f883a 	mov	r7,r16
   33f24:	900d883a 	mov	r6,r18
   33f28:	9809883a 	mov	r4,r19
   33f2c:	103ee83a 	callr	r2
   33f30:	80a1c83a 	sub	r16,r16,r2
   33f34:	00bff616 	blt	zero,r2,33f10 <_fflush_r+0x134>
   33f38:	88c0030b 	ldhu	r3,12(r17)
   33f3c:	00bfffc4 	movi	r2,-1
   33f40:	18c01014 	ori	r3,r3,64
   33f44:	88c0030d 	sth	r3,12(r17)
   33f48:	dfc00417 	ldw	ra,16(sp)
   33f4c:	dcc00317 	ldw	r19,12(sp)
   33f50:	dc800217 	ldw	r18,8(sp)
   33f54:	dc400117 	ldw	r17,4(sp)
   33f58:	dc000017 	ldw	r16,0(sp)
   33f5c:	dec00504 	addi	sp,sp,20
   33f60:	f800283a 	ret
   33f64:	00340980 	call	34098 <__sinit>
   33f68:	003fa706 	br	33e08 <_fflush_r+0x2c>
   33f6c:	0005883a 	mov	r2,zero
   33f70:	003fe406 	br	33f04 <_fflush_r+0x128>
   33f74:	8c001415 	stw	r16,80(r17)
   33f78:	003fd206 	br	33ec4 <_fflush_r+0xe8>
   33f7c:	88c00f17 	ldw	r3,60(r17)
   33f80:	00ffac16 	blt	zero,r3,33e34 <_fflush_r+0x58>
   33f84:	003fcf06 	br	33ec4 <_fflush_r+0xe8>
   33f88:	89400717 	ldw	r5,28(r17)
   33f8c:	9809883a 	mov	r4,r19
   33f90:	000d883a 	mov	r6,zero
   33f94:	01c00044 	movi	r7,1
   33f98:	183ee83a 	callr	r3
   33f9c:	1021883a 	mov	r16,r2
   33fa0:	00bfffc4 	movi	r2,-1
   33fa4:	80800326 	beq	r16,r2,33fb4 <_fflush_r+0x1d8>
   33fa8:	8940030b 	ldhu	r5,12(r17)
   33fac:	88c00a17 	ldw	r3,40(r17)
   33fb0:	003fa806 	br	33e54 <_fflush_r+0x78>
   33fb4:	98c00017 	ldw	r3,0(r19)
   33fb8:	00800744 	movi	r2,29
   33fbc:	18bfde1e 	bne	r3,r2,33f38 <_fflush_r+0x15c>
   33fc0:	003fc006 	br	33ec4 <_fflush_r+0xe8>

00033fc4 <fflush>:
   33fc4:	200b883a 	mov	r5,r4
   33fc8:	20000426 	beq	r4,zero,33fdc <fflush+0x18>
   33fcc:	00800034 	movhi	r2,0
   33fd0:	10875f04 	addi	r2,r2,7548
   33fd4:	11000017 	ldw	r4,0(r2)
   33fd8:	0033ddc1 	jmpi	33ddc <_fflush_r>
   33fdc:	00800034 	movhi	r2,0
   33fe0:	10875e04 	addi	r2,r2,7544
   33fe4:	11000017 	ldw	r4,0(r2)
   33fe8:	014000f4 	movhi	r5,3
   33fec:	294f7704 	addi	r5,r5,15836
   33ff0:	0034c781 	jmpi	34c78 <_fwalk_reent>

00033ff4 <__fp_lock>:
   33ff4:	0005883a 	mov	r2,zero
   33ff8:	f800283a 	ret

00033ffc <__fp_unlock>:
   33ffc:	0005883a 	mov	r2,zero
   34000:	f800283a 	ret

00034004 <_cleanup_r>:
   34004:	014000f4 	movhi	r5,3
   34008:	295dea04 	addi	r5,r5,30632
   3400c:	0034bd01 	jmpi	34bd0 <_fwalk>

00034010 <__sfmoreglue>:
   34010:	defffc04 	addi	sp,sp,-16
   34014:	dc800215 	stw	r18,8(sp)
   34018:	2825883a 	mov	r18,r5
   3401c:	dc000015 	stw	r16,0(sp)
   34020:	01401704 	movi	r5,92
   34024:	2021883a 	mov	r16,r4
   34028:	9009883a 	mov	r4,r18
   3402c:	dfc00315 	stw	ra,12(sp)
   34030:	dc400115 	stw	r17,4(sp)
   34034:	00394480 	call	39448 <__mulsi3>
   34038:	8009883a 	mov	r4,r16
   3403c:	11400304 	addi	r5,r2,12
   34040:	1023883a 	mov	r17,r2
   34044:	0034fb40 	call	34fb4 <_malloc_r>
   34048:	1021883a 	mov	r16,r2
   3404c:	10000726 	beq	r2,zero,3406c <__sfmoreglue+0x5c>
   34050:	11000304 	addi	r4,r2,12
   34054:	10000015 	stw	zero,0(r2)
   34058:	14800115 	stw	r18,4(r2)
   3405c:	11000215 	stw	r4,8(r2)
   34060:	000b883a 	mov	r5,zero
   34064:	880d883a 	mov	r6,r17
   34068:	0035afc0 	call	35afc <memset>
   3406c:	8005883a 	mov	r2,r16
   34070:	dfc00317 	ldw	ra,12(sp)
   34074:	dc800217 	ldw	r18,8(sp)
   34078:	dc400117 	ldw	r17,4(sp)
   3407c:	dc000017 	ldw	r16,0(sp)
   34080:	dec00404 	addi	sp,sp,16
   34084:	f800283a 	ret

00034088 <_cleanup>:
   34088:	00800034 	movhi	r2,0
   3408c:	10875e04 	addi	r2,r2,7544
   34090:	11000017 	ldw	r4,0(r2)
   34094:	00340041 	jmpi	34004 <_cleanup_r>

00034098 <__sinit>:
   34098:	20800e17 	ldw	r2,56(r4)
   3409c:	1000401e 	bne	r2,zero,341a0 <__sinit+0x108>
   340a0:	21400117 	ldw	r5,4(r4)
   340a4:	018000f4 	movhi	r6,3
   340a8:	31900104 	addi	r6,r6,16388
   340ac:	20c00217 	ldw	r3,8(r4)
   340b0:	21800f15 	stw	r6,60(r4)
   340b4:	2080bb04 	addi	r2,r4,748
   340b8:	02400044 	movi	r9,1
   340bc:	018000c4 	movi	r6,3
   340c0:	2180b915 	stw	r6,740(r4)
   340c4:	2080ba15 	stw	r2,744(r4)
   340c8:	22400e15 	stw	r9,56(r4)
   340cc:	20800317 	ldw	r2,12(r4)
   340d0:	2000b815 	stw	zero,736(r4)
   340d4:	020000f4 	movhi	r8,3
   340d8:	421cbb04 	addi	r8,r8,29420
   340dc:	01c000f4 	movhi	r7,3
   340e0:	39dcd004 	addi	r7,r7,29504
   340e4:	018000f4 	movhi	r6,3
   340e8:	319cf204 	addi	r6,r6,29640
   340ec:	010000f4 	movhi	r4,3
   340f0:	211d0904 	addi	r4,r4,29732
   340f4:	02800104 	movi	r10,4
   340f8:	28000015 	stw	zero,0(r5)
   340fc:	28000115 	stw	zero,4(r5)
   34100:	28000215 	stw	zero,8(r5)
   34104:	2a80030d 	sth	r10,12(r5)
   34108:	2800038d 	sth	zero,14(r5)
   3410c:	28000415 	stw	zero,16(r5)
   34110:	28000515 	stw	zero,20(r5)
   34114:	28000615 	stw	zero,24(r5)
   34118:	29400715 	stw	r5,28(r5)
   3411c:	2a000815 	stw	r8,32(r5)
   34120:	29c00915 	stw	r7,36(r5)
   34124:	29800a15 	stw	r6,40(r5)
   34128:	29000b15 	stw	r4,44(r5)
   3412c:	01400284 	movi	r5,10
   34130:	18000015 	stw	zero,0(r3)
   34134:	18000115 	stw	zero,4(r3)
   34138:	18000215 	stw	zero,8(r3)
   3413c:	1940030d 	sth	r5,12(r3)
   34140:	1a40038d 	sth	r9,14(r3)
   34144:	18000415 	stw	zero,16(r3)
   34148:	18000515 	stw	zero,20(r3)
   3414c:	18000615 	stw	zero,24(r3)
   34150:	18c00715 	stw	r3,28(r3)
   34154:	1a000815 	stw	r8,32(r3)
   34158:	19c00915 	stw	r7,36(r3)
   3415c:	19800a15 	stw	r6,40(r3)
   34160:	19000b15 	stw	r4,44(r3)
   34164:	00c00484 	movi	r3,18
   34168:	10c0030d 	sth	r3,12(r2)
   3416c:	00c00084 	movi	r3,2
   34170:	10000015 	stw	zero,0(r2)
   34174:	10000115 	stw	zero,4(r2)
   34178:	10000215 	stw	zero,8(r2)
   3417c:	10c0038d 	sth	r3,14(r2)
   34180:	10000415 	stw	zero,16(r2)
   34184:	10000515 	stw	zero,20(r2)
   34188:	10000615 	stw	zero,24(r2)
   3418c:	10800715 	stw	r2,28(r2)
   34190:	12000815 	stw	r8,32(r2)
   34194:	11c00915 	stw	r7,36(r2)
   34198:	11800a15 	stw	r6,40(r2)
   3419c:	11000b15 	stw	r4,44(r2)
   341a0:	f800283a 	ret

000341a4 <__sfp>:
   341a4:	defffc04 	addi	sp,sp,-16
   341a8:	00800034 	movhi	r2,0
   341ac:	10875e04 	addi	r2,r2,7544
   341b0:	dc400115 	stw	r17,4(sp)
   341b4:	14400017 	ldw	r17,0(r2)
   341b8:	dc800215 	stw	r18,8(sp)
   341bc:	dfc00315 	stw	ra,12(sp)
   341c0:	88800e17 	ldw	r2,56(r17)
   341c4:	dc000015 	stw	r16,0(sp)
   341c8:	2025883a 	mov	r18,r4
   341cc:	10002826 	beq	r2,zero,34270 <__sfp+0xcc>
   341d0:	8c40b804 	addi	r17,r17,736
   341d4:	043fffc4 	movi	r16,-1
   341d8:	89400117 	ldw	r5,4(r17)
   341dc:	88800217 	ldw	r2,8(r17)
   341e0:	297fffc4 	addi	r5,r5,-1
   341e4:	28000a16 	blt	r5,zero,34210 <__sfp+0x6c>
   341e8:	10c0030f 	ldh	r3,12(r2)
   341ec:	18000c26 	beq	r3,zero,34220 <__sfp+0x7c>
   341f0:	10c01a04 	addi	r3,r2,104
   341f4:	00000206 	br	34200 <__sfp+0x5c>
   341f8:	19bfe90f 	ldh	r6,-92(r3)
   341fc:	30000826 	beq	r6,zero,34220 <__sfp+0x7c>
   34200:	297fffc4 	addi	r5,r5,-1
   34204:	18bffd04 	addi	r2,r3,-12
   34208:	18c01704 	addi	r3,r3,92
   3420c:	2c3ffa1e 	bne	r5,r16,341f8 <__sfp+0x54>
   34210:	88800017 	ldw	r2,0(r17)
   34214:	10001926 	beq	r2,zero,3427c <__sfp+0xd8>
   34218:	1023883a 	mov	r17,r2
   3421c:	003fee06 	br	341d8 <__sfp+0x34>
   34220:	00ffffc4 	movi	r3,-1
   34224:	10c0038d 	sth	r3,14(r2)
   34228:	00c00044 	movi	r3,1
   3422c:	10c0030d 	sth	r3,12(r2)
   34230:	10000015 	stw	zero,0(r2)
   34234:	10000215 	stw	zero,8(r2)
   34238:	10000115 	stw	zero,4(r2)
   3423c:	10000415 	stw	zero,16(r2)
   34240:	10000515 	stw	zero,20(r2)
   34244:	10000615 	stw	zero,24(r2)
   34248:	10000c15 	stw	zero,48(r2)
   3424c:	10000d15 	stw	zero,52(r2)
   34250:	10001115 	stw	zero,68(r2)
   34254:	10001215 	stw	zero,72(r2)
   34258:	dfc00317 	ldw	ra,12(sp)
   3425c:	dc800217 	ldw	r18,8(sp)
   34260:	dc400117 	ldw	r17,4(sp)
   34264:	dc000017 	ldw	r16,0(sp)
   34268:	dec00404 	addi	sp,sp,16
   3426c:	f800283a 	ret
   34270:	8809883a 	mov	r4,r17
   34274:	00340980 	call	34098 <__sinit>
   34278:	003fd506 	br	341d0 <__sfp+0x2c>
   3427c:	9009883a 	mov	r4,r18
   34280:	01400104 	movi	r5,4
   34284:	00340100 	call	34010 <__sfmoreglue>
   34288:	88800015 	stw	r2,0(r17)
   3428c:	103fe21e 	bne	r2,zero,34218 <__sfp+0x74>
   34290:	00800304 	movi	r2,12
   34294:	90800015 	stw	r2,0(r18)
   34298:	0005883a 	mov	r2,zero
   3429c:	003fee06 	br	34258 <__sfp+0xb4>

000342a0 <__sfp_lock_acquire>:
   342a0:	f800283a 	ret

000342a4 <__sfp_lock_release>:
   342a4:	f800283a 	ret

000342a8 <__sinit_lock_acquire>:
   342a8:	f800283a 	ret

000342ac <__sinit_lock_release>:
   342ac:	f800283a 	ret

000342b0 <__fp_lock_all>:
   342b0:	00800034 	movhi	r2,0
   342b4:	10875f04 	addi	r2,r2,7548
   342b8:	11000017 	ldw	r4,0(r2)
   342bc:	014000f4 	movhi	r5,3
   342c0:	294ffd04 	addi	r5,r5,16372
   342c4:	0034bd01 	jmpi	34bd0 <_fwalk>

000342c8 <__fp_unlock_all>:
   342c8:	00800034 	movhi	r2,0
   342cc:	10875f04 	addi	r2,r2,7548
   342d0:	11000017 	ldw	r4,0(r2)
   342d4:	014000f4 	movhi	r5,3
   342d8:	294fff04 	addi	r5,r5,16380
   342dc:	0034bd01 	jmpi	34bd0 <_fwalk>

000342e0 <_malloc_trim_r>:
   342e0:	defffb04 	addi	sp,sp,-20
   342e4:	dcc00315 	stw	r19,12(sp)
   342e8:	dc800215 	stw	r18,8(sp)
   342ec:	dc400115 	stw	r17,4(sp)
   342f0:	dc000015 	stw	r16,0(sp)
   342f4:	2827883a 	mov	r19,r5
   342f8:	dfc00415 	stw	ra,16(sp)
   342fc:	04400034 	movhi	r17,0
   34300:	8c41da04 	addi	r17,r17,1896
   34304:	2021883a 	mov	r16,r4
   34308:	003a0700 	call	3a070 <__malloc_lock>
   3430c:	88800217 	ldw	r2,8(r17)
   34310:	14800117 	ldw	r18,4(r2)
   34314:	00bfff04 	movi	r2,-4
   34318:	90a4703a 	and	r18,r18,r2
   3431c:	9083fbc4 	addi	r2,r18,4079
   34320:	14e7c83a 	sub	r19,r2,r19
   34324:	9826d33a 	srli	r19,r19,12
   34328:	0083ffc4 	movi	r2,4095
   3432c:	9cffffc4 	addi	r19,r19,-1
   34330:	9826933a 	slli	r19,r19,12
   34334:	14c0060e 	bge	r2,r19,34350 <_malloc_trim_r+0x70>
   34338:	8009883a 	mov	r4,r16
   3433c:	000b883a 	mov	r5,zero
   34340:	00372880 	call	37288 <_sbrk_r>
   34344:	88c00217 	ldw	r3,8(r17)
   34348:	1c87883a 	add	r3,r3,r18
   3434c:	10c00a26 	beq	r2,r3,34378 <_malloc_trim_r+0x98>
   34350:	8009883a 	mov	r4,r16
   34354:	003a0900 	call	3a090 <__malloc_unlock>
   34358:	0005883a 	mov	r2,zero
   3435c:	dfc00417 	ldw	ra,16(sp)
   34360:	dcc00317 	ldw	r19,12(sp)
   34364:	dc800217 	ldw	r18,8(sp)
   34368:	dc400117 	ldw	r17,4(sp)
   3436c:	dc000017 	ldw	r16,0(sp)
   34370:	dec00504 	addi	sp,sp,20
   34374:	f800283a 	ret
   34378:	8009883a 	mov	r4,r16
   3437c:	04cbc83a 	sub	r5,zero,r19
   34380:	00372880 	call	37288 <_sbrk_r>
   34384:	00ffffc4 	movi	r3,-1
   34388:	10c01326 	beq	r2,r3,343d8 <_malloc_trim_r+0xf8>
   3438c:	00800034 	movhi	r2,0
   34390:	10877a04 	addi	r2,r2,7656
   34394:	11000017 	ldw	r4,0(r2)
   34398:	88c00217 	ldw	r3,8(r17)
   3439c:	94e5c83a 	sub	r18,r18,r19
   343a0:	94800054 	ori	r18,r18,1
   343a4:	24e7c83a 	sub	r19,r4,r19
   343a8:	1c800115 	stw	r18,4(r3)
   343ac:	8009883a 	mov	r4,r16
   343b0:	14c00015 	stw	r19,0(r2)
   343b4:	003a0900 	call	3a090 <__malloc_unlock>
   343b8:	00800044 	movi	r2,1
   343bc:	dfc00417 	ldw	ra,16(sp)
   343c0:	dcc00317 	ldw	r19,12(sp)
   343c4:	dc800217 	ldw	r18,8(sp)
   343c8:	dc400117 	ldw	r17,4(sp)
   343cc:	dc000017 	ldw	r16,0(sp)
   343d0:	dec00504 	addi	sp,sp,20
   343d4:	f800283a 	ret
   343d8:	8009883a 	mov	r4,r16
   343dc:	000b883a 	mov	r5,zero
   343e0:	00372880 	call	37288 <_sbrk_r>
   343e4:	88c00217 	ldw	r3,8(r17)
   343e8:	014003c4 	movi	r5,15
   343ec:	10c9c83a 	sub	r4,r2,r3
   343f0:	293fd70e 	bge	r5,r4,34350 <_malloc_trim_r+0x70>
   343f4:	01400034 	movhi	r5,0
   343f8:	29476104 	addi	r5,r5,7556
   343fc:	29400017 	ldw	r5,0(r5)
   34400:	21000054 	ori	r4,r4,1
   34404:	19000115 	stw	r4,4(r3)
   34408:	1145c83a 	sub	r2,r2,r5
   3440c:	01400034 	movhi	r5,0
   34410:	29477a04 	addi	r5,r5,7656
   34414:	28800015 	stw	r2,0(r5)
   34418:	003fcd06 	br	34350 <_malloc_trim_r+0x70>

0003441c <_free_r>:
   3441c:	defffd04 	addi	sp,sp,-12
   34420:	dc400115 	stw	r17,4(sp)
   34424:	dc000015 	stw	r16,0(sp)
   34428:	dfc00215 	stw	ra,8(sp)
   3442c:	2821883a 	mov	r16,r5
   34430:	2023883a 	mov	r17,r4
   34434:	28004b26 	beq	r5,zero,34564 <_free_r+0x148>
   34438:	003a0700 	call	3a070 <__malloc_lock>
   3443c:	823fff17 	ldw	r8,-4(r16)
   34440:	00bfff84 	movi	r2,-2
   34444:	81bffe04 	addi	r6,r16,-8
   34448:	4084703a 	and	r2,r8,r2
   3444c:	3087883a 	add	r3,r6,r2
   34450:	01400034 	movhi	r5,0
   34454:	2941da04 	addi	r5,r5,1896
   34458:	1a400117 	ldw	r9,4(r3)
   3445c:	29000217 	ldw	r4,8(r5)
   34460:	01ffff04 	movi	r7,-4
   34464:	49ce703a 	and	r7,r9,r7
   34468:	20c06526 	beq	r4,r3,34600 <_free_r+0x1e4>
   3446c:	19c00115 	stw	r7,4(r3)
   34470:	4200004c 	andi	r8,r8,1
   34474:	40003026 	beq	r8,zero,34538 <_free_r+0x11c>
   34478:	0009883a 	mov	r4,zero
   3447c:	19d1883a 	add	r8,r3,r7
   34480:	42000117 	ldw	r8,4(r8)
   34484:	4200004c 	andi	r8,r8,1
   34488:	4000061e 	bne	r8,zero,344a4 <_free_r+0x88>
   3448c:	11c5883a 	add	r2,r2,r7
   34490:	19c00217 	ldw	r7,8(r3)
   34494:	20004e26 	beq	r4,zero,345d0 <_free_r+0x1b4>
   34498:	18c00317 	ldw	r3,12(r3)
   3449c:	38c00315 	stw	r3,12(r7)
   344a0:	19c00215 	stw	r7,8(r3)
   344a4:	11c00054 	ori	r7,r2,1
   344a8:	3087883a 	add	r3,r6,r2
   344ac:	31c00115 	stw	r7,4(r6)
   344b0:	18800015 	stw	r2,0(r3)
   344b4:	20001a1e 	bne	r4,zero,34520 <_free_r+0x104>
   344b8:	00c07fc4 	movi	r3,511
   344bc:	18802e2e 	bgeu	r3,r2,34578 <_free_r+0x15c>
   344c0:	1006d27a 	srli	r3,r2,9
   344c4:	01000104 	movi	r4,4
   344c8:	20c06636 	bltu	r4,r3,34664 <_free_r+0x248>
   344cc:	1008d1ba 	srli	r4,r2,6
   344d0:	21000e04 	addi	r4,r4,56
   344d4:	210f883a 	add	r7,r4,r4
   344d8:	39cf883a 	add	r7,r7,r7
   344dc:	39cf883a 	add	r7,r7,r7
   344e0:	29cf883a 	add	r7,r5,r7
   344e4:	38c00217 	ldw	r3,8(r7)
   344e8:	01400034 	movhi	r5,0
   344ec:	2941da04 	addi	r5,r5,1896
   344f0:	19c06126 	beq	r3,r7,34678 <_free_r+0x25c>
   344f4:	013fff04 	movi	r4,-4
   344f8:	19400117 	ldw	r5,4(r3)
   344fc:	290a703a 	and	r5,r5,r4
   34500:	1140022e 	bgeu	r2,r5,3450c <_free_r+0xf0>
   34504:	18c00217 	ldw	r3,8(r3)
   34508:	38fffb1e 	bne	r7,r3,344f8 <_free_r+0xdc>
   3450c:	18800317 	ldw	r2,12(r3)
   34510:	30800315 	stw	r2,12(r6)
   34514:	30c00215 	stw	r3,8(r6)
   34518:	11800215 	stw	r6,8(r2)
   3451c:	19800315 	stw	r6,12(r3)
   34520:	8809883a 	mov	r4,r17
   34524:	dfc00217 	ldw	ra,8(sp)
   34528:	dc400117 	ldw	r17,4(sp)
   3452c:	dc000017 	ldw	r16,0(sp)
   34530:	dec00304 	addi	sp,sp,12
   34534:	003a0901 	jmpi	3a090 <__malloc_unlock>
   34538:	813ffe17 	ldw	r4,-8(r16)
   3453c:	2a400204 	addi	r9,r5,8
   34540:	310dc83a 	sub	r6,r6,r4
   34544:	32000217 	ldw	r8,8(r6)
   34548:	1105883a 	add	r2,r2,r4
   3454c:	42404326 	beq	r8,r9,3465c <_free_r+0x240>
   34550:	32400317 	ldw	r9,12(r6)
   34554:	0009883a 	mov	r4,zero
   34558:	42400315 	stw	r9,12(r8)
   3455c:	4a000215 	stw	r8,8(r9)
   34560:	003fc606 	br	3447c <_free_r+0x60>
   34564:	dfc00217 	ldw	ra,8(sp)
   34568:	dc400117 	ldw	r17,4(sp)
   3456c:	dc000017 	ldw	r16,0(sp)
   34570:	dec00304 	addi	sp,sp,12
   34574:	f800283a 	ret
   34578:	1004d0fa 	srli	r2,r2,3
   3457c:	02000044 	movi	r8,1
   34580:	29c00117 	ldw	r7,4(r5)
   34584:	1087883a 	add	r3,r2,r2
   34588:	18c7883a 	add	r3,r3,r3
   3458c:	1005d0ba 	srai	r2,r2,2
   34590:	18c7883a 	add	r3,r3,r3
   34594:	28c7883a 	add	r3,r5,r3
   34598:	19000217 	ldw	r4,8(r3)
   3459c:	4084983a 	sll	r2,r8,r2
   345a0:	30c00315 	stw	r3,12(r6)
   345a4:	31000215 	stw	r4,8(r6)
   345a8:	11c4b03a 	or	r2,r2,r7
   345ac:	21800315 	stw	r6,12(r4)
   345b0:	8809883a 	mov	r4,r17
   345b4:	28800115 	stw	r2,4(r5)
   345b8:	19800215 	stw	r6,8(r3)
   345bc:	dfc00217 	ldw	ra,8(sp)
   345c0:	dc400117 	ldw	r17,4(sp)
   345c4:	dc000017 	ldw	r16,0(sp)
   345c8:	dec00304 	addi	sp,sp,12
   345cc:	003a0901 	jmpi	3a090 <__malloc_unlock>
   345d0:	02000034 	movhi	r8,0
   345d4:	4201dc04 	addi	r8,r8,1904
   345d8:	3a3faf1e 	bne	r7,r8,34498 <_free_r+0x7c>
   345dc:	29800515 	stw	r6,20(r5)
   345e0:	29800415 	stw	r6,16(r5)
   345e4:	11000054 	ori	r4,r2,1
   345e8:	3087883a 	add	r3,r6,r2
   345ec:	31c00315 	stw	r7,12(r6)
   345f0:	31c00215 	stw	r7,8(r6)
   345f4:	31000115 	stw	r4,4(r6)
   345f8:	18800015 	stw	r2,0(r3)
   345fc:	003fc806 	br	34520 <_free_r+0x104>
   34600:	4200004c 	andi	r8,r8,1
   34604:	3885883a 	add	r2,r7,r2
   34608:	4000071e 	bne	r8,zero,34628 <_free_r+0x20c>
   3460c:	81fffe17 	ldw	r7,-8(r16)
   34610:	31cdc83a 	sub	r6,r6,r7
   34614:	30c00317 	ldw	r3,12(r6)
   34618:	31000217 	ldw	r4,8(r6)
   3461c:	11c5883a 	add	r2,r2,r7
   34620:	20c00315 	stw	r3,12(r4)
   34624:	19000215 	stw	r4,8(r3)
   34628:	00c00034 	movhi	r3,0
   3462c:	18c76204 	addi	r3,r3,7560
   34630:	18c00017 	ldw	r3,0(r3)
   34634:	11000054 	ori	r4,r2,1
   34638:	31000115 	stw	r4,4(r6)
   3463c:	29800215 	stw	r6,8(r5)
   34640:	10ffb736 	bltu	r2,r3,34520 <_free_r+0x104>
   34644:	00800034 	movhi	r2,0
   34648:	10877204 	addi	r2,r2,7624
   3464c:	11400017 	ldw	r5,0(r2)
   34650:	8809883a 	mov	r4,r17
   34654:	00342e00 	call	342e0 <_malloc_trim_r>
   34658:	003fb106 	br	34520 <_free_r+0x104>
   3465c:	01000044 	movi	r4,1
   34660:	003f8606 	br	3447c <_free_r+0x60>
   34664:	01000504 	movi	r4,20
   34668:	20c00b36 	bltu	r4,r3,34698 <_free_r+0x27c>
   3466c:	190016c4 	addi	r4,r3,91
   34670:	210f883a 	add	r7,r4,r4
   34674:	003f9806 	br	344d8 <_free_r+0xbc>
   34678:	2009d0ba 	srai	r4,r4,2
   3467c:	00800044 	movi	r2,1
   34680:	29c00117 	ldw	r7,4(r5)
   34684:	1108983a 	sll	r4,r2,r4
   34688:	1805883a 	mov	r2,r3
   3468c:	21c8b03a 	or	r4,r4,r7
   34690:	29000115 	stw	r4,4(r5)
   34694:	003f9e06 	br	34510 <_free_r+0xf4>
   34698:	01001504 	movi	r4,84
   3469c:	20c00436 	bltu	r4,r3,346b0 <_free_r+0x294>
   346a0:	1008d33a 	srli	r4,r2,12
   346a4:	21001b84 	addi	r4,r4,110
   346a8:	210f883a 	add	r7,r4,r4
   346ac:	003f8a06 	br	344d8 <_free_r+0xbc>
   346b0:	01005504 	movi	r4,340
   346b4:	20c00436 	bltu	r4,r3,346c8 <_free_r+0x2ac>
   346b8:	1008d3fa 	srli	r4,r2,15
   346bc:	21001dc4 	addi	r4,r4,119
   346c0:	210f883a 	add	r7,r4,r4
   346c4:	003f8406 	br	344d8 <_free_r+0xbc>
   346c8:	01015504 	movi	r4,1364
   346cc:	20c00436 	bltu	r4,r3,346e0 <_free_r+0x2c4>
   346d0:	1008d4ba 	srli	r4,r2,18
   346d4:	21001f04 	addi	r4,r4,124
   346d8:	210f883a 	add	r7,r4,r4
   346dc:	003f7e06 	br	344d8 <_free_r+0xbc>
   346e0:	01c03f04 	movi	r7,252
   346e4:	01001f84 	movi	r4,126
   346e8:	003f7b06 	br	344d8 <_free_r+0xbc>

000346ec <__sfvwrite_r>:
   346ec:	30800217 	ldw	r2,8(r6)
   346f0:	defff504 	addi	sp,sp,-44
   346f4:	dd400615 	stw	r21,24(sp)
   346f8:	dd000515 	stw	r20,20(sp)
   346fc:	dc000115 	stw	r16,4(sp)
   34700:	dfc00a15 	stw	ra,40(sp)
   34704:	df000915 	stw	fp,36(sp)
   34708:	ddc00815 	stw	r23,32(sp)
   3470c:	dd800715 	stw	r22,28(sp)
   34710:	dcc00415 	stw	r19,16(sp)
   34714:	dc800315 	stw	r18,12(sp)
   34718:	dc400215 	stw	r17,8(sp)
   3471c:	3029883a 	mov	r20,r6
   34720:	202b883a 	mov	r21,r4
   34724:	2821883a 	mov	r16,r5
   34728:	10002126 	beq	r2,zero,347b0 <__sfvwrite_r+0xc4>
   3472c:	2880030b 	ldhu	r2,12(r5)
   34730:	10c0020c 	andi	r3,r2,8
   34734:	18ffffcc 	andi	r3,r3,65535
   34738:	18e0001c 	xori	r3,r3,32768
   3473c:	18e00004 	addi	r3,r3,-32768
   34740:	18002826 	beq	r3,zero,347e4 <__sfvwrite_r+0xf8>
   34744:	28c00417 	ldw	r3,16(r5)
   34748:	18002626 	beq	r3,zero,347e4 <__sfvwrite_r+0xf8>
   3474c:	10c0008c 	andi	r3,r2,2
   34750:	18ffffcc 	andi	r3,r3,65535
   34754:	18e0001c 	xori	r3,r3,32768
   34758:	18e00004 	addi	r3,r3,-32768
   3475c:	a4400017 	ldw	r17,0(r20)
   34760:	18002b26 	beq	r3,zero,34810 <__sfvwrite_r+0x124>
   34764:	0027883a 	mov	r19,zero
   34768:	0025883a 	mov	r18,zero
   3476c:	05810004 	movi	r22,1024
   34770:	980d883a 	mov	r6,r19
   34774:	a809883a 	mov	r4,r21
   34778:	90004f26 	beq	r18,zero,348b8 <__sfvwrite_r+0x1cc>
   3477c:	900f883a 	mov	r7,r18
   34780:	81400717 	ldw	r5,28(r16)
   34784:	b480012e 	bgeu	r22,r18,3478c <__sfvwrite_r+0xa0>
   34788:	01c10004 	movi	r7,1024
   3478c:	80800917 	ldw	r2,36(r16)
   34790:	103ee83a 	callr	r2
   34794:	0080540e 	bge	zero,r2,348e8 <__sfvwrite_r+0x1fc>
   34798:	a0c00217 	ldw	r3,8(r20)
   3479c:	98a7883a 	add	r19,r19,r2
   347a0:	90a5c83a 	sub	r18,r18,r2
   347a4:	1885c83a 	sub	r2,r3,r2
   347a8:	a0800215 	stw	r2,8(r20)
   347ac:	103ff01e 	bne	r2,zero,34770 <__sfvwrite_r+0x84>
   347b0:	0005883a 	mov	r2,zero
   347b4:	dfc00a17 	ldw	ra,40(sp)
   347b8:	df000917 	ldw	fp,36(sp)
   347bc:	ddc00817 	ldw	r23,32(sp)
   347c0:	dd800717 	ldw	r22,28(sp)
   347c4:	dd400617 	ldw	r21,24(sp)
   347c8:	dd000517 	ldw	r20,20(sp)
   347cc:	dcc00417 	ldw	r19,16(sp)
   347d0:	dc800317 	ldw	r18,12(sp)
   347d4:	dc400217 	ldw	r17,8(sp)
   347d8:	dc000117 	ldw	r16,4(sp)
   347dc:	dec00b04 	addi	sp,sp,44
   347e0:	f800283a 	ret
   347e4:	a809883a 	mov	r4,r21
   347e8:	800b883a 	mov	r5,r16
   347ec:	00324100 	call	32410 <__swsetup_r>
   347f0:	1000f01e 	bne	r2,zero,34bb4 <__sfvwrite_r+0x4c8>
   347f4:	8080030b 	ldhu	r2,12(r16)
   347f8:	a4400017 	ldw	r17,0(r20)
   347fc:	10c0008c 	andi	r3,r2,2
   34800:	18ffffcc 	andi	r3,r3,65535
   34804:	18e0001c 	xori	r3,r3,32768
   34808:	18e00004 	addi	r3,r3,-32768
   3480c:	183fd51e 	bne	r3,zero,34764 <__sfvwrite_r+0x78>
   34810:	10c0004c 	andi	r3,r2,1
   34814:	002d883a 	mov	r22,zero
   34818:	1800381e 	bne	r3,zero,348fc <__sfvwrite_r+0x210>
   3481c:	0025883a 	mov	r18,zero
   34820:	90002126 	beq	r18,zero,348a8 <__sfvwrite_r+0x1bc>
   34824:	10c0800c 	andi	r3,r2,512
   34828:	18ffffcc 	andi	r3,r3,65535
   3482c:	18e0001c 	xori	r3,r3,32768
   34830:	18e00004 	addi	r3,r3,-32768
   34834:	84c00217 	ldw	r19,8(r16)
   34838:	18006b26 	beq	r3,zero,349e8 <__sfvwrite_r+0x2fc>
   3483c:	980f883a 	mov	r7,r19
   34840:	94c08636 	bltu	r18,r19,34a5c <__sfvwrite_r+0x370>
   34844:	10c1200c 	andi	r3,r2,1152
   34848:	18009f1e 	bne	r3,zero,34ac8 <__sfvwrite_r+0x3dc>
   3484c:	81000017 	ldw	r4,0(r16)
   34850:	982f883a 	mov	r23,r19
   34854:	9039883a 	mov	fp,r18
   34858:	9027883a 	mov	r19,r18
   3485c:	380d883a 	mov	r6,r7
   34860:	b00b883a 	mov	r5,r22
   34864:	d9c00015 	stw	r7,0(sp)
   34868:	00359700 	call	35970 <memmove>
   3486c:	d9c00017 	ldw	r7,0(sp)
   34870:	81000217 	ldw	r4,8(r16)
   34874:	80800017 	ldw	r2,0(r16)
   34878:	25efc83a 	sub	r23,r4,r23
   3487c:	11cf883a 	add	r7,r2,r7
   34880:	85c00215 	stw	r23,8(r16)
   34884:	81c00015 	stw	r7,0(r16)
   34888:	a0800217 	ldw	r2,8(r20)
   3488c:	b72d883a 	add	r22,r22,fp
   34890:	9725c83a 	sub	r18,r18,fp
   34894:	14e7c83a 	sub	r19,r2,r19
   34898:	a4c00215 	stw	r19,8(r20)
   3489c:	983fc426 	beq	r19,zero,347b0 <__sfvwrite_r+0xc4>
   348a0:	8080030b 	ldhu	r2,12(r16)
   348a4:	903fdf1e 	bne	r18,zero,34824 <__sfvwrite_r+0x138>
   348a8:	8d800017 	ldw	r22,0(r17)
   348ac:	8c800117 	ldw	r18,4(r17)
   348b0:	8c400204 	addi	r17,r17,8
   348b4:	003fda06 	br	34820 <__sfvwrite_r+0x134>
   348b8:	8cc00017 	ldw	r19,0(r17)
   348bc:	8c800117 	ldw	r18,4(r17)
   348c0:	8c400204 	addi	r17,r17,8
   348c4:	003faa06 	br	34770 <__sfvwrite_r+0x84>
   348c8:	0036c280 	call	36c28 <_realloc_r>
   348cc:	102f883a 	mov	r23,r2
   348d0:	10009f1e 	bne	r2,zero,34b50 <__sfvwrite_r+0x464>
   348d4:	81400417 	ldw	r5,16(r16)
   348d8:	a809883a 	mov	r4,r21
   348dc:	003441c0 	call	3441c <_free_r>
   348e0:	00800304 	movi	r2,12
   348e4:	a8800015 	stw	r2,0(r21)
   348e8:	80c0030b 	ldhu	r3,12(r16)
   348ec:	00bfffc4 	movi	r2,-1
   348f0:	18c01014 	ori	r3,r3,64
   348f4:	80c0030d 	sth	r3,12(r16)
   348f8:	003fae06 	br	347b4 <__sfvwrite_r+0xc8>
   348fc:	0007883a 	mov	r3,zero
   34900:	0039883a 	mov	fp,zero
   34904:	0025883a 	mov	r18,zero
   34908:	90001e26 	beq	r18,zero,34984 <__sfvwrite_r+0x298>
   3490c:	18006526 	beq	r3,zero,34aa4 <__sfvwrite_r+0x3b8>
   34910:	b02f883a 	mov	r23,r22
   34914:	9580012e 	bgeu	r18,r22,3491c <__sfvwrite_r+0x230>
   34918:	902f883a 	mov	r23,r18
   3491c:	81000017 	ldw	r4,0(r16)
   34920:	80800417 	ldw	r2,16(r16)
   34924:	84c00217 	ldw	r19,8(r16)
   34928:	81c00517 	ldw	r7,20(r16)
   3492c:	1100022e 	bgeu	r2,r4,34938 <__sfvwrite_r+0x24c>
   34930:	99e7883a 	add	r19,r19,r7
   34934:	9dc01816 	blt	r19,r23,34998 <__sfvwrite_r+0x2ac>
   34938:	b9c03b16 	blt	r23,r7,34a28 <__sfvwrite_r+0x33c>
   3493c:	80800917 	ldw	r2,36(r16)
   34940:	81400717 	ldw	r5,28(r16)
   34944:	a809883a 	mov	r4,r21
   34948:	d8c00015 	stw	r3,0(sp)
   3494c:	e00d883a 	mov	r6,fp
   34950:	103ee83a 	callr	r2
   34954:	1027883a 	mov	r19,r2
   34958:	d8c00017 	ldw	r3,0(sp)
   3495c:	00bfe20e 	bge	zero,r2,348e8 <__sfvwrite_r+0x1fc>
   34960:	b4edc83a 	sub	r22,r22,r19
   34964:	b0001a26 	beq	r22,zero,349d0 <__sfvwrite_r+0x2e4>
   34968:	a0800217 	ldw	r2,8(r20)
   3496c:	e4f9883a 	add	fp,fp,r19
   34970:	94e5c83a 	sub	r18,r18,r19
   34974:	14e7c83a 	sub	r19,r2,r19
   34978:	a4c00215 	stw	r19,8(r20)
   3497c:	983f8c26 	beq	r19,zero,347b0 <__sfvwrite_r+0xc4>
   34980:	903fe21e 	bne	r18,zero,3490c <__sfvwrite_r+0x220>
   34984:	8f000017 	ldw	fp,0(r17)
   34988:	8c800117 	ldw	r18,4(r17)
   3498c:	0007883a 	mov	r3,zero
   34990:	8c400204 	addi	r17,r17,8
   34994:	003fdc06 	br	34908 <__sfvwrite_r+0x21c>
   34998:	e00b883a 	mov	r5,fp
   3499c:	980d883a 	mov	r6,r19
   349a0:	d8c00015 	stw	r3,0(sp)
   349a4:	00359700 	call	35970 <memmove>
   349a8:	80800017 	ldw	r2,0(r16)
   349ac:	a809883a 	mov	r4,r21
   349b0:	800b883a 	mov	r5,r16
   349b4:	14c5883a 	add	r2,r2,r19
   349b8:	80800015 	stw	r2,0(r16)
   349bc:	0033ddc0 	call	33ddc <_fflush_r>
   349c0:	d8c00017 	ldw	r3,0(sp)
   349c4:	103fc81e 	bne	r2,zero,348e8 <__sfvwrite_r+0x1fc>
   349c8:	b4edc83a 	sub	r22,r22,r19
   349cc:	b03fe61e 	bne	r22,zero,34968 <__sfvwrite_r+0x27c>
   349d0:	a809883a 	mov	r4,r21
   349d4:	800b883a 	mov	r5,r16
   349d8:	0033ddc0 	call	33ddc <_fflush_r>
   349dc:	103fc21e 	bne	r2,zero,348e8 <__sfvwrite_r+0x1fc>
   349e0:	0007883a 	mov	r3,zero
   349e4:	003fe006 	br	34968 <__sfvwrite_r+0x27c>
   349e8:	81000017 	ldw	r4,0(r16)
   349ec:	80800417 	ldw	r2,16(r16)
   349f0:	1100022e 	bgeu	r2,r4,349fc <__sfvwrite_r+0x310>
   349f4:	9839883a 	mov	fp,r19
   349f8:	9c806036 	bltu	r19,r18,34b7c <__sfvwrite_r+0x490>
   349fc:	81c00517 	ldw	r7,20(r16)
   34a00:	91c01c36 	bltu	r18,r7,34a74 <__sfvwrite_r+0x388>
   34a04:	80800917 	ldw	r2,36(r16)
   34a08:	81400717 	ldw	r5,28(r16)
   34a0c:	a809883a 	mov	r4,r21
   34a10:	b00d883a 	mov	r6,r22
   34a14:	103ee83a 	callr	r2
   34a18:	1027883a 	mov	r19,r2
   34a1c:	00bfb20e 	bge	zero,r2,348e8 <__sfvwrite_r+0x1fc>
   34a20:	1039883a 	mov	fp,r2
   34a24:	003f9806 	br	34888 <__sfvwrite_r+0x19c>
   34a28:	b80d883a 	mov	r6,r23
   34a2c:	e00b883a 	mov	r5,fp
   34a30:	d8c00015 	stw	r3,0(sp)
   34a34:	00359700 	call	35970 <memmove>
   34a38:	80800217 	ldw	r2,8(r16)
   34a3c:	81000017 	ldw	r4,0(r16)
   34a40:	b827883a 	mov	r19,r23
   34a44:	15c5c83a 	sub	r2,r2,r23
   34a48:	25ef883a 	add	r23,r4,r23
   34a4c:	80800215 	stw	r2,8(r16)
   34a50:	85c00015 	stw	r23,0(r16)
   34a54:	d8c00017 	ldw	r3,0(sp)
   34a58:	003fc106 	br	34960 <__sfvwrite_r+0x274>
   34a5c:	81000017 	ldw	r4,0(r16)
   34a60:	902f883a 	mov	r23,r18
   34a64:	9039883a 	mov	fp,r18
   34a68:	9027883a 	mov	r19,r18
   34a6c:	900f883a 	mov	r7,r18
   34a70:	003f7a06 	br	3485c <__sfvwrite_r+0x170>
   34a74:	b00b883a 	mov	r5,r22
   34a78:	900d883a 	mov	r6,r18
   34a7c:	00359700 	call	35970 <memmove>
   34a80:	80c00217 	ldw	r3,8(r16)
   34a84:	80800017 	ldw	r2,0(r16)
   34a88:	9027883a 	mov	r19,r18
   34a8c:	1c87c83a 	sub	r3,r3,r18
   34a90:	1485883a 	add	r2,r2,r18
   34a94:	80c00215 	stw	r3,8(r16)
   34a98:	80800015 	stw	r2,0(r16)
   34a9c:	9039883a 	mov	fp,r18
   34aa0:	003f7906 	br	34888 <__sfvwrite_r+0x19c>
   34aa4:	e009883a 	mov	r4,fp
   34aa8:	01400284 	movi	r5,10
   34aac:	900d883a 	mov	r6,r18
   34ab0:	00357380 	call	35738 <memchr>
   34ab4:	10003c26 	beq	r2,zero,34ba8 <__sfvwrite_r+0x4bc>
   34ab8:	15800044 	addi	r22,r2,1
   34abc:	b72dc83a 	sub	r22,r22,fp
   34ac0:	00c00044 	movi	r3,1
   34ac4:	003f9206 	br	34910 <__sfvwrite_r+0x224>
   34ac8:	81000517 	ldw	r4,20(r16)
   34acc:	81400417 	ldw	r5,16(r16)
   34ad0:	80c00017 	ldw	r3,0(r16)
   34ad4:	210d883a 	add	r6,r4,r4
   34ad8:	3109883a 	add	r4,r6,r4
   34adc:	2026d7fa 	srli	r19,r4,31
   34ae0:	1979c83a 	sub	fp,r3,r5
   34ae4:	e1800044 	addi	r6,fp,1
   34ae8:	9909883a 	add	r4,r19,r4
   34aec:	2027d07a 	srai	r19,r4,1
   34af0:	3489883a 	add	r4,r6,r18
   34af4:	980d883a 	mov	r6,r19
   34af8:	9900022e 	bgeu	r19,r4,34b04 <__sfvwrite_r+0x418>
   34afc:	2027883a 	mov	r19,r4
   34b00:	200d883a 	mov	r6,r4
   34b04:	1081000c 	andi	r2,r2,1024
   34b08:	10bfffcc 	andi	r2,r2,65535
   34b0c:	10a0001c 	xori	r2,r2,32768
   34b10:	10a00004 	addi	r2,r2,-32768
   34b14:	a809883a 	mov	r4,r21
   34b18:	103f6b26 	beq	r2,zero,348c8 <__sfvwrite_r+0x1dc>
   34b1c:	300b883a 	mov	r5,r6
   34b20:	0034fb40 	call	34fb4 <_malloc_r>
   34b24:	102f883a 	mov	r23,r2
   34b28:	103f6d26 	beq	r2,zero,348e0 <__sfvwrite_r+0x1f4>
   34b2c:	81400417 	ldw	r5,16(r16)
   34b30:	1009883a 	mov	r4,r2
   34b34:	e00d883a 	mov	r6,fp
   34b38:	00358300 	call	35830 <memcpy>
   34b3c:	8080030b 	ldhu	r2,12(r16)
   34b40:	00fedfc4 	movi	r3,-1153
   34b44:	10c4703a 	and	r2,r2,r3
   34b48:	10802014 	ori	r2,r2,128
   34b4c:	8080030d 	sth	r2,12(r16)
   34b50:	bf09883a 	add	r4,r23,fp
   34b54:	9f07c83a 	sub	r3,r19,fp
   34b58:	85c00415 	stw	r23,16(r16)
   34b5c:	84c00515 	stw	r19,20(r16)
   34b60:	81000015 	stw	r4,0(r16)
   34b64:	902f883a 	mov	r23,r18
   34b68:	80c00215 	stw	r3,8(r16)
   34b6c:	9039883a 	mov	fp,r18
   34b70:	9027883a 	mov	r19,r18
   34b74:	900f883a 	mov	r7,r18
   34b78:	003f3806 	br	3485c <__sfvwrite_r+0x170>
   34b7c:	b00b883a 	mov	r5,r22
   34b80:	980d883a 	mov	r6,r19
   34b84:	00359700 	call	35970 <memmove>
   34b88:	80800017 	ldw	r2,0(r16)
   34b8c:	a809883a 	mov	r4,r21
   34b90:	800b883a 	mov	r5,r16
   34b94:	14c5883a 	add	r2,r2,r19
   34b98:	80800015 	stw	r2,0(r16)
   34b9c:	0033ddc0 	call	33ddc <_fflush_r>
   34ba0:	103f3926 	beq	r2,zero,34888 <__sfvwrite_r+0x19c>
   34ba4:	003f5006 	br	348e8 <__sfvwrite_r+0x1fc>
   34ba8:	95800044 	addi	r22,r18,1
   34bac:	00c00044 	movi	r3,1
   34bb0:	003f5706 	br	34910 <__sfvwrite_r+0x224>
   34bb4:	80c0030b 	ldhu	r3,12(r16)
   34bb8:	00bfffc4 	movi	r2,-1
   34bbc:	18c01014 	ori	r3,r3,64
   34bc0:	80c0030d 	sth	r3,12(r16)
   34bc4:	00c00244 	movi	r3,9
   34bc8:	a8c00015 	stw	r3,0(r21)
   34bcc:	003ef906 	br	347b4 <__sfvwrite_r+0xc8>

00034bd0 <_fwalk>:
   34bd0:	defff904 	addi	sp,sp,-28
   34bd4:	dcc00315 	stw	r19,12(sp)
   34bd8:	24c0b804 	addi	r19,r4,736
   34bdc:	dd400515 	stw	r21,20(sp)
   34be0:	dd000415 	stw	r20,16(sp)
   34be4:	dfc00615 	stw	ra,24(sp)
   34be8:	dc800215 	stw	r18,8(sp)
   34bec:	dc400115 	stw	r17,4(sp)
   34bf0:	dc000015 	stw	r16,0(sp)
   34bf4:	282b883a 	mov	r21,r5
   34bf8:	0029883a 	mov	r20,zero
   34bfc:	00342a00 	call	342a0 <__sfp_lock_acquire>
   34c00:	98001226 	beq	r19,zero,34c4c <_fwalk+0x7c>
   34c04:	04bfffc4 	movi	r18,-1
   34c08:	9c400117 	ldw	r17,4(r19)
   34c0c:	9c000217 	ldw	r16,8(r19)
   34c10:	8c7fffc4 	addi	r17,r17,-1
   34c14:	88000b16 	blt	r17,zero,34c44 <_fwalk+0x74>
   34c18:	84000304 	addi	r16,r16,12
   34c1c:	80c0000f 	ldh	r3,0(r16)
   34c20:	8c7fffc4 	addi	r17,r17,-1
   34c24:	813ffd04 	addi	r4,r16,-12
   34c28:	18000426 	beq	r3,zero,34c3c <_fwalk+0x6c>
   34c2c:	80c0008f 	ldh	r3,2(r16)
   34c30:	1c800226 	beq	r3,r18,34c3c <_fwalk+0x6c>
   34c34:	a83ee83a 	callr	r21
   34c38:	a0a8b03a 	or	r20,r20,r2
   34c3c:	84001704 	addi	r16,r16,92
   34c40:	8cbff61e 	bne	r17,r18,34c1c <_fwalk+0x4c>
   34c44:	9cc00017 	ldw	r19,0(r19)
   34c48:	983fef1e 	bne	r19,zero,34c08 <_fwalk+0x38>
   34c4c:	00342a40 	call	342a4 <__sfp_lock_release>
   34c50:	a005883a 	mov	r2,r20
   34c54:	dfc00617 	ldw	ra,24(sp)
   34c58:	dd400517 	ldw	r21,20(sp)
   34c5c:	dd000417 	ldw	r20,16(sp)
   34c60:	dcc00317 	ldw	r19,12(sp)
   34c64:	dc800217 	ldw	r18,8(sp)
   34c68:	dc400117 	ldw	r17,4(sp)
   34c6c:	dc000017 	ldw	r16,0(sp)
   34c70:	dec00704 	addi	sp,sp,28
   34c74:	f800283a 	ret

00034c78 <_fwalk_reent>:
   34c78:	defff804 	addi	sp,sp,-32
   34c7c:	dcc00315 	stw	r19,12(sp)
   34c80:	24c0b804 	addi	r19,r4,736
   34c84:	dd800615 	stw	r22,24(sp)
   34c88:	dd400515 	stw	r21,20(sp)
   34c8c:	dd000415 	stw	r20,16(sp)
   34c90:	dfc00715 	stw	ra,28(sp)
   34c94:	dc800215 	stw	r18,8(sp)
   34c98:	dc400115 	stw	r17,4(sp)
   34c9c:	dc000015 	stw	r16,0(sp)
   34ca0:	2029883a 	mov	r20,r4
   34ca4:	282b883a 	mov	r21,r5
   34ca8:	002d883a 	mov	r22,zero
   34cac:	00342a00 	call	342a0 <__sfp_lock_acquire>
   34cb0:	98001326 	beq	r19,zero,34d00 <_fwalk_reent+0x88>
   34cb4:	04bfffc4 	movi	r18,-1
   34cb8:	9c400117 	ldw	r17,4(r19)
   34cbc:	9c000217 	ldw	r16,8(r19)
   34cc0:	8c7fffc4 	addi	r17,r17,-1
   34cc4:	88000c16 	blt	r17,zero,34cf8 <_fwalk_reent+0x80>
   34cc8:	84000304 	addi	r16,r16,12
   34ccc:	80c0000f 	ldh	r3,0(r16)
   34cd0:	8c7fffc4 	addi	r17,r17,-1
   34cd4:	817ffd04 	addi	r5,r16,-12
   34cd8:	18000526 	beq	r3,zero,34cf0 <_fwalk_reent+0x78>
   34cdc:	80c0008f 	ldh	r3,2(r16)
   34ce0:	a009883a 	mov	r4,r20
   34ce4:	1c800226 	beq	r3,r18,34cf0 <_fwalk_reent+0x78>
   34ce8:	a83ee83a 	callr	r21
   34cec:	b0acb03a 	or	r22,r22,r2
   34cf0:	84001704 	addi	r16,r16,92
   34cf4:	8cbff51e 	bne	r17,r18,34ccc <_fwalk_reent+0x54>
   34cf8:	9cc00017 	ldw	r19,0(r19)
   34cfc:	983fee1e 	bne	r19,zero,34cb8 <_fwalk_reent+0x40>
   34d00:	00342a40 	call	342a4 <__sfp_lock_release>
   34d04:	b005883a 	mov	r2,r22
   34d08:	dfc00717 	ldw	ra,28(sp)
   34d0c:	dd800617 	ldw	r22,24(sp)
   34d10:	dd400517 	ldw	r21,20(sp)
   34d14:	dd000417 	ldw	r20,16(sp)
   34d18:	dcc00317 	ldw	r19,12(sp)
   34d1c:	dc800217 	ldw	r18,8(sp)
   34d20:	dc400117 	ldw	r17,4(sp)
   34d24:	dc000017 	ldw	r16,0(sp)
   34d28:	dec00804 	addi	sp,sp,32
   34d2c:	f800283a 	ret

00034d30 <_setlocale_r>:
   34d30:	defffc04 	addi	sp,sp,-16
   34d34:	dc800215 	stw	r18,8(sp)
   34d38:	dc400115 	stw	r17,4(sp)
   34d3c:	dc000015 	stw	r16,0(sp)
   34d40:	dfc00315 	stw	ra,12(sp)
   34d44:	3021883a 	mov	r16,r6
   34d48:	2023883a 	mov	r17,r4
   34d4c:	2825883a 	mov	r18,r5
   34d50:	30001626 	beq	r6,zero,34dac <_setlocale_r+0x7c>
   34d54:	3009883a 	mov	r4,r6
   34d58:	01400034 	movhi	r5,0
   34d5c:	29402d04 	addi	r5,r5,180
   34d60:	003742c0 	call	3742c <strcmp>
   34d64:	10000a1e 	bne	r2,zero,34d90 <_setlocale_r+0x60>
   34d68:	8c800c15 	stw	r18,48(r17)
   34d6c:	8c000d15 	stw	r16,52(r17)
   34d70:	00800034 	movhi	r2,0
   34d74:	10802d04 	addi	r2,r2,180
   34d78:	dfc00317 	ldw	ra,12(sp)
   34d7c:	dc800217 	ldw	r18,8(sp)
   34d80:	dc400117 	ldw	r17,4(sp)
   34d84:	dc000017 	ldw	r16,0(sp)
   34d88:	dec00404 	addi	sp,sp,16
   34d8c:	f800283a 	ret
   34d90:	8009883a 	mov	r4,r16
   34d94:	01400034 	movhi	r5,0
   34d98:	29401804 	addi	r5,r5,96
   34d9c:	003742c0 	call	3742c <strcmp>
   34da0:	103ff126 	beq	r2,zero,34d68 <_setlocale_r+0x38>
   34da4:	0005883a 	mov	r2,zero
   34da8:	003ff306 	br	34d78 <_setlocale_r+0x48>
   34dac:	00800034 	movhi	r2,0
   34db0:	10802d04 	addi	r2,r2,180
   34db4:	dfc00317 	ldw	ra,12(sp)
   34db8:	dc800217 	ldw	r18,8(sp)
   34dbc:	dc400117 	ldw	r17,4(sp)
   34dc0:	dc000017 	ldw	r16,0(sp)
   34dc4:	dec00404 	addi	sp,sp,16
   34dc8:	f800283a 	ret

00034dcc <__locale_charset>:
   34dcc:	00800034 	movhi	r2,0
   34dd0:	10802e04 	addi	r2,r2,184
   34dd4:	f800283a 	ret

00034dd8 <_localeconv_r>:
   34dd8:	00800034 	movhi	r2,0
   34ddc:	10803204 	addi	r2,r2,200
   34de0:	f800283a 	ret

00034de4 <setlocale>:
   34de4:	00c00034 	movhi	r3,0
   34de8:	18c75f04 	addi	r3,r3,7548
   34dec:	2005883a 	mov	r2,r4
   34df0:	19000017 	ldw	r4,0(r3)
   34df4:	280d883a 	mov	r6,r5
   34df8:	100b883a 	mov	r5,r2
   34dfc:	0034d301 	jmpi	34d30 <_setlocale_r>

00034e00 <localeconv>:
   34e00:	00800034 	movhi	r2,0
   34e04:	10803204 	addi	r2,r2,200
   34e08:	f800283a 	ret

00034e0c <__smakebuf_r>:
   34e0c:	2880030b 	ldhu	r2,12(r5)
   34e10:	deffed04 	addi	sp,sp,-76
   34e14:	dc401015 	stw	r17,64(sp)
   34e18:	10c0008c 	andi	r3,r2,2
   34e1c:	18ffffcc 	andi	r3,r3,65535
   34e20:	18e0001c 	xori	r3,r3,32768
   34e24:	dc000f15 	stw	r16,60(sp)
   34e28:	dfc01215 	stw	ra,72(sp)
   34e2c:	dc801115 	stw	r18,68(sp)
   34e30:	18e00004 	addi	r3,r3,-32768
   34e34:	2821883a 	mov	r16,r5
   34e38:	2023883a 	mov	r17,r4
   34e3c:	1800381e 	bne	r3,zero,34f20 <__smakebuf_r+0x114>
   34e40:	2940038f 	ldh	r5,14(r5)
   34e44:	28002d16 	blt	r5,zero,34efc <__smakebuf_r+0xf0>
   34e48:	d80d883a 	mov	r6,sp
   34e4c:	00377bc0 	call	377bc <_fstat_r>
   34e50:	10002916 	blt	r2,zero,34ef8 <__smakebuf_r+0xec>
   34e54:	d8800117 	ldw	r2,4(sp)
   34e58:	00e00014 	movui	r3,32768
   34e5c:	10bc000c 	andi	r2,r2,61440
   34e60:	10c03c26 	beq	r2,r3,34f54 <__smakebuf_r+0x148>
   34e64:	80c0030b 	ldhu	r3,12(r16)
   34e68:	18c20014 	ori	r3,r3,2048
   34e6c:	80c0030d 	sth	r3,12(r16)
   34e70:	00c80004 	movi	r3,8192
   34e74:	10c00c1e 	bne	r2,r3,34ea8 <__smakebuf_r+0x9c>
   34e78:	8140038f 	ldh	r5,14(r16)
   34e7c:	8809883a 	mov	r4,r17
   34e80:	00378240 	call	37824 <_isatty_r>
   34e84:	10000826 	beq	r2,zero,34ea8 <__smakebuf_r+0x9c>
   34e88:	80c0030b 	ldhu	r3,12(r16)
   34e8c:	808010c4 	addi	r2,r16,67
   34e90:	80800015 	stw	r2,0(r16)
   34e94:	18c00054 	ori	r3,r3,1
   34e98:	80800415 	stw	r2,16(r16)
   34e9c:	00800044 	movi	r2,1
   34ea0:	80c0030d 	sth	r3,12(r16)
   34ea4:	80800515 	stw	r2,20(r16)
   34ea8:	04810004 	movi	r18,1024
   34eac:	8809883a 	mov	r4,r17
   34eb0:	900b883a 	mov	r5,r18
   34eb4:	0034fb40 	call	34fb4 <_malloc_r>
   34eb8:	10003026 	beq	r2,zero,34f7c <__smakebuf_r+0x170>
   34ebc:	80c0030b 	ldhu	r3,12(r16)
   34ec0:	010000f4 	movhi	r4,3
   34ec4:	21100104 	addi	r4,r4,16388
   34ec8:	89000f15 	stw	r4,60(r17)
   34ecc:	18c02014 	ori	r3,r3,128
   34ed0:	80c0030d 	sth	r3,12(r16)
   34ed4:	80800015 	stw	r2,0(r16)
   34ed8:	80800415 	stw	r2,16(r16)
   34edc:	84800515 	stw	r18,20(r16)
   34ee0:	dfc01217 	ldw	ra,72(sp)
   34ee4:	dc801117 	ldw	r18,68(sp)
   34ee8:	dc401017 	ldw	r17,64(sp)
   34eec:	dc000f17 	ldw	r16,60(sp)
   34ef0:	dec01304 	addi	sp,sp,76
   34ef4:	f800283a 	ret
   34ef8:	8080030b 	ldhu	r2,12(r16)
   34efc:	10c0200c 	andi	r3,r2,128
   34f00:	18ffffcc 	andi	r3,r3,65535
   34f04:	18e0001c 	xori	r3,r3,32768
   34f08:	18e00004 	addi	r3,r3,-32768
   34f0c:	18000f1e 	bne	r3,zero,34f4c <__smakebuf_r+0x140>
   34f10:	04810004 	movi	r18,1024
   34f14:	10820014 	ori	r2,r2,2048
   34f18:	8080030d 	sth	r2,12(r16)
   34f1c:	003fe306 	br	34eac <__smakebuf_r+0xa0>
   34f20:	288010c4 	addi	r2,r5,67
   34f24:	28800015 	stw	r2,0(r5)
   34f28:	28800415 	stw	r2,16(r5)
   34f2c:	00800044 	movi	r2,1
   34f30:	28800515 	stw	r2,20(r5)
   34f34:	dfc01217 	ldw	ra,72(sp)
   34f38:	dc801117 	ldw	r18,68(sp)
   34f3c:	dc401017 	ldw	r17,64(sp)
   34f40:	dc000f17 	ldw	r16,60(sp)
   34f44:	dec01304 	addi	sp,sp,76
   34f48:	f800283a 	ret
   34f4c:	04801004 	movi	r18,64
   34f50:	003ff006 	br	34f14 <__smakebuf_r+0x108>
   34f54:	81000a17 	ldw	r4,40(r16)
   34f58:	00c000f4 	movhi	r3,3
   34f5c:	18dcf204 	addi	r3,r3,29640
   34f60:	20ffc01e 	bne	r4,r3,34e64 <__smakebuf_r+0x58>
   34f64:	8080030b 	ldhu	r2,12(r16)
   34f68:	00c10004 	movi	r3,1024
   34f6c:	80c01315 	stw	r3,76(r16)
   34f70:	10c4b03a 	or	r2,r2,r3
   34f74:	8080030d 	sth	r2,12(r16)
   34f78:	003fcb06 	br	34ea8 <__smakebuf_r+0x9c>
   34f7c:	8080030b 	ldhu	r2,12(r16)
   34f80:	10c0800c 	andi	r3,r2,512
   34f84:	18ffffcc 	andi	r3,r3,65535
   34f88:	18e0001c 	xori	r3,r3,32768
   34f8c:	18e00004 	addi	r3,r3,-32768
   34f90:	183fd31e 	bne	r3,zero,34ee0 <__smakebuf_r+0xd4>
   34f94:	10800094 	ori	r2,r2,2
   34f98:	80c010c4 	addi	r3,r16,67
   34f9c:	8080030d 	sth	r2,12(r16)
   34fa0:	00800044 	movi	r2,1
   34fa4:	80c00015 	stw	r3,0(r16)
   34fa8:	80c00415 	stw	r3,16(r16)
   34fac:	80800515 	stw	r2,20(r16)
   34fb0:	003fcb06 	br	34ee0 <__smakebuf_r+0xd4>

00034fb4 <_malloc_r>:
   34fb4:	defff604 	addi	sp,sp,-40
   34fb8:	dc800215 	stw	r18,8(sp)
   34fbc:	dfc00915 	stw	ra,36(sp)
   34fc0:	df000815 	stw	fp,32(sp)
   34fc4:	ddc00715 	stw	r23,28(sp)
   34fc8:	dd800615 	stw	r22,24(sp)
   34fcc:	dd400515 	stw	r21,20(sp)
   34fd0:	dd000415 	stw	r20,16(sp)
   34fd4:	dcc00315 	stw	r19,12(sp)
   34fd8:	dc400115 	stw	r17,4(sp)
   34fdc:	dc000015 	stw	r16,0(sp)
   34fe0:	288002c4 	addi	r2,r5,11
   34fe4:	00c00584 	movi	r3,22
   34fe8:	2025883a 	mov	r18,r4
   34fec:	18802b2e 	bgeu	r3,r2,3509c <_malloc_r+0xe8>
   34ff0:	047ffe04 	movi	r17,-8
   34ff4:	1462703a 	and	r17,r2,r17
   34ff8:	88002a16 	blt	r17,zero,350a4 <_malloc_r+0xf0>
   34ffc:	89402936 	bltu	r17,r5,350a4 <_malloc_r+0xf0>
   35000:	9009883a 	mov	r4,r18
   35004:	003a0700 	call	3a070 <__malloc_lock>
   35008:	00807dc4 	movi	r2,503
   3500c:	14402936 	bltu	r2,r17,350b4 <_malloc_r+0x100>
   35010:	8808d0fa 	srli	r4,r17,3
   35014:	04c00034 	movhi	r19,0
   35018:	9cc1da04 	addi	r19,r19,1896
   3501c:	2105883a 	add	r2,r4,r4
   35020:	1085883a 	add	r2,r2,r2
   35024:	1085883a 	add	r2,r2,r2
   35028:	9885883a 	add	r2,r19,r2
   3502c:	14000317 	ldw	r16,12(r2)
   35030:	80815526 	beq	r16,r2,35588 <_malloc_r+0x5d4>
   35034:	81000117 	ldw	r4,4(r16)
   35038:	00bfff04 	movi	r2,-4
   3503c:	80c00317 	ldw	r3,12(r16)
   35040:	2084703a 	and	r2,r4,r2
   35044:	8085883a 	add	r2,r16,r2
   35048:	11800117 	ldw	r6,4(r2)
   3504c:	81400217 	ldw	r5,8(r16)
   35050:	9009883a 	mov	r4,r18
   35054:	31800054 	ori	r6,r6,1
   35058:	11800115 	stw	r6,4(r2)
   3505c:	28c00315 	stw	r3,12(r5)
   35060:	19400215 	stw	r5,8(r3)
   35064:	003a0900 	call	3a090 <__malloc_unlock>
   35068:	80800204 	addi	r2,r16,8
   3506c:	dfc00917 	ldw	ra,36(sp)
   35070:	df000817 	ldw	fp,32(sp)
   35074:	ddc00717 	ldw	r23,28(sp)
   35078:	dd800617 	ldw	r22,24(sp)
   3507c:	dd400517 	ldw	r21,20(sp)
   35080:	dd000417 	ldw	r20,16(sp)
   35084:	dcc00317 	ldw	r19,12(sp)
   35088:	dc800217 	ldw	r18,8(sp)
   3508c:	dc400117 	ldw	r17,4(sp)
   35090:	dc000017 	ldw	r16,0(sp)
   35094:	dec00a04 	addi	sp,sp,40
   35098:	f800283a 	ret
   3509c:	04400404 	movi	r17,16
   350a0:	897fd72e 	bgeu	r17,r5,35000 <_malloc_r+0x4c>
   350a4:	00800304 	movi	r2,12
   350a8:	90800015 	stw	r2,0(r18)
   350ac:	0005883a 	mov	r2,zero
   350b0:	003fee06 	br	3506c <_malloc_r+0xb8>
   350b4:	8808d27a 	srli	r4,r17,9
   350b8:	20007126 	beq	r4,zero,35280 <_malloc_r+0x2cc>
   350bc:	00800104 	movi	r2,4
   350c0:	1100eb36 	bltu	r2,r4,35470 <_malloc_r+0x4bc>
   350c4:	8808d1ba 	srli	r4,r17,6
   350c8:	21000e04 	addi	r4,r4,56
   350cc:	210b883a 	add	r5,r4,r4
   350d0:	294b883a 	add	r5,r5,r5
   350d4:	294b883a 	add	r5,r5,r5
   350d8:	04c00034 	movhi	r19,0
   350dc:	9cc1da04 	addi	r19,r19,1896
   350e0:	994b883a 	add	r5,r19,r5
   350e4:	2c000317 	ldw	r16,12(r5)
   350e8:	2c000e26 	beq	r5,r16,35124 <_malloc_r+0x170>
   350ec:	80c00117 	ldw	r3,4(r16)
   350f0:	01ffff04 	movi	r7,-4
   350f4:	018003c4 	movi	r6,15
   350f8:	19c6703a 	and	r3,r3,r7
   350fc:	1c45c83a 	sub	r2,r3,r17
   35100:	30800716 	blt	r6,r2,35120 <_malloc_r+0x16c>
   35104:	1000610e 	bge	r2,zero,3528c <_malloc_r+0x2d8>
   35108:	84000317 	ldw	r16,12(r16)
   3510c:	2c000526 	beq	r5,r16,35124 <_malloc_r+0x170>
   35110:	80c00117 	ldw	r3,4(r16)
   35114:	19c6703a 	and	r3,r3,r7
   35118:	1c45c83a 	sub	r2,r3,r17
   3511c:	30bff90e 	bge	r6,r2,35104 <_malloc_r+0x150>
   35120:	213fffc4 	addi	r4,r4,-1
   35124:	21000044 	addi	r4,r4,1
   35128:	9c000417 	ldw	r16,16(r19)
   3512c:	00c00034 	movhi	r3,0
   35130:	18c1da04 	addi	r3,r3,1896
   35134:	1a400204 	addi	r9,r3,8
   35138:	8240ff26 	beq	r16,r9,35538 <_malloc_r+0x584>
   3513c:	81400117 	ldw	r5,4(r16)
   35140:	00bfff04 	movi	r2,-4
   35144:	018003c4 	movi	r6,15
   35148:	2884703a 	and	r2,r5,r2
   3514c:	144bc83a 	sub	r5,r2,r17
   35150:	3140ea16 	blt	r6,r5,354fc <_malloc_r+0x548>
   35154:	1a400515 	stw	r9,20(r3)
   35158:	1a400415 	stw	r9,16(r3)
   3515c:	2800570e 	bge	r5,zero,352bc <_malloc_r+0x308>
   35160:	01407fc4 	movi	r5,511
   35164:	2880ca36 	bltu	r5,r2,35490 <_malloc_r+0x4dc>
   35168:	1004d0fa 	srli	r2,r2,3
   3516c:	02000044 	movi	r8,1
   35170:	19c00117 	ldw	r7,4(r3)
   35174:	108b883a 	add	r5,r2,r2
   35178:	294b883a 	add	r5,r5,r5
   3517c:	1005d0ba 	srai	r2,r2,2
   35180:	294b883a 	add	r5,r5,r5
   35184:	28cb883a 	add	r5,r5,r3
   35188:	29800217 	ldw	r6,8(r5)
   3518c:	4084983a 	sll	r2,r8,r2
   35190:	81400315 	stw	r5,12(r16)
   35194:	81800215 	stw	r6,8(r16)
   35198:	11c4b03a 	or	r2,r2,r7
   3519c:	18800115 	stw	r2,4(r3)
   351a0:	2c000215 	stw	r16,8(r5)
   351a4:	34000315 	stw	r16,12(r6)
   351a8:	200bd0ba 	srai	r5,r4,2
   351ac:	00c00044 	movi	r3,1
   351b0:	194a983a 	sll	r5,r3,r5
   351b4:	11404936 	bltu	r2,r5,352dc <_malloc_r+0x328>
   351b8:	1146703a 	and	r3,r2,r5
   351bc:	18000a1e 	bne	r3,zero,351e8 <_malloc_r+0x234>
   351c0:	00ffff04 	movi	r3,-4
   351c4:	294b883a 	add	r5,r5,r5
   351c8:	20c8703a 	and	r4,r4,r3
   351cc:	1146703a 	and	r3,r2,r5
   351d0:	21000104 	addi	r4,r4,4
   351d4:	1800041e 	bne	r3,zero,351e8 <_malloc_r+0x234>
   351d8:	294b883a 	add	r5,r5,r5
   351dc:	1146703a 	and	r3,r2,r5
   351e0:	21000104 	addi	r4,r4,4
   351e4:	183ffc26 	beq	r3,zero,351d8 <_malloc_r+0x224>
   351e8:	023fff04 	movi	r8,-4
   351ec:	01c003c4 	movi	r7,15
   351f0:	2105883a 	add	r2,r4,r4
   351f4:	1085883a 	add	r2,r2,r2
   351f8:	1085883a 	add	r2,r2,r2
   351fc:	9899883a 	add	r12,r19,r2
   35200:	62800304 	addi	r10,r12,12
   35204:	2017883a 	mov	r11,r4
   35208:	54000017 	ldw	r16,0(r10)
   3520c:	51bffd04 	addi	r6,r10,-12
   35210:	8180041e 	bne	r16,r6,35224 <_malloc_r+0x270>
   35214:	0000ca06 	br	35540 <_malloc_r+0x58c>
   35218:	10001c0e 	bge	r2,zero,3528c <_malloc_r+0x2d8>
   3521c:	84000317 	ldw	r16,12(r16)
   35220:	8180c726 	beq	r16,r6,35540 <_malloc_r+0x58c>
   35224:	80c00117 	ldw	r3,4(r16)
   35228:	1a06703a 	and	r3,r3,r8
   3522c:	1c45c83a 	sub	r2,r3,r17
   35230:	38bff90e 	bge	r7,r2,35218 <_malloc_r+0x264>
   35234:	81000317 	ldw	r4,12(r16)
   35238:	81400217 	ldw	r5,8(r16)
   3523c:	8447883a 	add	r3,r16,r17
   35240:	8c400054 	ori	r17,r17,1
   35244:	29000315 	stw	r4,12(r5)
   35248:	21400215 	stw	r5,8(r4)
   3524c:	84400115 	stw	r17,4(r16)
   35250:	1889883a 	add	r4,r3,r2
   35254:	11400054 	ori	r5,r2,1
   35258:	98c00515 	stw	r3,20(r19)
   3525c:	98c00415 	stw	r3,16(r19)
   35260:	20800015 	stw	r2,0(r4)
   35264:	1a400315 	stw	r9,12(r3)
   35268:	1a400215 	stw	r9,8(r3)
   3526c:	19400115 	stw	r5,4(r3)
   35270:	9009883a 	mov	r4,r18
   35274:	003a0900 	call	3a090 <__malloc_unlock>
   35278:	80800204 	addi	r2,r16,8
   3527c:	003f7b06 	br	3506c <_malloc_r+0xb8>
   35280:	8808d0fa 	srli	r4,r17,3
   35284:	210b883a 	add	r5,r4,r4
   35288:	003f9106 	br	350d0 <_malloc_r+0x11c>
   3528c:	80c7883a 	add	r3,r16,r3
   35290:	19400117 	ldw	r5,4(r3)
   35294:	80800317 	ldw	r2,12(r16)
   35298:	81000217 	ldw	r4,8(r16)
   3529c:	29400054 	ori	r5,r5,1
   352a0:	19400115 	stw	r5,4(r3)
   352a4:	20800315 	stw	r2,12(r4)
   352a8:	11000215 	stw	r4,8(r2)
   352ac:	9009883a 	mov	r4,r18
   352b0:	003a0900 	call	3a090 <__malloc_unlock>
   352b4:	80800204 	addi	r2,r16,8
   352b8:	003f6c06 	br	3506c <_malloc_r+0xb8>
   352bc:	8085883a 	add	r2,r16,r2
   352c0:	10c00117 	ldw	r3,4(r2)
   352c4:	9009883a 	mov	r4,r18
   352c8:	18c00054 	ori	r3,r3,1
   352cc:	10c00115 	stw	r3,4(r2)
   352d0:	003a0900 	call	3a090 <__malloc_unlock>
   352d4:	80800204 	addi	r2,r16,8
   352d8:	003f6406 	br	3506c <_malloc_r+0xb8>
   352dc:	9c000217 	ldw	r16,8(r19)
   352e0:	00bfff04 	movi	r2,-4
   352e4:	85400117 	ldw	r21,4(r16)
   352e8:	a8aa703a 	and	r21,r21,r2
   352ec:	ac400336 	bltu	r21,r17,352fc <_malloc_r+0x348>
   352f0:	ac45c83a 	sub	r2,r21,r17
   352f4:	00c003c4 	movi	r3,15
   352f8:	18805316 	blt	r3,r2,35448 <_malloc_r+0x494>
   352fc:	d5e01417 	ldw	r23,-32688(gp)
   35300:	d0e00317 	ldw	r3,-32756(gp)
   35304:	00bfffc4 	movi	r2,-1
   35308:	8579883a 	add	fp,r16,r21
   3530c:	8def883a 	add	r23,r17,r23
   35310:	1880d226 	beq	r3,r2,3565c <_malloc_r+0x6a8>
   35314:	bdc403c4 	addi	r23,r23,4111
   35318:	00bc0004 	movi	r2,-4096
   3531c:	b8ae703a 	and	r23,r23,r2
   35320:	9009883a 	mov	r4,r18
   35324:	b80b883a 	mov	r5,r23
   35328:	00372880 	call	37288 <_sbrk_r>
   3532c:	1029883a 	mov	r20,r2
   35330:	00bfffc4 	movi	r2,-1
   35334:	a080d126 	beq	r20,r2,3567c <_malloc_r+0x6c8>
   35338:	a7009f36 	bltu	r20,fp,355b8 <_malloc_r+0x604>
   3533c:	05800034 	movhi	r22,0
   35340:	b5877a04 	addi	r22,r22,7656
   35344:	b0800017 	ldw	r2,0(r22)
   35348:	b885883a 	add	r2,r23,r2
   3534c:	b0800015 	stw	r2,0(r22)
   35350:	e500cf26 	beq	fp,r20,35690 <_malloc_r+0x6dc>
   35354:	d1200317 	ldw	r4,-32756(gp)
   35358:	00ffffc4 	movi	r3,-1
   3535c:	20c0e026 	beq	r4,r3,356e0 <_malloc_r+0x72c>
   35360:	a739c83a 	sub	fp,r20,fp
   35364:	1705883a 	add	r2,r2,fp
   35368:	b0800015 	stw	r2,0(r22)
   3536c:	a08001cc 	andi	r2,r20,7
   35370:	1000a526 	beq	r2,zero,35608 <_malloc_r+0x654>
   35374:	a0a9c83a 	sub	r20,r20,r2
   35378:	00c40204 	movi	r3,4104
   3537c:	a5000204 	addi	r20,r20,8
   35380:	1885c83a 	sub	r2,r3,r2
   35384:	a5c7883a 	add	r3,r20,r23
   35388:	18c3ffcc 	andi	r3,r3,4095
   3538c:	10efc83a 	sub	r23,r2,r3
   35390:	9009883a 	mov	r4,r18
   35394:	b80b883a 	mov	r5,r23
   35398:	00372880 	call	37288 <_sbrk_r>
   3539c:	00ffffc4 	movi	r3,-1
   353a0:	10c0cc26 	beq	r2,r3,356d4 <_malloc_r+0x720>
   353a4:	1505c83a 	sub	r2,r2,r20
   353a8:	b887883a 	add	r3,r23,r2
   353ac:	18c00054 	ori	r3,r3,1
   353b0:	b0800017 	ldw	r2,0(r22)
   353b4:	9d000215 	stw	r20,8(r19)
   353b8:	a0c00115 	stw	r3,4(r20)
   353bc:	b885883a 	add	r2,r23,r2
   353c0:	b0800015 	stw	r2,0(r22)
   353c4:	84c00e26 	beq	r16,r19,35400 <_malloc_r+0x44c>
   353c8:	00c003c4 	movi	r3,15
   353cc:	1d40902e 	bgeu	r3,r21,35610 <_malloc_r+0x65c>
   353d0:	ad7ffd04 	addi	r21,r21,-12
   353d4:	013ffe04 	movi	r4,-8
   353d8:	a908703a 	and	r4,r21,r4
   353dc:	810b883a 	add	r5,r16,r4
   353e0:	01800144 	movi	r6,5
   353e4:	29800115 	stw	r6,4(r5)
   353e8:	29800215 	stw	r6,8(r5)
   353ec:	81400117 	ldw	r5,4(r16)
   353f0:	2940004c 	andi	r5,r5,1
   353f4:	214ab03a 	or	r5,r4,r5
   353f8:	81400115 	stw	r5,4(r16)
   353fc:	1900ae36 	bltu	r3,r4,356b8 <_malloc_r+0x704>
   35400:	d0e01317 	ldw	r3,-32692(gp)
   35404:	1880012e 	bgeu	r3,r2,3540c <_malloc_r+0x458>
   35408:	d0a01315 	stw	r2,-32692(gp)
   3540c:	d0e01217 	ldw	r3,-32696(gp)
   35410:	9c000217 	ldw	r16,8(r19)
   35414:	1880012e 	bgeu	r3,r2,3541c <_malloc_r+0x468>
   35418:	d0a01215 	stw	r2,-32696(gp)
   3541c:	80c00117 	ldw	r3,4(r16)
   35420:	00bfff04 	movi	r2,-4
   35424:	1886703a 	and	r3,r3,r2
   35428:	1c45c83a 	sub	r2,r3,r17
   3542c:	1c400236 	bltu	r3,r17,35438 <_malloc_r+0x484>
   35430:	00c003c4 	movi	r3,15
   35434:	18800416 	blt	r3,r2,35448 <_malloc_r+0x494>
   35438:	9009883a 	mov	r4,r18
   3543c:	003a0900 	call	3a090 <__malloc_unlock>
   35440:	0005883a 	mov	r2,zero
   35444:	003f0906 	br	3506c <_malloc_r+0xb8>
   35448:	88c00054 	ori	r3,r17,1
   3544c:	10800054 	ori	r2,r2,1
   35450:	80c00115 	stw	r3,4(r16)
   35454:	8463883a 	add	r17,r16,r17
   35458:	88800115 	stw	r2,4(r17)
   3545c:	9009883a 	mov	r4,r18
   35460:	9c400215 	stw	r17,8(r19)
   35464:	003a0900 	call	3a090 <__malloc_unlock>
   35468:	80800204 	addi	r2,r16,8
   3546c:	003eff06 	br	3506c <_malloc_r+0xb8>
   35470:	00800504 	movi	r2,20
   35474:	1100492e 	bgeu	r2,r4,3559c <_malloc_r+0x5e8>
   35478:	00801504 	movi	r2,84
   3547c:	11005c36 	bltu	r2,r4,355f0 <_malloc_r+0x63c>
   35480:	8808d33a 	srli	r4,r17,12
   35484:	21001b84 	addi	r4,r4,110
   35488:	210b883a 	add	r5,r4,r4
   3548c:	003f1006 	br	350d0 <_malloc_r+0x11c>
   35490:	1006d27a 	srli	r3,r2,9
   35494:	01400104 	movi	r5,4
   35498:	28c0432e 	bgeu	r5,r3,355a8 <_malloc_r+0x5f4>
   3549c:	01400504 	movi	r5,20
   354a0:	28c07036 	bltu	r5,r3,35664 <_malloc_r+0x6b0>
   354a4:	194016c4 	addi	r5,r3,91
   354a8:	294d883a 	add	r6,r5,r5
   354ac:	318d883a 	add	r6,r6,r6
   354b0:	318d883a 	add	r6,r6,r6
   354b4:	998d883a 	add	r6,r19,r6
   354b8:	30c00217 	ldw	r3,8(r6)
   354bc:	01c00034 	movhi	r7,0
   354c0:	39c1da04 	addi	r7,r7,1896
   354c4:	19805726 	beq	r3,r6,35624 <_malloc_r+0x670>
   354c8:	01ffff04 	movi	r7,-4
   354cc:	19400117 	ldw	r5,4(r3)
   354d0:	29ca703a 	and	r5,r5,r7
   354d4:	1140022e 	bgeu	r2,r5,354e0 <_malloc_r+0x52c>
   354d8:	18c00217 	ldw	r3,8(r3)
   354dc:	30fffb1e 	bne	r6,r3,354cc <_malloc_r+0x518>
   354e0:	19400317 	ldw	r5,12(r3)
   354e4:	98800117 	ldw	r2,4(r19)
   354e8:	81400315 	stw	r5,12(r16)
   354ec:	80c00215 	stw	r3,8(r16)
   354f0:	2c000215 	stw	r16,8(r5)
   354f4:	1c000315 	stw	r16,12(r3)
   354f8:	003f2b06 	br	351a8 <_malloc_r+0x1f4>
   354fc:	8445883a 	add	r2,r16,r17
   35500:	8c400054 	ori	r17,r17,1
   35504:	18800515 	stw	r2,20(r3)
   35508:	18800415 	stw	r2,16(r3)
   3550c:	29000054 	ori	r4,r5,1
   35510:	1147883a 	add	r3,r2,r5
   35514:	84400115 	stw	r17,4(r16)
   35518:	11000115 	stw	r4,4(r2)
   3551c:	12400315 	stw	r9,12(r2)
   35520:	12400215 	stw	r9,8(r2)
   35524:	19400015 	stw	r5,0(r3)
   35528:	9009883a 	mov	r4,r18
   3552c:	003a0900 	call	3a090 <__malloc_unlock>
   35530:	80800204 	addi	r2,r16,8
   35534:	003ecd06 	br	3506c <_malloc_r+0xb8>
   35538:	18800117 	ldw	r2,4(r3)
   3553c:	003f1a06 	br	351a8 <_malloc_r+0x1f4>
   35540:	5ac00044 	addi	r11,r11,1
   35544:	588000cc 	andi	r2,r11,3
   35548:	52800204 	addi	r10,r10,8
   3554c:	103f2e1e 	bne	r2,zero,35208 <_malloc_r+0x254>
   35550:	20c000cc 	andi	r3,r4,3
   35554:	60bffe04 	addi	r2,r12,-8
   35558:	18006f26 	beq	r3,zero,35718 <_malloc_r+0x764>
   3555c:	63000017 	ldw	r12,0(r12)
   35560:	213fffc4 	addi	r4,r4,-1
   35564:	60bffa26 	beq	r12,r2,35550 <_malloc_r+0x59c>
   35568:	98800117 	ldw	r2,4(r19)
   3556c:	294b883a 	add	r5,r5,r5
   35570:	117f5a36 	bltu	r2,r5,352dc <_malloc_r+0x328>
   35574:	283f5926 	beq	r5,zero,352dc <_malloc_r+0x328>
   35578:	1146703a 	and	r3,r2,r5
   3557c:	18001626 	beq	r3,zero,355d8 <_malloc_r+0x624>
   35580:	5809883a 	mov	r4,r11
   35584:	003f1a06 	br	351f0 <_malloc_r+0x23c>
   35588:	80800204 	addi	r2,r16,8
   3558c:	84000517 	ldw	r16,20(r16)
   35590:	143ea81e 	bne	r2,r16,35034 <_malloc_r+0x80>
   35594:	21000084 	addi	r4,r4,2
   35598:	003ee306 	br	35128 <_malloc_r+0x174>
   3559c:	210016c4 	addi	r4,r4,91
   355a0:	210b883a 	add	r5,r4,r4
   355a4:	003eca06 	br	350d0 <_malloc_r+0x11c>
   355a8:	100ad1ba 	srli	r5,r2,6
   355ac:	29400e04 	addi	r5,r5,56
   355b0:	294d883a 	add	r6,r5,r5
   355b4:	003fbd06 	br	354ac <_malloc_r+0x4f8>
   355b8:	84ff6026 	beq	r16,r19,3533c <_malloc_r+0x388>
   355bc:	00800034 	movhi	r2,0
   355c0:	1081da04 	addi	r2,r2,1896
   355c4:	14000217 	ldw	r16,8(r2)
   355c8:	00bfff04 	movi	r2,-4
   355cc:	80c00117 	ldw	r3,4(r16)
   355d0:	1886703a 	and	r3,r3,r2
   355d4:	003f9406 	br	35428 <_malloc_r+0x474>
   355d8:	294b883a 	add	r5,r5,r5
   355dc:	1146703a 	and	r3,r2,r5
   355e0:	5ac00104 	addi	r11,r11,4
   355e4:	183ffc26 	beq	r3,zero,355d8 <_malloc_r+0x624>
   355e8:	5809883a 	mov	r4,r11
   355ec:	003f0006 	br	351f0 <_malloc_r+0x23c>
   355f0:	00805504 	movi	r2,340
   355f4:	11001336 	bltu	r2,r4,35644 <_malloc_r+0x690>
   355f8:	8808d3fa 	srli	r4,r17,15
   355fc:	21001dc4 	addi	r4,r4,119
   35600:	210b883a 	add	r5,r4,r4
   35604:	003eb206 	br	350d0 <_malloc_r+0x11c>
   35608:	00840004 	movi	r2,4096
   3560c:	003f5d06 	br	35384 <_malloc_r+0x3d0>
   35610:	00800044 	movi	r2,1
   35614:	a0800115 	stw	r2,4(r20)
   35618:	a021883a 	mov	r16,r20
   3561c:	0007883a 	mov	r3,zero
   35620:	003f8106 	br	35428 <_malloc_r+0x474>
   35624:	280bd0ba 	srai	r5,r5,2
   35628:	01800044 	movi	r6,1
   3562c:	38800117 	ldw	r2,4(r7)
   35630:	314c983a 	sll	r6,r6,r5
   35634:	180b883a 	mov	r5,r3
   35638:	3084b03a 	or	r2,r6,r2
   3563c:	38800115 	stw	r2,4(r7)
   35640:	003fa906 	br	354e8 <_malloc_r+0x534>
   35644:	00815504 	movi	r2,1364
   35648:	11001836 	bltu	r2,r4,356ac <_malloc_r+0x6f8>
   3564c:	8808d4ba 	srli	r4,r17,18
   35650:	21001f04 	addi	r4,r4,124
   35654:	210b883a 	add	r5,r4,r4
   35658:	003e9d06 	br	350d0 <_malloc_r+0x11c>
   3565c:	bdc00404 	addi	r23,r23,16
   35660:	003f2f06 	br	35320 <_malloc_r+0x36c>
   35664:	01401504 	movi	r5,84
   35668:	28c01f36 	bltu	r5,r3,356e8 <_malloc_r+0x734>
   3566c:	100ad33a 	srli	r5,r2,12
   35670:	29401b84 	addi	r5,r5,110
   35674:	294d883a 	add	r6,r5,r5
   35678:	003f8c06 	br	354ac <_malloc_r+0x4f8>
   3567c:	9c000217 	ldw	r16,8(r19)
   35680:	00bfff04 	movi	r2,-4
   35684:	80c00117 	ldw	r3,4(r16)
   35688:	1886703a 	and	r3,r3,r2
   3568c:	003f6606 	br	35428 <_malloc_r+0x474>
   35690:	e0c3ffcc 	andi	r3,fp,4095
   35694:	183f2f1e 	bne	r3,zero,35354 <_malloc_r+0x3a0>
   35698:	98c00217 	ldw	r3,8(r19)
   3569c:	bd49883a 	add	r4,r23,r21
   356a0:	21000054 	ori	r4,r4,1
   356a4:	19000115 	stw	r4,4(r3)
   356a8:	003f5506 	br	35400 <_malloc_r+0x44c>
   356ac:	01403f04 	movi	r5,252
   356b0:	01001f84 	movi	r4,126
   356b4:	003e8606 	br	350d0 <_malloc_r+0x11c>
   356b8:	9009883a 	mov	r4,r18
   356bc:	81400204 	addi	r5,r16,8
   356c0:	003441c0 	call	3441c <_free_r>
   356c4:	00800034 	movhi	r2,0
   356c8:	10877a04 	addi	r2,r2,7656
   356cc:	10800017 	ldw	r2,0(r2)
   356d0:	003f4b06 	br	35400 <_malloc_r+0x44c>
   356d4:	00c00044 	movi	r3,1
   356d8:	002f883a 	mov	r23,zero
   356dc:	003f3406 	br	353b0 <_malloc_r+0x3fc>
   356e0:	d5200315 	stw	r20,-32756(gp)
   356e4:	003f2106 	br	3536c <_malloc_r+0x3b8>
   356e8:	01405504 	movi	r5,340
   356ec:	28c00436 	bltu	r5,r3,35700 <_malloc_r+0x74c>
   356f0:	100ad3fa 	srli	r5,r2,15
   356f4:	29401dc4 	addi	r5,r5,119
   356f8:	294d883a 	add	r6,r5,r5
   356fc:	003f6b06 	br	354ac <_malloc_r+0x4f8>
   35700:	01415504 	movi	r5,1364
   35704:	28c00936 	bltu	r5,r3,3572c <_malloc_r+0x778>
   35708:	100ad4ba 	srli	r5,r2,18
   3570c:	29401f04 	addi	r5,r5,124
   35710:	294d883a 	add	r6,r5,r5
   35714:	003f6506 	br	354ac <_malloc_r+0x4f8>
   35718:	98800117 	ldw	r2,4(r19)
   3571c:	0146303a 	nor	r3,zero,r5
   35720:	1884703a 	and	r2,r3,r2
   35724:	98800115 	stw	r2,4(r19)
   35728:	003f9006 	br	3556c <_malloc_r+0x5b8>
   3572c:	01803f04 	movi	r6,252
   35730:	01401f84 	movi	r5,126
   35734:	003f5d06 	br	354ac <_malloc_r+0x4f8>

00035738 <memchr>:
   35738:	008000c4 	movi	r2,3
   3573c:	29403fcc 	andi	r5,r5,255
   35740:	1180282e 	bgeu	r2,r6,357e4 <memchr+0xac>
   35744:	2086703a 	and	r3,r4,r2
   35748:	1800351e 	bne	r3,zero,35820 <memchr+0xe8>
   3574c:	2816923a 	slli	r11,r5,8
   35750:	2093883a 	add	r9,r4,r2
   35754:	22000084 	addi	r8,r4,2
   35758:	5957883a 	add	r11,r11,r5
   3575c:	5816923a 	slli	r11,r11,8
   35760:	20c00044 	addi	r3,r4,1
   35764:	037fbff4 	movhi	r13,65279
   35768:	6b7fbfc4 	addi	r13,r13,-257
   3576c:	5957883a 	add	r11,r11,r5
   35770:	5816923a 	slli	r11,r11,8
   35774:	03202074 	movhi	r12,32897
   35778:	63202004 	addi	r12,r12,-32640
   3577c:	101d883a 	mov	r14,r2
   35780:	5957883a 	add	r11,r11,r5
   35784:	21c00017 	ldw	r7,0(r4)
   35788:	31bfff04 	addi	r6,r6,-4
   3578c:	1805883a 	mov	r2,r3
   35790:	3acef03a 	xor	r7,r7,r11
   35794:	3b55883a 	add	r10,r7,r13
   35798:	01ce303a 	nor	r7,zero,r7
   3579c:	51ce703a 	and	r7,r10,r7
   357a0:	3b0e703a 	and	r7,r7,r12
   357a4:	38000a26 	beq	r7,zero,357d0 <memchr+0x98>
   357a8:	21c00003 	ldbu	r7,0(r4)
   357ac:	39401e26 	beq	r7,r5,35828 <memchr+0xf0>
   357b0:	19c00003 	ldbu	r7,0(r3)
   357b4:	39401926 	beq	r7,r5,3581c <memchr+0xe4>
   357b8:	41c00003 	ldbu	r7,0(r8)
   357bc:	4005883a 	mov	r2,r8
   357c0:	39401626 	beq	r7,r5,3581c <memchr+0xe4>
   357c4:	49c00003 	ldbu	r7,0(r9)
   357c8:	4805883a 	mov	r2,r9
   357cc:	39401326 	beq	r7,r5,3581c <memchr+0xe4>
   357d0:	21000104 	addi	r4,r4,4
   357d4:	4a400104 	addi	r9,r9,4
   357d8:	42000104 	addi	r8,r8,4
   357dc:	18c00104 	addi	r3,r3,4
   357e0:	71bfe836 	bltu	r14,r6,35784 <memchr+0x4c>
   357e4:	2005883a 	mov	r2,r4
   357e8:	30000a26 	beq	r6,zero,35814 <memchr+0xdc>
   357ec:	10c00003 	ldbu	r3,0(r2)
   357f0:	19400a26 	beq	r3,r5,3581c <memchr+0xe4>
   357f4:	10c00044 	addi	r3,r2,1
   357f8:	118d883a 	add	r6,r2,r6
   357fc:	00000306 	br	3580c <memchr+0xd4>
   35800:	11000003 	ldbu	r4,0(r2)
   35804:	18c00044 	addi	r3,r3,1
   35808:	21400426 	beq	r4,r5,3581c <memchr+0xe4>
   3580c:	1805883a 	mov	r2,r3
   35810:	19bffb1e 	bne	r3,r6,35800 <memchr+0xc8>
   35814:	0005883a 	mov	r2,zero
   35818:	f800283a 	ret
   3581c:	f800283a 	ret
   35820:	2005883a 	mov	r2,r4
   35824:	003ff106 	br	357ec <memchr+0xb4>
   35828:	2005883a 	mov	r2,r4
   3582c:	f800283a 	ret

00035830 <memcpy>:
   35830:	defffb04 	addi	sp,sp,-20
   35834:	dc000015 	stw	r16,0(sp)
   35838:	dfc00415 	stw	ra,16(sp)
   3583c:	dcc00315 	stw	r19,12(sp)
   35840:	dc800215 	stw	r18,8(sp)
   35844:	dc400115 	stw	r17,4(sp)
   35848:	00c003c4 	movi	r3,15
   3584c:	2021883a 	mov	r16,r4
   35850:	3005883a 	mov	r2,r6
   35854:	1980032e 	bgeu	r3,r6,35864 <memcpy+0x34>
   35858:	2906b03a 	or	r3,r5,r4
   3585c:	18c000cc 	andi	r3,r3,3
   35860:	18001026 	beq	r3,zero,358a4 <memcpy+0x74>
   35864:	8007883a 	mov	r3,r16
   35868:	288f883a 	add	r7,r5,r2
   3586c:	10000526 	beq	r2,zero,35884 <memcpy+0x54>
   35870:	29800003 	ldbu	r6,0(r5)
   35874:	18c00044 	addi	r3,r3,1
   35878:	29400044 	addi	r5,r5,1
   3587c:	19bfffc5 	stb	r6,-1(r3)
   35880:	29fffb1e 	bne	r5,r7,35870 <memcpy+0x40>
   35884:	8005883a 	mov	r2,r16
   35888:	dfc00417 	ldw	ra,16(sp)
   3588c:	dcc00317 	ldw	r19,12(sp)
   35890:	dc800217 	ldw	r18,8(sp)
   35894:	dc400117 	ldw	r17,4(sp)
   35898:	dc000017 	ldw	r16,0(sp)
   3589c:	dec00504 	addi	sp,sp,20
   358a0:	f800283a 	ret
   358a4:	32bffc04 	addi	r10,r6,-16
   358a8:	5014d13a 	srli	r10,r10,4
   358ac:	20800404 	addi	r2,r4,16
   358b0:	2007883a 	mov	r3,r4
   358b4:	5008913a 	slli	r4,r10,4
   358b8:	280f883a 	mov	r7,r5
   358bc:	1105883a 	add	r2,r2,r4
   358c0:	3a000017 	ldw	r8,0(r7)
   358c4:	18c00404 	addi	r3,r3,16
   358c8:	39c00404 	addi	r7,r7,16
   358cc:	1a3ffc15 	stw	r8,-16(r3)
   358d0:	3a3ffd17 	ldw	r8,-12(r7)
   358d4:	1a3ffd15 	stw	r8,-12(r3)
   358d8:	3a3ffe17 	ldw	r8,-8(r7)
   358dc:	1a3ffe15 	stw	r8,-8(r3)
   358e0:	3a3fff17 	ldw	r8,-4(r7)
   358e4:	1a3fff15 	stw	r8,-4(r3)
   358e8:	18bff51e 	bne	r3,r2,358c0 <memcpy+0x90>
   358ec:	52800044 	addi	r10,r10,1
   358f0:	5014913a 	slli	r10,r10,4
   358f4:	308003cc 	andi	r2,r6,15
   358f8:	010000c4 	movi	r4,3
   358fc:	8287883a 	add	r3,r16,r10
   35900:	2a95883a 	add	r10,r5,r10
   35904:	2080182e 	bgeu	r4,r2,35968 <memcpy+0x138>
   35908:	147fff04 	addi	r17,r2,-4
   3590c:	8808d0ba 	srli	r4,r17,2
   35910:	1a400104 	addi	r9,r3,4
   35914:	180d883a 	mov	r6,r3
   35918:	2105883a 	add	r2,r4,r4
   3591c:	1085883a 	add	r2,r2,r2
   35920:	4893883a 	add	r9,r9,r2
   35924:	500f883a 	mov	r7,r10
   35928:	3a000017 	ldw	r8,0(r7)
   3592c:	31800104 	addi	r6,r6,4
   35930:	39c00104 	addi	r7,r7,4
   35934:	323fff15 	stw	r8,-4(r6)
   35938:	327ffb1e 	bne	r6,r9,35928 <memcpy+0xf8>
   3593c:	20800044 	addi	r2,r4,1
   35940:	1085883a 	add	r2,r2,r2
   35944:	1085883a 	add	r2,r2,r2
   35948:	017fff04 	movi	r5,-4
   3594c:	18a5883a 	add	r18,r3,r2
   35950:	50a7883a 	add	r19,r10,r2
   35954:	00394480 	call	39448 <__mulsi3>
   35958:	1445883a 	add	r2,r2,r17
   3595c:	980b883a 	mov	r5,r19
   35960:	9007883a 	mov	r3,r18
   35964:	003fc006 	br	35868 <memcpy+0x38>
   35968:	500b883a 	mov	r5,r10
   3596c:	003fbe06 	br	35868 <memcpy+0x38>

00035970 <memmove>:
   35970:	defffb04 	addi	sp,sp,-20
   35974:	dc000015 	stw	r16,0(sp)
   35978:	dfc00415 	stw	ra,16(sp)
   3597c:	dcc00315 	stw	r19,12(sp)
   35980:	dc800215 	stw	r18,8(sp)
   35984:	dc400115 	stw	r17,4(sp)
   35988:	2021883a 	mov	r16,r4
   3598c:	300f883a 	mov	r7,r6
   35990:	2900122e 	bgeu	r5,r4,359dc <memmove+0x6c>
   35994:	2987883a 	add	r3,r5,r6
   35998:	20c0102e 	bgeu	r4,r3,359dc <memmove+0x6c>
   3599c:	218b883a 	add	r5,r4,r6
   359a0:	1989c83a 	sub	r4,r3,r6
   359a4:	30000526 	beq	r6,zero,359bc <memmove+0x4c>
   359a8:	18ffffc4 	addi	r3,r3,-1
   359ac:	18800003 	ldbu	r2,0(r3)
   359b0:	297fffc4 	addi	r5,r5,-1
   359b4:	28800005 	stb	r2,0(r5)
   359b8:	193ffb1e 	bne	r3,r4,359a8 <memmove+0x38>
   359bc:	8005883a 	mov	r2,r16
   359c0:	dfc00417 	ldw	ra,16(sp)
   359c4:	dcc00317 	ldw	r19,12(sp)
   359c8:	dc800217 	ldw	r18,8(sp)
   359cc:	dc400117 	ldw	r17,4(sp)
   359d0:	dc000017 	ldw	r16,0(sp)
   359d4:	dec00504 	addi	sp,sp,20
   359d8:	f800283a 	ret
   359dc:	008003c4 	movi	r2,15
   359e0:	1180422e 	bgeu	r2,r6,35aec <memmove+0x17c>
   359e4:	2c04b03a 	or	r2,r5,r16
   359e8:	108000cc 	andi	r2,r2,3
   359ec:	10003f1e 	bne	r2,zero,35aec <memmove+0x17c>
   359f0:	32bffc04 	addi	r10,r6,-16
   359f4:	5014d13a 	srli	r10,r10,4
   359f8:	81000404 	addi	r4,r16,16
   359fc:	8007883a 	mov	r3,r16
   35a00:	5004913a 	slli	r2,r10,4
   35a04:	280f883a 	mov	r7,r5
   35a08:	2089883a 	add	r4,r4,r2
   35a0c:	38800017 	ldw	r2,0(r7)
   35a10:	18c00404 	addi	r3,r3,16
   35a14:	39c00404 	addi	r7,r7,16
   35a18:	18bffc15 	stw	r2,-16(r3)
   35a1c:	38bffd17 	ldw	r2,-12(r7)
   35a20:	18bffd15 	stw	r2,-12(r3)
   35a24:	38bffe17 	ldw	r2,-8(r7)
   35a28:	18bffe15 	stw	r2,-8(r3)
   35a2c:	38bfff17 	ldw	r2,-4(r7)
   35a30:	18bfff15 	stw	r2,-4(r3)
   35a34:	193ff51e 	bne	r3,r4,35a0c <memmove+0x9c>
   35a38:	52800044 	addi	r10,r10,1
   35a3c:	5014913a 	slli	r10,r10,4
   35a40:	31c003cc 	andi	r7,r6,15
   35a44:	008000c4 	movi	r2,3
   35a48:	8287883a 	add	r3,r16,r10
   35a4c:	2a95883a 	add	r10,r5,r10
   35a50:	11c0282e 	bgeu	r2,r7,35af4 <memmove+0x184>
   35a54:	3c7fff04 	addi	r17,r7,-4
   35a58:	8808d0ba 	srli	r4,r17,2
   35a5c:	1a400104 	addi	r9,r3,4
   35a60:	180d883a 	mov	r6,r3
   35a64:	2105883a 	add	r2,r4,r4
   35a68:	1085883a 	add	r2,r2,r2
   35a6c:	4893883a 	add	r9,r9,r2
   35a70:	5005883a 	mov	r2,r10
   35a74:	12000017 	ldw	r8,0(r2)
   35a78:	31800104 	addi	r6,r6,4
   35a7c:	10800104 	addi	r2,r2,4
   35a80:	323fff15 	stw	r8,-4(r6)
   35a84:	327ffb1e 	bne	r6,r9,35a74 <memmove+0x104>
   35a88:	20800044 	addi	r2,r4,1
   35a8c:	1085883a 	add	r2,r2,r2
   35a90:	1085883a 	add	r2,r2,r2
   35a94:	017fff04 	movi	r5,-4
   35a98:	18a5883a 	add	r18,r3,r2
   35a9c:	50a7883a 	add	r19,r10,r2
   35aa0:	00394480 	call	39448 <__mulsi3>
   35aa4:	144f883a 	add	r7,r2,r17
   35aa8:	980b883a 	mov	r5,r19
   35aac:	9007883a 	mov	r3,r18
   35ab0:	383fc226 	beq	r7,zero,359bc <memmove+0x4c>
   35ab4:	19cf883a 	add	r7,r3,r7
   35ab8:	29800003 	ldbu	r6,0(r5)
   35abc:	18c00044 	addi	r3,r3,1
   35ac0:	29400044 	addi	r5,r5,1
   35ac4:	19bfffc5 	stb	r6,-1(r3)
   35ac8:	19fffb1e 	bne	r3,r7,35ab8 <memmove+0x148>
   35acc:	8005883a 	mov	r2,r16
   35ad0:	dfc00417 	ldw	ra,16(sp)
   35ad4:	dcc00317 	ldw	r19,12(sp)
   35ad8:	dc800217 	ldw	r18,8(sp)
   35adc:	dc400117 	ldw	r17,4(sp)
   35ae0:	dc000017 	ldw	r16,0(sp)
   35ae4:	dec00504 	addi	sp,sp,20
   35ae8:	f800283a 	ret
   35aec:	8007883a 	mov	r3,r16
   35af0:	003fef06 	br	35ab0 <memmove+0x140>
   35af4:	500b883a 	mov	r5,r10
   35af8:	003fed06 	br	35ab0 <memmove+0x140>

00035afc <memset>:
   35afc:	00c000c4 	movi	r3,3
   35b00:	2005883a 	mov	r2,r4
   35b04:	29403fcc 	andi	r5,r5,255
   35b08:	19802d2e 	bgeu	r3,r6,35bc0 <memset+0xc4>
   35b0c:	20c6703a 	and	r3,r4,r3
   35b10:	18002e1e 	bne	r3,zero,35bcc <memset+0xd0>
   35b14:	2806923a 	slli	r3,r5,8
   35b18:	010003c4 	movi	r4,15
   35b1c:	3011883a 	mov	r8,r6
   35b20:	1946b03a 	or	r3,r3,r5
   35b24:	180e943a 	slli	r7,r3,16
   35b28:	38ceb03a 	or	r7,r7,r3
   35b2c:	1007883a 	mov	r3,r2
   35b30:	21800f2e 	bgeu	r4,r6,35b70 <memset+0x74>
   35b34:	19c00015 	stw	r7,0(r3)
   35b38:	19c00115 	stw	r7,4(r3)
   35b3c:	19c00215 	stw	r7,8(r3)
   35b40:	19c00315 	stw	r7,12(r3)
   35b44:	423ffc04 	addi	r8,r8,-16
   35b48:	18c00404 	addi	r3,r3,16
   35b4c:	223ff936 	bltu	r4,r8,35b34 <memset+0x38>
   35b50:	30fffc04 	addi	r3,r6,-16
   35b54:	1806d13a 	srli	r3,r3,4
   35b58:	318003cc 	andi	r6,r6,15
   35b5c:	010000c4 	movi	r4,3
   35b60:	18c00044 	addi	r3,r3,1
   35b64:	1806913a 	slli	r3,r3,4
   35b68:	10c7883a 	add	r3,r2,r3
   35b6c:	21800e2e 	bgeu	r4,r6,35ba8 <memset+0xac>
   35b70:	1813883a 	mov	r9,r3
   35b74:	3011883a 	mov	r8,r6
   35b78:	010000c4 	movi	r4,3
   35b7c:	49c00015 	stw	r7,0(r9)
   35b80:	423fff04 	addi	r8,r8,-4
   35b84:	4a400104 	addi	r9,r9,4
   35b88:	223ffc36 	bltu	r4,r8,35b7c <memset+0x80>
   35b8c:	313fff04 	addi	r4,r6,-4
   35b90:	2008d0ba 	srli	r4,r4,2
   35b94:	318000cc 	andi	r6,r6,3
   35b98:	21000044 	addi	r4,r4,1
   35b9c:	2109883a 	add	r4,r4,r4
   35ba0:	2109883a 	add	r4,r4,r4
   35ba4:	1907883a 	add	r3,r3,r4
   35ba8:	30000a26 	beq	r6,zero,35bd4 <memset+0xd8>
   35bac:	198d883a 	add	r6,r3,r6
   35bb0:	19400005 	stb	r5,0(r3)
   35bb4:	18c00044 	addi	r3,r3,1
   35bb8:	19bffd1e 	bne	r3,r6,35bb0 <memset+0xb4>
   35bbc:	f800283a 	ret
   35bc0:	2007883a 	mov	r3,r4
   35bc4:	303ff91e 	bne	r6,zero,35bac <memset+0xb0>
   35bc8:	00000206 	br	35bd4 <memset+0xd8>
   35bcc:	2007883a 	mov	r3,r4
   35bd0:	003ff606 	br	35bac <memset+0xb0>
   35bd4:	f800283a 	ret

00035bd8 <_Balloc>:
   35bd8:	20801317 	ldw	r2,76(r4)
   35bdc:	defffc04 	addi	sp,sp,-16
   35be0:	dc400115 	stw	r17,4(sp)
   35be4:	dc000015 	stw	r16,0(sp)
   35be8:	dfc00315 	stw	ra,12(sp)
   35bec:	dc800215 	stw	r18,8(sp)
   35bf0:	2023883a 	mov	r17,r4
   35bf4:	2821883a 	mov	r16,r5
   35bf8:	10000f26 	beq	r2,zero,35c38 <_Balloc+0x60>
   35bfc:	8407883a 	add	r3,r16,r16
   35c00:	18c7883a 	add	r3,r3,r3
   35c04:	10c7883a 	add	r3,r2,r3
   35c08:	18800017 	ldw	r2,0(r3)
   35c0c:	10001126 	beq	r2,zero,35c54 <_Balloc+0x7c>
   35c10:	11000017 	ldw	r4,0(r2)
   35c14:	19000015 	stw	r4,0(r3)
   35c18:	10000415 	stw	zero,16(r2)
   35c1c:	10000315 	stw	zero,12(r2)
   35c20:	dfc00317 	ldw	ra,12(sp)
   35c24:	dc800217 	ldw	r18,8(sp)
   35c28:	dc400117 	ldw	r17,4(sp)
   35c2c:	dc000017 	ldw	r16,0(sp)
   35c30:	dec00404 	addi	sp,sp,16
   35c34:	f800283a 	ret
   35c38:	01400104 	movi	r5,4
   35c3c:	01800404 	movi	r6,16
   35c40:	003753c0 	call	3753c <_calloc_r>
   35c44:	88801315 	stw	r2,76(r17)
   35c48:	103fec1e 	bne	r2,zero,35bfc <_Balloc+0x24>
   35c4c:	0005883a 	mov	r2,zero
   35c50:	003ff306 	br	35c20 <_Balloc+0x48>
   35c54:	01400044 	movi	r5,1
   35c58:	2c24983a 	sll	r18,r5,r16
   35c5c:	8809883a 	mov	r4,r17
   35c60:	91800144 	addi	r6,r18,5
   35c64:	318d883a 	add	r6,r6,r6
   35c68:	318d883a 	add	r6,r6,r6
   35c6c:	003753c0 	call	3753c <_calloc_r>
   35c70:	103ff626 	beq	r2,zero,35c4c <_Balloc+0x74>
   35c74:	14000115 	stw	r16,4(r2)
   35c78:	14800215 	stw	r18,8(r2)
   35c7c:	003fe606 	br	35c18 <_Balloc+0x40>

00035c80 <_Bfree>:
   35c80:	28000826 	beq	r5,zero,35ca4 <_Bfree+0x24>
   35c84:	28c00117 	ldw	r3,4(r5)
   35c88:	20801317 	ldw	r2,76(r4)
   35c8c:	18c7883a 	add	r3,r3,r3
   35c90:	18c7883a 	add	r3,r3,r3
   35c94:	10c5883a 	add	r2,r2,r3
   35c98:	10c00017 	ldw	r3,0(r2)
   35c9c:	28c00015 	stw	r3,0(r5)
   35ca0:	11400015 	stw	r5,0(r2)
   35ca4:	f800283a 	ret

00035ca8 <__multadd>:
   35ca8:	defff604 	addi	sp,sp,-40
   35cac:	dd400515 	stw	r21,20(sp)
   35cb0:	2d400417 	ldw	r21,16(r5)
   35cb4:	df000815 	stw	fp,32(sp)
   35cb8:	ddc00715 	stw	r23,28(sp)
   35cbc:	dd800615 	stw	r22,24(sp)
   35cc0:	dd000415 	stw	r20,16(sp)
   35cc4:	dc400115 	stw	r17,4(sp)
   35cc8:	dc000015 	stw	r16,0(sp)
   35ccc:	dfc00915 	stw	ra,36(sp)
   35cd0:	dcc00315 	stw	r19,12(sp)
   35cd4:	dc800215 	stw	r18,8(sp)
   35cd8:	282d883a 	mov	r22,r5
   35cdc:	202f883a 	mov	r23,r4
   35ce0:	3029883a 	mov	r20,r6
   35ce4:	3839883a 	mov	fp,r7
   35ce8:	2c000504 	addi	r16,r5,20
   35cec:	0023883a 	mov	r17,zero
   35cf0:	84c00017 	ldw	r19,0(r16)
   35cf4:	a00b883a 	mov	r5,r20
   35cf8:	8c400044 	addi	r17,r17,1
   35cfc:	993fffcc 	andi	r4,r19,65535
   35d00:	00394480 	call	39448 <__mulsi3>
   35d04:	1725883a 	add	r18,r2,fp
   35d08:	9808d43a 	srli	r4,r19,16
   35d0c:	9026d43a 	srli	r19,r18,16
   35d10:	a00b883a 	mov	r5,r20
   35d14:	00394480 	call	39448 <__mulsi3>
   35d18:	988f883a 	add	r7,r19,r2
   35d1c:	3804943a 	slli	r2,r7,16
   35d20:	94bfffcc 	andi	r18,r18,65535
   35d24:	3838d43a 	srli	fp,r7,16
   35d28:	14a5883a 	add	r18,r2,r18
   35d2c:	84800015 	stw	r18,0(r16)
   35d30:	84000104 	addi	r16,r16,4
   35d34:	8d7fee16 	blt	r17,r21,35cf0 <__multadd+0x48>
   35d38:	e0000926 	beq	fp,zero,35d60 <__multadd+0xb8>
   35d3c:	b0800217 	ldw	r2,8(r22)
   35d40:	a880140e 	bge	r21,r2,35d94 <__multadd+0xec>
   35d44:	a8800144 	addi	r2,r21,5
   35d48:	1085883a 	add	r2,r2,r2
   35d4c:	1085883a 	add	r2,r2,r2
   35d50:	b085883a 	add	r2,r22,r2
   35d54:	ad400044 	addi	r21,r21,1
   35d58:	17000015 	stw	fp,0(r2)
   35d5c:	b5400415 	stw	r21,16(r22)
   35d60:	b005883a 	mov	r2,r22
   35d64:	dfc00917 	ldw	ra,36(sp)
   35d68:	df000817 	ldw	fp,32(sp)
   35d6c:	ddc00717 	ldw	r23,28(sp)
   35d70:	dd800617 	ldw	r22,24(sp)
   35d74:	dd400517 	ldw	r21,20(sp)
   35d78:	dd000417 	ldw	r20,16(sp)
   35d7c:	dcc00317 	ldw	r19,12(sp)
   35d80:	dc800217 	ldw	r18,8(sp)
   35d84:	dc400117 	ldw	r17,4(sp)
   35d88:	dc000017 	ldw	r16,0(sp)
   35d8c:	dec00a04 	addi	sp,sp,40
   35d90:	f800283a 	ret
   35d94:	b1400117 	ldw	r5,4(r22)
   35d98:	b809883a 	mov	r4,r23
   35d9c:	29400044 	addi	r5,r5,1
   35da0:	0035bd80 	call	35bd8 <_Balloc>
   35da4:	b1800417 	ldw	r6,16(r22)
   35da8:	b1400304 	addi	r5,r22,12
   35dac:	11000304 	addi	r4,r2,12
   35db0:	31800084 	addi	r6,r6,2
   35db4:	318d883a 	add	r6,r6,r6
   35db8:	318d883a 	add	r6,r6,r6
   35dbc:	1021883a 	mov	r16,r2
   35dc0:	00358300 	call	35830 <memcpy>
   35dc4:	b0c00117 	ldw	r3,4(r22)
   35dc8:	b8801317 	ldw	r2,76(r23)
   35dcc:	18c7883a 	add	r3,r3,r3
   35dd0:	18c7883a 	add	r3,r3,r3
   35dd4:	10c5883a 	add	r2,r2,r3
   35dd8:	10c00017 	ldw	r3,0(r2)
   35ddc:	b0c00015 	stw	r3,0(r22)
   35de0:	15800015 	stw	r22,0(r2)
   35de4:	802d883a 	mov	r22,r16
   35de8:	003fd606 	br	35d44 <__multadd+0x9c>

00035dec <__s2b>:
   35dec:	defff904 	addi	sp,sp,-28
   35df0:	dd000415 	stw	r20,16(sp)
   35df4:	dc400115 	stw	r17,4(sp)
   35df8:	2829883a 	mov	r20,r5
   35dfc:	2023883a 	mov	r17,r4
   35e00:	01400244 	movi	r5,9
   35e04:	39000204 	addi	r4,r7,8
   35e08:	dcc00315 	stw	r19,12(sp)
   35e0c:	dc800215 	stw	r18,8(sp)
   35e10:	dfc00615 	stw	ra,24(sp)
   35e14:	dd400515 	stw	r21,20(sp)
   35e18:	dc000015 	stw	r16,0(sp)
   35e1c:	3825883a 	mov	r18,r7
   35e20:	3027883a 	mov	r19,r6
   35e24:	003938c0 	call	3938c <__divsi3>
   35e28:	00c00044 	movi	r3,1
   35e2c:	000b883a 	mov	r5,zero
   35e30:	1880030e 	bge	r3,r2,35e40 <__s2b+0x54>
   35e34:	18c7883a 	add	r3,r3,r3
   35e38:	29400044 	addi	r5,r5,1
   35e3c:	18bffd16 	blt	r3,r2,35e34 <__s2b+0x48>
   35e40:	8809883a 	mov	r4,r17
   35e44:	0035bd80 	call	35bd8 <_Balloc>
   35e48:	d8c00717 	ldw	r3,28(sp)
   35e4c:	10c00515 	stw	r3,20(r2)
   35e50:	00c00044 	movi	r3,1
   35e54:	10c00415 	stw	r3,16(r2)
   35e58:	00c00244 	movi	r3,9
   35e5c:	1cc0210e 	bge	r3,r19,35ee4 <__s2b+0xf8>
   35e60:	a0eb883a 	add	r21,r20,r3
   35e64:	a821883a 	mov	r16,r21
   35e68:	a4e9883a 	add	r20,r20,r19
   35e6c:	81c00007 	ldb	r7,0(r16)
   35e70:	8809883a 	mov	r4,r17
   35e74:	84000044 	addi	r16,r16,1
   35e78:	100b883a 	mov	r5,r2
   35e7c:	01800284 	movi	r6,10
   35e80:	39fff404 	addi	r7,r7,-48
   35e84:	0035ca80 	call	35ca8 <__multadd>
   35e88:	853ff81e 	bne	r16,r20,35e6c <__s2b+0x80>
   35e8c:	ace1883a 	add	r16,r21,r19
   35e90:	843ffe04 	addi	r16,r16,-8
   35e94:	9c800a0e 	bge	r19,r18,35ec0 <__s2b+0xd4>
   35e98:	94e5c83a 	sub	r18,r18,r19
   35e9c:	84a5883a 	add	r18,r16,r18
   35ea0:	81c00007 	ldb	r7,0(r16)
   35ea4:	8809883a 	mov	r4,r17
   35ea8:	84000044 	addi	r16,r16,1
   35eac:	100b883a 	mov	r5,r2
   35eb0:	01800284 	movi	r6,10
   35eb4:	39fff404 	addi	r7,r7,-48
   35eb8:	0035ca80 	call	35ca8 <__multadd>
   35ebc:	84bff81e 	bne	r16,r18,35ea0 <__s2b+0xb4>
   35ec0:	dfc00617 	ldw	ra,24(sp)
   35ec4:	dd400517 	ldw	r21,20(sp)
   35ec8:	dd000417 	ldw	r20,16(sp)
   35ecc:	dcc00317 	ldw	r19,12(sp)
   35ed0:	dc800217 	ldw	r18,8(sp)
   35ed4:	dc400117 	ldw	r17,4(sp)
   35ed8:	dc000017 	ldw	r16,0(sp)
   35edc:	dec00704 	addi	sp,sp,28
   35ee0:	f800283a 	ret
   35ee4:	a4000284 	addi	r16,r20,10
   35ee8:	1827883a 	mov	r19,r3
   35eec:	003fe906 	br	35e94 <__s2b+0xa8>

00035ef0 <__hi0bits>:
   35ef0:	20bfffec 	andhi	r2,r4,65535
   35ef4:	1000141e 	bne	r2,zero,35f48 <__hi0bits+0x58>
   35ef8:	2008943a 	slli	r4,r4,16
   35efc:	00800404 	movi	r2,16
   35f00:	20ffc02c 	andhi	r3,r4,65280
   35f04:	1800021e 	bne	r3,zero,35f10 <__hi0bits+0x20>
   35f08:	2008923a 	slli	r4,r4,8
   35f0c:	10800204 	addi	r2,r2,8
   35f10:	20fc002c 	andhi	r3,r4,61440
   35f14:	1800021e 	bne	r3,zero,35f20 <__hi0bits+0x30>
   35f18:	2008913a 	slli	r4,r4,4
   35f1c:	10800104 	addi	r2,r2,4
   35f20:	20f0002c 	andhi	r3,r4,49152
   35f24:	1800031e 	bne	r3,zero,35f34 <__hi0bits+0x44>
   35f28:	2109883a 	add	r4,r4,r4
   35f2c:	10800084 	addi	r2,r2,2
   35f30:	2109883a 	add	r4,r4,r4
   35f34:	20000316 	blt	r4,zero,35f44 <__hi0bits+0x54>
   35f38:	2110002c 	andhi	r4,r4,16384
   35f3c:	2000041e 	bne	r4,zero,35f50 <__hi0bits+0x60>
   35f40:	00800804 	movi	r2,32
   35f44:	f800283a 	ret
   35f48:	0005883a 	mov	r2,zero
   35f4c:	003fec06 	br	35f00 <__hi0bits+0x10>
   35f50:	10800044 	addi	r2,r2,1
   35f54:	f800283a 	ret

00035f58 <__lo0bits>:
   35f58:	20c00017 	ldw	r3,0(r4)
   35f5c:	188001cc 	andi	r2,r3,7
   35f60:	10000826 	beq	r2,zero,35f84 <__lo0bits+0x2c>
   35f64:	1880004c 	andi	r2,r3,1
   35f68:	1000211e 	bne	r2,zero,35ff0 <__lo0bits+0x98>
   35f6c:	1880008c 	andi	r2,r3,2
   35f70:	1000211e 	bne	r2,zero,35ff8 <__lo0bits+0xa0>
   35f74:	1806d0ba 	srli	r3,r3,2
   35f78:	00800084 	movi	r2,2
   35f7c:	20c00015 	stw	r3,0(r4)
   35f80:	f800283a 	ret
   35f84:	18bfffcc 	andi	r2,r3,65535
   35f88:	10001326 	beq	r2,zero,35fd8 <__lo0bits+0x80>
   35f8c:	0005883a 	mov	r2,zero
   35f90:	19403fcc 	andi	r5,r3,255
   35f94:	2800021e 	bne	r5,zero,35fa0 <__lo0bits+0x48>
   35f98:	1806d23a 	srli	r3,r3,8
   35f9c:	10800204 	addi	r2,r2,8
   35fa0:	194003cc 	andi	r5,r3,15
   35fa4:	2800021e 	bne	r5,zero,35fb0 <__lo0bits+0x58>
   35fa8:	1806d13a 	srli	r3,r3,4
   35fac:	10800104 	addi	r2,r2,4
   35fb0:	194000cc 	andi	r5,r3,3
   35fb4:	2800021e 	bne	r5,zero,35fc0 <__lo0bits+0x68>
   35fb8:	1806d0ba 	srli	r3,r3,2
   35fbc:	10800084 	addi	r2,r2,2
   35fc0:	1940004c 	andi	r5,r3,1
   35fc4:	2800081e 	bne	r5,zero,35fe8 <__lo0bits+0x90>
   35fc8:	1806d07a 	srli	r3,r3,1
   35fcc:	1800051e 	bne	r3,zero,35fe4 <__lo0bits+0x8c>
   35fd0:	00800804 	movi	r2,32
   35fd4:	f800283a 	ret
   35fd8:	1806d43a 	srli	r3,r3,16
   35fdc:	00800404 	movi	r2,16
   35fe0:	003feb06 	br	35f90 <__lo0bits+0x38>
   35fe4:	10800044 	addi	r2,r2,1
   35fe8:	20c00015 	stw	r3,0(r4)
   35fec:	f800283a 	ret
   35ff0:	0005883a 	mov	r2,zero
   35ff4:	f800283a 	ret
   35ff8:	1806d07a 	srli	r3,r3,1
   35ffc:	00800044 	movi	r2,1
   36000:	20c00015 	stw	r3,0(r4)
   36004:	f800283a 	ret

00036008 <__i2b>:
   36008:	defffd04 	addi	sp,sp,-12
   3600c:	dc000015 	stw	r16,0(sp)
   36010:	04000044 	movi	r16,1
   36014:	dc400115 	stw	r17,4(sp)
   36018:	2823883a 	mov	r17,r5
   3601c:	800b883a 	mov	r5,r16
   36020:	dfc00215 	stw	ra,8(sp)
   36024:	0035bd80 	call	35bd8 <_Balloc>
   36028:	14400515 	stw	r17,20(r2)
   3602c:	14000415 	stw	r16,16(r2)
   36030:	dfc00217 	ldw	ra,8(sp)
   36034:	dc400117 	ldw	r17,4(sp)
   36038:	dc000017 	ldw	r16,0(sp)
   3603c:	dec00304 	addi	sp,sp,12
   36040:	f800283a 	ret

00036044 <__multiply>:
   36044:	defff004 	addi	sp,sp,-64
   36048:	dc800815 	stw	r18,32(sp)
   3604c:	dc400715 	stw	r17,28(sp)
   36050:	34800417 	ldw	r18,16(r6)
   36054:	2c400417 	ldw	r17,16(r5)
   36058:	ddc00d15 	stw	r23,52(sp)
   3605c:	dc000615 	stw	r16,24(sp)
   36060:	dfc00f15 	stw	ra,60(sp)
   36064:	df000e15 	stw	fp,56(sp)
   36068:	dd800c15 	stw	r22,48(sp)
   3606c:	dd400b15 	stw	r21,44(sp)
   36070:	dd000a15 	stw	r20,40(sp)
   36074:	dcc00915 	stw	r19,36(sp)
   36078:	2821883a 	mov	r16,r5
   3607c:	302f883a 	mov	r23,r6
   36080:	8c80050e 	bge	r17,r18,36098 <__multiply+0x54>
   36084:	8807883a 	mov	r3,r17
   36088:	3021883a 	mov	r16,r6
   3608c:	9023883a 	mov	r17,r18
   36090:	282f883a 	mov	r23,r5
   36094:	1825883a 	mov	r18,r3
   36098:	80800217 	ldw	r2,8(r16)
   3609c:	8c87883a 	add	r3,r17,r18
   360a0:	d8c00115 	stw	r3,4(sp)
   360a4:	81400117 	ldw	r5,4(r16)
   360a8:	10c0010e 	bge	r2,r3,360b0 <__multiply+0x6c>
   360ac:	29400044 	addi	r5,r5,1
   360b0:	0035bd80 	call	35bd8 <_Balloc>
   360b4:	d8c00117 	ldw	r3,4(sp)
   360b8:	d8800515 	stw	r2,20(sp)
   360bc:	14c00504 	addi	r19,r2,20
   360c0:	1d400144 	addi	r21,r3,5
   360c4:	ad6b883a 	add	r21,r21,r21
   360c8:	ad6b883a 	add	r21,r21,r21
   360cc:	156b883a 	add	r21,r2,r21
   360d0:	dd400215 	stw	r21,8(sp)
   360d4:	9805883a 	mov	r2,r19
   360d8:	9d40042e 	bgeu	r19,r21,360ec <__multiply+0xa8>
   360dc:	d8c00217 	ldw	r3,8(sp)
   360e0:	10000015 	stw	zero,0(r2)
   360e4:	10800104 	addi	r2,r2,4
   360e8:	10fffc36 	bltu	r2,r3,360dc <__multiply+0x98>
   360ec:	94800144 	addi	r18,r18,5
   360f0:	94a5883a 	add	r18,r18,r18
   360f4:	94ad883a 	add	r22,r18,r18
   360f8:	8c400144 	addi	r17,r17,5
   360fc:	8c63883a 	add	r17,r17,r17
   36100:	bdad883a 	add	r22,r23,r22
   36104:	80c00504 	addi	r3,r16,20
   36108:	8c63883a 	add	r17,r17,r17
   3610c:	bc800504 	addi	r18,r23,20
   36110:	dd800315 	stw	r22,12(sp)
   36114:	d8c00415 	stw	r3,16(sp)
   36118:	dcc00015 	stw	r19,0(sp)
   3611c:	8463883a 	add	r17,r16,r17
   36120:	9580412e 	bgeu	r18,r22,36228 <__multiply+0x1e4>
   36124:	90800017 	ldw	r2,0(r18)
   36128:	173fffcc 	andi	fp,r2,65535
   3612c:	e0001a26 	beq	fp,zero,36198 <__multiply+0x154>
   36130:	dd000017 	ldw	r20,0(sp)
   36134:	dd800417 	ldw	r22,16(sp)
   36138:	002b883a 	mov	r21,zero
   3613c:	b4c00017 	ldw	r19,0(r22)
   36140:	a4000017 	ldw	r16,0(r20)
   36144:	e00b883a 	mov	r5,fp
   36148:	993fffcc 	andi	r4,r19,65535
   3614c:	00394480 	call	39448 <__mulsi3>
   36150:	9808d43a 	srli	r4,r19,16
   36154:	817fffcc 	andi	r5,r16,65535
   36158:	1145883a 	add	r2,r2,r5
   3615c:	e00b883a 	mov	r5,fp
   36160:	1567883a 	add	r19,r2,r21
   36164:	8020d43a 	srli	r16,r16,16
   36168:	00394480 	call	39448 <__mulsi3>
   3616c:	9808d43a 	srli	r4,r19,16
   36170:	1405883a 	add	r2,r2,r16
   36174:	a4c0000d 	sth	r19,0(r20)
   36178:	110f883a 	add	r7,r2,r4
   3617c:	a1c0008d 	sth	r7,2(r20)
   36180:	b5800104 	addi	r22,r22,4
   36184:	382ad43a 	srli	r21,r7,16
   36188:	a5000104 	addi	r20,r20,4
   3618c:	b47feb36 	bltu	r22,r17,3613c <__multiply+0xf8>
   36190:	a5400015 	stw	r21,0(r20)
   36194:	90800017 	ldw	r2,0(r18)
   36198:	1038d43a 	srli	fp,r2,16
   3619c:	e0001c26 	beq	fp,zero,36210 <__multiply+0x1cc>
   361a0:	d8c00017 	ldw	r3,0(sp)
   361a4:	dd000417 	ldw	r20,16(sp)
   361a8:	002b883a 	mov	r21,zero
   361ac:	1d800017 	ldw	r22,0(r3)
   361b0:	182f883a 	mov	r23,r3
   361b4:	b021883a 	mov	r16,r22
   361b8:	a4c00017 	ldw	r19,0(r20)
   361bc:	8020d43a 	srli	r16,r16,16
   361c0:	e00b883a 	mov	r5,fp
   361c4:	993fffcc 	andi	r4,r19,65535
   361c8:	00394480 	call	39448 <__mulsi3>
   361cc:	1405883a 	add	r2,r2,r16
   361d0:	9808d43a 	srli	r4,r19,16
   361d4:	156b883a 	add	r21,r2,r21
   361d8:	bdc00104 	addi	r23,r23,4
   361dc:	bdbfff0d 	sth	r22,-4(r23)
   361e0:	bd7fff8d 	sth	r21,-2(r23)
   361e4:	bc000017 	ldw	r16,0(r23)
   361e8:	e00b883a 	mov	r5,fp
   361ec:	00394480 	call	39448 <__mulsi3>
   361f0:	a80ed43a 	srli	r7,r21,16
   361f4:	813fffcc 	andi	r4,r16,65535
   361f8:	2085883a 	add	r2,r4,r2
   361fc:	11ed883a 	add	r22,r2,r7
   36200:	a5000104 	addi	r20,r20,4
   36204:	b02ad43a 	srli	r21,r22,16
   36208:	a47feb36 	bltu	r20,r17,361b8 <__multiply+0x174>
   3620c:	bd800015 	stw	r22,0(r23)
   36210:	d8c00017 	ldw	r3,0(sp)
   36214:	94800104 	addi	r18,r18,4
   36218:	18c00104 	addi	r3,r3,4
   3621c:	d8c00015 	stw	r3,0(sp)
   36220:	d8c00317 	ldw	r3,12(sp)
   36224:	90ffbf36 	bltu	r18,r3,36124 <__multiply+0xe0>
   36228:	d8c00117 	ldw	r3,4(sp)
   3622c:	00c00c0e 	bge	zero,r3,36260 <__multiply+0x21c>
   36230:	d8c00217 	ldw	r3,8(sp)
   36234:	18bfff17 	ldw	r2,-4(r3)
   36238:	1d7fff04 	addi	r21,r3,-4
   3623c:	10000326 	beq	r2,zero,3624c <__multiply+0x208>
   36240:	00000706 	br	36260 <__multiply+0x21c>
   36244:	a8800017 	ldw	r2,0(r21)
   36248:	1000051e 	bne	r2,zero,36260 <__multiply+0x21c>
   3624c:	d8c00117 	ldw	r3,4(sp)
   36250:	ad7fff04 	addi	r21,r21,-4
   36254:	18ffffc4 	addi	r3,r3,-1
   36258:	d8c00115 	stw	r3,4(sp)
   3625c:	183ff91e 	bne	r3,zero,36244 <__multiply+0x200>
   36260:	d8800517 	ldw	r2,20(sp)
   36264:	d8c00117 	ldw	r3,4(sp)
   36268:	10c00415 	stw	r3,16(r2)
   3626c:	dfc00f17 	ldw	ra,60(sp)
   36270:	df000e17 	ldw	fp,56(sp)
   36274:	ddc00d17 	ldw	r23,52(sp)
   36278:	dd800c17 	ldw	r22,48(sp)
   3627c:	dd400b17 	ldw	r21,44(sp)
   36280:	dd000a17 	ldw	r20,40(sp)
   36284:	dcc00917 	ldw	r19,36(sp)
   36288:	dc800817 	ldw	r18,32(sp)
   3628c:	dc400717 	ldw	r17,28(sp)
   36290:	dc000617 	ldw	r16,24(sp)
   36294:	dec01004 	addi	sp,sp,64
   36298:	f800283a 	ret

0003629c <__pow5mult>:
   3629c:	defffb04 	addi	sp,sp,-20
   362a0:	dcc00315 	stw	r19,12(sp)
   362a4:	dc800215 	stw	r18,8(sp)
   362a8:	dc000015 	stw	r16,0(sp)
   362ac:	dfc00415 	stw	ra,16(sp)
   362b0:	dc400115 	stw	r17,4(sp)
   362b4:	308000cc 	andi	r2,r6,3
   362b8:	3021883a 	mov	r16,r6
   362bc:	2027883a 	mov	r19,r4
   362c0:	2825883a 	mov	r18,r5
   362c4:	10002e1e 	bne	r2,zero,36380 <__pow5mult+0xe4>
   362c8:	8021d0ba 	srai	r16,r16,2
   362cc:	80001a26 	beq	r16,zero,36338 <__pow5mult+0x9c>
   362d0:	9c401217 	ldw	r17,72(r19)
   362d4:	8800061e 	bne	r17,zero,362f0 <__pow5mult+0x54>
   362d8:	00003406 	br	363ac <__pow5mult+0x110>
   362dc:	8021d07a 	srai	r16,r16,1
   362e0:	80001526 	beq	r16,zero,36338 <__pow5mult+0x9c>
   362e4:	88c00017 	ldw	r3,0(r17)
   362e8:	18001b26 	beq	r3,zero,36358 <__pow5mult+0xbc>
   362ec:	1823883a 	mov	r17,r3
   362f0:	80c0004c 	andi	r3,r16,1
   362f4:	183ff926 	beq	r3,zero,362dc <__pow5mult+0x40>
   362f8:	900b883a 	mov	r5,r18
   362fc:	880d883a 	mov	r6,r17
   36300:	9809883a 	mov	r4,r19
   36304:	00360440 	call	36044 <__multiply>
   36308:	90001b26 	beq	r18,zero,36378 <__pow5mult+0xdc>
   3630c:	91000117 	ldw	r4,4(r18)
   36310:	98c01317 	ldw	r3,76(r19)
   36314:	8021d07a 	srai	r16,r16,1
   36318:	2109883a 	add	r4,r4,r4
   3631c:	2109883a 	add	r4,r4,r4
   36320:	1907883a 	add	r3,r3,r4
   36324:	19000017 	ldw	r4,0(r3)
   36328:	91000015 	stw	r4,0(r18)
   3632c:	1c800015 	stw	r18,0(r3)
   36330:	1025883a 	mov	r18,r2
   36334:	803feb1e 	bne	r16,zero,362e4 <__pow5mult+0x48>
   36338:	9005883a 	mov	r2,r18
   3633c:	dfc00417 	ldw	ra,16(sp)
   36340:	dcc00317 	ldw	r19,12(sp)
   36344:	dc800217 	ldw	r18,8(sp)
   36348:	dc400117 	ldw	r17,4(sp)
   3634c:	dc000017 	ldw	r16,0(sp)
   36350:	dec00504 	addi	sp,sp,20
   36354:	f800283a 	ret
   36358:	880b883a 	mov	r5,r17
   3635c:	880d883a 	mov	r6,r17
   36360:	9809883a 	mov	r4,r19
   36364:	00360440 	call	36044 <__multiply>
   36368:	88800015 	stw	r2,0(r17)
   3636c:	10000015 	stw	zero,0(r2)
   36370:	1023883a 	mov	r17,r2
   36374:	003fde06 	br	362f0 <__pow5mult+0x54>
   36378:	1025883a 	mov	r18,r2
   3637c:	003fd706 	br	362dc <__pow5mult+0x40>
   36380:	10bfffc4 	addi	r2,r2,-1
   36384:	1085883a 	add	r2,r2,r2
   36388:	00c00034 	movhi	r3,0
   3638c:	18c08404 	addi	r3,r3,528
   36390:	1085883a 	add	r2,r2,r2
   36394:	1885883a 	add	r2,r3,r2
   36398:	11800017 	ldw	r6,0(r2)
   3639c:	000f883a 	mov	r7,zero
   363a0:	0035ca80 	call	35ca8 <__multadd>
   363a4:	1025883a 	mov	r18,r2
   363a8:	003fc706 	br	362c8 <__pow5mult+0x2c>
   363ac:	9809883a 	mov	r4,r19
   363b0:	01409c44 	movi	r5,625
   363b4:	00360080 	call	36008 <__i2b>
   363b8:	98801215 	stw	r2,72(r19)
   363bc:	1023883a 	mov	r17,r2
   363c0:	10000015 	stw	zero,0(r2)
   363c4:	003fca06 	br	362f0 <__pow5mult+0x54>

000363c8 <__lshift>:
   363c8:	defff904 	addi	sp,sp,-28
   363cc:	dd400515 	stw	r21,20(sp)
   363d0:	dc400115 	stw	r17,4(sp)
   363d4:	2d400417 	ldw	r21,16(r5)
   363d8:	3023d17a 	srai	r17,r6,5
   363dc:	28800217 	ldw	r2,8(r5)
   363e0:	dd000415 	stw	r20,16(sp)
   363e4:	8d6b883a 	add	r21,r17,r21
   363e8:	dcc00315 	stw	r19,12(sp)
   363ec:	dc800215 	stw	r18,8(sp)
   363f0:	dc000015 	stw	r16,0(sp)
   363f4:	dfc00615 	stw	ra,24(sp)
   363f8:	ac000044 	addi	r16,r21,1
   363fc:	2825883a 	mov	r18,r5
   36400:	3029883a 	mov	r20,r6
   36404:	2027883a 	mov	r19,r4
   36408:	29400117 	ldw	r5,4(r5)
   3640c:	1400030e 	bge	r2,r16,3641c <__lshift+0x54>
   36410:	1085883a 	add	r2,r2,r2
   36414:	29400044 	addi	r5,r5,1
   36418:	143ffd16 	blt	r2,r16,36410 <__lshift+0x48>
   3641c:	9809883a 	mov	r4,r19
   36420:	0035bd80 	call	35bd8 <_Balloc>
   36424:	10c00504 	addi	r3,r2,20
   36428:	0440090e 	bge	zero,r17,36450 <__lshift+0x88>
   3642c:	000f883a 	mov	r7,zero
   36430:	18000015 	stw	zero,0(r3)
   36434:	39c00044 	addi	r7,r7,1
   36438:	18c00104 	addi	r3,r3,4
   3643c:	3c7ffc1e 	bne	r7,r17,36430 <__lshift+0x68>
   36440:	38c00144 	addi	r3,r7,5
   36444:	18c7883a 	add	r3,r3,r3
   36448:	18c7883a 	add	r3,r3,r3
   3644c:	10c7883a 	add	r3,r2,r3
   36450:	92000417 	ldw	r8,16(r18)
   36454:	a18007cc 	andi	r6,r20,31
   36458:	91c00504 	addi	r7,r18,20
   3645c:	42000144 	addi	r8,r8,5
   36460:	4211883a 	add	r8,r8,r8
   36464:	4211883a 	add	r8,r8,r8
   36468:	9211883a 	add	r8,r18,r8
   3646c:	30002226 	beq	r6,zero,364f8 <__lshift+0x130>
   36470:	02800804 	movi	r10,32
   36474:	5195c83a 	sub	r10,r10,r6
   36478:	000b883a 	mov	r5,zero
   3647c:	3a400017 	ldw	r9,0(r7)
   36480:	18c00104 	addi	r3,r3,4
   36484:	39c00104 	addi	r7,r7,4
   36488:	4992983a 	sll	r9,r9,r6
   3648c:	2a4ab03a 	or	r5,r5,r9
   36490:	197fff15 	stw	r5,-4(r3)
   36494:	397fff17 	ldw	r5,-4(r7)
   36498:	2a8ad83a 	srl	r5,r5,r10
   3649c:	3a3ff736 	bltu	r7,r8,3647c <__lshift+0xb4>
   364a0:	19400015 	stw	r5,0(r3)
   364a4:	28000126 	beq	r5,zero,364ac <__lshift+0xe4>
   364a8:	ac000084 	addi	r16,r21,2
   364ac:	91000117 	ldw	r4,4(r18)
   364b0:	98c01317 	ldw	r3,76(r19)
   364b4:	843fffc4 	addi	r16,r16,-1
   364b8:	2109883a 	add	r4,r4,r4
   364bc:	2109883a 	add	r4,r4,r4
   364c0:	1907883a 	add	r3,r3,r4
   364c4:	19000017 	ldw	r4,0(r3)
   364c8:	14000415 	stw	r16,16(r2)
   364cc:	91000015 	stw	r4,0(r18)
   364d0:	1c800015 	stw	r18,0(r3)
   364d4:	dfc00617 	ldw	ra,24(sp)
   364d8:	dd400517 	ldw	r21,20(sp)
   364dc:	dd000417 	ldw	r20,16(sp)
   364e0:	dcc00317 	ldw	r19,12(sp)
   364e4:	dc800217 	ldw	r18,8(sp)
   364e8:	dc400117 	ldw	r17,4(sp)
   364ec:	dc000017 	ldw	r16,0(sp)
   364f0:	dec00704 	addi	sp,sp,28
   364f4:	f800283a 	ret
   364f8:	39400017 	ldw	r5,0(r7)
   364fc:	18c00104 	addi	r3,r3,4
   36500:	39c00104 	addi	r7,r7,4
   36504:	197fff15 	stw	r5,-4(r3)
   36508:	3a3fe82e 	bgeu	r7,r8,364ac <__lshift+0xe4>
   3650c:	39400017 	ldw	r5,0(r7)
   36510:	18c00104 	addi	r3,r3,4
   36514:	39c00104 	addi	r7,r7,4
   36518:	197fff15 	stw	r5,-4(r3)
   3651c:	3a3ff636 	bltu	r7,r8,364f8 <__lshift+0x130>
   36520:	003fe206 	br	364ac <__lshift+0xe4>

00036524 <__mcmp>:
   36524:	20800417 	ldw	r2,16(r4)
   36528:	28c00417 	ldw	r3,16(r5)
   3652c:	10c5c83a 	sub	r2,r2,r3
   36530:	10000f1e 	bne	r2,zero,36570 <__mcmp+0x4c>
   36534:	18c00144 	addi	r3,r3,5
   36538:	18c7883a 	add	r3,r3,r3
   3653c:	18c7883a 	add	r3,r3,r3
   36540:	21c00504 	addi	r7,r4,20
   36544:	28cb883a 	add	r5,r5,r3
   36548:	20c9883a 	add	r4,r4,r3
   3654c:	213fff04 	addi	r4,r4,-4
   36550:	297fff04 	addi	r5,r5,-4
   36554:	21800017 	ldw	r6,0(r4)
   36558:	28c00017 	ldw	r3,0(r5)
   3655c:	30c0021e 	bne	r6,r3,36568 <__mcmp+0x44>
   36560:	393ffa36 	bltu	r7,r4,3654c <__mcmp+0x28>
   36564:	f800283a 	ret
   36568:	30c00236 	bltu	r6,r3,36574 <__mcmp+0x50>
   3656c:	00800044 	movi	r2,1
   36570:	f800283a 	ret
   36574:	00bfffc4 	movi	r2,-1
   36578:	f800283a 	ret

0003657c <__mdiff>:
   3657c:	defffb04 	addi	sp,sp,-20
   36580:	dc000015 	stw	r16,0(sp)
   36584:	2821883a 	mov	r16,r5
   36588:	dc800215 	stw	r18,8(sp)
   3658c:	300b883a 	mov	r5,r6
   36590:	2025883a 	mov	r18,r4
   36594:	8009883a 	mov	r4,r16
   36598:	dc400115 	stw	r17,4(sp)
   3659c:	dfc00415 	stw	ra,16(sp)
   365a0:	dcc00315 	stw	r19,12(sp)
   365a4:	3023883a 	mov	r17,r6
   365a8:	00365240 	call	36524 <__mcmp>
   365ac:	10005026 	beq	r2,zero,366f0 <__mdiff+0x174>
   365b0:	10004a16 	blt	r2,zero,366dc <__mdiff+0x160>
   365b4:	0027883a 	mov	r19,zero
   365b8:	81400117 	ldw	r5,4(r16)
   365bc:	9009883a 	mov	r4,r18
   365c0:	0035bd80 	call	35bd8 <_Balloc>
   365c4:	82400417 	ldw	r9,16(r16)
   365c8:	89800417 	ldw	r6,16(r17)
   365cc:	14c00315 	stw	r19,12(r2)
   365d0:	4b800144 	addi	r14,r9,5
   365d4:	31800144 	addi	r6,r6,5
   365d8:	739d883a 	add	r14,r14,r14
   365dc:	318d883a 	add	r6,r6,r6
   365e0:	739d883a 	add	r14,r14,r14
   365e4:	318d883a 	add	r6,r6,r6
   365e8:	81c00504 	addi	r7,r16,20
   365ec:	839d883a 	add	r14,r16,r14
   365f0:	8a000504 	addi	r8,r17,20
   365f4:	898d883a 	add	r6,r17,r6
   365f8:	10c00504 	addi	r3,r2,20
   365fc:	0009883a 	mov	r4,zero
   36600:	3b000017 	ldw	r12,0(r7)
   36604:	42c00017 	ldw	r11,0(r8)
   36608:	42000104 	addi	r8,r8,4
   3660c:	62bfffcc 	andi	r10,r12,65535
   36610:	5b7fffcc 	andi	r13,r11,65535
   36614:	5109883a 	add	r4,r10,r4
   36618:	2355c83a 	sub	r10,r4,r13
   3661c:	5816d43a 	srli	r11,r11,16
   36620:	6008d43a 	srli	r4,r12,16
   36624:	501bd43a 	srai	r13,r10,16
   36628:	1a80000d 	sth	r10,0(r3)
   3662c:	22c9c83a 	sub	r4,r4,r11
   36630:	2349883a 	add	r4,r4,r13
   36634:	1900008d 	sth	r4,2(r3)
   36638:	39c00104 	addi	r7,r7,4
   3663c:	2009d43a 	srai	r4,r4,16
   36640:	18c00104 	addi	r3,r3,4
   36644:	41bfee36 	bltu	r8,r6,36600 <__mdiff+0x84>
   36648:	180b883a 	mov	r5,r3
   3664c:	3815883a 	mov	r10,r7
   36650:	3b80132e 	bgeu	r7,r14,366a0 <__mdiff+0x124>
   36654:	3a000017 	ldw	r8,0(r7)
   36658:	18c00104 	addi	r3,r3,4
   3665c:	39c00104 	addi	r7,r7,4
   36660:	41bfffcc 	andi	r6,r8,65535
   36664:	310d883a 	add	r6,r6,r4
   36668:	3009d43a 	srai	r4,r6,16
   3666c:	4010d43a 	srli	r8,r8,16
   36670:	19bfff0d 	sth	r6,-4(r3)
   36674:	2209883a 	add	r4,r4,r8
   36678:	193fff8d 	sth	r4,-2(r3)
   3667c:	2009d43a 	srai	r4,r4,16
   36680:	3bbff436 	bltu	r7,r14,36654 <__mdiff+0xd8>
   36684:	0286303a 	nor	r3,zero,r10
   36688:	1b87883a 	add	r3,r3,r14
   3668c:	1806d0ba 	srli	r3,r3,2
   36690:	18c00044 	addi	r3,r3,1
   36694:	18c7883a 	add	r3,r3,r3
   36698:	18c7883a 	add	r3,r3,r3
   3669c:	28c7883a 	add	r3,r5,r3
   366a0:	193fff17 	ldw	r4,-4(r3)
   366a4:	18ffff04 	addi	r3,r3,-4
   366a8:	2000041e 	bne	r4,zero,366bc <__mdiff+0x140>
   366ac:	18ffff04 	addi	r3,r3,-4
   366b0:	19000017 	ldw	r4,0(r3)
   366b4:	4a7fffc4 	addi	r9,r9,-1
   366b8:	203ffc26 	beq	r4,zero,366ac <__mdiff+0x130>
   366bc:	12400415 	stw	r9,16(r2)
   366c0:	dfc00417 	ldw	ra,16(sp)
   366c4:	dcc00317 	ldw	r19,12(sp)
   366c8:	dc800217 	ldw	r18,8(sp)
   366cc:	dc400117 	ldw	r17,4(sp)
   366d0:	dc000017 	ldw	r16,0(sp)
   366d4:	dec00504 	addi	sp,sp,20
   366d8:	f800283a 	ret
   366dc:	8005883a 	mov	r2,r16
   366e0:	04c00044 	movi	r19,1
   366e4:	8821883a 	mov	r16,r17
   366e8:	1023883a 	mov	r17,r2
   366ec:	003fb206 	br	365b8 <__mdiff+0x3c>
   366f0:	9009883a 	mov	r4,r18
   366f4:	000b883a 	mov	r5,zero
   366f8:	0035bd80 	call	35bd8 <_Balloc>
   366fc:	00c00044 	movi	r3,1
   36700:	10c00415 	stw	r3,16(r2)
   36704:	10000515 	stw	zero,20(r2)
   36708:	dfc00417 	ldw	ra,16(sp)
   3670c:	dcc00317 	ldw	r19,12(sp)
   36710:	dc800217 	ldw	r18,8(sp)
   36714:	dc400117 	ldw	r17,4(sp)
   36718:	dc000017 	ldw	r16,0(sp)
   3671c:	dec00504 	addi	sp,sp,20
   36720:	f800283a 	ret

00036724 <__ulp>:
   36724:	295ffc2c 	andhi	r5,r5,32752
   36728:	00bf3034 	movhi	r2,64704
   3672c:	2887883a 	add	r3,r5,r2
   36730:	00c0020e 	bge	zero,r3,3673c <__ulp+0x18>
   36734:	0005883a 	mov	r2,zero
   36738:	f800283a 	ret
   3673c:	00c7c83a 	sub	r3,zero,r3
   36740:	1805d53a 	srai	r2,r3,20
   36744:	00c004c4 	movi	r3,19
   36748:	18800a0e 	bge	r3,r2,36774 <__ulp+0x50>
   3674c:	01000c84 	movi	r4,50
   36750:	0007883a 	mov	r3,zero
   36754:	20800516 	blt	r4,r2,3676c <__ulp+0x48>
   36758:	01000cc4 	movi	r4,51
   3675c:	2085c83a 	sub	r2,r4,r2
   36760:	01000044 	movi	r4,1
   36764:	2084983a 	sll	r2,r4,r2
   36768:	f800283a 	ret
   3676c:	00800044 	movi	r2,1
   36770:	f800283a 	ret
   36774:	00c00234 	movhi	r3,8
   36778:	1887d83a 	sra	r3,r3,r2
   3677c:	0005883a 	mov	r2,zero
   36780:	f800283a 	ret

00036784 <__b2d>:
   36784:	defffa04 	addi	sp,sp,-24
   36788:	dc000015 	stw	r16,0(sp)
   3678c:	24000417 	ldw	r16,16(r4)
   36790:	dc400115 	stw	r17,4(sp)
   36794:	dcc00315 	stw	r19,12(sp)
   36798:	84000144 	addi	r16,r16,5
   3679c:	8421883a 	add	r16,r16,r16
   367a0:	8421883a 	add	r16,r16,r16
   367a4:	2421883a 	add	r16,r4,r16
   367a8:	847fff17 	ldw	r17,-4(r16)
   367ac:	24c00504 	addi	r19,r4,20
   367b0:	dd000415 	stw	r20,16(sp)
   367b4:	8809883a 	mov	r4,r17
   367b8:	dc800215 	stw	r18,8(sp)
   367bc:	2829883a 	mov	r20,r5
   367c0:	dfc00515 	stw	ra,20(sp)
   367c4:	0035ef00 	call	35ef0 <__hi0bits>
   367c8:	00c00804 	movi	r3,32
   367cc:	1887c83a 	sub	r3,r3,r2
   367d0:	a0c00015 	stw	r3,0(r20)
   367d4:	00c00284 	movi	r3,10
   367d8:	84bfff04 	addi	r18,r16,-4
   367dc:	18801216 	blt	r3,r2,36828 <__b2d+0xa4>
   367e0:	010002c4 	movi	r4,11
   367e4:	2089c83a 	sub	r4,r4,r2
   367e8:	8906d83a 	srl	r3,r17,r4
   367ec:	18cffc34 	orhi	r3,r3,16368
   367f0:	9c80322e 	bgeu	r19,r18,368bc <__b2d+0x138>
   367f4:	817ffe17 	ldw	r5,-8(r16)
   367f8:	2908d83a 	srl	r4,r5,r4
   367fc:	10800544 	addi	r2,r2,21
   36800:	88a2983a 	sll	r17,r17,r2
   36804:	2444b03a 	or	r2,r4,r17
   36808:	dfc00517 	ldw	ra,20(sp)
   3680c:	dd000417 	ldw	r20,16(sp)
   36810:	dcc00317 	ldw	r19,12(sp)
   36814:	dc800217 	ldw	r18,8(sp)
   36818:	dc400117 	ldw	r17,4(sp)
   3681c:	dc000017 	ldw	r16,0(sp)
   36820:	dec00604 	addi	sp,sp,24
   36824:	f800283a 	ret
   36828:	9c801636 	bltu	r19,r18,36884 <__b2d+0x100>
   3682c:	113ffd44 	addi	r4,r2,-11
   36830:	000b883a 	mov	r5,zero
   36834:	20001726 	beq	r4,zero,36894 <__b2d+0x110>
   36838:	00c00ac4 	movi	r3,43
   3683c:	1885c83a 	sub	r2,r3,r2
   36840:	8906983a 	sll	r3,r17,r4
   36844:	288cd83a 	srl	r6,r5,r2
   36848:	18cffc34 	orhi	r3,r3,16368
   3684c:	1986b03a 	or	r3,r3,r6
   36850:	9c801c2e 	bgeu	r19,r18,368c4 <__b2d+0x140>
   36854:	91bfff17 	ldw	r6,-4(r18)
   36858:	3084d83a 	srl	r2,r6,r2
   3685c:	2908983a 	sll	r4,r5,r4
   36860:	1104b03a 	or	r2,r2,r4
   36864:	dfc00517 	ldw	ra,20(sp)
   36868:	dd000417 	ldw	r20,16(sp)
   3686c:	dcc00317 	ldw	r19,12(sp)
   36870:	dc800217 	ldw	r18,8(sp)
   36874:	dc400117 	ldw	r17,4(sp)
   36878:	dc000017 	ldw	r16,0(sp)
   3687c:	dec00604 	addi	sp,sp,24
   36880:	f800283a 	ret
   36884:	113ffd44 	addi	r4,r2,-11
   36888:	84bffe04 	addi	r18,r16,-8
   3688c:	817ffe17 	ldw	r5,-8(r16)
   36890:	203fe91e 	bne	r4,zero,36838 <__b2d+0xb4>
   36894:	88cffc34 	orhi	r3,r17,16368
   36898:	2805883a 	mov	r2,r5
   3689c:	dfc00517 	ldw	ra,20(sp)
   368a0:	dd000417 	ldw	r20,16(sp)
   368a4:	dcc00317 	ldw	r19,12(sp)
   368a8:	dc800217 	ldw	r18,8(sp)
   368ac:	dc400117 	ldw	r17,4(sp)
   368b0:	dc000017 	ldw	r16,0(sp)
   368b4:	dec00604 	addi	sp,sp,24
   368b8:	f800283a 	ret
   368bc:	0009883a 	mov	r4,zero
   368c0:	003fce06 	br	367fc <__b2d+0x78>
   368c4:	0005883a 	mov	r2,zero
   368c8:	003fe406 	br	3685c <__b2d+0xd8>

000368cc <__d2b>:
   368cc:	defff804 	addi	sp,sp,-32
   368d0:	dc400315 	stw	r17,12(sp)
   368d4:	3023883a 	mov	r17,r6
   368d8:	dc800415 	stw	r18,16(sp)
   368dc:	8824907a 	slli	r18,r17,1
   368e0:	dcc00515 	stw	r19,20(sp)
   368e4:	2827883a 	mov	r19,r5
   368e8:	9024d57a 	srli	r18,r18,21
   368ec:	01400044 	movi	r5,1
   368f0:	dd000615 	stw	r20,24(sp)
   368f4:	dc000215 	stw	r16,8(sp)
   368f8:	dfc00715 	stw	ra,28(sp)
   368fc:	3829883a 	mov	r20,r7
   36900:	0035bd80 	call	35bd8 <_Balloc>
   36904:	1021883a 	mov	r16,r2
   36908:	00800434 	movhi	r2,16
   3690c:	10bfffc4 	addi	r2,r2,-1
   36910:	88a2703a 	and	r17,r17,r2
   36914:	90000126 	beq	r18,zero,3691c <__d2b+0x50>
   36918:	8c400434 	orhi	r17,r17,16
   3691c:	dc400015 	stw	r17,0(sp)
   36920:	98002226 	beq	r19,zero,369ac <__d2b+0xe0>
   36924:	d9000104 	addi	r4,sp,4
   36928:	dcc00115 	stw	r19,4(sp)
   3692c:	0035f580 	call	35f58 <__lo0bits>
   36930:	d8c00017 	ldw	r3,0(sp)
   36934:	10002d1e 	bne	r2,zero,369ec <__d2b+0x120>
   36938:	d9000117 	ldw	r4,4(sp)
   3693c:	81000515 	stw	r4,20(r16)
   36940:	1823003a 	cmpeq	r17,r3,zero
   36944:	01000084 	movi	r4,2
   36948:	2463c83a 	sub	r17,r4,r17
   3694c:	80c00615 	stw	r3,24(r16)
   36950:	84400415 	stw	r17,16(r16)
   36954:	90001d1e 	bne	r18,zero,369cc <__d2b+0x100>
   36958:	88c00104 	addi	r3,r17,4
   3695c:	18c7883a 	add	r3,r3,r3
   36960:	18c7883a 	add	r3,r3,r3
   36964:	80c7883a 	add	r3,r16,r3
   36968:	19000017 	ldw	r4,0(r3)
   3696c:	10bef384 	addi	r2,r2,-1074
   36970:	a0800015 	stw	r2,0(r20)
   36974:	0035ef00 	call	35ef0 <__hi0bits>
   36978:	8822917a 	slli	r17,r17,5
   3697c:	d8c00817 	ldw	r3,32(sp)
   36980:	8885c83a 	sub	r2,r17,r2
   36984:	18800015 	stw	r2,0(r3)
   36988:	8005883a 	mov	r2,r16
   3698c:	dfc00717 	ldw	ra,28(sp)
   36990:	dd000617 	ldw	r20,24(sp)
   36994:	dcc00517 	ldw	r19,20(sp)
   36998:	dc800417 	ldw	r18,16(sp)
   3699c:	dc400317 	ldw	r17,12(sp)
   369a0:	dc000217 	ldw	r16,8(sp)
   369a4:	dec00804 	addi	sp,sp,32
   369a8:	f800283a 	ret
   369ac:	d809883a 	mov	r4,sp
   369b0:	0035f580 	call	35f58 <__lo0bits>
   369b4:	d8c00017 	ldw	r3,0(sp)
   369b8:	04400044 	movi	r17,1
   369bc:	84400415 	stw	r17,16(r16)
   369c0:	80c00515 	stw	r3,20(r16)
   369c4:	10800804 	addi	r2,r2,32
   369c8:	903fe326 	beq	r18,zero,36958 <__d2b+0x8c>
   369cc:	00c00d44 	movi	r3,53
   369d0:	94bef344 	addi	r18,r18,-1075
   369d4:	90a5883a 	add	r18,r18,r2
   369d8:	1885c83a 	sub	r2,r3,r2
   369dc:	d8c00817 	ldw	r3,32(sp)
   369e0:	a4800015 	stw	r18,0(r20)
   369e4:	18800015 	stw	r2,0(r3)
   369e8:	003fe706 	br	36988 <__d2b+0xbc>
   369ec:	01000804 	movi	r4,32
   369f0:	2089c83a 	sub	r4,r4,r2
   369f4:	1908983a 	sll	r4,r3,r4
   369f8:	d9400117 	ldw	r5,4(sp)
   369fc:	1886d83a 	srl	r3,r3,r2
   36a00:	2148b03a 	or	r4,r4,r5
   36a04:	81000515 	stw	r4,20(r16)
   36a08:	d8c00015 	stw	r3,0(sp)
   36a0c:	003fcc06 	br	36940 <__d2b+0x74>

00036a10 <__ratio>:
   36a10:	defff904 	addi	sp,sp,-28
   36a14:	dc400315 	stw	r17,12(sp)
   36a18:	2823883a 	mov	r17,r5
   36a1c:	d9400104 	addi	r5,sp,4
   36a20:	dfc00615 	stw	ra,24(sp)
   36a24:	dcc00515 	stw	r19,20(sp)
   36a28:	dc800415 	stw	r18,16(sp)
   36a2c:	2027883a 	mov	r19,r4
   36a30:	dc000215 	stw	r16,8(sp)
   36a34:	00367840 	call	36784 <__b2d>
   36a38:	8809883a 	mov	r4,r17
   36a3c:	d80b883a 	mov	r5,sp
   36a40:	1025883a 	mov	r18,r2
   36a44:	1821883a 	mov	r16,r3
   36a48:	00367840 	call	36784 <__b2d>
   36a4c:	99400417 	ldw	r5,16(r19)
   36a50:	89000417 	ldw	r4,16(r17)
   36a54:	d9800117 	ldw	r6,4(sp)
   36a58:	2909c83a 	sub	r4,r5,r4
   36a5c:	d9400017 	ldw	r5,0(sp)
   36a60:	2008917a 	slli	r4,r4,5
   36a64:	314bc83a 	sub	r5,r6,r5
   36a68:	290b883a 	add	r5,r5,r4
   36a6c:	01400e0e 	bge	zero,r5,36aa8 <__ratio+0x98>
   36a70:	280a953a 	slli	r5,r5,20
   36a74:	2c21883a 	add	r16,r5,r16
   36a78:	9009883a 	mov	r4,r18
   36a7c:	800b883a 	mov	r5,r16
   36a80:	100d883a 	mov	r6,r2
   36a84:	180f883a 	mov	r7,r3
   36a88:	0038cc40 	call	38cc4 <__divdf3>
   36a8c:	dfc00617 	ldw	ra,24(sp)
   36a90:	dcc00517 	ldw	r19,20(sp)
   36a94:	dc800417 	ldw	r18,16(sp)
   36a98:	dc400317 	ldw	r17,12(sp)
   36a9c:	dc000217 	ldw	r16,8(sp)
   36aa0:	dec00704 	addi	sp,sp,28
   36aa4:	f800283a 	ret
   36aa8:	280a953a 	slli	r5,r5,20
   36aac:	1947c83a 	sub	r3,r3,r5
   36ab0:	003ff106 	br	36a78 <__ratio+0x68>

00036ab4 <_mprec_log10>:
   36ab4:	defffe04 	addi	sp,sp,-8
   36ab8:	dc000015 	stw	r16,0(sp)
   36abc:	dfc00115 	stw	ra,4(sp)
   36ac0:	008005c4 	movi	r2,23
   36ac4:	2021883a 	mov	r16,r4
   36ac8:	11000d0e 	bge	r2,r4,36b00 <_mprec_log10+0x4c>
   36acc:	0005883a 	mov	r2,zero
   36ad0:	00cffc34 	movhi	r3,16368
   36ad4:	843fffc4 	addi	r16,r16,-1
   36ad8:	1009883a 	mov	r4,r2
   36adc:	180b883a 	mov	r5,r3
   36ae0:	000d883a 	mov	r6,zero
   36ae4:	01d00934 	movhi	r7,16420
   36ae8:	00389e00 	call	389e0 <__muldf3>
   36aec:	803ff91e 	bne	r16,zero,36ad4 <_mprec_log10+0x20>
   36af0:	dfc00117 	ldw	ra,4(sp)
   36af4:	dc000017 	ldw	r16,0(sp)
   36af8:	dec00204 	addi	sp,sp,8
   36afc:	f800283a 	ret
   36b00:	202090fa 	slli	r16,r4,3
   36b04:	00800034 	movhi	r2,0
   36b08:	10805204 	addi	r2,r2,328
   36b0c:	1421883a 	add	r16,r2,r16
   36b10:	80800017 	ldw	r2,0(r16)
   36b14:	80c00117 	ldw	r3,4(r16)
   36b18:	dfc00117 	ldw	ra,4(sp)
   36b1c:	dc000017 	ldw	r16,0(sp)
   36b20:	dec00204 	addi	sp,sp,8
   36b24:	f800283a 	ret

00036b28 <__copybits>:
   36b28:	297fffc4 	addi	r5,r5,-1
   36b2c:	31c00417 	ldw	r7,16(r6)
   36b30:	2811d17a 	srai	r8,r5,5
   36b34:	30800504 	addi	r2,r6,20
   36b38:	39c00144 	addi	r7,r7,5
   36b3c:	42000044 	addi	r8,r8,1
   36b40:	39cf883a 	add	r7,r7,r7
   36b44:	4211883a 	add	r8,r8,r8
   36b48:	39cf883a 	add	r7,r7,r7
   36b4c:	4211883a 	add	r8,r8,r8
   36b50:	31cf883a 	add	r7,r6,r7
   36b54:	2211883a 	add	r8,r4,r8
   36b58:	11c00d2e 	bgeu	r2,r7,36b90 <__copybits+0x68>
   36b5c:	2007883a 	mov	r3,r4
   36b60:	11400017 	ldw	r5,0(r2)
   36b64:	18c00104 	addi	r3,r3,4
   36b68:	10800104 	addi	r2,r2,4
   36b6c:	197fff15 	stw	r5,-4(r3)
   36b70:	11fffb36 	bltu	r2,r7,36b60 <__copybits+0x38>
   36b74:	3985c83a 	sub	r2,r7,r6
   36b78:	10bffac4 	addi	r2,r2,-21
   36b7c:	1004d0ba 	srli	r2,r2,2
   36b80:	10800044 	addi	r2,r2,1
   36b84:	1085883a 	add	r2,r2,r2
   36b88:	1085883a 	add	r2,r2,r2
   36b8c:	2089883a 	add	r4,r4,r2
   36b90:	2200032e 	bgeu	r4,r8,36ba0 <__copybits+0x78>
   36b94:	20000015 	stw	zero,0(r4)
   36b98:	21000104 	addi	r4,r4,4
   36b9c:	223ffd36 	bltu	r4,r8,36b94 <__copybits+0x6c>
   36ba0:	f800283a 	ret

00036ba4 <__any_on>:
   36ba4:	21800417 	ldw	r6,16(r4)
   36ba8:	2805d17a 	srai	r2,r5,5
   36bac:	20c00504 	addi	r3,r4,20
   36bb0:	30800f0e 	bge	r6,r2,36bf0 <__any_on+0x4c>
   36bb4:	3005883a 	mov	r2,r6
   36bb8:	10800144 	addi	r2,r2,5
   36bbc:	1085883a 	add	r2,r2,r2
   36bc0:	1085883a 	add	r2,r2,r2
   36bc4:	2089883a 	add	r4,r4,r2
   36bc8:	1900152e 	bgeu	r3,r4,36c20 <__any_on+0x7c>
   36bcc:	20bfff17 	ldw	r2,-4(r4)
   36bd0:	213fff04 	addi	r4,r4,-4
   36bd4:	1000041e 	bne	r2,zero,36be8 <__any_on+0x44>
   36bd8:	1900112e 	bgeu	r3,r4,36c20 <__any_on+0x7c>
   36bdc:	213fff04 	addi	r4,r4,-4
   36be0:	20800017 	ldw	r2,0(r4)
   36be4:	103ffc26 	beq	r2,zero,36bd8 <__any_on+0x34>
   36be8:	00800044 	movi	r2,1
   36bec:	f800283a 	ret
   36bf0:	11bff10e 	bge	r2,r6,36bb8 <__any_on+0x14>
   36bf4:	294007cc 	andi	r5,r5,31
   36bf8:	283fef26 	beq	r5,zero,36bb8 <__any_on+0x14>
   36bfc:	11800144 	addi	r6,r2,5
   36c00:	318d883a 	add	r6,r6,r6
   36c04:	318d883a 	add	r6,r6,r6
   36c08:	218d883a 	add	r6,r4,r6
   36c0c:	31800017 	ldw	r6,0(r6)
   36c10:	314ed83a 	srl	r7,r6,r5
   36c14:	394a983a 	sll	r5,r7,r5
   36c18:	29bff31e 	bne	r5,r6,36be8 <__any_on+0x44>
   36c1c:	003fe606 	br	36bb8 <__any_on+0x14>
   36c20:	0005883a 	mov	r2,zero
   36c24:	f800283a 	ret

00036c28 <_realloc_r>:
   36c28:	defff504 	addi	sp,sp,-44
   36c2c:	dd400615 	stw	r21,24(sp)
   36c30:	dc800315 	stw	r18,12(sp)
   36c34:	dc000115 	stw	r16,4(sp)
   36c38:	dfc00a15 	stw	ra,40(sp)
   36c3c:	df000915 	stw	fp,36(sp)
   36c40:	ddc00815 	stw	r23,32(sp)
   36c44:	dd800715 	stw	r22,28(sp)
   36c48:	dd000515 	stw	r20,20(sp)
   36c4c:	dcc00415 	stw	r19,16(sp)
   36c50:	dc400215 	stw	r17,8(sp)
   36c54:	2821883a 	mov	r16,r5
   36c58:	202b883a 	mov	r21,r4
   36c5c:	3025883a 	mov	r18,r6
   36c60:	28009626 	beq	r5,zero,36ebc <_realloc_r+0x294>
   36c64:	003a0700 	call	3a070 <__malloc_lock>
   36c68:	80bfff17 	ldw	r2,-4(r16)
   36c6c:	04ffff04 	movi	r19,-4
   36c70:	90c002c4 	addi	r3,r18,11
   36c74:	01000584 	movi	r4,22
   36c78:	85bffe04 	addi	r22,r16,-8
   36c7c:	14e6703a 	and	r19,r2,r19
   36c80:	20c0372e 	bgeu	r4,r3,36d60 <_realloc_r+0x138>
   36c84:	047ffe04 	movi	r17,-8
   36c88:	1c62703a 	and	r17,r3,r17
   36c8c:	8807883a 	mov	r3,r17
   36c90:	88005a16 	blt	r17,zero,36dfc <_realloc_r+0x1d4>
   36c94:	8c805936 	bltu	r17,r18,36dfc <_realloc_r+0x1d4>
   36c98:	98c0340e 	bge	r19,r3,36d6c <_realloc_r+0x144>
   36c9c:	07000034 	movhi	fp,0
   36ca0:	e701da04 	addi	fp,fp,1896
   36ca4:	e1400217 	ldw	r5,8(fp)
   36ca8:	b4c9883a 	add	r4,r22,r19
   36cac:	29009026 	beq	r5,r4,36ef0 <_realloc_r+0x2c8>
   36cb0:	21800117 	ldw	r6,4(r4)
   36cb4:	01ffff84 	movi	r7,-2
   36cb8:	31ce703a 	and	r7,r6,r7
   36cbc:	21cf883a 	add	r7,r4,r7
   36cc0:	39c00117 	ldw	r7,4(r7)
   36cc4:	39c0004c 	andi	r7,r7,1
   36cc8:	38004326 	beq	r7,zero,36dd8 <_realloc_r+0x1b0>
   36ccc:	000d883a 	mov	r6,zero
   36cd0:	0009883a 	mov	r4,zero
   36cd4:	1080004c 	andi	r2,r2,1
   36cd8:	10005a1e 	bne	r2,zero,36e44 <_realloc_r+0x21c>
   36cdc:	85fffe17 	ldw	r23,-8(r16)
   36ce0:	00bfff04 	movi	r2,-4
   36ce4:	b5efc83a 	sub	r23,r22,r23
   36ce8:	b9c00117 	ldw	r7,4(r23)
   36cec:	388e703a 	and	r7,r7,r2
   36cf0:	3ccf883a 	add	r7,r7,r19
   36cf4:	20005226 	beq	r4,zero,36e40 <_realloc_r+0x218>
   36cf8:	31e9883a 	add	r20,r6,r7
   36cfc:	2140c726 	beq	r4,r5,3701c <_realloc_r+0x3f4>
   36d00:	a0c04f16 	blt	r20,r3,36e40 <_realloc_r+0x218>
   36d04:	20800317 	ldw	r2,12(r4)
   36d08:	20c00217 	ldw	r3,8(r4)
   36d0c:	99bfff04 	addi	r6,r19,-4
   36d10:	01000904 	movi	r4,36
   36d14:	18800315 	stw	r2,12(r3)
   36d18:	10c00215 	stw	r3,8(r2)
   36d1c:	b8c00217 	ldw	r3,8(r23)
   36d20:	b8800317 	ldw	r2,12(r23)
   36d24:	bc800204 	addi	r18,r23,8
   36d28:	18800315 	stw	r2,12(r3)
   36d2c:	10c00215 	stw	r3,8(r2)
   36d30:	2180ed36 	bltu	r4,r6,370e8 <_realloc_r+0x4c0>
   36d34:	008004c4 	movi	r2,19
   36d38:	11809b2e 	bgeu	r2,r6,36fa8 <_realloc_r+0x380>
   36d3c:	80800017 	ldw	r2,0(r16)
   36d40:	b8800215 	stw	r2,8(r23)
   36d44:	80800117 	ldw	r2,4(r16)
   36d48:	b8800315 	stw	r2,12(r23)
   36d4c:	008006c4 	movi	r2,27
   36d50:	1180f936 	bltu	r2,r6,37138 <_realloc_r+0x510>
   36d54:	b8800404 	addi	r2,r23,16
   36d58:	80c00204 	addi	r3,r16,8
   36d5c:	00009406 	br	36fb0 <_realloc_r+0x388>
   36d60:	00c00404 	movi	r3,16
   36d64:	1823883a 	mov	r17,r3
   36d68:	003fca06 	br	36c94 <_realloc_r+0x6c>
   36d6c:	9829883a 	mov	r20,r19
   36d70:	a447c83a 	sub	r3,r20,r17
   36d74:	010003c4 	movi	r4,15
   36d78:	1080004c 	andi	r2,r2,1
   36d7c:	20c02336 	bltu	r4,r3,36e0c <_realloc_r+0x1e4>
   36d80:	1504b03a 	or	r2,r2,r20
   36d84:	b0800115 	stw	r2,4(r22)
   36d88:	b52d883a 	add	r22,r22,r20
   36d8c:	b0800117 	ldw	r2,4(r22)
   36d90:	10800054 	ori	r2,r2,1
   36d94:	b0800115 	stw	r2,4(r22)
   36d98:	a809883a 	mov	r4,r21
   36d9c:	003a0900 	call	3a090 <__malloc_unlock>
   36da0:	8025883a 	mov	r18,r16
   36da4:	9005883a 	mov	r2,r18
   36da8:	dfc00a17 	ldw	ra,40(sp)
   36dac:	df000917 	ldw	fp,36(sp)
   36db0:	ddc00817 	ldw	r23,32(sp)
   36db4:	dd800717 	ldw	r22,28(sp)
   36db8:	dd400617 	ldw	r21,24(sp)
   36dbc:	dd000517 	ldw	r20,20(sp)
   36dc0:	dcc00417 	ldw	r19,16(sp)
   36dc4:	dc800317 	ldw	r18,12(sp)
   36dc8:	dc400217 	ldw	r17,8(sp)
   36dcc:	dc000117 	ldw	r16,4(sp)
   36dd0:	dec00b04 	addi	sp,sp,44
   36dd4:	f800283a 	ret
   36dd8:	01ffff04 	movi	r7,-4
   36ddc:	31cc703a 	and	r6,r6,r7
   36de0:	34e9883a 	add	r20,r6,r19
   36de4:	a0ffbb16 	blt	r20,r3,36cd4 <_realloc_r+0xac>
   36de8:	20c00317 	ldw	r3,12(r4)
   36dec:	21000217 	ldw	r4,8(r4)
   36df0:	20c00315 	stw	r3,12(r4)
   36df4:	19000215 	stw	r4,8(r3)
   36df8:	003fdd06 	br	36d70 <_realloc_r+0x148>
   36dfc:	00800304 	movi	r2,12
   36e00:	a8800015 	stw	r2,0(r21)
   36e04:	0025883a 	mov	r18,zero
   36e08:	003fe606 	br	36da4 <_realloc_r+0x17c>
   36e0c:	1444b03a 	or	r2,r2,r17
   36e10:	b0800115 	stw	r2,4(r22)
   36e14:	b44b883a 	add	r5,r22,r17
   36e18:	18800054 	ori	r2,r3,1
   36e1c:	28800115 	stw	r2,4(r5)
   36e20:	28c7883a 	add	r3,r5,r3
   36e24:	18800117 	ldw	r2,4(r3)
   36e28:	a809883a 	mov	r4,r21
   36e2c:	29400204 	addi	r5,r5,8
   36e30:	10800054 	ori	r2,r2,1
   36e34:	18800115 	stw	r2,4(r3)
   36e38:	003441c0 	call	3441c <_free_r>
   36e3c:	003fd606 	br	36d98 <_realloc_r+0x170>
   36e40:	38c0330e 	bge	r7,r3,36f10 <_realloc_r+0x2e8>
   36e44:	900b883a 	mov	r5,r18
   36e48:	a809883a 	mov	r4,r21
   36e4c:	0034fb40 	call	34fb4 <_malloc_r>
   36e50:	1025883a 	mov	r18,r2
   36e54:	10001626 	beq	r2,zero,36eb0 <_realloc_r+0x288>
   36e58:	80bfff17 	ldw	r2,-4(r16)
   36e5c:	00ffff84 	movi	r3,-2
   36e60:	913ffe04 	addi	r4,r18,-8
   36e64:	10c6703a 	and	r3,r2,r3
   36e68:	b0c7883a 	add	r3,r22,r3
   36e6c:	20c09926 	beq	r4,r3,370d4 <_realloc_r+0x4ac>
   36e70:	99bfff04 	addi	r6,r19,-4
   36e74:	00800904 	movi	r2,36
   36e78:	11806436 	bltu	r2,r6,3700c <_realloc_r+0x3e4>
   36e7c:	00c004c4 	movi	r3,19
   36e80:	19804036 	bltu	r3,r6,36f84 <_realloc_r+0x35c>
   36e84:	9005883a 	mov	r2,r18
   36e88:	8007883a 	mov	r3,r16
   36e8c:	19000017 	ldw	r4,0(r3)
   36e90:	11000015 	stw	r4,0(r2)
   36e94:	19000117 	ldw	r4,4(r3)
   36e98:	11000115 	stw	r4,4(r2)
   36e9c:	18c00217 	ldw	r3,8(r3)
   36ea0:	10c00215 	stw	r3,8(r2)
   36ea4:	a809883a 	mov	r4,r21
   36ea8:	800b883a 	mov	r5,r16
   36eac:	003441c0 	call	3441c <_free_r>
   36eb0:	a809883a 	mov	r4,r21
   36eb4:	003a0900 	call	3a090 <__malloc_unlock>
   36eb8:	003fba06 	br	36da4 <_realloc_r+0x17c>
   36ebc:	300b883a 	mov	r5,r6
   36ec0:	dfc00a17 	ldw	ra,40(sp)
   36ec4:	df000917 	ldw	fp,36(sp)
   36ec8:	ddc00817 	ldw	r23,32(sp)
   36ecc:	dd800717 	ldw	r22,28(sp)
   36ed0:	dd400617 	ldw	r21,24(sp)
   36ed4:	dd000517 	ldw	r20,20(sp)
   36ed8:	dcc00417 	ldw	r19,16(sp)
   36edc:	dc800317 	ldw	r18,12(sp)
   36ee0:	dc400217 	ldw	r17,8(sp)
   36ee4:	dc000117 	ldw	r16,4(sp)
   36ee8:	dec00b04 	addi	sp,sp,44
   36eec:	0034fb41 	jmpi	34fb4 <_malloc_r>
   36ef0:	29800117 	ldw	r6,4(r5)
   36ef4:	013fff04 	movi	r4,-4
   36ef8:	89c00404 	addi	r7,r17,16
   36efc:	310c703a 	and	r6,r6,r4
   36f00:	34c9883a 	add	r4,r6,r19
   36f04:	21c0340e 	bge	r4,r7,36fd8 <_realloc_r+0x3b0>
   36f08:	2809883a 	mov	r4,r5
   36f0c:	003f7106 	br	36cd4 <_realloc_r+0xac>
   36f10:	b8800317 	ldw	r2,12(r23)
   36f14:	b8c00217 	ldw	r3,8(r23)
   36f18:	99bfff04 	addi	r6,r19,-4
   36f1c:	01000904 	movi	r4,36
   36f20:	18800315 	stw	r2,12(r3)
   36f24:	10c00215 	stw	r3,8(r2)
   36f28:	bc800204 	addi	r18,r23,8
   36f2c:	21807836 	bltu	r4,r6,37110 <_realloc_r+0x4e8>
   36f30:	008004c4 	movi	r2,19
   36f34:	1180732e 	bgeu	r2,r6,37104 <_realloc_r+0x4dc>
   36f38:	80800017 	ldw	r2,0(r16)
   36f3c:	b8800215 	stw	r2,8(r23)
   36f40:	80800117 	ldw	r2,4(r16)
   36f44:	b8800315 	stw	r2,12(r23)
   36f48:	008006c4 	movi	r2,27
   36f4c:	11808936 	bltu	r2,r6,37174 <_realloc_r+0x54c>
   36f50:	b8800404 	addi	r2,r23,16
   36f54:	80c00204 	addi	r3,r16,8
   36f58:	19000017 	ldw	r4,0(r3)
   36f5c:	9021883a 	mov	r16,r18
   36f60:	3829883a 	mov	r20,r7
   36f64:	11000015 	stw	r4,0(r2)
   36f68:	19000117 	ldw	r4,4(r3)
   36f6c:	b82d883a 	mov	r22,r23
   36f70:	11000115 	stw	r4,4(r2)
   36f74:	18c00217 	ldw	r3,8(r3)
   36f78:	10c00215 	stw	r3,8(r2)
   36f7c:	b8800117 	ldw	r2,4(r23)
   36f80:	003f7b06 	br	36d70 <_realloc_r+0x148>
   36f84:	80c00017 	ldw	r3,0(r16)
   36f88:	90c00015 	stw	r3,0(r18)
   36f8c:	80c00117 	ldw	r3,4(r16)
   36f90:	90c00115 	stw	r3,4(r18)
   36f94:	00c006c4 	movi	r3,27
   36f98:	19804636 	bltu	r3,r6,370b4 <_realloc_r+0x48c>
   36f9c:	90800204 	addi	r2,r18,8
   36fa0:	80c00204 	addi	r3,r16,8
   36fa4:	003fb906 	br	36e8c <_realloc_r+0x264>
   36fa8:	9005883a 	mov	r2,r18
   36fac:	8007883a 	mov	r3,r16
   36fb0:	19000017 	ldw	r4,0(r3)
   36fb4:	9021883a 	mov	r16,r18
   36fb8:	b82d883a 	mov	r22,r23
   36fbc:	11000015 	stw	r4,0(r2)
   36fc0:	19000117 	ldw	r4,4(r3)
   36fc4:	11000115 	stw	r4,4(r2)
   36fc8:	18c00217 	ldw	r3,8(r3)
   36fcc:	10c00215 	stw	r3,8(r2)
   36fd0:	b8800117 	ldw	r2,4(r23)
   36fd4:	003f6606 	br	36d70 <_realloc_r+0x148>
   36fd8:	2445c83a 	sub	r2,r4,r17
   36fdc:	b46d883a 	add	r22,r22,r17
   36fe0:	10800054 	ori	r2,r2,1
   36fe4:	b0800115 	stw	r2,4(r22)
   36fe8:	80bfff17 	ldw	r2,-4(r16)
   36fec:	a809883a 	mov	r4,r21
   36ff0:	e5800215 	stw	r22,8(fp)
   36ff4:	1080004c 	andi	r2,r2,1
   36ff8:	88a2b03a 	or	r17,r17,r2
   36ffc:	847fff15 	stw	r17,-4(r16)
   37000:	003a0900 	call	3a090 <__malloc_unlock>
   37004:	8025883a 	mov	r18,r16
   37008:	003f6606 	br	36da4 <_realloc_r+0x17c>
   3700c:	9009883a 	mov	r4,r18
   37010:	800b883a 	mov	r5,r16
   37014:	00359700 	call	35970 <memmove>
   37018:	003fa206 	br	36ea4 <_realloc_r+0x27c>
   3701c:	88800404 	addi	r2,r17,16
   37020:	a0bf8716 	blt	r20,r2,36e40 <_realloc_r+0x218>
   37024:	b8800317 	ldw	r2,12(r23)
   37028:	b8c00217 	ldw	r3,8(r23)
   3702c:	99bfff04 	addi	r6,r19,-4
   37030:	01000904 	movi	r4,36
   37034:	18800315 	stw	r2,12(r3)
   37038:	10c00215 	stw	r3,8(r2)
   3703c:	bc800204 	addi	r18,r23,8
   37040:	21806536 	bltu	r4,r6,371d8 <_realloc_r+0x5b0>
   37044:	008004c4 	movi	r2,19
   37048:	1180592e 	bgeu	r2,r6,371b0 <_realloc_r+0x588>
   3704c:	80800017 	ldw	r2,0(r16)
   37050:	b8800215 	stw	r2,8(r23)
   37054:	80800117 	ldw	r2,4(r16)
   37058:	b8800315 	stw	r2,12(r23)
   3705c:	008006c4 	movi	r2,27
   37060:	11806136 	bltu	r2,r6,371e8 <_realloc_r+0x5c0>
   37064:	b8800404 	addi	r2,r23,16
   37068:	80c00204 	addi	r3,r16,8
   3706c:	19000017 	ldw	r4,0(r3)
   37070:	11000015 	stw	r4,0(r2)
   37074:	19000117 	ldw	r4,4(r3)
   37078:	11000115 	stw	r4,4(r2)
   3707c:	18c00217 	ldw	r3,8(r3)
   37080:	10c00215 	stw	r3,8(r2)
   37084:	a447c83a 	sub	r3,r20,r17
   37088:	bc45883a 	add	r2,r23,r17
   3708c:	18c00054 	ori	r3,r3,1
   37090:	10c00115 	stw	r3,4(r2)
   37094:	b8c00117 	ldw	r3,4(r23)
   37098:	e0800215 	stw	r2,8(fp)
   3709c:	a809883a 	mov	r4,r21
   370a0:	1880004c 	andi	r2,r3,1
   370a4:	88a2b03a 	or	r17,r17,r2
   370a8:	bc400115 	stw	r17,4(r23)
   370ac:	003a0900 	call	3a090 <__malloc_unlock>
   370b0:	003f3c06 	br	36da4 <_realloc_r+0x17c>
   370b4:	80c00217 	ldw	r3,8(r16)
   370b8:	90c00215 	stw	r3,8(r18)
   370bc:	80c00317 	ldw	r3,12(r16)
   370c0:	90c00315 	stw	r3,12(r18)
   370c4:	30802426 	beq	r6,r2,37158 <_realloc_r+0x530>
   370c8:	90800404 	addi	r2,r18,16
   370cc:	80c00404 	addi	r3,r16,16
   370d0:	003f6e06 	br	36e8c <_realloc_r+0x264>
   370d4:	953fff17 	ldw	r20,-4(r18)
   370d8:	00ffff04 	movi	r3,-4
   370dc:	a0e8703a 	and	r20,r20,r3
   370e0:	a4e9883a 	add	r20,r20,r19
   370e4:	003f2206 	br	36d70 <_realloc_r+0x148>
   370e8:	800b883a 	mov	r5,r16
   370ec:	9009883a 	mov	r4,r18
   370f0:	00359700 	call	35970 <memmove>
   370f4:	9021883a 	mov	r16,r18
   370f8:	b8800117 	ldw	r2,4(r23)
   370fc:	b82d883a 	mov	r22,r23
   37100:	003f1b06 	br	36d70 <_realloc_r+0x148>
   37104:	9005883a 	mov	r2,r18
   37108:	8007883a 	mov	r3,r16
   3710c:	003f9206 	br	36f58 <_realloc_r+0x330>
   37110:	800b883a 	mov	r5,r16
   37114:	9009883a 	mov	r4,r18
   37118:	d9c00015 	stw	r7,0(sp)
   3711c:	00359700 	call	35970 <memmove>
   37120:	d9c00017 	ldw	r7,0(sp)
   37124:	9021883a 	mov	r16,r18
   37128:	b8800117 	ldw	r2,4(r23)
   3712c:	3829883a 	mov	r20,r7
   37130:	b82d883a 	mov	r22,r23
   37134:	003f0e06 	br	36d70 <_realloc_r+0x148>
   37138:	80800217 	ldw	r2,8(r16)
   3713c:	b8800415 	stw	r2,16(r23)
   37140:	80800317 	ldw	r2,12(r16)
   37144:	b8800515 	stw	r2,20(r23)
   37148:	31001226 	beq	r6,r4,37194 <_realloc_r+0x56c>
   3714c:	b8800604 	addi	r2,r23,24
   37150:	80c00404 	addi	r3,r16,16
   37154:	003f9606 	br	36fb0 <_realloc_r+0x388>
   37158:	81000417 	ldw	r4,16(r16)
   3715c:	90800604 	addi	r2,r18,24
   37160:	80c00604 	addi	r3,r16,24
   37164:	91000415 	stw	r4,16(r18)
   37168:	81000517 	ldw	r4,20(r16)
   3716c:	91000515 	stw	r4,20(r18)
   37170:	003f4606 	br	36e8c <_realloc_r+0x264>
   37174:	80800217 	ldw	r2,8(r16)
   37178:	b8800415 	stw	r2,16(r23)
   3717c:	80800317 	ldw	r2,12(r16)
   37180:	b8800515 	stw	r2,20(r23)
   37184:	31000d26 	beq	r6,r4,371bc <_realloc_r+0x594>
   37188:	b8800604 	addi	r2,r23,24
   3718c:	80c00404 	addi	r3,r16,16
   37190:	003f7106 	br	36f58 <_realloc_r+0x330>
   37194:	81000417 	ldw	r4,16(r16)
   37198:	b8800804 	addi	r2,r23,32
   3719c:	80c00604 	addi	r3,r16,24
   371a0:	b9000615 	stw	r4,24(r23)
   371a4:	81000517 	ldw	r4,20(r16)
   371a8:	b9000715 	stw	r4,28(r23)
   371ac:	003f8006 	br	36fb0 <_realloc_r+0x388>
   371b0:	9005883a 	mov	r2,r18
   371b4:	8007883a 	mov	r3,r16
   371b8:	003fac06 	br	3706c <_realloc_r+0x444>
   371bc:	81000417 	ldw	r4,16(r16)
   371c0:	b8800804 	addi	r2,r23,32
   371c4:	80c00604 	addi	r3,r16,24
   371c8:	b9000615 	stw	r4,24(r23)
   371cc:	81000517 	ldw	r4,20(r16)
   371d0:	b9000715 	stw	r4,28(r23)
   371d4:	003f6006 	br	36f58 <_realloc_r+0x330>
   371d8:	9009883a 	mov	r4,r18
   371dc:	800b883a 	mov	r5,r16
   371e0:	00359700 	call	35970 <memmove>
   371e4:	003fa706 	br	37084 <_realloc_r+0x45c>
   371e8:	80800217 	ldw	r2,8(r16)
   371ec:	b8800415 	stw	r2,16(r23)
   371f0:	80800317 	ldw	r2,12(r16)
   371f4:	b8800515 	stw	r2,20(r23)
   371f8:	31000326 	beq	r6,r4,37208 <_realloc_r+0x5e0>
   371fc:	b8800604 	addi	r2,r23,24
   37200:	80c00404 	addi	r3,r16,16
   37204:	003f9906 	br	3706c <_realloc_r+0x444>
   37208:	81000417 	ldw	r4,16(r16)
   3720c:	b8800804 	addi	r2,r23,32
   37210:	80c00604 	addi	r3,r16,24
   37214:	b9000615 	stw	r4,24(r23)
   37218:	81000517 	ldw	r4,20(r16)
   3721c:	b9000715 	stw	r4,28(r23)
   37220:	003f9206 	br	3706c <_realloc_r+0x444>

00037224 <__isinfd>:
   37224:	0105c83a 	sub	r2,zero,r4
   37228:	1108b03a 	or	r4,r2,r4
   3722c:	2004d7fa 	srli	r2,r4,31
   37230:	00e00034 	movhi	r3,32768
   37234:	18ffffc4 	addi	r3,r3,-1
   37238:	28ca703a 	and	r5,r5,r3
   3723c:	1144b03a 	or	r2,r2,r5
   37240:	00dffc34 	movhi	r3,32752
   37244:	1885c83a 	sub	r2,r3,r2
   37248:	0087c83a 	sub	r3,zero,r2
   3724c:	1884b03a 	or	r2,r3,r2
   37250:	1005d7fa 	srai	r2,r2,31
   37254:	10800044 	addi	r2,r2,1
   37258:	f800283a 	ret

0003725c <__isnand>:
   3725c:	0105c83a 	sub	r2,zero,r4
   37260:	1108b03a 	or	r4,r2,r4
   37264:	2004d7fa 	srli	r2,r4,31
   37268:	00e00034 	movhi	r3,32768
   3726c:	18ffffc4 	addi	r3,r3,-1
   37270:	28ca703a 	and	r5,r5,r3
   37274:	1144b03a 	or	r2,r2,r5
   37278:	00dffc34 	movhi	r3,32752
   3727c:	1885c83a 	sub	r2,r3,r2
   37280:	1004d7fa 	srli	r2,r2,31
   37284:	f800283a 	ret

00037288 <_sbrk_r>:
   37288:	defffd04 	addi	sp,sp,-12
   3728c:	dc400115 	stw	r17,4(sp)
   37290:	dc000015 	stw	r16,0(sp)
   37294:	2023883a 	mov	r17,r4
   37298:	04000034 	movhi	r16,0
   3729c:	84077304 	addi	r16,r16,7628
   372a0:	2809883a 	mov	r4,r5
   372a4:	dfc00215 	stw	ra,8(sp)
   372a8:	80000015 	stw	zero,0(r16)
   372ac:	003a2740 	call	3a274 <sbrk>
   372b0:	00ffffc4 	movi	r3,-1
   372b4:	10c00526 	beq	r2,r3,372cc <_sbrk_r+0x44>
   372b8:	dfc00217 	ldw	ra,8(sp)
   372bc:	dc400117 	ldw	r17,4(sp)
   372c0:	dc000017 	ldw	r16,0(sp)
   372c4:	dec00304 	addi	sp,sp,12
   372c8:	f800283a 	ret
   372cc:	80c00017 	ldw	r3,0(r16)
   372d0:	183ff926 	beq	r3,zero,372b8 <_sbrk_r+0x30>
   372d4:	88c00015 	stw	r3,0(r17)
   372d8:	dfc00217 	ldw	ra,8(sp)
   372dc:	dc400117 	ldw	r17,4(sp)
   372e0:	dc000017 	ldw	r16,0(sp)
   372e4:	dec00304 	addi	sp,sp,12
   372e8:	f800283a 	ret

000372ec <__sread>:
   372ec:	defffe04 	addi	sp,sp,-8
   372f0:	dc000015 	stw	r16,0(sp)
   372f4:	2821883a 	mov	r16,r5
   372f8:	2940038f 	ldh	r5,14(r5)
   372fc:	dfc00115 	stw	ra,4(sp)
   37300:	00378f40 	call	378f4 <_read_r>
   37304:	10000716 	blt	r2,zero,37324 <__sread+0x38>
   37308:	80c01417 	ldw	r3,80(r16)
   3730c:	1887883a 	add	r3,r3,r2
   37310:	80c01415 	stw	r3,80(r16)
   37314:	dfc00117 	ldw	ra,4(sp)
   37318:	dc000017 	ldw	r16,0(sp)
   3731c:	dec00204 	addi	sp,sp,8
   37320:	f800283a 	ret
   37324:	80c0030b 	ldhu	r3,12(r16)
   37328:	18fbffcc 	andi	r3,r3,61439
   3732c:	80c0030d 	sth	r3,12(r16)
   37330:	dfc00117 	ldw	ra,4(sp)
   37334:	dc000017 	ldw	r16,0(sp)
   37338:	dec00204 	addi	sp,sp,8
   3733c:	f800283a 	ret

00037340 <__swrite>:
   37340:	2880030b 	ldhu	r2,12(r5)
   37344:	defffb04 	addi	sp,sp,-20
   37348:	dcc00315 	stw	r19,12(sp)
   3734c:	10c0400c 	andi	r3,r2,256
   37350:	18ffffcc 	andi	r3,r3,65535
   37354:	18e0001c 	xori	r3,r3,32768
   37358:	dc800215 	stw	r18,8(sp)
   3735c:	dc400115 	stw	r17,4(sp)
   37360:	dc000015 	stw	r16,0(sp)
   37364:	dfc00415 	stw	ra,16(sp)
   37368:	18e00004 	addi	r3,r3,-32768
   3736c:	2821883a 	mov	r16,r5
   37370:	2027883a 	mov	r19,r4
   37374:	3025883a 	mov	r18,r6
   37378:	3823883a 	mov	r17,r7
   3737c:	18000526 	beq	r3,zero,37394 <__swrite+0x54>
   37380:	2940038f 	ldh	r5,14(r5)
   37384:	000d883a 	mov	r6,zero
   37388:	01c00084 	movi	r7,2
   3738c:	00378880 	call	37888 <_lseek_r>
   37390:	8080030b 	ldhu	r2,12(r16)
   37394:	8140038f 	ldh	r5,14(r16)
   37398:	10bbffcc 	andi	r2,r2,61439
   3739c:	9809883a 	mov	r4,r19
   373a0:	900d883a 	mov	r6,r18
   373a4:	880f883a 	mov	r7,r17
   373a8:	8080030d 	sth	r2,12(r16)
   373ac:	dfc00417 	ldw	ra,16(sp)
   373b0:	dcc00317 	ldw	r19,12(sp)
   373b4:	dc800217 	ldw	r18,8(sp)
   373b8:	dc400117 	ldw	r17,4(sp)
   373bc:	dc000017 	ldw	r16,0(sp)
   373c0:	dec00504 	addi	sp,sp,20
   373c4:	00374d01 	jmpi	374d0 <_write_r>

000373c8 <__sseek>:
   373c8:	defffe04 	addi	sp,sp,-8
   373cc:	dc000015 	stw	r16,0(sp)
   373d0:	2821883a 	mov	r16,r5
   373d4:	2940038f 	ldh	r5,14(r5)
   373d8:	dfc00115 	stw	ra,4(sp)
   373dc:	00378880 	call	37888 <_lseek_r>
   373e0:	00ffffc4 	movi	r3,-1
   373e4:	10c00826 	beq	r2,r3,37408 <__sseek+0x40>
   373e8:	80c0030b 	ldhu	r3,12(r16)
   373ec:	80801415 	stw	r2,80(r16)
   373f0:	18c40014 	ori	r3,r3,4096
   373f4:	80c0030d 	sth	r3,12(r16)
   373f8:	dfc00117 	ldw	ra,4(sp)
   373fc:	dc000017 	ldw	r16,0(sp)
   37400:	dec00204 	addi	sp,sp,8
   37404:	f800283a 	ret
   37408:	80c0030b 	ldhu	r3,12(r16)
   3740c:	18fbffcc 	andi	r3,r3,61439
   37410:	80c0030d 	sth	r3,12(r16)
   37414:	dfc00117 	ldw	ra,4(sp)
   37418:	dc000017 	ldw	r16,0(sp)
   3741c:	dec00204 	addi	sp,sp,8
   37420:	f800283a 	ret

00037424 <__sclose>:
   37424:	2940038f 	ldh	r5,14(r5)
   37428:	00376081 	jmpi	37608 <_close_r>

0003742c <strcmp>:
   3742c:	2904b03a 	or	r2,r5,r4
   37430:	108000cc 	andi	r2,r2,3
   37434:	1000171e 	bne	r2,zero,37494 <strcmp+0x68>
   37438:	20800017 	ldw	r2,0(r4)
   3743c:	28c00017 	ldw	r3,0(r5)
   37440:	10c0141e 	bne	r2,r3,37494 <strcmp+0x68>
   37444:	027fbff4 	movhi	r9,65279
   37448:	4a7fbfc4 	addi	r9,r9,-257
   3744c:	1247883a 	add	r3,r2,r9
   37450:	0084303a 	nor	r2,zero,r2
   37454:	1884703a 	and	r2,r3,r2
   37458:	02202074 	movhi	r8,32897
   3745c:	42202004 	addi	r8,r8,-32640
   37460:	1204703a 	and	r2,r2,r8
   37464:	10000226 	beq	r2,zero,37470 <strcmp+0x44>
   37468:	00001706 	br	374c8 <strcmp+0x9c>
   3746c:	3000161e 	bne	r6,zero,374c8 <strcmp+0x9c>
   37470:	21000104 	addi	r4,r4,4
   37474:	20800017 	ldw	r2,0(r4)
   37478:	29400104 	addi	r5,r5,4
   3747c:	28c00017 	ldw	r3,0(r5)
   37480:	124f883a 	add	r7,r2,r9
   37484:	008c303a 	nor	r6,zero,r2
   37488:	398c703a 	and	r6,r7,r6
   3748c:	320c703a 	and	r6,r6,r8
   37490:	10fff626 	beq	r2,r3,3746c <strcmp+0x40>
   37494:	20800007 	ldb	r2,0(r4)
   37498:	1000051e 	bne	r2,zero,374b0 <strcmp+0x84>
   3749c:	00000606 	br	374b8 <strcmp+0x8c>
   374a0:	21000044 	addi	r4,r4,1
   374a4:	20800007 	ldb	r2,0(r4)
   374a8:	29400044 	addi	r5,r5,1
   374ac:	10000226 	beq	r2,zero,374b8 <strcmp+0x8c>
   374b0:	28c00007 	ldb	r3,0(r5)
   374b4:	10fffa26 	beq	r2,r3,374a0 <strcmp+0x74>
   374b8:	20c00003 	ldbu	r3,0(r4)
   374bc:	28800003 	ldbu	r2,0(r5)
   374c0:	1885c83a 	sub	r2,r3,r2
   374c4:	f800283a 	ret
   374c8:	0005883a 	mov	r2,zero
   374cc:	f800283a 	ret

000374d0 <_write_r>:
   374d0:	defffd04 	addi	sp,sp,-12
   374d4:	dc400115 	stw	r17,4(sp)
   374d8:	dc000015 	stw	r16,0(sp)
   374dc:	2023883a 	mov	r17,r4
   374e0:	04000034 	movhi	r16,0
   374e4:	84077304 	addi	r16,r16,7628
   374e8:	2809883a 	mov	r4,r5
   374ec:	300b883a 	mov	r5,r6
   374f0:	380d883a 	mov	r6,r7
   374f4:	dfc00215 	stw	ra,8(sp)
   374f8:	80000015 	stw	zero,0(r16)
   374fc:	003a3740 	call	3a374 <write>
   37500:	00ffffc4 	movi	r3,-1
   37504:	10c00526 	beq	r2,r3,3751c <_write_r+0x4c>
   37508:	dfc00217 	ldw	ra,8(sp)
   3750c:	dc400117 	ldw	r17,4(sp)
   37510:	dc000017 	ldw	r16,0(sp)
   37514:	dec00304 	addi	sp,sp,12
   37518:	f800283a 	ret
   3751c:	80c00017 	ldw	r3,0(r16)
   37520:	183ff926 	beq	r3,zero,37508 <_write_r+0x38>
   37524:	88c00015 	stw	r3,0(r17)
   37528:	dfc00217 	ldw	ra,8(sp)
   3752c:	dc400117 	ldw	r17,4(sp)
   37530:	dc000017 	ldw	r16,0(sp)
   37534:	dec00304 	addi	sp,sp,12
   37538:	f800283a 	ret

0003753c <_calloc_r>:
   3753c:	defffe04 	addi	sp,sp,-8
   37540:	dc000015 	stw	r16,0(sp)
   37544:	2021883a 	mov	r16,r4
   37548:	3009883a 	mov	r4,r6
   3754c:	dfc00115 	stw	ra,4(sp)
   37550:	00394480 	call	39448 <__mulsi3>
   37554:	8009883a 	mov	r4,r16
   37558:	100b883a 	mov	r5,r2
   3755c:	0034fb40 	call	34fb4 <_malloc_r>
   37560:	1021883a 	mov	r16,r2
   37564:	10000c26 	beq	r2,zero,37598 <_calloc_r+0x5c>
   37568:	11bfff17 	ldw	r6,-4(r2)
   3756c:	00ffff04 	movi	r3,-4
   37570:	00800904 	movi	r2,36
   37574:	30cc703a 	and	r6,r6,r3
   37578:	30cd883a 	add	r6,r6,r3
   3757c:	11801436 	bltu	r2,r6,375d0 <_calloc_r+0x94>
   37580:	00c004c4 	movi	r3,19
   37584:	19800936 	bltu	r3,r6,375ac <_calloc_r+0x70>
   37588:	8005883a 	mov	r2,r16
   3758c:	10000015 	stw	zero,0(r2)
   37590:	10000115 	stw	zero,4(r2)
   37594:	10000215 	stw	zero,8(r2)
   37598:	8005883a 	mov	r2,r16
   3759c:	dfc00117 	ldw	ra,4(sp)
   375a0:	dc000017 	ldw	r16,0(sp)
   375a4:	dec00204 	addi	sp,sp,8
   375a8:	f800283a 	ret
   375ac:	80000015 	stw	zero,0(r16)
   375b0:	80000115 	stw	zero,4(r16)
   375b4:	00c006c4 	movi	r3,27
   375b8:	19800d2e 	bgeu	r3,r6,375f0 <_calloc_r+0xb4>
   375bc:	80000215 	stw	zero,8(r16)
   375c0:	80000315 	stw	zero,12(r16)
   375c4:	30800c26 	beq	r6,r2,375f8 <_calloc_r+0xbc>
   375c8:	80800404 	addi	r2,r16,16
   375cc:	003fef06 	br	3758c <_calloc_r+0x50>
   375d0:	8009883a 	mov	r4,r16
   375d4:	000b883a 	mov	r5,zero
   375d8:	0035afc0 	call	35afc <memset>
   375dc:	8005883a 	mov	r2,r16
   375e0:	dfc00117 	ldw	ra,4(sp)
   375e4:	dc000017 	ldw	r16,0(sp)
   375e8:	dec00204 	addi	sp,sp,8
   375ec:	f800283a 	ret
   375f0:	80800204 	addi	r2,r16,8
   375f4:	003fe506 	br	3758c <_calloc_r+0x50>
   375f8:	80000415 	stw	zero,16(r16)
   375fc:	80000515 	stw	zero,20(r16)
   37600:	80800604 	addi	r2,r16,24
   37604:	003fe106 	br	3758c <_calloc_r+0x50>

00037608 <_close_r>:
   37608:	defffd04 	addi	sp,sp,-12
   3760c:	dc400115 	stw	r17,4(sp)
   37610:	dc000015 	stw	r16,0(sp)
   37614:	2023883a 	mov	r17,r4
   37618:	04000034 	movhi	r16,0
   3761c:	84077304 	addi	r16,r16,7628
   37620:	2809883a 	mov	r4,r5
   37624:	dfc00215 	stw	ra,8(sp)
   37628:	80000015 	stw	zero,0(r16)
   3762c:	0039afc0 	call	39afc <close>
   37630:	00ffffc4 	movi	r3,-1
   37634:	10c00526 	beq	r2,r3,3764c <_close_r+0x44>
   37638:	dfc00217 	ldw	ra,8(sp)
   3763c:	dc400117 	ldw	r17,4(sp)
   37640:	dc000017 	ldw	r16,0(sp)
   37644:	dec00304 	addi	sp,sp,12
   37648:	f800283a 	ret
   3764c:	80c00017 	ldw	r3,0(r16)
   37650:	183ff926 	beq	r3,zero,37638 <_close_r+0x30>
   37654:	88c00015 	stw	r3,0(r17)
   37658:	dfc00217 	ldw	ra,8(sp)
   3765c:	dc400117 	ldw	r17,4(sp)
   37660:	dc000017 	ldw	r16,0(sp)
   37664:	dec00304 	addi	sp,sp,12
   37668:	f800283a 	ret

0003766c <_fclose_r>:
   3766c:	defffc04 	addi	sp,sp,-16
   37670:	dc400115 	stw	r17,4(sp)
   37674:	dc000015 	stw	r16,0(sp)
   37678:	dfc00315 	stw	ra,12(sp)
   3767c:	dc800215 	stw	r18,8(sp)
   37680:	2821883a 	mov	r16,r5
   37684:	2023883a 	mov	r17,r4
   37688:	28003426 	beq	r5,zero,3775c <_fclose_r+0xf0>
   3768c:	00342a00 	call	342a0 <__sfp_lock_acquire>
   37690:	88000226 	beq	r17,zero,3769c <_fclose_r+0x30>
   37694:	88800e17 	ldw	r2,56(r17)
   37698:	10003826 	beq	r2,zero,3777c <_fclose_r+0x110>
   3769c:	8080030f 	ldh	r2,12(r16)
   376a0:	10002526 	beq	r2,zero,37738 <_fclose_r+0xcc>
   376a4:	8809883a 	mov	r4,r17
   376a8:	800b883a 	mov	r5,r16
   376ac:	0033ddc0 	call	33ddc <_fflush_r>
   376b0:	1025883a 	mov	r18,r2
   376b4:	80800b17 	ldw	r2,44(r16)
   376b8:	10000426 	beq	r2,zero,376cc <_fclose_r+0x60>
   376bc:	81400717 	ldw	r5,28(r16)
   376c0:	8809883a 	mov	r4,r17
   376c4:	103ee83a 	callr	r2
   376c8:	10003516 	blt	r2,zero,377a0 <_fclose_r+0x134>
   376cc:	8080030b 	ldhu	r2,12(r16)
   376d0:	1080200c 	andi	r2,r2,128
   376d4:	10bfffcc 	andi	r2,r2,65535
   376d8:	10a0001c 	xori	r2,r2,32768
   376dc:	10a00004 	addi	r2,r2,-32768
   376e0:	10002b1e 	bne	r2,zero,37790 <_fclose_r+0x124>
   376e4:	81400c17 	ldw	r5,48(r16)
   376e8:	28000526 	beq	r5,zero,37700 <_fclose_r+0x94>
   376ec:	80801004 	addi	r2,r16,64
   376f0:	28800226 	beq	r5,r2,376fc <_fclose_r+0x90>
   376f4:	8809883a 	mov	r4,r17
   376f8:	003441c0 	call	3441c <_free_r>
   376fc:	80000c15 	stw	zero,48(r16)
   37700:	81401117 	ldw	r5,68(r16)
   37704:	28000326 	beq	r5,zero,37714 <_fclose_r+0xa8>
   37708:	8809883a 	mov	r4,r17
   3770c:	003441c0 	call	3441c <_free_r>
   37710:	80001115 	stw	zero,68(r16)
   37714:	8000030d 	sth	zero,12(r16)
   37718:	00342a40 	call	342a4 <__sfp_lock_release>
   3771c:	9005883a 	mov	r2,r18
   37720:	dfc00317 	ldw	ra,12(sp)
   37724:	dc800217 	ldw	r18,8(sp)
   37728:	dc400117 	ldw	r17,4(sp)
   3772c:	dc000017 	ldw	r16,0(sp)
   37730:	dec00404 	addi	sp,sp,16
   37734:	f800283a 	ret
   37738:	00342a40 	call	342a4 <__sfp_lock_release>
   3773c:	0025883a 	mov	r18,zero
   37740:	9005883a 	mov	r2,r18
   37744:	dfc00317 	ldw	ra,12(sp)
   37748:	dc800217 	ldw	r18,8(sp)
   3774c:	dc400117 	ldw	r17,4(sp)
   37750:	dc000017 	ldw	r16,0(sp)
   37754:	dec00404 	addi	sp,sp,16
   37758:	f800283a 	ret
   3775c:	0025883a 	mov	r18,zero
   37760:	9005883a 	mov	r2,r18
   37764:	dfc00317 	ldw	ra,12(sp)
   37768:	dc800217 	ldw	r18,8(sp)
   3776c:	dc400117 	ldw	r17,4(sp)
   37770:	dc000017 	ldw	r16,0(sp)
   37774:	dec00404 	addi	sp,sp,16
   37778:	f800283a 	ret
   3777c:	8809883a 	mov	r4,r17
   37780:	00340980 	call	34098 <__sinit>
   37784:	8080030f 	ldh	r2,12(r16)
   37788:	103fc61e 	bne	r2,zero,376a4 <_fclose_r+0x38>
   3778c:	003fea06 	br	37738 <_fclose_r+0xcc>
   37790:	81400417 	ldw	r5,16(r16)
   37794:	8809883a 	mov	r4,r17
   37798:	003441c0 	call	3441c <_free_r>
   3779c:	003fd106 	br	376e4 <_fclose_r+0x78>
   377a0:	04bfffc4 	movi	r18,-1
   377a4:	003fc906 	br	376cc <_fclose_r+0x60>

000377a8 <fclose>:
   377a8:	00800034 	movhi	r2,0
   377ac:	10875f04 	addi	r2,r2,7548
   377b0:	200b883a 	mov	r5,r4
   377b4:	11000017 	ldw	r4,0(r2)
   377b8:	003766c1 	jmpi	3766c <_fclose_r>

000377bc <_fstat_r>:
   377bc:	defffd04 	addi	sp,sp,-12
   377c0:	dc400115 	stw	r17,4(sp)
   377c4:	dc000015 	stw	r16,0(sp)
   377c8:	2023883a 	mov	r17,r4
   377cc:	04000034 	movhi	r16,0
   377d0:	84077304 	addi	r16,r16,7628
   377d4:	2809883a 	mov	r4,r5
   377d8:	300b883a 	mov	r5,r6
   377dc:	dfc00215 	stw	ra,8(sp)
   377e0:	80000015 	stw	zero,0(r16)
   377e4:	0039c440 	call	39c44 <fstat>
   377e8:	00ffffc4 	movi	r3,-1
   377ec:	10c00526 	beq	r2,r3,37804 <_fstat_r+0x48>
   377f0:	dfc00217 	ldw	ra,8(sp)
   377f4:	dc400117 	ldw	r17,4(sp)
   377f8:	dc000017 	ldw	r16,0(sp)
   377fc:	dec00304 	addi	sp,sp,12
   37800:	f800283a 	ret
   37804:	80c00017 	ldw	r3,0(r16)
   37808:	183ff926 	beq	r3,zero,377f0 <_fstat_r+0x34>
   3780c:	88c00015 	stw	r3,0(r17)
   37810:	dfc00217 	ldw	ra,8(sp)
   37814:	dc400117 	ldw	r17,4(sp)
   37818:	dc000017 	ldw	r16,0(sp)
   3781c:	dec00304 	addi	sp,sp,12
   37820:	f800283a 	ret

00037824 <_isatty_r>:
   37824:	defffd04 	addi	sp,sp,-12
   37828:	dc400115 	stw	r17,4(sp)
   3782c:	dc000015 	stw	r16,0(sp)
   37830:	2023883a 	mov	r17,r4
   37834:	04000034 	movhi	r16,0
   37838:	84077304 	addi	r16,r16,7628
   3783c:	2809883a 	mov	r4,r5
   37840:	dfc00215 	stw	ra,8(sp)
   37844:	80000015 	stw	zero,0(r16)
   37848:	0039d440 	call	39d44 <isatty>
   3784c:	00ffffc4 	movi	r3,-1
   37850:	10c00526 	beq	r2,r3,37868 <_isatty_r+0x44>
   37854:	dfc00217 	ldw	ra,8(sp)
   37858:	dc400117 	ldw	r17,4(sp)
   3785c:	dc000017 	ldw	r16,0(sp)
   37860:	dec00304 	addi	sp,sp,12
   37864:	f800283a 	ret
   37868:	80c00017 	ldw	r3,0(r16)
   3786c:	183ff926 	beq	r3,zero,37854 <_isatty_r+0x30>
   37870:	88c00015 	stw	r3,0(r17)
   37874:	dfc00217 	ldw	ra,8(sp)
   37878:	dc400117 	ldw	r17,4(sp)
   3787c:	dc000017 	ldw	r16,0(sp)
   37880:	dec00304 	addi	sp,sp,12
   37884:	f800283a 	ret

00037888 <_lseek_r>:
   37888:	defffd04 	addi	sp,sp,-12
   3788c:	dc400115 	stw	r17,4(sp)
   37890:	dc000015 	stw	r16,0(sp)
   37894:	2023883a 	mov	r17,r4
   37898:	04000034 	movhi	r16,0
   3789c:	84077304 	addi	r16,r16,7628
   378a0:	2809883a 	mov	r4,r5
   378a4:	300b883a 	mov	r5,r6
   378a8:	380d883a 	mov	r6,r7
   378ac:	dfc00215 	stw	ra,8(sp)
   378b0:	80000015 	stw	zero,0(r16)
   378b4:	0039f240 	call	39f24 <lseek>
   378b8:	00ffffc4 	movi	r3,-1
   378bc:	10c00526 	beq	r2,r3,378d4 <_lseek_r+0x4c>
   378c0:	dfc00217 	ldw	ra,8(sp)
   378c4:	dc400117 	ldw	r17,4(sp)
   378c8:	dc000017 	ldw	r16,0(sp)
   378cc:	dec00304 	addi	sp,sp,12
   378d0:	f800283a 	ret
   378d4:	80c00017 	ldw	r3,0(r16)
   378d8:	183ff926 	beq	r3,zero,378c0 <_lseek_r+0x38>
   378dc:	88c00015 	stw	r3,0(r17)
   378e0:	dfc00217 	ldw	ra,8(sp)
   378e4:	dc400117 	ldw	r17,4(sp)
   378e8:	dc000017 	ldw	r16,0(sp)
   378ec:	dec00304 	addi	sp,sp,12
   378f0:	f800283a 	ret

000378f4 <_read_r>:
   378f4:	defffd04 	addi	sp,sp,-12
   378f8:	dc400115 	stw	r17,4(sp)
   378fc:	dc000015 	stw	r16,0(sp)
   37900:	2023883a 	mov	r17,r4
   37904:	04000034 	movhi	r16,0
   37908:	84077304 	addi	r16,r16,7628
   3790c:	2809883a 	mov	r4,r5
   37910:	300b883a 	mov	r5,r6
   37914:	380d883a 	mov	r6,r7
   37918:	dfc00215 	stw	ra,8(sp)
   3791c:	80000015 	stw	zero,0(r16)
   37920:	003a1000 	call	3a100 <read>
   37924:	00ffffc4 	movi	r3,-1
   37928:	10c00526 	beq	r2,r3,37940 <_read_r+0x4c>
   3792c:	dfc00217 	ldw	ra,8(sp)
   37930:	dc400117 	ldw	r17,4(sp)
   37934:	dc000017 	ldw	r16,0(sp)
   37938:	dec00304 	addi	sp,sp,12
   3793c:	f800283a 	ret
   37940:	80c00017 	ldw	r3,0(r16)
   37944:	183ff926 	beq	r3,zero,3792c <_read_r+0x38>
   37948:	88c00015 	stw	r3,0(r17)
   3794c:	dfc00217 	ldw	ra,8(sp)
   37950:	dc400117 	ldw	r17,4(sp)
   37954:	dc000017 	ldw	r16,0(sp)
   37958:	dec00304 	addi	sp,sp,12
   3795c:	f800283a 	ret

00037960 <__udivdi3>:
   37960:	defff504 	addi	sp,sp,-44
   37964:	dd000515 	stw	r20,20(sp)
   37968:	dcc00415 	stw	r19,16(sp)
   3796c:	dc800315 	stw	r18,12(sp)
   37970:	dc400215 	stw	r17,8(sp)
   37974:	dc000115 	stw	r16,4(sp)
   37978:	dfc00a15 	stw	ra,40(sp)
   3797c:	df000915 	stw	fp,36(sp)
   37980:	ddc00815 	stw	r23,32(sp)
   37984:	dd800715 	stw	r22,28(sp)
   37988:	dd400615 	stw	r21,24(sp)
   3798c:	2025883a 	mov	r18,r4
   37990:	2823883a 	mov	r17,r5
   37994:	3021883a 	mov	r16,r6
   37998:	2027883a 	mov	r19,r4
   3799c:	2829883a 	mov	r20,r5
   379a0:	3800451e 	bne	r7,zero,37ab8 <__udivdi3+0x158>
   379a4:	2980652e 	bgeu	r5,r6,37b3c <__udivdi3+0x1dc>
   379a8:	00bfffd4 	movui	r2,65535
   379ac:	1180b436 	bltu	r2,r6,37c80 <__udivdi3+0x320>
   379b0:	00803fc4 	movi	r2,255
   379b4:	11816636 	bltu	r2,r6,37f50 <__udivdi3+0x5f0>
   379b8:	0005883a 	mov	r2,zero
   379bc:	0007883a 	mov	r3,zero
   379c0:	3084d83a 	srl	r2,r6,r2
   379c4:	01000034 	movhi	r4,0
   379c8:	21008c04 	addi	r4,r4,560
   379cc:	2085883a 	add	r2,r4,r2
   379d0:	10800003 	ldbu	r2,0(r2)
   379d4:	10c7883a 	add	r3,r2,r3
   379d8:	00800804 	movi	r2,32
   379dc:	10c5c83a 	sub	r2,r2,r3
   379e0:	10000526 	beq	r2,zero,379f8 <__udivdi3+0x98>
   379e4:	88a2983a 	sll	r17,r17,r2
   379e8:	90c6d83a 	srl	r3,r18,r3
   379ec:	30a0983a 	sll	r16,r6,r2
   379f0:	90a6983a 	sll	r19,r18,r2
   379f4:	88e8b03a 	or	r20,r17,r3
   379f8:	8022d43a 	srli	r17,r16,16
   379fc:	a009883a 	mov	r4,r20
   37a00:	857fffcc 	andi	r21,r16,65535
   37a04:	880b883a 	mov	r5,r17
   37a08:	00394400 	call	39440 <__umodsi3>
   37a0c:	a009883a 	mov	r4,r20
   37a10:	880b883a 	mov	r5,r17
   37a14:	102d883a 	mov	r22,r2
   37a18:	00394380 	call	39438 <__udivsi3>
   37a1c:	1009883a 	mov	r4,r2
   37a20:	a80b883a 	mov	r5,r21
   37a24:	1025883a 	mov	r18,r2
   37a28:	00394480 	call	39448 <__mulsi3>
   37a2c:	1009883a 	mov	r4,r2
   37a30:	b006943a 	slli	r3,r22,16
   37a34:	9804d43a 	srli	r2,r19,16
   37a38:	1886b03a 	or	r3,r3,r2
   37a3c:	1900052e 	bgeu	r3,r4,37a54 <__udivdi3+0xf4>
   37a40:	1c07883a 	add	r3,r3,r16
   37a44:	90bfffc4 	addi	r2,r18,-1
   37a48:	1c000136 	bltu	r3,r16,37a50 <__udivdi3+0xf0>
   37a4c:	19015536 	bltu	r3,r4,37fa4 <__udivdi3+0x644>
   37a50:	1025883a 	mov	r18,r2
   37a54:	1929c83a 	sub	r20,r3,r4
   37a58:	880b883a 	mov	r5,r17
   37a5c:	a009883a 	mov	r4,r20
   37a60:	00394400 	call	39440 <__umodsi3>
   37a64:	102d883a 	mov	r22,r2
   37a68:	880b883a 	mov	r5,r17
   37a6c:	a009883a 	mov	r4,r20
   37a70:	b02c943a 	slli	r22,r22,16
   37a74:	00394380 	call	39438 <__udivsi3>
   37a78:	1009883a 	mov	r4,r2
   37a7c:	a80b883a 	mov	r5,r21
   37a80:	9cffffcc 	andi	r19,r19,65535
   37a84:	1023883a 	mov	r17,r2
   37a88:	b4e6b03a 	or	r19,r22,r19
   37a8c:	00394480 	call	39448 <__mulsi3>
   37a90:	9880052e 	bgeu	r19,r2,37aa8 <__udivdi3+0x148>
   37a94:	9c27883a 	add	r19,r19,r16
   37a98:	88ffffc4 	addi	r3,r17,-1
   37a9c:	9c011436 	bltu	r19,r16,37ef0 <__udivdi3+0x590>
   37aa0:	9881132e 	bgeu	r19,r2,37ef0 <__udivdi3+0x590>
   37aa4:	8c7fff84 	addi	r17,r17,-2
   37aa8:	9004943a 	slli	r2,r18,16
   37aac:	0007883a 	mov	r3,zero
   37ab0:	8884b03a 	or	r2,r17,r2
   37ab4:	00001506 	br	37b0c <__udivdi3+0x1ac>
   37ab8:	29c06a36 	bltu	r5,r7,37c64 <__udivdi3+0x304>
   37abc:	00bfffd4 	movui	r2,65535
   37ac0:	11c06a2e 	bgeu	r2,r7,37c6c <__udivdi3+0x30c>
   37ac4:	00804034 	movhi	r2,256
   37ac8:	10bfffc4 	addi	r2,r2,-1
   37acc:	11c11436 	bltu	r2,r7,37f20 <__udivdi3+0x5c0>
   37ad0:	00c00404 	movi	r3,16
   37ad4:	180b883a 	mov	r5,r3
   37ad8:	38c6d83a 	srl	r3,r7,r3
   37adc:	01000034 	movhi	r4,0
   37ae0:	21008c04 	addi	r4,r4,560
   37ae4:	04000804 	movi	r16,32
   37ae8:	20c7883a 	add	r3,r4,r3
   37aec:	18800003 	ldbu	r2,0(r3)
   37af0:	1145883a 	add	r2,r2,r5
   37af4:	80a1c83a 	sub	r16,r16,r2
   37af8:	80006e1e 	bne	r16,zero,37cb4 <__udivdi3+0x354>
   37afc:	0007883a 	mov	r3,zero
   37b00:	3c406a36 	bltu	r7,r17,37cac <__udivdi3+0x34c>
   37b04:	9180692e 	bgeu	r18,r6,37cac <__udivdi3+0x34c>
   37b08:	0005883a 	mov	r2,zero
   37b0c:	dfc00a17 	ldw	ra,40(sp)
   37b10:	df000917 	ldw	fp,36(sp)
   37b14:	ddc00817 	ldw	r23,32(sp)
   37b18:	dd800717 	ldw	r22,28(sp)
   37b1c:	dd400617 	ldw	r21,24(sp)
   37b20:	dd000517 	ldw	r20,20(sp)
   37b24:	dcc00417 	ldw	r19,16(sp)
   37b28:	dc800317 	ldw	r18,12(sp)
   37b2c:	dc400217 	ldw	r17,8(sp)
   37b30:	dc000117 	ldw	r16,4(sp)
   37b34:	dec00b04 	addi	sp,sp,44
   37b38:	f800283a 	ret
   37b3c:	3000041e 	bne	r6,zero,37b50 <__udivdi3+0x1f0>
   37b40:	01000044 	movi	r4,1
   37b44:	000b883a 	mov	r5,zero
   37b48:	00394380 	call	39438 <__udivsi3>
   37b4c:	1021883a 	mov	r16,r2
   37b50:	00bfffd4 	movui	r2,65535
   37b54:	1400502e 	bgeu	r2,r16,37c98 <__udivdi3+0x338>
   37b58:	00804034 	movhi	r2,256
   37b5c:	10bfffc4 	addi	r2,r2,-1
   37b60:	1400f536 	bltu	r2,r16,37f38 <__udivdi3+0x5d8>
   37b64:	00800404 	movi	r2,16
   37b68:	1007883a 	mov	r3,r2
   37b6c:	8084d83a 	srl	r2,r16,r2
   37b70:	01000034 	movhi	r4,0
   37b74:	21008c04 	addi	r4,r4,560
   37b78:	2085883a 	add	r2,r4,r2
   37b7c:	10800003 	ldbu	r2,0(r2)
   37b80:	10c7883a 	add	r3,r2,r3
   37b84:	00800804 	movi	r2,32
   37b88:	10c5c83a 	sub	r2,r2,r3
   37b8c:	1000a01e 	bne	r2,zero,37e10 <__udivdi3+0x4b0>
   37b90:	8028d43a 	srli	r20,r16,16
   37b94:	8c23c83a 	sub	r17,r17,r16
   37b98:	857fffcc 	andi	r21,r16,65535
   37b9c:	00c00044 	movi	r3,1
   37ba0:	8809883a 	mov	r4,r17
   37ba4:	a00b883a 	mov	r5,r20
   37ba8:	d8c00015 	stw	r3,0(sp)
   37bac:	00394400 	call	39440 <__umodsi3>
   37bb0:	8809883a 	mov	r4,r17
   37bb4:	a00b883a 	mov	r5,r20
   37bb8:	102d883a 	mov	r22,r2
   37bbc:	00394380 	call	39438 <__udivsi3>
   37bc0:	1009883a 	mov	r4,r2
   37bc4:	a80b883a 	mov	r5,r21
   37bc8:	1025883a 	mov	r18,r2
   37bcc:	00394480 	call	39448 <__mulsi3>
   37bd0:	1009883a 	mov	r4,r2
   37bd4:	b00c943a 	slli	r6,r22,16
   37bd8:	9804d43a 	srli	r2,r19,16
   37bdc:	d8c00017 	ldw	r3,0(sp)
   37be0:	308cb03a 	or	r6,r6,r2
   37be4:	3100052e 	bgeu	r6,r4,37bfc <__udivdi3+0x29c>
   37be8:	340d883a 	add	r6,r6,r16
   37bec:	90bfffc4 	addi	r2,r18,-1
   37bf0:	34000136 	bltu	r6,r16,37bf8 <__udivdi3+0x298>
   37bf4:	3100e836 	bltu	r6,r4,37f98 <__udivdi3+0x638>
   37bf8:	1025883a 	mov	r18,r2
   37bfc:	3123c83a 	sub	r17,r6,r4
   37c00:	8809883a 	mov	r4,r17
   37c04:	a00b883a 	mov	r5,r20
   37c08:	d8c00015 	stw	r3,0(sp)
   37c0c:	00394400 	call	39440 <__umodsi3>
   37c10:	102d883a 	mov	r22,r2
   37c14:	8809883a 	mov	r4,r17
   37c18:	a00b883a 	mov	r5,r20
   37c1c:	b02c943a 	slli	r22,r22,16
   37c20:	00394380 	call	39438 <__udivsi3>
   37c24:	1009883a 	mov	r4,r2
   37c28:	a80b883a 	mov	r5,r21
   37c2c:	9cffffcc 	andi	r19,r19,65535
   37c30:	1023883a 	mov	r17,r2
   37c34:	b4e6b03a 	or	r19,r22,r19
   37c38:	00394480 	call	39448 <__mulsi3>
   37c3c:	d8c00017 	ldw	r3,0(sp)
   37c40:	9880052e 	bgeu	r19,r2,37c58 <__udivdi3+0x2f8>
   37c44:	9c27883a 	add	r19,r19,r16
   37c48:	893fffc4 	addi	r4,r17,-1
   37c4c:	9c00aa36 	bltu	r19,r16,37ef8 <__udivdi3+0x598>
   37c50:	9880a92e 	bgeu	r19,r2,37ef8 <__udivdi3+0x598>
   37c54:	8c7fff84 	addi	r17,r17,-2
   37c58:	9004943a 	slli	r2,r18,16
   37c5c:	8884b03a 	or	r2,r17,r2
   37c60:	003faa06 	br	37b0c <__udivdi3+0x1ac>
   37c64:	0007883a 	mov	r3,zero
   37c68:	003fa706 	br	37b08 <__udivdi3+0x1a8>
   37c6c:	00803fc4 	movi	r2,255
   37c70:	11c0ae36 	bltu	r2,r7,37f2c <__udivdi3+0x5cc>
   37c74:	0007883a 	mov	r3,zero
   37c78:	000b883a 	mov	r5,zero
   37c7c:	003f9606 	br	37ad8 <__udivdi3+0x178>
   37c80:	00804034 	movhi	r2,256
   37c84:	10bfffc4 	addi	r2,r2,-1
   37c88:	1180ae36 	bltu	r2,r6,37f44 <__udivdi3+0x5e4>
   37c8c:	00800404 	movi	r2,16
   37c90:	1007883a 	mov	r3,r2
   37c94:	003f4a06 	br	379c0 <__udivdi3+0x60>
   37c98:	00803fc4 	movi	r2,255
   37c9c:	1400af36 	bltu	r2,r16,37f5c <__udivdi3+0x5fc>
   37ca0:	0005883a 	mov	r2,zero
   37ca4:	0007883a 	mov	r3,zero
   37ca8:	003fb006 	br	37b6c <__udivdi3+0x20c>
   37cac:	00800044 	movi	r2,1
   37cb0:	003f9606 	br	37b0c <__udivdi3+0x1ac>
   37cb4:	3c0e983a 	sll	r7,r7,r16
   37cb8:	3086d83a 	srl	r3,r6,r2
   37cbc:	88aed83a 	srl	r23,r17,r2
   37cc0:	9084d83a 	srl	r2,r18,r2
   37cc4:	38e6b03a 	or	r19,r7,r3
   37cc8:	9828d43a 	srli	r20,r19,16
   37ccc:	8c22983a 	sll	r17,r17,r16
   37cd0:	b809883a 	mov	r4,r23
   37cd4:	a00b883a 	mov	r5,r20
   37cd8:	342a983a 	sll	r21,r6,r16
   37cdc:	88a2b03a 	or	r17,r17,r2
   37ce0:	00394400 	call	39440 <__umodsi3>
   37ce4:	b809883a 	mov	r4,r23
   37ce8:	a00b883a 	mov	r5,r20
   37cec:	1039883a 	mov	fp,r2
   37cf0:	9dbfffcc 	andi	r22,r19,65535
   37cf4:	00394380 	call	39438 <__udivsi3>
   37cf8:	1009883a 	mov	r4,r2
   37cfc:	b00b883a 	mov	r5,r22
   37d00:	102f883a 	mov	r23,r2
   37d04:	00394480 	call	39448 <__mulsi3>
   37d08:	1009883a 	mov	r4,r2
   37d0c:	e00e943a 	slli	r7,fp,16
   37d10:	8804d43a 	srli	r2,r17,16
   37d14:	388eb03a 	or	r7,r7,r2
   37d18:	3900042e 	bgeu	r7,r4,37d2c <__udivdi3+0x3cc>
   37d1c:	3ccf883a 	add	r7,r7,r19
   37d20:	b8bfffc4 	addi	r2,r23,-1
   37d24:	3cc0942e 	bgeu	r7,r19,37f78 <__udivdi3+0x618>
   37d28:	102f883a 	mov	r23,r2
   37d2c:	3939c83a 	sub	fp,r7,r4
   37d30:	a00b883a 	mov	r5,r20
   37d34:	e009883a 	mov	r4,fp
   37d38:	00394400 	call	39440 <__umodsi3>
   37d3c:	a00b883a 	mov	r5,r20
   37d40:	e009883a 	mov	r4,fp
   37d44:	d8800015 	stw	r2,0(sp)
   37d48:	00394380 	call	39438 <__udivsi3>
   37d4c:	1009883a 	mov	r4,r2
   37d50:	b00b883a 	mov	r5,r22
   37d54:	1029883a 	mov	r20,r2
   37d58:	00394480 	call	39448 <__mulsi3>
   37d5c:	d8c00017 	ldw	r3,0(sp)
   37d60:	8c7fffcc 	andi	r17,r17,65535
   37d64:	1806943a 	slli	r3,r3,16
   37d68:	1c46b03a 	or	r3,r3,r17
   37d6c:	1880042e 	bgeu	r3,r2,37d80 <__udivdi3+0x420>
   37d70:	1cc7883a 	add	r3,r3,r19
   37d74:	a13fffc4 	addi	r4,r20,-1
   37d78:	1cc07b2e 	bgeu	r3,r19,37f68 <__udivdi3+0x608>
   37d7c:	2029883a 	mov	r20,r4
   37d80:	b82e943a 	slli	r23,r23,16
   37d84:	a822d43a 	srli	r17,r21,16
   37d88:	ad7fffcc 	andi	r21,r21,65535
   37d8c:	a5e8b03a 	or	r20,r20,r23
   37d90:	a5bfffcc 	andi	r22,r20,65535
   37d94:	b009883a 	mov	r4,r22
   37d98:	a80b883a 	mov	r5,r21
   37d9c:	18afc83a 	sub	r23,r3,r2
   37da0:	a026d43a 	srli	r19,r20,16
   37da4:	00394480 	call	39448 <__mulsi3>
   37da8:	b009883a 	mov	r4,r22
   37dac:	880b883a 	mov	r5,r17
   37db0:	1039883a 	mov	fp,r2
   37db4:	00394480 	call	39448 <__mulsi3>
   37db8:	a80b883a 	mov	r5,r21
   37dbc:	9809883a 	mov	r4,r19
   37dc0:	102d883a 	mov	r22,r2
   37dc4:	00394480 	call	39448 <__mulsi3>
   37dc8:	9809883a 	mov	r4,r19
   37dcc:	880b883a 	mov	r5,r17
   37dd0:	102b883a 	mov	r21,r2
   37dd4:	00394480 	call	39448 <__mulsi3>
   37dd8:	100b883a 	mov	r5,r2
   37ddc:	e004d43a 	srli	r2,fp,16
   37de0:	ad89883a 	add	r4,r21,r22
   37de4:	2089883a 	add	r4,r4,r2
   37de8:	2540022e 	bgeu	r4,r21,37df4 <__udivdi3+0x494>
   37dec:	00800074 	movhi	r2,1
   37df0:	288b883a 	add	r5,r5,r2
   37df4:	2004d43a 	srli	r2,r4,16
   37df8:	288b883a 	add	r5,r5,r2
   37dfc:	b9404536 	bltu	r23,r5,37f14 <__udivdi3+0x5b4>
   37e00:	b9403f26 	beq	r23,r5,37f00 <__udivdi3+0x5a0>
   37e04:	a005883a 	mov	r2,r20
   37e08:	0007883a 	mov	r3,zero
   37e0c:	003f3f06 	br	37b0c <__udivdi3+0x1ac>
   37e10:	80a0983a 	sll	r16,r16,r2
   37e14:	88eed83a 	srl	r23,r17,r3
   37e18:	90c6d83a 	srl	r3,r18,r3
   37e1c:	8028d43a 	srli	r20,r16,16
   37e20:	88a2983a 	sll	r17,r17,r2
   37e24:	b809883a 	mov	r4,r23
   37e28:	a00b883a 	mov	r5,r20
   37e2c:	88ecb03a 	or	r22,r17,r3
   37e30:	90a6983a 	sll	r19,r18,r2
   37e34:	00394400 	call	39440 <__umodsi3>
   37e38:	b809883a 	mov	r4,r23
   37e3c:	a00b883a 	mov	r5,r20
   37e40:	1023883a 	mov	r17,r2
   37e44:	857fffcc 	andi	r21,r16,65535
   37e48:	00394380 	call	39438 <__udivsi3>
   37e4c:	1009883a 	mov	r4,r2
   37e50:	a80b883a 	mov	r5,r21
   37e54:	102f883a 	mov	r23,r2
   37e58:	00394480 	call	39448 <__mulsi3>
   37e5c:	1009883a 	mov	r4,r2
   37e60:	880a943a 	slli	r5,r17,16
   37e64:	b004d43a 	srli	r2,r22,16
   37e68:	288ab03a 	or	r5,r5,r2
   37e6c:	2900062e 	bgeu	r5,r4,37e88 <__udivdi3+0x528>
   37e70:	2c0b883a 	add	r5,r5,r16
   37e74:	b8bfffc4 	addi	r2,r23,-1
   37e78:	2c004536 	bltu	r5,r16,37f90 <__udivdi3+0x630>
   37e7c:	2900442e 	bgeu	r5,r4,37f90 <__udivdi3+0x630>
   37e80:	bdffff84 	addi	r23,r23,-2
   37e84:	2c0b883a 	add	r5,r5,r16
   37e88:	2925c83a 	sub	r18,r5,r4
   37e8c:	9009883a 	mov	r4,r18
   37e90:	a00b883a 	mov	r5,r20
   37e94:	00394400 	call	39440 <__umodsi3>
   37e98:	1023883a 	mov	r17,r2
   37e9c:	9009883a 	mov	r4,r18
   37ea0:	a00b883a 	mov	r5,r20
   37ea4:	8822943a 	slli	r17,r17,16
   37ea8:	00394380 	call	39438 <__udivsi3>
   37eac:	1009883a 	mov	r4,r2
   37eb0:	a80b883a 	mov	r5,r21
   37eb4:	b5bfffcc 	andi	r22,r22,65535
   37eb8:	1025883a 	mov	r18,r2
   37ebc:	8da2b03a 	or	r17,r17,r22
   37ec0:	00394480 	call	39448 <__mulsi3>
   37ec4:	8880062e 	bgeu	r17,r2,37ee0 <__udivdi3+0x580>
   37ec8:	8c23883a 	add	r17,r17,r16
   37ecc:	90ffffc4 	addi	r3,r18,-1
   37ed0:	8c002d36 	bltu	r17,r16,37f88 <__udivdi3+0x628>
   37ed4:	88802c2e 	bgeu	r17,r2,37f88 <__udivdi3+0x628>
   37ed8:	94bfff84 	addi	r18,r18,-2
   37edc:	8c23883a 	add	r17,r17,r16
   37ee0:	b806943a 	slli	r3,r23,16
   37ee4:	88a3c83a 	sub	r17,r17,r2
   37ee8:	90c6b03a 	or	r3,r18,r3
   37eec:	003f2c06 	br	37ba0 <__udivdi3+0x240>
   37ef0:	1823883a 	mov	r17,r3
   37ef4:	003eec06 	br	37aa8 <__udivdi3+0x148>
   37ef8:	2023883a 	mov	r17,r4
   37efc:	003f5606 	br	37c58 <__udivdi3+0x2f8>
   37f00:	2008943a 	slli	r4,r4,16
   37f04:	9420983a 	sll	r16,r18,r16
   37f08:	e73fffcc 	andi	fp,fp,65535
   37f0c:	2709883a 	add	r4,r4,fp
   37f10:	813fbc2e 	bgeu	r16,r4,37e04 <__udivdi3+0x4a4>
   37f14:	a0bfffc4 	addi	r2,r20,-1
   37f18:	0007883a 	mov	r3,zero
   37f1c:	003efb06 	br	37b0c <__udivdi3+0x1ac>
   37f20:	00c00604 	movi	r3,24
   37f24:	180b883a 	mov	r5,r3
   37f28:	003eeb06 	br	37ad8 <__udivdi3+0x178>
   37f2c:	00c00204 	movi	r3,8
   37f30:	180b883a 	mov	r5,r3
   37f34:	003ee806 	br	37ad8 <__udivdi3+0x178>
   37f38:	00800604 	movi	r2,24
   37f3c:	1007883a 	mov	r3,r2
   37f40:	003f0a06 	br	37b6c <__udivdi3+0x20c>
   37f44:	00800604 	movi	r2,24
   37f48:	1007883a 	mov	r3,r2
   37f4c:	003e9c06 	br	379c0 <__udivdi3+0x60>
   37f50:	00800204 	movi	r2,8
   37f54:	1007883a 	mov	r3,r2
   37f58:	003e9906 	br	379c0 <__udivdi3+0x60>
   37f5c:	00800204 	movi	r2,8
   37f60:	1007883a 	mov	r3,r2
   37f64:	003f0106 	br	37b6c <__udivdi3+0x20c>
   37f68:	18bf842e 	bgeu	r3,r2,37d7c <__udivdi3+0x41c>
   37f6c:	a53fff84 	addi	r20,r20,-2
   37f70:	1cc7883a 	add	r3,r3,r19
   37f74:	003f8206 	br	37d80 <__udivdi3+0x420>
   37f78:	393f6b2e 	bgeu	r7,r4,37d28 <__udivdi3+0x3c8>
   37f7c:	bdffff84 	addi	r23,r23,-2
   37f80:	3ccf883a 	add	r7,r7,r19
   37f84:	003f6906 	br	37d2c <__udivdi3+0x3cc>
   37f88:	1825883a 	mov	r18,r3
   37f8c:	003fd406 	br	37ee0 <__udivdi3+0x580>
   37f90:	102f883a 	mov	r23,r2
   37f94:	003fbc06 	br	37e88 <__udivdi3+0x528>
   37f98:	94bfff84 	addi	r18,r18,-2
   37f9c:	340d883a 	add	r6,r6,r16
   37fa0:	003f1606 	br	37bfc <__udivdi3+0x29c>
   37fa4:	94bfff84 	addi	r18,r18,-2
   37fa8:	1c07883a 	add	r3,r3,r16
   37fac:	003ea906 	br	37a54 <__udivdi3+0xf4>

00037fb0 <__umoddi3>:
   37fb0:	defff304 	addi	sp,sp,-52
   37fb4:	dd000715 	stw	r20,28(sp)
   37fb8:	dcc00615 	stw	r19,24(sp)
   37fbc:	dc800515 	stw	r18,20(sp)
   37fc0:	dc400415 	stw	r17,16(sp)
   37fc4:	dc000315 	stw	r16,12(sp)
   37fc8:	dfc00c15 	stw	ra,48(sp)
   37fcc:	df000b15 	stw	fp,44(sp)
   37fd0:	ddc00a15 	stw	r23,40(sp)
   37fd4:	dd800915 	stw	r22,36(sp)
   37fd8:	dd400815 	stw	r21,32(sp)
   37fdc:	2025883a 	mov	r18,r4
   37fe0:	2823883a 	mov	r17,r5
   37fe4:	3021883a 	mov	r16,r6
   37fe8:	2027883a 	mov	r19,r4
   37fec:	2829883a 	mov	r20,r5
   37ff0:	38003a1e 	bne	r7,zero,380dc <__umoddi3+0x12c>
   37ff4:	2980522e 	bgeu	r5,r6,38140 <__umoddi3+0x190>
   37ff8:	00bfffd4 	movui	r2,65535
   37ffc:	1180a436 	bltu	r2,r6,38290 <__umoddi3+0x2e0>
   38000:	00803fc4 	movi	r2,255
   38004:	11816036 	bltu	r2,r6,38588 <__umoddi3+0x5d8>
   38008:	0005883a 	mov	r2,zero
   3800c:	0009883a 	mov	r4,zero
   38010:	3084d83a 	srl	r2,r6,r2
   38014:	00c00034 	movhi	r3,0
   38018:	18c08c04 	addi	r3,r3,560
   3801c:	05400804 	movi	r21,32
   38020:	1885883a 	add	r2,r3,r2
   38024:	10800003 	ldbu	r2,0(r2)
   38028:	1109883a 	add	r4,r2,r4
   3802c:	a92bc83a 	sub	r21,r21,r4
   38030:	a8010e26 	beq	r21,zero,3846c <__umoddi3+0x4bc>
   38034:	8d62983a 	sll	r17,r17,r21
   38038:	9108d83a 	srl	r4,r18,r4
   3803c:	3560983a 	sll	r16,r6,r21
   38040:	9566983a 	sll	r19,r18,r21
   38044:	8928b03a 	or	r20,r17,r4
   38048:	8022d43a 	srli	r17,r16,16
   3804c:	a009883a 	mov	r4,r20
   38050:	84bfffcc 	andi	r18,r16,65535
   38054:	880b883a 	mov	r5,r17
   38058:	00394400 	call	39440 <__umodsi3>
   3805c:	a009883a 	mov	r4,r20
   38060:	880b883a 	mov	r5,r17
   38064:	102d883a 	mov	r22,r2
   38068:	00394380 	call	39438 <__udivsi3>
   3806c:	1009883a 	mov	r4,r2
   38070:	900b883a 	mov	r5,r18
   38074:	00394480 	call	39448 <__mulsi3>
   38078:	1009883a 	mov	r4,r2
   3807c:	b006943a 	slli	r3,r22,16
   38080:	9804d43a 	srli	r2,r19,16
   38084:	1886b03a 	or	r3,r3,r2
   38088:	1900042e 	bgeu	r3,r4,3809c <__umoddi3+0xec>
   3808c:	1c07883a 	add	r3,r3,r16
   38090:	1c000236 	bltu	r3,r16,3809c <__umoddi3+0xec>
   38094:	1900012e 	bgeu	r3,r4,3809c <__umoddi3+0xec>
   38098:	1c07883a 	add	r3,r3,r16
   3809c:	1929c83a 	sub	r20,r3,r4
   380a0:	a009883a 	mov	r4,r20
   380a4:	880b883a 	mov	r5,r17
   380a8:	00394400 	call	39440 <__umodsi3>
   380ac:	102d883a 	mov	r22,r2
   380b0:	a009883a 	mov	r4,r20
   380b4:	880b883a 	mov	r5,r17
   380b8:	b02c943a 	slli	r22,r22,16
   380bc:	00394380 	call	39438 <__udivsi3>
   380c0:	1009883a 	mov	r4,r2
   380c4:	900b883a 	mov	r5,r18
   380c8:	9cffffcc 	andi	r19,r19,65535
   380cc:	00394480 	call	39448 <__mulsi3>
   380d0:	b4e6b03a 	or	r19,r22,r19
   380d4:	9880572e 	bgeu	r19,r2,38234 <__umoddi3+0x284>
   380d8:	00005206 	br	38224 <__umoddi3+0x274>
   380dc:	29c05936 	bltu	r5,r7,38244 <__umoddi3+0x294>
   380e0:	00bfffd4 	movui	r2,65535
   380e4:	11c0652e 	bgeu	r2,r7,3827c <__umoddi3+0x2cc>
   380e8:	00804034 	movhi	r2,256
   380ec:	10bfffc4 	addi	r2,r2,-1
   380f0:	11c11936 	bltu	r2,r7,38558 <__umoddi3+0x5a8>
   380f4:	00c00404 	movi	r3,16
   380f8:	1827883a 	mov	r19,r3
   380fc:	38c6d83a 	srl	r3,r7,r3
   38100:	01000034 	movhi	r4,0
   38104:	21008c04 	addi	r4,r4,560
   38108:	04000804 	movi	r16,32
   3810c:	20c7883a 	add	r3,r4,r3
   38110:	18800003 	ldbu	r2,0(r3)
   38114:	14e7883a 	add	r19,r2,r19
   38118:	84e1c83a 	sub	r16,r16,r19
   3811c:	8000671e 	bne	r16,zero,382bc <__umoddi3+0x30c>
   38120:	3c400136 	bltu	r7,r17,38128 <__umoddi3+0x178>
   38124:	91812536 	bltu	r18,r6,385bc <__umoddi3+0x60c>
   38128:	9185c83a 	sub	r2,r18,r6
   3812c:	89e3c83a 	sub	r17,r17,r7
   38130:	90a5803a 	cmpltu	r18,r18,r2
   38134:	8ca9c83a 	sub	r20,r17,r18
   38138:	a007883a 	mov	r3,r20
   3813c:	00004306 	br	3824c <__umoddi3+0x29c>
   38140:	3000041e 	bne	r6,zero,38154 <__umoddi3+0x1a4>
   38144:	01000044 	movi	r4,1
   38148:	000b883a 	mov	r5,zero
   3814c:	00394380 	call	39438 <__udivsi3>
   38150:	1021883a 	mov	r16,r2
   38154:	00bfffd4 	movui	r2,65535
   38158:	1400532e 	bgeu	r2,r16,382a8 <__umoddi3+0x2f8>
   3815c:	00804034 	movhi	r2,256
   38160:	10bfffc4 	addi	r2,r2,-1
   38164:	14010536 	bltu	r2,r16,3857c <__umoddi3+0x5cc>
   38168:	00800404 	movi	r2,16
   3816c:	1007883a 	mov	r3,r2
   38170:	8084d83a 	srl	r2,r16,r2
   38174:	01000034 	movhi	r4,0
   38178:	21008c04 	addi	r4,r4,560
   3817c:	05400804 	movi	r21,32
   38180:	2085883a 	add	r2,r4,r2
   38184:	10800003 	ldbu	r2,0(r2)
   38188:	10c7883a 	add	r3,r2,r3
   3818c:	a8ebc83a 	sub	r21,r21,r3
   38190:	a800b81e 	bne	r21,zero,38474 <__umoddi3+0x4c4>
   38194:	8028d43a 	srli	r20,r16,16
   38198:	8c23c83a 	sub	r17,r17,r16
   3819c:	85bfffcc 	andi	r22,r16,65535
   381a0:	8809883a 	mov	r4,r17
   381a4:	a00b883a 	mov	r5,r20
   381a8:	00394400 	call	39440 <__umodsi3>
   381ac:	8809883a 	mov	r4,r17
   381b0:	a00b883a 	mov	r5,r20
   381b4:	1025883a 	mov	r18,r2
   381b8:	00394380 	call	39438 <__udivsi3>
   381bc:	1009883a 	mov	r4,r2
   381c0:	b00b883a 	mov	r5,r22
   381c4:	00394480 	call	39448 <__mulsi3>
   381c8:	1009883a 	mov	r4,r2
   381cc:	9006943a 	slli	r3,r18,16
   381d0:	9804d43a 	srli	r2,r19,16
   381d4:	1886b03a 	or	r3,r3,r2
   381d8:	1900032e 	bgeu	r3,r4,381e8 <__umoddi3+0x238>
   381dc:	1c07883a 	add	r3,r3,r16
   381e0:	1c000136 	bltu	r3,r16,381e8 <__umoddi3+0x238>
   381e4:	1900f336 	bltu	r3,r4,385b4 <__umoddi3+0x604>
   381e8:	1923c83a 	sub	r17,r3,r4
   381ec:	8809883a 	mov	r4,r17
   381f0:	a00b883a 	mov	r5,r20
   381f4:	00394400 	call	39440 <__umodsi3>
   381f8:	102f883a 	mov	r23,r2
   381fc:	8809883a 	mov	r4,r17
   38200:	a00b883a 	mov	r5,r20
   38204:	b82e943a 	slli	r23,r23,16
   38208:	00394380 	call	39438 <__udivsi3>
   3820c:	1009883a 	mov	r4,r2
   38210:	b00b883a 	mov	r5,r22
   38214:	9cffffcc 	andi	r19,r19,65535
   38218:	00394480 	call	39448 <__mulsi3>
   3821c:	bce6b03a 	or	r19,r23,r19
   38220:	9880042e 	bgeu	r19,r2,38234 <__umoddi3+0x284>
   38224:	9c27883a 	add	r19,r19,r16
   38228:	9c000236 	bltu	r19,r16,38234 <__umoddi3+0x284>
   3822c:	9880012e 	bgeu	r19,r2,38234 <__umoddi3+0x284>
   38230:	9c27883a 	add	r19,r19,r16
   38234:	9885c83a 	sub	r2,r19,r2
   38238:	1544d83a 	srl	r2,r2,r21
   3823c:	0007883a 	mov	r3,zero
   38240:	00000206 	br	3824c <__umoddi3+0x29c>
   38244:	2005883a 	mov	r2,r4
   38248:	2807883a 	mov	r3,r5
   3824c:	dfc00c17 	ldw	ra,48(sp)
   38250:	df000b17 	ldw	fp,44(sp)
   38254:	ddc00a17 	ldw	r23,40(sp)
   38258:	dd800917 	ldw	r22,36(sp)
   3825c:	dd400817 	ldw	r21,32(sp)
   38260:	dd000717 	ldw	r20,28(sp)
   38264:	dcc00617 	ldw	r19,24(sp)
   38268:	dc800517 	ldw	r18,20(sp)
   3826c:	dc400417 	ldw	r17,16(sp)
   38270:	dc000317 	ldw	r16,12(sp)
   38274:	dec00d04 	addi	sp,sp,52
   38278:	f800283a 	ret
   3827c:	00803fc4 	movi	r2,255
   38280:	11c0b236 	bltu	r2,r7,3854c <__umoddi3+0x59c>
   38284:	0007883a 	mov	r3,zero
   38288:	0027883a 	mov	r19,zero
   3828c:	003f9b06 	br	380fc <__umoddi3+0x14c>
   38290:	00804034 	movhi	r2,256
   38294:	10bfffc4 	addi	r2,r2,-1
   38298:	1180b236 	bltu	r2,r6,38564 <__umoddi3+0x5b4>
   3829c:	00800404 	movi	r2,16
   382a0:	1009883a 	mov	r4,r2
   382a4:	003f5a06 	br	38010 <__umoddi3+0x60>
   382a8:	00803fc4 	movi	r2,255
   382ac:	1400b036 	bltu	r2,r16,38570 <__umoddi3+0x5c0>
   382b0:	0005883a 	mov	r2,zero
   382b4:	0007883a 	mov	r3,zero
   382b8:	003fad06 	br	38170 <__umoddi3+0x1c0>
   382bc:	34c4d83a 	srl	r2,r6,r19
   382c0:	3c0e983a 	sll	r7,r7,r16
   382c4:	8cf8d83a 	srl	fp,r17,r19
   382c8:	8c22983a 	sll	r17,r17,r16
   382cc:	38a8b03a 	or	r20,r7,r2
   382d0:	a02ad43a 	srli	r21,r20,16
   382d4:	94c4d83a 	srl	r2,r18,r19
   382d8:	e009883a 	mov	r4,fp
   382dc:	a80b883a 	mov	r5,r21
   382e0:	342c983a 	sll	r22,r6,r16
   382e4:	88a2b03a 	or	r17,r17,r2
   382e8:	00394400 	call	39440 <__umodsi3>
   382ec:	e009883a 	mov	r4,fp
   382f0:	a80b883a 	mov	r5,r21
   382f4:	a5ffffcc 	andi	r23,r20,65535
   382f8:	d8800215 	stw	r2,8(sp)
   382fc:	00394380 	call	39438 <__udivsi3>
   38300:	1009883a 	mov	r4,r2
   38304:	b80b883a 	mov	r5,r23
   38308:	1039883a 	mov	fp,r2
   3830c:	00394480 	call	39448 <__mulsi3>
   38310:	d8c00217 	ldw	r3,8(sp)
   38314:	1009883a 	mov	r4,r2
   38318:	8804d43a 	srli	r2,r17,16
   3831c:	1806943a 	slli	r3,r3,16
   38320:	9424983a 	sll	r18,r18,r16
   38324:	1886b03a 	or	r3,r3,r2
   38328:	1900042e 	bgeu	r3,r4,3833c <__umoddi3+0x38c>
   3832c:	1d07883a 	add	r3,r3,r20
   38330:	e0bfffc4 	addi	r2,fp,-1
   38334:	1d009b2e 	bgeu	r3,r20,385a4 <__umoddi3+0x5f4>
   38338:	1039883a 	mov	fp,r2
   3833c:	1907c83a 	sub	r3,r3,r4
   38340:	1809883a 	mov	r4,r3
   38344:	a80b883a 	mov	r5,r21
   38348:	d8c00215 	stw	r3,8(sp)
   3834c:	00394400 	call	39440 <__umodsi3>
   38350:	d8c00217 	ldw	r3,8(sp)
   38354:	a80b883a 	mov	r5,r21
   38358:	d8800015 	stw	r2,0(sp)
   3835c:	1809883a 	mov	r4,r3
   38360:	00394380 	call	39438 <__udivsi3>
   38364:	1009883a 	mov	r4,r2
   38368:	b80b883a 	mov	r5,r23
   3836c:	102b883a 	mov	r21,r2
   38370:	00394480 	call	39448 <__mulsi3>
   38374:	d9c00017 	ldw	r7,0(sp)
   38378:	8c7fffcc 	andi	r17,r17,65535
   3837c:	380e943a 	slli	r7,r7,16
   38380:	3c4eb03a 	or	r7,r7,r17
   38384:	3880042e 	bgeu	r7,r2,38398 <__umoddi3+0x3e8>
   38388:	3d0f883a 	add	r7,r7,r20
   3838c:	a8ffffc4 	addi	r3,r21,-1
   38390:	3d00802e 	bgeu	r7,r20,38594 <__umoddi3+0x5e4>
   38394:	182b883a 	mov	r21,r3
   38398:	e038943a 	slli	fp,fp,16
   3839c:	b010d43a 	srli	r8,r22,16
   383a0:	b1bfffcc 	andi	r6,r22,65535
   383a4:	af2ab03a 	or	r21,r21,fp
   383a8:	a82ed43a 	srli	r23,r21,16
   383ac:	ad7fffcc 	andi	r21,r21,65535
   383b0:	300b883a 	mov	r5,r6
   383b4:	a809883a 	mov	r4,r21
   383b8:	38a3c83a 	sub	r17,r7,r2
   383bc:	d9800115 	stw	r6,4(sp)
   383c0:	da000015 	stw	r8,0(sp)
   383c4:	00394480 	call	39448 <__mulsi3>
   383c8:	da000017 	ldw	r8,0(sp)
   383cc:	a809883a 	mov	r4,r21
   383d0:	1039883a 	mov	fp,r2
   383d4:	400b883a 	mov	r5,r8
   383d8:	da000215 	stw	r8,8(sp)
   383dc:	00394480 	call	39448 <__mulsi3>
   383e0:	d9800117 	ldw	r6,4(sp)
   383e4:	b809883a 	mov	r4,r23
   383e8:	d8800015 	stw	r2,0(sp)
   383ec:	300b883a 	mov	r5,r6
   383f0:	00394480 	call	39448 <__mulsi3>
   383f4:	d8c00217 	ldw	r3,8(sp)
   383f8:	b809883a 	mov	r4,r23
   383fc:	102b883a 	mov	r21,r2
   38400:	180b883a 	mov	r5,r3
   38404:	00394480 	call	39448 <__mulsi3>
   38408:	d9c00017 	ldw	r7,0(sp)
   3840c:	1007883a 	mov	r3,r2
   38410:	e004d43a 	srli	r2,fp,16
   38414:	a9c9883a 	add	r4,r21,r7
   38418:	2089883a 	add	r4,r4,r2
   3841c:	2540022e 	bgeu	r4,r21,38428 <__umoddi3+0x478>
   38420:	00800074 	movhi	r2,1
   38424:	1887883a 	add	r3,r3,r2
   38428:	2004d43a 	srli	r2,r4,16
   3842c:	2008943a 	slli	r4,r4,16
   38430:	e73fffcc 	andi	fp,fp,65535
   38434:	1887883a 	add	r3,r3,r2
   38438:	2709883a 	add	r4,r4,fp
   3843c:	88c03d36 	bltu	r17,r3,38534 <__umoddi3+0x584>
   38440:	88c06126 	beq	r17,r3,385c8 <__umoddi3+0x618>
   38444:	88c7c83a 	sub	r3,r17,r3
   38448:	202d883a 	mov	r22,r4
   3844c:	95adc83a 	sub	r22,r18,r22
   38450:	95a5803a 	cmpltu	r18,r18,r22
   38454:	1c87c83a 	sub	r3,r3,r18
   38458:	1cc4983a 	sll	r2,r3,r19
   3845c:	b42cd83a 	srl	r22,r22,r16
   38460:	1c06d83a 	srl	r3,r3,r16
   38464:	1584b03a 	or	r2,r2,r22
   38468:	003f7806 	br	3824c <__umoddi3+0x29c>
   3846c:	002b883a 	mov	r21,zero
   38470:	003ef506 	br	38048 <__umoddi3+0x98>
   38474:	8560983a 	sll	r16,r16,r21
   38478:	88e6d83a 	srl	r19,r17,r3
   3847c:	90c6d83a 	srl	r3,r18,r3
   38480:	8028d43a 	srli	r20,r16,16
   38484:	8d62983a 	sll	r17,r17,r21
   38488:	9809883a 	mov	r4,r19
   3848c:	a00b883a 	mov	r5,r20
   38490:	88eeb03a 	or	r23,r17,r3
   38494:	00394400 	call	39440 <__umodsi3>
   38498:	9809883a 	mov	r4,r19
   3849c:	a00b883a 	mov	r5,r20
   384a0:	1023883a 	mov	r17,r2
   384a4:	85bfffcc 	andi	r22,r16,65535
   384a8:	00394380 	call	39438 <__udivsi3>
   384ac:	1009883a 	mov	r4,r2
   384b0:	b00b883a 	mov	r5,r22
   384b4:	00394480 	call	39448 <__mulsi3>
   384b8:	1007883a 	mov	r3,r2
   384bc:	8808943a 	slli	r4,r17,16
   384c0:	b804d43a 	srli	r2,r23,16
   384c4:	9566983a 	sll	r19,r18,r21
   384c8:	2088b03a 	or	r4,r4,r2
   384cc:	20c0042e 	bgeu	r4,r3,384e0 <__umoddi3+0x530>
   384d0:	2409883a 	add	r4,r4,r16
   384d4:	24000236 	bltu	r4,r16,384e0 <__umoddi3+0x530>
   384d8:	20c0012e 	bgeu	r4,r3,384e0 <__umoddi3+0x530>
   384dc:	2409883a 	add	r4,r4,r16
   384e0:	20e5c83a 	sub	r18,r4,r3
   384e4:	9009883a 	mov	r4,r18
   384e8:	a00b883a 	mov	r5,r20
   384ec:	00394400 	call	39440 <__umodsi3>
   384f0:	1023883a 	mov	r17,r2
   384f4:	9009883a 	mov	r4,r18
   384f8:	a00b883a 	mov	r5,r20
   384fc:	8822943a 	slli	r17,r17,16
   38500:	00394380 	call	39438 <__udivsi3>
   38504:	1009883a 	mov	r4,r2
   38508:	b00b883a 	mov	r5,r22
   3850c:	bdffffcc 	andi	r23,r23,65535
   38510:	00394480 	call	39448 <__mulsi3>
   38514:	8de2b03a 	or	r17,r17,r23
   38518:	8880042e 	bgeu	r17,r2,3852c <__umoddi3+0x57c>
   3851c:	8c23883a 	add	r17,r17,r16
   38520:	8c000236 	bltu	r17,r16,3852c <__umoddi3+0x57c>
   38524:	8880012e 	bgeu	r17,r2,3852c <__umoddi3+0x57c>
   38528:	8c23883a 	add	r17,r17,r16
   3852c:	88a3c83a 	sub	r17,r17,r2
   38530:	003f1b06 	br	381a0 <__umoddi3+0x1f0>
   38534:	25adc83a 	sub	r22,r4,r22
   38538:	1d07c83a 	sub	r3,r3,r20
   3853c:	2589803a 	cmpltu	r4,r4,r22
   38540:	1907c83a 	sub	r3,r3,r4
   38544:	88c7c83a 	sub	r3,r17,r3
   38548:	003fc006 	br	3844c <__umoddi3+0x49c>
   3854c:	00c00204 	movi	r3,8
   38550:	1827883a 	mov	r19,r3
   38554:	003ee906 	br	380fc <__umoddi3+0x14c>
   38558:	00c00604 	movi	r3,24
   3855c:	1827883a 	mov	r19,r3
   38560:	003ee606 	br	380fc <__umoddi3+0x14c>
   38564:	00800604 	movi	r2,24
   38568:	1009883a 	mov	r4,r2
   3856c:	003ea806 	br	38010 <__umoddi3+0x60>
   38570:	00800204 	movi	r2,8
   38574:	1007883a 	mov	r3,r2
   38578:	003efd06 	br	38170 <__umoddi3+0x1c0>
   3857c:	00800604 	movi	r2,24
   38580:	1007883a 	mov	r3,r2
   38584:	003efa06 	br	38170 <__umoddi3+0x1c0>
   38588:	00800204 	movi	r2,8
   3858c:	1009883a 	mov	r4,r2
   38590:	003e9f06 	br	38010 <__umoddi3+0x60>
   38594:	38bf7f2e 	bgeu	r7,r2,38394 <__umoddi3+0x3e4>
   38598:	ad7fff84 	addi	r21,r21,-2
   3859c:	3d0f883a 	add	r7,r7,r20
   385a0:	003f7d06 	br	38398 <__umoddi3+0x3e8>
   385a4:	193f642e 	bgeu	r3,r4,38338 <__umoddi3+0x388>
   385a8:	e73fff84 	addi	fp,fp,-2
   385ac:	1d07883a 	add	r3,r3,r20
   385b0:	003f6206 	br	3833c <__umoddi3+0x38c>
   385b4:	1c07883a 	add	r3,r3,r16
   385b8:	003f0b06 	br	381e8 <__umoddi3+0x238>
   385bc:	9005883a 	mov	r2,r18
   385c0:	a007883a 	mov	r3,r20
   385c4:	003f2106 	br	3824c <__umoddi3+0x29c>
   385c8:	913fda36 	bltu	r18,r4,38534 <__umoddi3+0x584>
   385cc:	202d883a 	mov	r22,r4
   385d0:	0007883a 	mov	r3,zero
   385d4:	003f9d06 	br	3844c <__umoddi3+0x49c>

000385d8 <_fpadd_parts>:
   385d8:	2005883a 	mov	r2,r4
   385dc:	21000017 	ldw	r4,0(r4)
   385e0:	01c00044 	movi	r7,1
   385e4:	3900622e 	bgeu	r7,r4,38770 <_fpadd_parts+0x198>
   385e8:	28c00017 	ldw	r3,0(r5)
   385ec:	38c05f2e 	bgeu	r7,r3,3876c <_fpadd_parts+0x194>
   385f0:	01c00104 	movi	r7,4
   385f4:	21c0c626 	beq	r4,r7,38910 <_fpadd_parts+0x338>
   385f8:	19c05c26 	beq	r3,r7,3876c <_fpadd_parts+0x194>
   385fc:	01c00084 	movi	r7,2
   38600:	19c06b26 	beq	r3,r7,387b0 <_fpadd_parts+0x1d8>
   38604:	21c05926 	beq	r4,r7,3876c <_fpadd_parts+0x194>
   38608:	11c00217 	ldw	r7,8(r2)
   3860c:	2ac00217 	ldw	r11,8(r5)
   38610:	13000317 	ldw	r12,12(r2)
   38614:	13400417 	ldw	r13,16(r2)
   38618:	3ac9c83a 	sub	r4,r7,r11
   3861c:	2a000317 	ldw	r8,12(r5)
   38620:	2a400417 	ldw	r9,16(r5)
   38624:	2015883a 	mov	r10,r4
   38628:	20007516 	blt	r4,zero,38800 <_fpadd_parts+0x228>
   3862c:	00c00fc4 	movi	r3,63
   38630:	1a805016 	blt	r3,r10,38774 <_fpadd_parts+0x19c>
   38634:	0100870e 	bge	zero,r4,38854 <_fpadd_parts+0x27c>
   38638:	50fff804 	addi	r3,r10,-32
   3863c:	18009916 	blt	r3,zero,388a4 <_fpadd_parts+0x2cc>
   38640:	48d6d83a 	srl	r11,r9,r3
   38644:	001d883a 	mov	r14,zero
   38648:	18009e16 	blt	r3,zero,388c4 <_fpadd_parts+0x2ec>
   3864c:	01000044 	movi	r4,1
   38650:	20c6983a 	sll	r3,r4,r3
   38654:	0015883a 	mov	r10,zero
   38658:	513fffc4 	addi	r4,r10,-1
   3865c:	2295403a 	cmpgeu	r10,r4,r10
   38660:	1a87c83a 	sub	r3,r3,r10
   38664:	1a52703a 	and	r9,r3,r9
   38668:	2210703a 	and	r8,r4,r8
   3866c:	4250b03a 	or	r8,r8,r9
   38670:	4010c03a 	cmpne	r8,r8,zero
   38674:	42d0b03a 	or	r8,r8,r11
   38678:	7013883a 	mov	r9,r14
   3867c:	11000117 	ldw	r4,4(r2)
   38680:	28800117 	ldw	r2,4(r5)
   38684:	20804126 	beq	r4,r2,3878c <_fpadd_parts+0x1b4>
   38688:	20006326 	beq	r4,zero,38818 <_fpadd_parts+0x240>
   3868c:	4305c83a 	sub	r2,r8,r12
   38690:	4091803a 	cmpltu	r8,r8,r2
   38694:	4b47c83a 	sub	r3,r9,r13
   38698:	1a07c83a 	sub	r3,r3,r8
   3869c:	18006316 	blt	r3,zero,3882c <_fpadd_parts+0x254>
   386a0:	30000115 	stw	zero,4(r6)
   386a4:	31c00215 	stw	r7,8(r6)
   386a8:	30800315 	stw	r2,12(r6)
   386ac:	30c00415 	stw	r3,16(r6)
   386b0:	11ffffc4 	addi	r7,r2,-1
   386b4:	388b403a 	cmpgeu	r5,r7,r2
   386b8:	194bc83a 	sub	r5,r3,r5
   386bc:	01040034 	movhi	r4,4096
   386c0:	213fffc4 	addi	r4,r4,-1
   386c4:	21401736 	bltu	r4,r5,38724 <_fpadd_parts+0x14c>
   386c8:	29008226 	beq	r5,r4,388d4 <_fpadd_parts+0x2fc>
   386cc:	31400217 	ldw	r5,8(r6)
   386d0:	02840034 	movhi	r10,4096
   386d4:	52bfffc4 	addi	r10,r10,-1
   386d8:	033fff84 	movi	r12,-2
   386dc:	297fffc4 	addi	r5,r5,-1
   386e0:	00000106 	br	386e8 <_fpadd_parts+0x110>
   386e4:	3a804a26 	beq	r7,r10,38810 <_fpadd_parts+0x238>
   386e8:	1089883a 	add	r4,r2,r2
   386ec:	2091803a 	cmpltu	r8,r4,r2
   386f0:	18c7883a 	add	r3,r3,r3
   386f4:	227fffc4 	addi	r9,r4,-1
   386f8:	40d1883a 	add	r8,r8,r3
   386fc:	490f403a 	cmpgeu	r7,r9,r4
   38700:	41cfc83a 	sub	r7,r8,r7
   38704:	2817883a 	mov	r11,r5
   38708:	2005883a 	mov	r2,r4
   3870c:	4007883a 	mov	r3,r8
   38710:	297fffc4 	addi	r5,r5,-1
   38714:	51fff32e 	bgeu	r10,r7,386e4 <_fpadd_parts+0x10c>
   38718:	31000315 	stw	r4,12(r6)
   3871c:	32000415 	stw	r8,16(r6)
   38720:	32c00215 	stw	r11,8(r6)
   38724:	010000c4 	movi	r4,3
   38728:	31000015 	stw	r4,0(r6)
   3872c:	01080034 	movhi	r4,8192
   38730:	213fffc4 	addi	r4,r4,-1
   38734:	20c00b2e 	bgeu	r4,r3,38764 <_fpadd_parts+0x18c>
   38738:	180e97fa 	slli	r7,r3,31
   3873c:	1008d07a 	srli	r4,r2,1
   38740:	31400217 	ldw	r5,8(r6)
   38744:	1806d07a 	srli	r3,r3,1
   38748:	1080004c 	andi	r2,r2,1
   3874c:	3908b03a 	or	r4,r7,r4
   38750:	1108b03a 	or	r4,r2,r4
   38754:	29400044 	addi	r5,r5,1
   38758:	31000315 	stw	r4,12(r6)
   3875c:	30c00415 	stw	r3,16(r6)
   38760:	31400215 	stw	r5,8(r6)
   38764:	3005883a 	mov	r2,r6
   38768:	f800283a 	ret
   3876c:	2805883a 	mov	r2,r5
   38770:	f800283a 	ret
   38774:	59c01e0e 	bge	r11,r7,387f0 <_fpadd_parts+0x218>
   38778:	11000117 	ldw	r4,4(r2)
   3877c:	28800117 	ldw	r2,4(r5)
   38780:	0011883a 	mov	r8,zero
   38784:	0013883a 	mov	r9,zero
   38788:	20bfbf1e 	bne	r4,r2,38688 <_fpadd_parts+0xb0>
   3878c:	4305883a 	add	r2,r8,r12
   38790:	1207803a 	cmpltu	r3,r2,r8
   38794:	4b53883a 	add	r9,r9,r13
   38798:	1a47883a 	add	r3,r3,r9
   3879c:	31000115 	stw	r4,4(r6)
   387a0:	31c00215 	stw	r7,8(r6)
   387a4:	30800315 	stw	r2,12(r6)
   387a8:	30c00415 	stw	r3,16(r6)
   387ac:	003fdd06 	br	38724 <_fpadd_parts+0x14c>
   387b0:	20ffef1e 	bne	r4,r3,38770 <_fpadd_parts+0x198>
   387b4:	31000015 	stw	r4,0(r6)
   387b8:	10c00117 	ldw	r3,4(r2)
   387bc:	30c00115 	stw	r3,4(r6)
   387c0:	10c00217 	ldw	r3,8(r2)
   387c4:	11000117 	ldw	r4,4(r2)
   387c8:	29400117 	ldw	r5,4(r5)
   387cc:	30c00215 	stw	r3,8(r6)
   387d0:	10c00317 	ldw	r3,12(r2)
   387d4:	2908703a 	and	r4,r5,r4
   387d8:	30c00315 	stw	r3,12(r6)
   387dc:	10c00417 	ldw	r3,16(r2)
   387e0:	31000115 	stw	r4,4(r6)
   387e4:	3005883a 	mov	r2,r6
   387e8:	30c00415 	stw	r3,16(r6)
   387ec:	f800283a 	ret
   387f0:	580f883a 	mov	r7,r11
   387f4:	0019883a 	mov	r12,zero
   387f8:	001b883a 	mov	r13,zero
   387fc:	003f9f06 	br	3867c <_fpadd_parts+0xa4>
   38800:	0115c83a 	sub	r10,zero,r4
   38804:	00c00fc4 	movi	r3,63
   38808:	1abfda16 	blt	r3,r10,38774 <_fpadd_parts+0x19c>
   3880c:	003f8906 	br	38634 <_fpadd_parts+0x5c>
   38810:	627fb52e 	bgeu	r12,r9,386e8 <_fpadd_parts+0x110>
   38814:	003fc006 	br	38718 <_fpadd_parts+0x140>
   38818:	6205c83a 	sub	r2,r12,r8
   3881c:	6099803a 	cmpltu	r12,r12,r2
   38820:	6a47c83a 	sub	r3,r13,r9
   38824:	1b07c83a 	sub	r3,r3,r12
   38828:	183f9d0e 	bge	r3,zero,386a0 <_fpadd_parts+0xc8>
   3882c:	0085c83a 	sub	r2,zero,r2
   38830:	1008c03a 	cmpne	r4,r2,zero
   38834:	00c7c83a 	sub	r3,zero,r3
   38838:	1907c83a 	sub	r3,r3,r4
   3883c:	01000044 	movi	r4,1
   38840:	31000115 	stw	r4,4(r6)
   38844:	31c00215 	stw	r7,8(r6)
   38848:	30800315 	stw	r2,12(r6)
   3884c:	30c00415 	stw	r3,16(r6)
   38850:	003f9706 	br	386b0 <_fpadd_parts+0xd8>
   38854:	203f8926 	beq	r4,zero,3867c <_fpadd_parts+0xa4>
   38858:	50fff804 	addi	r3,r10,-32
   3885c:	3a8f883a 	add	r7,r7,r10
   38860:	18002316 	blt	r3,zero,388f0 <_fpadd_parts+0x318>
   38864:	68d6d83a 	srl	r11,r13,r3
   38868:	001d883a 	mov	r14,zero
   3886c:	18001c16 	blt	r3,zero,388e0 <_fpadd_parts+0x308>
   38870:	01000044 	movi	r4,1
   38874:	20c6983a 	sll	r3,r4,r3
   38878:	0015883a 	mov	r10,zero
   3887c:	513fffc4 	addi	r4,r10,-1
   38880:	2295403a 	cmpgeu	r10,r4,r10
   38884:	1a87c83a 	sub	r3,r3,r10
   38888:	1b5a703a 	and	r13,r3,r13
   3888c:	2318703a 	and	r12,r4,r12
   38890:	6358b03a 	or	r12,r12,r13
   38894:	6018c03a 	cmpne	r12,r12,zero
   38898:	62d8b03a 	or	r12,r12,r11
   3889c:	701b883a 	mov	r13,r14
   388a0:	003f7606 	br	3867c <_fpadd_parts+0xa4>
   388a4:	4808907a 	slli	r4,r9,1
   388a8:	02c007c4 	movi	r11,31
   388ac:	5a97c83a 	sub	r11,r11,r10
   388b0:	22c8983a 	sll	r4,r4,r11
   388b4:	4296d83a 	srl	r11,r8,r10
   388b8:	4a9cd83a 	srl	r14,r9,r10
   388bc:	22d6b03a 	or	r11,r4,r11
   388c0:	003f6106 	br	38648 <_fpadd_parts+0x70>
   388c4:	00c00044 	movi	r3,1
   388c8:	1a94983a 	sll	r10,r3,r10
   388cc:	0007883a 	mov	r3,zero
   388d0:	003f6106 	br	38658 <_fpadd_parts+0x80>
   388d4:	013fff84 	movi	r4,-2
   388d8:	21ff7c2e 	bgeu	r4,r7,386cc <_fpadd_parts+0xf4>
   388dc:	003f9106 	br	38724 <_fpadd_parts+0x14c>
   388e0:	00c00044 	movi	r3,1
   388e4:	1a94983a 	sll	r10,r3,r10
   388e8:	0007883a 	mov	r3,zero
   388ec:	003fe306 	br	3887c <_fpadd_parts+0x2a4>
   388f0:	6816907a 	slli	r11,r13,1
   388f4:	010007c4 	movi	r4,31
   388f8:	2289c83a 	sub	r4,r4,r10
   388fc:	5908983a 	sll	r4,r11,r4
   38900:	6296d83a 	srl	r11,r12,r10
   38904:	6a9cd83a 	srl	r14,r13,r10
   38908:	22d6b03a 	or	r11,r4,r11
   3890c:	003fd706 	br	3886c <_fpadd_parts+0x294>
   38910:	193f971e 	bne	r3,r4,38770 <_fpadd_parts+0x198>
   38914:	11000117 	ldw	r4,4(r2)
   38918:	28c00117 	ldw	r3,4(r5)
   3891c:	20ff9426 	beq	r4,r3,38770 <_fpadd_parts+0x198>
   38920:	00800034 	movhi	r2,0
   38924:	10808704 	addi	r2,r2,540
   38928:	f800283a 	ret

0003892c <__adddf3>:
   3892c:	deffec04 	addi	sp,sp,-80
   38930:	d9001115 	stw	r4,68(sp)
   38934:	d9401215 	stw	r5,72(sp)
   38938:	d9001104 	addi	r4,sp,68
   3893c:	d9400a04 	addi	r5,sp,40
   38940:	dfc01315 	stw	ra,76(sp)
   38944:	d9c01015 	stw	r7,64(sp)
   38948:	d9800f15 	stw	r6,60(sp)
   3894c:	00398500 	call	39850 <__unpack_d>
   38950:	d9000f04 	addi	r4,sp,60
   38954:	d9400504 	addi	r5,sp,20
   38958:	00398500 	call	39850 <__unpack_d>
   3895c:	d9000a04 	addi	r4,sp,40
   38960:	d9400504 	addi	r5,sp,20
   38964:	d80d883a 	mov	r6,sp
   38968:	00385d80 	call	385d8 <_fpadd_parts>
   3896c:	1009883a 	mov	r4,r2
   38970:	003962c0 	call	3962c <__pack_d>
   38974:	dfc01317 	ldw	ra,76(sp)
   38978:	dec01404 	addi	sp,sp,80
   3897c:	f800283a 	ret

00038980 <__subdf3>:
   38980:	deffec04 	addi	sp,sp,-80
   38984:	d9001115 	stw	r4,68(sp)
   38988:	d9401215 	stw	r5,72(sp)
   3898c:	d9001104 	addi	r4,sp,68
   38990:	d9400a04 	addi	r5,sp,40
   38994:	dfc01315 	stw	ra,76(sp)
   38998:	d9c01015 	stw	r7,64(sp)
   3899c:	d9800f15 	stw	r6,60(sp)
   389a0:	00398500 	call	39850 <__unpack_d>
   389a4:	d9000f04 	addi	r4,sp,60
   389a8:	d9400504 	addi	r5,sp,20
   389ac:	00398500 	call	39850 <__unpack_d>
   389b0:	d8800617 	ldw	r2,24(sp)
   389b4:	d9000a04 	addi	r4,sp,40
   389b8:	d9400504 	addi	r5,sp,20
   389bc:	d80d883a 	mov	r6,sp
   389c0:	1080005c 	xori	r2,r2,1
   389c4:	d8800615 	stw	r2,24(sp)
   389c8:	00385d80 	call	385d8 <_fpadd_parts>
   389cc:	1009883a 	mov	r4,r2
   389d0:	003962c0 	call	3962c <__pack_d>
   389d4:	dfc01317 	ldw	ra,76(sp)
   389d8:	dec01404 	addi	sp,sp,80
   389dc:	f800283a 	ret

000389e0 <__muldf3>:
   389e0:	deffe404 	addi	sp,sp,-112
   389e4:	d9001115 	stw	r4,68(sp)
   389e8:	d9401215 	stw	r5,72(sp)
   389ec:	d9001104 	addi	r4,sp,68
   389f0:	d9400a04 	addi	r5,sp,40
   389f4:	dfc01b15 	stw	ra,108(sp)
   389f8:	d9800f15 	stw	r6,60(sp)
   389fc:	d9c01015 	stw	r7,64(sp)
   38a00:	ddc01a15 	stw	r23,104(sp)
   38a04:	dd801915 	stw	r22,100(sp)
   38a08:	dd401815 	stw	r21,96(sp)
   38a0c:	dd001715 	stw	r20,92(sp)
   38a10:	dcc01615 	stw	r19,88(sp)
   38a14:	dc801515 	stw	r18,84(sp)
   38a18:	dc401415 	stw	r17,80(sp)
   38a1c:	dc001315 	stw	r16,76(sp)
   38a20:	00398500 	call	39850 <__unpack_d>
   38a24:	d9000f04 	addi	r4,sp,60
   38a28:	d9400504 	addi	r5,sp,20
   38a2c:	00398500 	call	39850 <__unpack_d>
   38a30:	d8c00a17 	ldw	r3,40(sp)
   38a34:	00800044 	movi	r2,1
   38a38:	10c01136 	bltu	r2,r3,38a80 <__muldf3+0xa0>
   38a3c:	d8c00b17 	ldw	r3,44(sp)
   38a40:	d8800617 	ldw	r2,24(sp)
   38a44:	d9000a04 	addi	r4,sp,40
   38a48:	1884c03a 	cmpne	r2,r3,r2
   38a4c:	d8800b15 	stw	r2,44(sp)
   38a50:	003962c0 	call	3962c <__pack_d>
   38a54:	dfc01b17 	ldw	ra,108(sp)
   38a58:	ddc01a17 	ldw	r23,104(sp)
   38a5c:	dd801917 	ldw	r22,100(sp)
   38a60:	dd401817 	ldw	r21,96(sp)
   38a64:	dd001717 	ldw	r20,92(sp)
   38a68:	dcc01617 	ldw	r19,88(sp)
   38a6c:	dc801517 	ldw	r18,84(sp)
   38a70:	dc401417 	ldw	r17,80(sp)
   38a74:	dc001317 	ldw	r16,76(sp)
   38a78:	dec01c04 	addi	sp,sp,112
   38a7c:	f800283a 	ret
   38a80:	d9000517 	ldw	r4,20(sp)
   38a84:	11000636 	bltu	r2,r4,38aa0 <__muldf3+0xc0>
   38a88:	d8800617 	ldw	r2,24(sp)
   38a8c:	d8c00b17 	ldw	r3,44(sp)
   38a90:	d9000504 	addi	r4,sp,20
   38a94:	1884c03a 	cmpne	r2,r3,r2
   38a98:	d8800615 	stw	r2,24(sp)
   38a9c:	003fec06 	br	38a50 <__muldf3+0x70>
   38aa0:	00800104 	movi	r2,4
   38aa4:	1880051e 	bne	r3,r2,38abc <__muldf3+0xdc>
   38aa8:	00800084 	movi	r2,2
   38aac:	20bfe31e 	bne	r4,r2,38a3c <__muldf3+0x5c>
   38ab0:	01000034 	movhi	r4,0
   38ab4:	21008704 	addi	r4,r4,540
   38ab8:	003fe506 	br	38a50 <__muldf3+0x70>
   38abc:	2080031e 	bne	r4,r2,38acc <__muldf3+0xec>
   38ac0:	00800084 	movi	r2,2
   38ac4:	18bffa26 	beq	r3,r2,38ab0 <__muldf3+0xd0>
   38ac8:	003fef06 	br	38a88 <__muldf3+0xa8>
   38acc:	00800084 	movi	r2,2
   38ad0:	18bfda26 	beq	r3,r2,38a3c <__muldf3+0x5c>
   38ad4:	20bfec26 	beq	r4,r2,38a88 <__muldf3+0xa8>
   38ad8:	dc000d17 	ldw	r16,52(sp)
   38adc:	dd000817 	ldw	r20,32(sp)
   38ae0:	dc800917 	ldw	r18,36(sp)
   38ae4:	8009883a 	mov	r4,r16
   38ae8:	000b883a 	mov	r5,zero
   38aec:	a00d883a 	mov	r6,r20
   38af0:	000f883a 	mov	r7,zero
   38af4:	00394700 	call	39470 <__muldi3>
   38af8:	dc400e17 	ldw	r17,56(sp)
   38afc:	9009883a 	mov	r4,r18
   38b00:	800d883a 	mov	r6,r16
   38b04:	000b883a 	mov	r5,zero
   38b08:	000f883a 	mov	r7,zero
   38b0c:	102f883a 	mov	r23,r2
   38b10:	1827883a 	mov	r19,r3
   38b14:	00394700 	call	39470 <__muldi3>
   38b18:	900d883a 	mov	r6,r18
   38b1c:	8809883a 	mov	r4,r17
   38b20:	000b883a 	mov	r5,zero
   38b24:	000f883a 	mov	r7,zero
   38b28:	102b883a 	mov	r21,r2
   38b2c:	1821883a 	mov	r16,r3
   38b30:	00394700 	call	39470 <__muldi3>
   38b34:	8809883a 	mov	r4,r17
   38b38:	000b883a 	mov	r5,zero
   38b3c:	a00d883a 	mov	r6,r20
   38b40:	000f883a 	mov	r7,zero
   38b44:	102d883a 	mov	r22,r2
   38b48:	1825883a 	mov	r18,r3
   38b4c:	00394700 	call	39470 <__muldi3>
   38b50:	154b883a 	add	r5,r2,r21
   38b54:	2889803a 	cmpltu	r4,r5,r2
   38b58:	1c07883a 	add	r3,r3,r16
   38b5c:	20c9883a 	add	r4,r4,r3
   38b60:	24004b36 	bltu	r4,r16,38c90 <__muldf3+0x2b0>
   38b64:	8100011e 	bne	r16,r4,38b6c <__muldf3+0x18c>
   38b68:	2d404936 	bltu	r5,r21,38c90 <__muldf3+0x2b0>
   38b6c:	0011883a 	mov	r8,zero
   38b70:	0007883a 	mov	r3,zero
   38b74:	2ccb883a 	add	r5,r5,r19
   38b78:	b80d883a 	mov	r6,r23
   38b7c:	2cc0012e 	bgeu	r5,r19,38b84 <__muldf3+0x1a4>
   38b80:	02000044 	movi	r8,1
   38b84:	258f883a 	add	r7,r4,r22
   38b88:	3909803a 	cmpltu	r4,r7,r4
   38b8c:	da400c17 	ldw	r9,48(sp)
   38b90:	2489883a 	add	r4,r4,r18
   38b94:	d8800717 	ldw	r2,28(sp)
   38b98:	20c9883a 	add	r4,r4,r3
   38b9c:	da800b17 	ldw	r10,44(sp)
   38ba0:	d8c00617 	ldw	r3,24(sp)
   38ba4:	3a11883a 	add	r8,r7,r8
   38ba8:	4885883a 	add	r2,r9,r2
   38bac:	50c6c03a 	cmpne	r3,r10,r3
   38bb0:	41cf803a 	cmpltu	r7,r8,r7
   38bb4:	12400104 	addi	r9,r2,4
   38bb8:	d8c00115 	stw	r3,4(sp)
   38bbc:	3909883a 	add	r4,r7,r4
   38bc0:	da400215 	stw	r9,8(sp)
   38bc4:	03480034 	movhi	r13,8192
   38bc8:	6b7fffc4 	addi	r13,r13,-1
   38bcc:	4007883a 	mov	r3,r8
   38bd0:	6900102e 	bgeu	r13,r4,38c14 <__muldf3+0x234>
   38bd4:	10800144 	addi	r2,r2,5
   38bd8:	180ed07a 	srli	r7,r3,1
   38bdc:	18c0004c 	andi	r3,r3,1
   38be0:	201097fa 	slli	r8,r4,31
   38be4:	281697fa 	slli	r11,r5,31
   38be8:	2008d07a 	srli	r4,r4,1
   38bec:	3014d07a 	srli	r10,r6,1
   38bf0:	2812d07a 	srli	r9,r5,1
   38bf4:	1019883a 	mov	r12,r2
   38bf8:	18000226 	beq	r3,zero,38c04 <__muldf3+0x224>
   38bfc:	5a8cb03a 	or	r6,r11,r10
   38c00:	49600034 	orhi	r5,r9,32768
   38c04:	41c6b03a 	or	r3,r8,r7
   38c08:	10800044 	addi	r2,r2,1
   38c0c:	693ff236 	bltu	r13,r4,38bd8 <__muldf3+0x1f8>
   38c10:	db000215 	stw	r12,8(sp)
   38c14:	03440034 	movhi	r13,4096
   38c18:	6b7fffc4 	addi	r13,r13,-1
   38c1c:	69001336 	bltu	r13,r4,38c6c <__muldf3+0x28c>
   38c20:	d8800217 	ldw	r2,8(sp)
   38c24:	10bfffc4 	addi	r2,r2,-1
   38c28:	18d3883a 	add	r9,r3,r3
   38c2c:	48c7803a 	cmpltu	r3,r9,r3
   38c30:	2109883a 	add	r4,r4,r4
   38c34:	190f883a 	add	r7,r3,r4
   38c38:	3191883a 	add	r8,r6,r6
   38c3c:	4197803a 	cmpltu	r11,r8,r6
   38c40:	2955883a 	add	r10,r5,r5
   38c44:	1019883a 	mov	r12,r2
   38c48:	4807883a 	mov	r3,r9
   38c4c:	3809883a 	mov	r4,r7
   38c50:	2800010e 	bge	r5,zero,38c58 <__muldf3+0x278>
   38c54:	48c00054 	ori	r3,r9,1
   38c58:	400d883a 	mov	r6,r8
   38c5c:	5a8b883a 	add	r5,r11,r10
   38c60:	10bfffc4 	addi	r2,r2,-1
   38c64:	69fff02e 	bgeu	r13,r7,38c28 <__muldf3+0x248>
   38c68:	db000215 	stw	r12,8(sp)
   38c6c:	18803fcc 	andi	r2,r3,255
   38c70:	01c02004 	movi	r7,128
   38c74:	11c00926 	beq	r2,r7,38c9c <__muldf3+0x2bc>
   38c78:	008000c4 	movi	r2,3
   38c7c:	d9000415 	stw	r4,16(sp)
   38c80:	d8c00315 	stw	r3,12(sp)
   38c84:	d8800015 	stw	r2,0(sp)
   38c88:	d809883a 	mov	r4,sp
   38c8c:	003f7006 	br	38a50 <__muldf3+0x70>
   38c90:	0011883a 	mov	r8,zero
   38c94:	00c00044 	movi	r3,1
   38c98:	003fb606 	br	38b74 <__muldf3+0x194>
   38c9c:	19c0400c 	andi	r7,r3,256
   38ca0:	383ff51e 	bne	r7,zero,38c78 <__muldf3+0x298>
   38ca4:	314ab03a 	or	r5,r6,r5
   38ca8:	283ff326 	beq	r5,zero,38c78 <__muldf3+0x298>
   38cac:	1885883a 	add	r2,r3,r2
   38cb0:	10cb803a 	cmpltu	r5,r2,r3
   38cb4:	00ffc004 	movi	r3,-256
   38cb8:	10c6703a 	and	r3,r2,r3
   38cbc:	2909883a 	add	r4,r5,r4
   38cc0:	003fed06 	br	38c78 <__muldf3+0x298>

00038cc4 <__divdf3>:
   38cc4:	defff104 	addi	sp,sp,-60
   38cc8:	d9000c15 	stw	r4,48(sp)
   38ccc:	d9400d15 	stw	r5,52(sp)
   38cd0:	d9000c04 	addi	r4,sp,48
   38cd4:	d9400504 	addi	r5,sp,20
   38cd8:	dfc00e15 	stw	ra,56(sp)
   38cdc:	d9800a15 	stw	r6,40(sp)
   38ce0:	d9c00b15 	stw	r7,44(sp)
   38ce4:	00398500 	call	39850 <__unpack_d>
   38ce8:	d9000a04 	addi	r4,sp,40
   38cec:	d80b883a 	mov	r5,sp
   38cf0:	00398500 	call	39850 <__unpack_d>
   38cf4:	d8c00517 	ldw	r3,20(sp)
   38cf8:	00800044 	movi	r2,1
   38cfc:	10c00536 	bltu	r2,r3,38d14 <__divdf3+0x50>
   38d00:	d9000504 	addi	r4,sp,20
   38d04:	003962c0 	call	3962c <__pack_d>
   38d08:	dfc00e17 	ldw	ra,56(sp)
   38d0c:	dec00f04 	addi	sp,sp,60
   38d10:	f800283a 	ret
   38d14:	d9000017 	ldw	r4,0(sp)
   38d18:	11000536 	bltu	r2,r4,38d30 <__divdf3+0x6c>
   38d1c:	d809883a 	mov	r4,sp
   38d20:	003962c0 	call	3962c <__pack_d>
   38d24:	dfc00e17 	ldw	ra,56(sp)
   38d28:	dec00f04 	addi	sp,sp,60
   38d2c:	f800283a 	ret
   38d30:	d9800617 	ldw	r6,24(sp)
   38d34:	d9400117 	ldw	r5,4(sp)
   38d38:	00800104 	movi	r2,4
   38d3c:	314af03a 	xor	r5,r6,r5
   38d40:	d9400615 	stw	r5,24(sp)
   38d44:	18800226 	beq	r3,r2,38d50 <__divdf3+0x8c>
   38d48:	01400084 	movi	r5,2
   38d4c:	1940041e 	bne	r3,r5,38d60 <__divdf3+0x9c>
   38d50:	193feb1e 	bne	r3,r4,38d00 <__divdf3+0x3c>
   38d54:	01000034 	movhi	r4,0
   38d58:	21008704 	addi	r4,r4,540
   38d5c:	003fe906 	br	38d04 <__divdf3+0x40>
   38d60:	20803326 	beq	r4,r2,38e30 <__divdf3+0x16c>
   38d64:	21403726 	beq	r4,r5,38e44 <__divdf3+0x180>
   38d68:	d8800217 	ldw	r2,8(sp)
   38d6c:	d9000717 	ldw	r4,28(sp)
   38d70:	d8c00917 	ldw	r3,36(sp)
   38d74:	da000417 	ldw	r8,16(sp)
   38d78:	2089c83a 	sub	r4,r4,r2
   38d7c:	d9000715 	stw	r4,28(sp)
   38d80:	d8800817 	ldw	r2,32(sp)
   38d84:	dbc00317 	ldw	r15,12(sp)
   38d88:	1a000236 	bltu	r3,r8,38d94 <__divdf3+0xd0>
   38d8c:	40c0081e 	bne	r8,r3,38db0 <__divdf3+0xec>
   38d90:	13c0072e 	bgeu	r2,r15,38db0 <__divdf3+0xec>
   38d94:	108b883a 	add	r5,r2,r2
   38d98:	288d803a 	cmpltu	r6,r5,r2
   38d9c:	18c7883a 	add	r3,r3,r3
   38da0:	213fffc4 	addi	r4,r4,-1
   38da4:	2805883a 	mov	r2,r5
   38da8:	30c7883a 	add	r3,r6,r3
   38dac:	d9000715 	stw	r4,28(sp)
   38db0:	01400f44 	movi	r5,61
   38db4:	000f883a 	mov	r7,zero
   38db8:	01040034 	movhi	r4,4096
   38dbc:	0019883a 	mov	r12,zero
   38dc0:	001b883a 	mov	r13,zero
   38dc4:	201697fa 	slli	r11,r4,31
   38dc8:	3814d07a 	srli	r10,r7,1
   38dcc:	297fffc4 	addi	r5,r5,-1
   38dd0:	1a000936 	bltu	r3,r8,38df8 <__divdf3+0x134>
   38dd4:	13cdc83a 	sub	r6,r2,r15
   38dd8:	1193803a 	cmpltu	r9,r2,r6
   38ddc:	1a1dc83a 	sub	r14,r3,r8
   38de0:	40c0011e 	bne	r8,r3,38de8 <__divdf3+0x124>
   38de4:	13c00436 	bltu	r2,r15,38df8 <__divdf3+0x134>
   38de8:	3005883a 	mov	r2,r6
   38dec:	7247c83a 	sub	r3,r14,r9
   38df0:	61d8b03a 	or	r12,r12,r7
   38df4:	691ab03a 	or	r13,r13,r4
   38df8:	108d883a 	add	r6,r2,r2
   38dfc:	3093803a 	cmpltu	r9,r6,r2
   38e00:	18c7883a 	add	r3,r3,r3
   38e04:	5a8eb03a 	or	r7,r11,r10
   38e08:	2008d07a 	srli	r4,r4,1
   38e0c:	3005883a 	mov	r2,r6
   38e10:	48c7883a 	add	r3,r9,r3
   38e14:	283feb1e 	bne	r5,zero,38dc4 <__divdf3+0x100>
   38e18:	61003fcc 	andi	r4,r12,255
   38e1c:	01402004 	movi	r5,128
   38e20:	21400b26 	beq	r4,r5,38e50 <__divdf3+0x18c>
   38e24:	db000815 	stw	r12,32(sp)
   38e28:	db400915 	stw	r13,36(sp)
   38e2c:	003fb406 	br	38d00 <__divdf3+0x3c>
   38e30:	d8000815 	stw	zero,32(sp)
   38e34:	d8000915 	stw	zero,36(sp)
   38e38:	d8000715 	stw	zero,28(sp)
   38e3c:	d9000504 	addi	r4,sp,20
   38e40:	003fb006 	br	38d04 <__divdf3+0x40>
   38e44:	d8800515 	stw	r2,20(sp)
   38e48:	d9000504 	addi	r4,sp,20
   38e4c:	003fad06 	br	38d04 <__divdf3+0x40>
   38e50:	6140400c 	andi	r5,r12,256
   38e54:	283ff31e 	bne	r5,zero,38e24 <__divdf3+0x160>
   38e58:	30c4b03a 	or	r2,r6,r3
   38e5c:	103ff126 	beq	r2,zero,38e24 <__divdf3+0x160>
   38e60:	6109883a 	add	r4,r12,r4
   38e64:	2305803a 	cmpltu	r2,r4,r12
   38e68:	033fc004 	movi	r12,-256
   38e6c:	2318703a 	and	r12,r4,r12
   38e70:	135b883a 	add	r13,r2,r13
   38e74:	003feb06 	br	38e24 <__divdf3+0x160>

00038e78 <__eqdf2>:
   38e78:	defff104 	addi	sp,sp,-60
   38e7c:	d9000c15 	stw	r4,48(sp)
   38e80:	d9400d15 	stw	r5,52(sp)
   38e84:	d9000c04 	addi	r4,sp,48
   38e88:	d9400504 	addi	r5,sp,20
   38e8c:	dfc00e15 	stw	ra,56(sp)
   38e90:	d9800a15 	stw	r6,40(sp)
   38e94:	d9c00b15 	stw	r7,44(sp)
   38e98:	00398500 	call	39850 <__unpack_d>
   38e9c:	d9000a04 	addi	r4,sp,40
   38ea0:	d80b883a 	mov	r5,sp
   38ea4:	00398500 	call	39850 <__unpack_d>
   38ea8:	d8c00517 	ldw	r3,20(sp)
   38eac:	00800044 	movi	r2,1
   38eb0:	10c0052e 	bgeu	r2,r3,38ec8 <__eqdf2+0x50>
   38eb4:	d8c00017 	ldw	r3,0(sp)
   38eb8:	10c0032e 	bgeu	r2,r3,38ec8 <__eqdf2+0x50>
   38ebc:	d9000504 	addi	r4,sp,20
   38ec0:	d80b883a 	mov	r5,sp
   38ec4:	00399540 	call	39954 <__fpcmp_parts_d>
   38ec8:	dfc00e17 	ldw	ra,56(sp)
   38ecc:	dec00f04 	addi	sp,sp,60
   38ed0:	f800283a 	ret

00038ed4 <__nedf2>:
   38ed4:	defff104 	addi	sp,sp,-60
   38ed8:	d9000c15 	stw	r4,48(sp)
   38edc:	d9400d15 	stw	r5,52(sp)
   38ee0:	d9000c04 	addi	r4,sp,48
   38ee4:	d9400504 	addi	r5,sp,20
   38ee8:	dfc00e15 	stw	ra,56(sp)
   38eec:	d9800a15 	stw	r6,40(sp)
   38ef0:	d9c00b15 	stw	r7,44(sp)
   38ef4:	00398500 	call	39850 <__unpack_d>
   38ef8:	d9000a04 	addi	r4,sp,40
   38efc:	d80b883a 	mov	r5,sp
   38f00:	00398500 	call	39850 <__unpack_d>
   38f04:	d8c00517 	ldw	r3,20(sp)
   38f08:	00800044 	movi	r2,1
   38f0c:	10c0052e 	bgeu	r2,r3,38f24 <__nedf2+0x50>
   38f10:	d8c00017 	ldw	r3,0(sp)
   38f14:	10c0032e 	bgeu	r2,r3,38f24 <__nedf2+0x50>
   38f18:	d9000504 	addi	r4,sp,20
   38f1c:	d80b883a 	mov	r5,sp
   38f20:	00399540 	call	39954 <__fpcmp_parts_d>
   38f24:	dfc00e17 	ldw	ra,56(sp)
   38f28:	dec00f04 	addi	sp,sp,60
   38f2c:	f800283a 	ret

00038f30 <__gtdf2>:
   38f30:	defff104 	addi	sp,sp,-60
   38f34:	d9000c15 	stw	r4,48(sp)
   38f38:	d9400d15 	stw	r5,52(sp)
   38f3c:	d9000c04 	addi	r4,sp,48
   38f40:	d9400504 	addi	r5,sp,20
   38f44:	dfc00e15 	stw	ra,56(sp)
   38f48:	d9800a15 	stw	r6,40(sp)
   38f4c:	d9c00b15 	stw	r7,44(sp)
   38f50:	00398500 	call	39850 <__unpack_d>
   38f54:	d9000a04 	addi	r4,sp,40
   38f58:	d80b883a 	mov	r5,sp
   38f5c:	00398500 	call	39850 <__unpack_d>
   38f60:	d8c00517 	ldw	r3,20(sp)
   38f64:	00800044 	movi	r2,1
   38f68:	10c0082e 	bgeu	r2,r3,38f8c <__gtdf2+0x5c>
   38f6c:	d8c00017 	ldw	r3,0(sp)
   38f70:	10c0062e 	bgeu	r2,r3,38f8c <__gtdf2+0x5c>
   38f74:	d9000504 	addi	r4,sp,20
   38f78:	d80b883a 	mov	r5,sp
   38f7c:	00399540 	call	39954 <__fpcmp_parts_d>
   38f80:	dfc00e17 	ldw	ra,56(sp)
   38f84:	dec00f04 	addi	sp,sp,60
   38f88:	f800283a 	ret
   38f8c:	00bfffc4 	movi	r2,-1
   38f90:	003ffb06 	br	38f80 <__gtdf2+0x50>

00038f94 <__gedf2>:
   38f94:	defff104 	addi	sp,sp,-60
   38f98:	d9000c15 	stw	r4,48(sp)
   38f9c:	d9400d15 	stw	r5,52(sp)
   38fa0:	d9000c04 	addi	r4,sp,48
   38fa4:	d9400504 	addi	r5,sp,20
   38fa8:	dfc00e15 	stw	ra,56(sp)
   38fac:	d9800a15 	stw	r6,40(sp)
   38fb0:	d9c00b15 	stw	r7,44(sp)
   38fb4:	00398500 	call	39850 <__unpack_d>
   38fb8:	d9000a04 	addi	r4,sp,40
   38fbc:	d80b883a 	mov	r5,sp
   38fc0:	00398500 	call	39850 <__unpack_d>
   38fc4:	d8c00517 	ldw	r3,20(sp)
   38fc8:	00800044 	movi	r2,1
   38fcc:	10c0082e 	bgeu	r2,r3,38ff0 <__gedf2+0x5c>
   38fd0:	d8c00017 	ldw	r3,0(sp)
   38fd4:	10c0062e 	bgeu	r2,r3,38ff0 <__gedf2+0x5c>
   38fd8:	d9000504 	addi	r4,sp,20
   38fdc:	d80b883a 	mov	r5,sp
   38fe0:	00399540 	call	39954 <__fpcmp_parts_d>
   38fe4:	dfc00e17 	ldw	ra,56(sp)
   38fe8:	dec00f04 	addi	sp,sp,60
   38fec:	f800283a 	ret
   38ff0:	00bfffc4 	movi	r2,-1
   38ff4:	003ffb06 	br	38fe4 <__gedf2+0x50>

00038ff8 <__ltdf2>:
   38ff8:	defff104 	addi	sp,sp,-60
   38ffc:	d9000c15 	stw	r4,48(sp)
   39000:	d9400d15 	stw	r5,52(sp)
   39004:	d9000c04 	addi	r4,sp,48
   39008:	d9400504 	addi	r5,sp,20
   3900c:	dfc00e15 	stw	ra,56(sp)
   39010:	d9800a15 	stw	r6,40(sp)
   39014:	d9c00b15 	stw	r7,44(sp)
   39018:	00398500 	call	39850 <__unpack_d>
   3901c:	d9000a04 	addi	r4,sp,40
   39020:	d80b883a 	mov	r5,sp
   39024:	00398500 	call	39850 <__unpack_d>
   39028:	d8c00517 	ldw	r3,20(sp)
   3902c:	00800044 	movi	r2,1
   39030:	10c0052e 	bgeu	r2,r3,39048 <__ltdf2+0x50>
   39034:	d8c00017 	ldw	r3,0(sp)
   39038:	10c0032e 	bgeu	r2,r3,39048 <__ltdf2+0x50>
   3903c:	d9000504 	addi	r4,sp,20
   39040:	d80b883a 	mov	r5,sp
   39044:	00399540 	call	39954 <__fpcmp_parts_d>
   39048:	dfc00e17 	ldw	ra,56(sp)
   3904c:	dec00f04 	addi	sp,sp,60
   39050:	f800283a 	ret

00039054 <__floatsidf>:
   39054:	2004d7fa 	srli	r2,r4,31
   39058:	defff904 	addi	sp,sp,-28
   3905c:	00c000c4 	movi	r3,3
   39060:	dfc00615 	stw	ra,24(sp)
   39064:	dc000515 	stw	r16,20(sp)
   39068:	d8c00015 	stw	r3,0(sp)
   3906c:	d8800115 	stw	r2,4(sp)
   39070:	2000081e 	bne	r4,zero,39094 <__floatsidf+0x40>
   39074:	00800084 	movi	r2,2
   39078:	d8800015 	stw	r2,0(sp)
   3907c:	d809883a 	mov	r4,sp
   39080:	003962c0 	call	3962c <__pack_d>
   39084:	dfc00617 	ldw	ra,24(sp)
   39088:	dc000517 	ldw	r16,20(sp)
   3908c:	dec00704 	addi	sp,sp,28
   39090:	f800283a 	ret
   39094:	00c00f04 	movi	r3,60
   39098:	d8c00215 	stw	r3,8(sp)
   3909c:	10000f1e 	bne	r2,zero,390dc <__floatsidf+0x88>
   390a0:	2021883a 	mov	r16,r4
   390a4:	8009883a 	mov	r4,r16
   390a8:	00395800 	call	39580 <__clzsi2>
   390ac:	11000744 	addi	r4,r2,29
   390b0:	0100110e 	bge	zero,r4,390f8 <__floatsidf+0xa4>
   390b4:	10ffff44 	addi	r3,r2,-3
   390b8:	18001216 	blt	r3,zero,39104 <__floatsidf+0xb0>
   390bc:	80c6983a 	sll	r3,r16,r3
   390c0:	0009883a 	mov	r4,zero
   390c4:	014007c4 	movi	r5,31
   390c8:	2885c83a 	sub	r2,r5,r2
   390cc:	d9000315 	stw	r4,12(sp)
   390d0:	d8c00415 	stw	r3,16(sp)
   390d4:	d8800215 	stw	r2,8(sp)
   390d8:	003fe806 	br	3907c <__floatsidf+0x28>
   390dc:	00a00034 	movhi	r2,32768
   390e0:	20800e26 	beq	r4,r2,3911c <__floatsidf+0xc8>
   390e4:	0121c83a 	sub	r16,zero,r4
   390e8:	8009883a 	mov	r4,r16
   390ec:	00395800 	call	39580 <__clzsi2>
   390f0:	11000744 	addi	r4,r2,29
   390f4:	013fef16 	blt	zero,r4,390b4 <__floatsidf+0x60>
   390f8:	dc000315 	stw	r16,12(sp)
   390fc:	d8000415 	stw	zero,16(sp)
   39100:	003fde06 	br	3907c <__floatsidf+0x28>
   39104:	800ad07a 	srli	r5,r16,1
   39108:	00c007c4 	movi	r3,31
   3910c:	1907c83a 	sub	r3,r3,r4
   39110:	28c6d83a 	srl	r3,r5,r3
   39114:	8108983a 	sll	r4,r16,r4
   39118:	003fea06 	br	390c4 <__floatsidf+0x70>
   3911c:	0005883a 	mov	r2,zero
   39120:	00f07834 	movhi	r3,49632
   39124:	003fd706 	br	39084 <__floatsidf+0x30>

00039128 <__fixdfsi>:
   39128:	defff804 	addi	sp,sp,-32
   3912c:	d9000515 	stw	r4,20(sp)
   39130:	d9400615 	stw	r5,24(sp)
   39134:	d9000504 	addi	r4,sp,20
   39138:	d80b883a 	mov	r5,sp
   3913c:	dfc00715 	stw	ra,28(sp)
   39140:	00398500 	call	39850 <__unpack_d>
   39144:	d8800017 	ldw	r2,0(sp)
   39148:	00c00084 	movi	r3,2
   3914c:	10c01c26 	beq	r2,r3,391c0 <__fixdfsi+0x98>
   39150:	00c00044 	movi	r3,1
   39154:	18801a2e 	bgeu	r3,r2,391c0 <__fixdfsi+0x98>
   39158:	00c00104 	movi	r3,4
   3915c:	10c01126 	beq	r2,r3,391a4 <__fixdfsi+0x7c>
   39160:	d8800217 	ldw	r2,8(sp)
   39164:	10001616 	blt	r2,zero,391c0 <__fixdfsi+0x98>
   39168:	00c00784 	movi	r3,30
   3916c:	18800d16 	blt	r3,r2,391a4 <__fixdfsi+0x7c>
   39170:	00c00f04 	movi	r3,60
   39174:	1885c83a 	sub	r2,r3,r2
   39178:	10fff804 	addi	r3,r2,-32
   3917c:	d9400317 	ldw	r5,12(sp)
   39180:	d9000417 	ldw	r4,16(sp)
   39184:	18001616 	blt	r3,zero,391e0 <__fixdfsi+0xb8>
   39188:	20c4d83a 	srl	r2,r4,r3
   3918c:	d8c00117 	ldw	r3,4(sp)
   39190:	18000126 	beq	r3,zero,39198 <__fixdfsi+0x70>
   39194:	0085c83a 	sub	r2,zero,r2
   39198:	dfc00717 	ldw	ra,28(sp)
   3919c:	dec00804 	addi	sp,sp,32
   391a0:	f800283a 	ret
   391a4:	d8800117 	ldw	r2,4(sp)
   391a8:	1000091e 	bne	r2,zero,391d0 <__fixdfsi+0xa8>
   391ac:	00a00034 	movhi	r2,32768
   391b0:	10bfffc4 	addi	r2,r2,-1
   391b4:	dfc00717 	ldw	ra,28(sp)
   391b8:	dec00804 	addi	sp,sp,32
   391bc:	f800283a 	ret
   391c0:	0005883a 	mov	r2,zero
   391c4:	dfc00717 	ldw	ra,28(sp)
   391c8:	dec00804 	addi	sp,sp,32
   391cc:	f800283a 	ret
   391d0:	00a00034 	movhi	r2,32768
   391d4:	dfc00717 	ldw	ra,28(sp)
   391d8:	dec00804 	addi	sp,sp,32
   391dc:	f800283a 	ret
   391e0:	2008907a 	slli	r4,r4,1
   391e4:	018007c4 	movi	r6,31
   391e8:	308dc83a 	sub	r6,r6,r2
   391ec:	2188983a 	sll	r4,r4,r6
   391f0:	2884d83a 	srl	r2,r5,r2
   391f4:	2084b03a 	or	r2,r4,r2
   391f8:	003fe406 	br	3918c <__fixdfsi+0x64>

000391fc <__floatunsidf>:
   391fc:	defff904 	addi	sp,sp,-28
   39200:	dc000515 	stw	r16,20(sp)
   39204:	dfc00615 	stw	ra,24(sp)
   39208:	d8000115 	stw	zero,4(sp)
   3920c:	2021883a 	mov	r16,r4
   39210:	20001726 	beq	r4,zero,39270 <__floatunsidf+0x74>
   39214:	008000c4 	movi	r2,3
   39218:	d8800015 	stw	r2,0(sp)
   3921c:	00800f04 	movi	r2,60
   39220:	d8800215 	stw	r2,8(sp)
   39224:	00395800 	call	39580 <__clzsi2>
   39228:	10c00744 	addi	r3,r2,29
   3922c:	18001816 	blt	r3,zero,39290 <__floatunsidf+0x94>
   39230:	18002d26 	beq	r3,zero,392e8 <__floatunsidf+0xec>
   39234:	113fff44 	addi	r4,r2,-3
   39238:	20002e16 	blt	r4,zero,392f4 <__floatunsidf+0xf8>
   3923c:	8108983a 	sll	r4,r16,r4
   39240:	0021883a 	mov	r16,zero
   39244:	014007c4 	movi	r5,31
   39248:	2885c83a 	sub	r2,r5,r2
   3924c:	dc000315 	stw	r16,12(sp)
   39250:	d9000415 	stw	r4,16(sp)
   39254:	d8800215 	stw	r2,8(sp)
   39258:	d809883a 	mov	r4,sp
   3925c:	003962c0 	call	3962c <__pack_d>
   39260:	dfc00617 	ldw	ra,24(sp)
   39264:	dc000517 	ldw	r16,20(sp)
   39268:	dec00704 	addi	sp,sp,28
   3926c:	f800283a 	ret
   39270:	00800084 	movi	r2,2
   39274:	d809883a 	mov	r4,sp
   39278:	d8800015 	stw	r2,0(sp)
   3927c:	003962c0 	call	3962c <__pack_d>
   39280:	dfc00617 	ldw	ra,24(sp)
   39284:	dc000517 	ldw	r16,20(sp)
   39288:	dec00704 	addi	sp,sp,28
   3928c:	f800283a 	ret
   39290:	00c7c83a 	sub	r3,zero,r3
   39294:	193ff804 	addi	r4,r3,-32
   39298:	20001c16 	blt	r4,zero,3930c <__floatunsidf+0x110>
   3929c:	000b883a 	mov	r5,zero
   392a0:	2009d7fa 	srai	r4,r4,31
   392a4:	80c6d83a 	srl	r3,r16,r3
   392a8:	297fffc4 	addi	r5,r5,-1
   392ac:	2c20703a 	and	r16,r5,r16
   392b0:	8020c03a 	cmpne	r16,r16,zero
   392b4:	1906703a 	and	r3,r3,r4
   392b8:	010007c4 	movi	r4,31
   392bc:	80c6b03a 	or	r3,r16,r3
   392c0:	2085c83a 	sub	r2,r4,r2
   392c4:	d809883a 	mov	r4,sp
   392c8:	d8c00315 	stw	r3,12(sp)
   392cc:	d8000415 	stw	zero,16(sp)
   392d0:	d8800215 	stw	r2,8(sp)
   392d4:	003962c0 	call	3962c <__pack_d>
   392d8:	dfc00617 	ldw	ra,24(sp)
   392dc:	dc000517 	ldw	r16,20(sp)
   392e0:	dec00704 	addi	sp,sp,28
   392e4:	f800283a 	ret
   392e8:	dc000315 	stw	r16,12(sp)
   392ec:	d8000415 	stw	zero,16(sp)
   392f0:	003fd906 	br	39258 <__floatunsidf+0x5c>
   392f4:	800ad07a 	srli	r5,r16,1
   392f8:	010007c4 	movi	r4,31
   392fc:	20c9c83a 	sub	r4,r4,r3
   39300:	2908d83a 	srl	r4,r5,r4
   39304:	80e0983a 	sll	r16,r16,r3
   39308:	003fce06 	br	39244 <__floatunsidf+0x48>
   3930c:	01400044 	movi	r5,1
   39310:	28ca983a 	sll	r5,r5,r3
   39314:	003fe206 	br	392a0 <__floatunsidf+0xa4>

00039318 <udivmodsi4>:
   39318:	2005883a 	mov	r2,r4
   3931c:	2900182e 	bgeu	r5,r4,39380 <udivmodsi4+0x68>
   39320:	28001716 	blt	r5,zero,39380 <udivmodsi4+0x68>
   39324:	01000804 	movi	r4,32
   39328:	00c00044 	movi	r3,1
   3932c:	00000206 	br	39338 <udivmodsi4+0x20>
   39330:	20001126 	beq	r4,zero,39378 <udivmodsi4+0x60>
   39334:	28000516 	blt	r5,zero,3934c <udivmodsi4+0x34>
   39338:	294b883a 	add	r5,r5,r5
   3933c:	213fffc4 	addi	r4,r4,-1
   39340:	18c7883a 	add	r3,r3,r3
   39344:	28bffa36 	bltu	r5,r2,39330 <udivmodsi4+0x18>
   39348:	18000b26 	beq	r3,zero,39378 <udivmodsi4+0x60>
   3934c:	0009883a 	mov	r4,zero
   39350:	11400236 	bltu	r2,r5,3935c <udivmodsi4+0x44>
   39354:	1145c83a 	sub	r2,r2,r5
   39358:	20c8b03a 	or	r4,r4,r3
   3935c:	1806d07a 	srli	r3,r3,1
   39360:	280ad07a 	srli	r5,r5,1
   39364:	183ffa1e 	bne	r3,zero,39350 <udivmodsi4+0x38>
   39368:	3000021e 	bne	r6,zero,39374 <udivmodsi4+0x5c>
   3936c:	2005883a 	mov	r2,r4
   39370:	f800283a 	ret
   39374:	f800283a 	ret
   39378:	0009883a 	mov	r4,zero
   3937c:	003ffa06 	br	39368 <udivmodsi4+0x50>
   39380:	00c00044 	movi	r3,1
   39384:	0009883a 	mov	r4,zero
   39388:	003ff106 	br	39350 <udivmodsi4+0x38>

0003938c <__divsi3>:
   3938c:	defffe04 	addi	sp,sp,-8
   39390:	dfc00115 	stw	ra,4(sp)
   39394:	dc000015 	stw	r16,0(sp)
   39398:	20000a16 	blt	r4,zero,393c4 <__divsi3+0x38>
   3939c:	0021883a 	mov	r16,zero
   393a0:	28000b16 	blt	r5,zero,393d0 <__divsi3+0x44>
   393a4:	000d883a 	mov	r6,zero
   393a8:	00393180 	call	39318 <udivmodsi4>
   393ac:	80000126 	beq	r16,zero,393b4 <__divsi3+0x28>
   393b0:	0085c83a 	sub	r2,zero,r2
   393b4:	dfc00117 	ldw	ra,4(sp)
   393b8:	dc000017 	ldw	r16,0(sp)
   393bc:	dec00204 	addi	sp,sp,8
   393c0:	f800283a 	ret
   393c4:	0109c83a 	sub	r4,zero,r4
   393c8:	04000044 	movi	r16,1
   393cc:	283ff50e 	bge	r5,zero,393a4 <__divsi3+0x18>
   393d0:	014bc83a 	sub	r5,zero,r5
   393d4:	8400005c 	xori	r16,r16,1
   393d8:	003ff206 	br	393a4 <__divsi3+0x18>

000393dc <__modsi3>:
   393dc:	deffff04 	addi	sp,sp,-4
   393e0:	dfc00015 	stw	ra,0(sp)
   393e4:	20000516 	blt	r4,zero,393fc <__modsi3+0x20>
   393e8:	28000c16 	blt	r5,zero,3941c <__modsi3+0x40>
   393ec:	01800044 	movi	r6,1
   393f0:	dfc00017 	ldw	ra,0(sp)
   393f4:	dec00104 	addi	sp,sp,4
   393f8:	00393181 	jmpi	39318 <udivmodsi4>
   393fc:	0109c83a 	sub	r4,zero,r4
   39400:	28000b16 	blt	r5,zero,39430 <__modsi3+0x54>
   39404:	01800044 	movi	r6,1
   39408:	00393180 	call	39318 <udivmodsi4>
   3940c:	0085c83a 	sub	r2,zero,r2
   39410:	dfc00017 	ldw	ra,0(sp)
   39414:	dec00104 	addi	sp,sp,4
   39418:	f800283a 	ret
   3941c:	014bc83a 	sub	r5,zero,r5
   39420:	01800044 	movi	r6,1
   39424:	dfc00017 	ldw	ra,0(sp)
   39428:	dec00104 	addi	sp,sp,4
   3942c:	00393181 	jmpi	39318 <udivmodsi4>
   39430:	014bc83a 	sub	r5,zero,r5
   39434:	003ff306 	br	39404 <__modsi3+0x28>

00039438 <__udivsi3>:
   39438:	000d883a 	mov	r6,zero
   3943c:	00393181 	jmpi	39318 <udivmodsi4>

00039440 <__umodsi3>:
   39440:	01800044 	movi	r6,1
   39444:	00393181 	jmpi	39318 <udivmodsi4>

00039448 <__mulsi3>:
   39448:	0005883a 	mov	r2,zero
   3944c:	20000726 	beq	r4,zero,3946c <__mulsi3+0x24>
   39450:	20c0004c 	andi	r3,r4,1
   39454:	2008d07a 	srli	r4,r4,1
   39458:	18000126 	beq	r3,zero,39460 <__mulsi3+0x18>
   3945c:	1145883a 	add	r2,r2,r5
   39460:	294b883a 	add	r5,r5,r5
   39464:	203ffa1e 	bne	r4,zero,39450 <__mulsi3+0x8>
   39468:	f800283a 	ret
   3946c:	f800283a 	ret

00039470 <__muldi3>:
   39470:	defff604 	addi	sp,sp,-40
   39474:	dd400515 	stw	r21,20(sp)
   39478:	dd000415 	stw	r20,16(sp)
   3947c:	257fffcc 	andi	r21,r4,65535
   39480:	353fffcc 	andi	r20,r6,65535
   39484:	dcc00315 	stw	r19,12(sp)
   39488:	3026d43a 	srli	r19,r6,16
   3948c:	dd800615 	stw	r22,24(sp)
   39490:	dc800215 	stw	r18,8(sp)
   39494:	dc400115 	stw	r17,4(sp)
   39498:	2024d43a 	srli	r18,r4,16
   3949c:	2023883a 	mov	r17,r4
   394a0:	282d883a 	mov	r22,r5
   394a4:	a009883a 	mov	r4,r20
   394a8:	a80b883a 	mov	r5,r21
   394ac:	dfc00915 	stw	ra,36(sp)
   394b0:	df000815 	stw	fp,32(sp)
   394b4:	ddc00715 	stw	r23,28(sp)
   394b8:	3839883a 	mov	fp,r7
   394bc:	dc000015 	stw	r16,0(sp)
   394c0:	3021883a 	mov	r16,r6
   394c4:	00394480 	call	39448 <__mulsi3>
   394c8:	a80b883a 	mov	r5,r21
   394cc:	9809883a 	mov	r4,r19
   394d0:	102f883a 	mov	r23,r2
   394d4:	00394480 	call	39448 <__mulsi3>
   394d8:	a009883a 	mov	r4,r20
   394dc:	900b883a 	mov	r5,r18
   394e0:	102b883a 	mov	r21,r2
   394e4:	00394480 	call	39448 <__mulsi3>
   394e8:	9809883a 	mov	r4,r19
   394ec:	900b883a 	mov	r5,r18
   394f0:	1029883a 	mov	r20,r2
   394f4:	00394480 	call	39448 <__mulsi3>
   394f8:	1007883a 	mov	r3,r2
   394fc:	b804d43a 	srli	r2,r23,16
   39500:	a549883a 	add	r4,r20,r21
   39504:	2089883a 	add	r4,r4,r2
   39508:	2500022e 	bgeu	r4,r20,39514 <__muldi3+0xa4>
   3950c:	00800074 	movhi	r2,1
   39510:	1887883a 	add	r3,r3,r2
   39514:	200cd43a 	srli	r6,r4,16
   39518:	2004943a 	slli	r2,r4,16
   3951c:	e00b883a 	mov	r5,fp
   39520:	8809883a 	mov	r4,r17
   39524:	bdffffcc 	andi	r23,r23,65535
   39528:	19a3883a 	add	r17,r3,r6
   3952c:	15ef883a 	add	r23,r2,r23
   39530:	00394480 	call	39448 <__mulsi3>
   39534:	8009883a 	mov	r4,r16
   39538:	b00b883a 	mov	r5,r22
   3953c:	1025883a 	mov	r18,r2
   39540:	00394480 	call	39448 <__mulsi3>
   39544:	9085883a 	add	r2,r18,r2
   39548:	1447883a 	add	r3,r2,r17
   3954c:	b805883a 	mov	r2,r23
   39550:	dfc00917 	ldw	ra,36(sp)
   39554:	df000817 	ldw	fp,32(sp)
   39558:	ddc00717 	ldw	r23,28(sp)
   3955c:	dd800617 	ldw	r22,24(sp)
   39560:	dd400517 	ldw	r21,20(sp)
   39564:	dd000417 	ldw	r20,16(sp)
   39568:	dcc00317 	ldw	r19,12(sp)
   3956c:	dc800217 	ldw	r18,8(sp)
   39570:	dc400117 	ldw	r17,4(sp)
   39574:	dc000017 	ldw	r16,0(sp)
   39578:	dec00a04 	addi	sp,sp,40
   3957c:	f800283a 	ret

00039580 <__clzsi2>:
   39580:	00bfffd4 	movui	r2,65535
   39584:	11000b36 	bltu	r2,r4,395b4 <__clzsi2+0x34>
   39588:	00803fc4 	movi	r2,255
   3958c:	11001e2e 	bgeu	r2,r4,39608 <__clzsi2+0x88>
   39590:	00c00204 	movi	r3,8
   39594:	20c8d83a 	srl	r4,r4,r3
   39598:	00c00034 	movhi	r3,0
   3959c:	18c08c04 	addi	r3,r3,560
   395a0:	00800604 	movi	r2,24
   395a4:	1909883a 	add	r4,r3,r4
   395a8:	20c00003 	ldbu	r3,0(r4)
   395ac:	10c5c83a 	sub	r2,r2,r3
   395b0:	f800283a 	ret
   395b4:	00804034 	movhi	r2,256
   395b8:	10bfffc4 	addi	r2,r2,-1
   395bc:	11000936 	bltu	r2,r4,395e4 <__clzsi2+0x64>
   395c0:	00800404 	movi	r2,16
   395c4:	1007883a 	mov	r3,r2
   395c8:	20c8d83a 	srl	r4,r4,r3
   395cc:	00c00034 	movhi	r3,0
   395d0:	18c08c04 	addi	r3,r3,560
   395d4:	1909883a 	add	r4,r3,r4
   395d8:	20c00003 	ldbu	r3,0(r4)
   395dc:	10c5c83a 	sub	r2,r2,r3
   395e0:	f800283a 	ret
   395e4:	00c00604 	movi	r3,24
   395e8:	20c8d83a 	srl	r4,r4,r3
   395ec:	00c00034 	movhi	r3,0
   395f0:	18c08c04 	addi	r3,r3,560
   395f4:	00800204 	movi	r2,8
   395f8:	1909883a 	add	r4,r3,r4
   395fc:	20c00003 	ldbu	r3,0(r4)
   39600:	10c5c83a 	sub	r2,r2,r3
   39604:	f800283a 	ret
   39608:	0007883a 	mov	r3,zero
   3960c:	20c8d83a 	srl	r4,r4,r3
   39610:	00c00034 	movhi	r3,0
   39614:	18c08c04 	addi	r3,r3,560
   39618:	00800804 	movi	r2,32
   3961c:	1909883a 	add	r4,r3,r4
   39620:	20c00003 	ldbu	r3,0(r4)
   39624:	10c5c83a 	sub	r2,r2,r3
   39628:	f800283a 	ret

0003962c <__pack_d>:
   3962c:	20800017 	ldw	r2,0(r4)
   39630:	defff804 	addi	sp,sp,-32
   39634:	dcc00315 	stw	r19,12(sp)
   39638:	dc800215 	stw	r18,8(sp)
   3963c:	dfc00715 	stw	ra,28(sp)
   39640:	dd800615 	stw	r22,24(sp)
   39644:	dd400515 	stw	r21,20(sp)
   39648:	dd000415 	stw	r20,16(sp)
   3964c:	dc400115 	stw	r17,4(sp)
   39650:	dc000015 	stw	r16,0(sp)
   39654:	04800044 	movi	r18,1
   39658:	24400317 	ldw	r17,12(r4)
   3965c:	24000417 	ldw	r16,16(r4)
   39660:	24c00117 	ldw	r19,4(r4)
   39664:	9080422e 	bgeu	r18,r2,39770 <__pack_d+0x144>
   39668:	00c00104 	movi	r3,4
   3966c:	10c03c26 	beq	r2,r3,39760 <__pack_d+0x134>
   39670:	00c00084 	movi	r3,2
   39674:	10c01926 	beq	r2,r3,396dc <__pack_d+0xb0>
   39678:	8c04b03a 	or	r2,r17,r16
   3967c:	10001726 	beq	r2,zero,396dc <__pack_d+0xb0>
   39680:	21000217 	ldw	r4,8(r4)
   39684:	00bf0084 	movi	r2,-1022
   39688:	20804016 	blt	r4,r2,3978c <__pack_d+0x160>
   3968c:	0080ffc4 	movi	r2,1023
   39690:	11003316 	blt	r2,r4,39760 <__pack_d+0x134>
   39694:	88803fcc 	andi	r2,r17,255
   39698:	00c02004 	movi	r3,128
   3969c:	10c02926 	beq	r2,r3,39744 <__pack_d+0x118>
   396a0:	88801fc4 	addi	r2,r17,127
   396a4:	1463803a 	cmpltu	r17,r2,r17
   396a8:	8c21883a 	add	r16,r17,r16
   396ac:	1023883a 	mov	r17,r2
   396b0:	00880034 	movhi	r2,8192
   396b4:	10bfffc4 	addi	r2,r2,-1
   396b8:	14001c36 	bltu	r2,r16,3972c <__pack_d+0x100>
   396bc:	2100ffc4 	addi	r4,r4,1023
   396c0:	8006963a 	slli	r3,r16,24
   396c4:	8804d23a 	srli	r2,r17,8
   396c8:	8020913a 	slli	r16,r16,4
   396cc:	2101ffcc 	andi	r4,r4,2047
   396d0:	1884b03a 	or	r2,r3,r2
   396d4:	8020d33a 	srli	r16,r16,12
   396d8:	00000306 	br	396e8 <__pack_d+0xbc>
   396dc:	0009883a 	mov	r4,zero
   396e0:	0005883a 	mov	r2,zero
   396e4:	0021883a 	mov	r16,zero
   396e8:	2008953a 	slli	r4,r4,20
   396ec:	982697fa 	slli	r19,r19,31
   396f0:	00c00434 	movhi	r3,16
   396f4:	18ffffc4 	addi	r3,r3,-1
   396f8:	80e0703a 	and	r16,r16,r3
   396fc:	8106b03a 	or	r3,r16,r4
   39700:	1cc6b03a 	or	r3,r3,r19
   39704:	dfc00717 	ldw	ra,28(sp)
   39708:	dd800617 	ldw	r22,24(sp)
   3970c:	dd400517 	ldw	r21,20(sp)
   39710:	dd000417 	ldw	r20,16(sp)
   39714:	dcc00317 	ldw	r19,12(sp)
   39718:	dc800217 	ldw	r18,8(sp)
   3971c:	dc400117 	ldw	r17,4(sp)
   39720:	dc000017 	ldw	r16,0(sp)
   39724:	dec00804 	addi	sp,sp,32
   39728:	f800283a 	ret
   3972c:	800697fa 	slli	r3,r16,31
   39730:	8804d07a 	srli	r2,r17,1
   39734:	21010004 	addi	r4,r4,1024
   39738:	8020d07a 	srli	r16,r16,1
   3973c:	18a2b03a 	or	r17,r3,r2
   39740:	003fdf06 	br	396c0 <__pack_d+0x94>
   39744:	88c0400c 	andi	r3,r17,256
   39748:	183fd926 	beq	r3,zero,396b0 <__pack_d+0x84>
   3974c:	8885883a 	add	r2,r17,r2
   39750:	1463803a 	cmpltu	r17,r2,r17
   39754:	8c21883a 	add	r16,r17,r16
   39758:	1023883a 	mov	r17,r2
   3975c:	003fd406 	br	396b0 <__pack_d+0x84>
   39760:	0101ffc4 	movi	r4,2047
   39764:	0005883a 	mov	r2,zero
   39768:	0021883a 	mov	r16,zero
   3976c:	003fde06 	br	396e8 <__pack_d+0xbc>
   39770:	84000234 	orhi	r16,r16,8
   39774:	00c00434 	movhi	r3,16
   39778:	18ffffc4 	addi	r3,r3,-1
   3977c:	8805883a 	mov	r2,r17
   39780:	80e0703a 	and	r16,r16,r3
   39784:	0101ffc4 	movi	r4,2047
   39788:	003fd706 	br	396e8 <__pack_d+0xbc>
   3978c:	1129c83a 	sub	r20,r2,r4
   39790:	00800e04 	movi	r2,56
   39794:	15002716 	blt	r2,r20,39834 <__pack_d+0x208>
   39798:	800b883a 	mov	r5,r16
   3979c:	a00d883a 	mov	r6,r20
   397a0:	8809883a 	mov	r4,r17
   397a4:	0039a240 	call	39a24 <__lshrdi3>
   397a8:	9009883a 	mov	r4,r18
   397ac:	000b883a 	mov	r5,zero
   397b0:	a00d883a 	mov	r6,r20
   397b4:	102d883a 	mov	r22,r2
   397b8:	182b883a 	mov	r21,r3
   397bc:	0039a680 	call	39a68 <__ashldi3>
   397c0:	1009003a 	cmpeq	r4,r2,zero
   397c4:	1907c83a 	sub	r3,r3,r4
   397c8:	10bfffc4 	addi	r2,r2,-1
   397cc:	1c20703a 	and	r16,r3,r16
   397d0:	1444703a 	and	r2,r2,r17
   397d4:	1404b03a 	or	r2,r2,r16
   397d8:	1004c03a 	cmpne	r2,r2,zero
   397dc:	1584b03a 	or	r2,r2,r22
   397e0:	11003fcc 	andi	r4,r2,255
   397e4:	01402004 	movi	r5,128
   397e8:	a807883a 	mov	r3,r21
   397ec:	2140131e 	bne	r4,r5,3983c <__pack_d+0x210>
   397f0:	1140400c 	andi	r5,r2,256
   397f4:	28000426 	beq	r5,zero,39808 <__pack_d+0x1dc>
   397f8:	1109883a 	add	r4,r2,r4
   397fc:	2085803a 	cmpltu	r2,r4,r2
   39800:	1547883a 	add	r3,r2,r21
   39804:	2005883a 	mov	r2,r4
   39808:	1808963a 	slli	r4,r3,24
   3980c:	1004d23a 	srli	r2,r2,8
   39810:	1820913a 	slli	r16,r3,4
   39814:	01440034 	movhi	r5,4096
   39818:	297fffc4 	addi	r5,r5,-1
   3981c:	2084b03a 	or	r2,r4,r2
   39820:	8020d33a 	srli	r16,r16,12
   39824:	01000044 	movi	r4,1
   39828:	28ffaf36 	bltu	r5,r3,396e8 <__pack_d+0xbc>
   3982c:	0009883a 	mov	r4,zero
   39830:	003fad06 	br	396e8 <__pack_d+0xbc>
   39834:	0005883a 	mov	r2,zero
   39838:	0007883a 	mov	r3,zero
   3983c:	11001fc4 	addi	r4,r2,127
   39840:	2085803a 	cmpltu	r2,r4,r2
   39844:	10c7883a 	add	r3,r2,r3
   39848:	2005883a 	mov	r2,r4
   3984c:	003fee06 	br	39808 <__pack_d+0x1dc>

00039850 <__unpack_d>:
   39850:	21800117 	ldw	r6,4(r4)
   39854:	20c00017 	ldw	r3,0(r4)
   39858:	3004d7fa 	srli	r2,r6,31
   3985c:	3008d53a 	srli	r4,r6,20
   39860:	28800115 	stw	r2,4(r5)
   39864:	2101ffcc 	andi	r4,r4,2047
   39868:	00800434 	movhi	r2,16
   3986c:	10bfffc4 	addi	r2,r2,-1
   39870:	3084703a 	and	r2,r6,r2
   39874:	20001a1e 	bne	r4,zero,398e0 <__unpack_d+0x90>
   39878:	1888b03a 	or	r4,r3,r2
   3987c:	20002626 	beq	r4,zero,39918 <__unpack_d+0xc8>
   39880:	1808d63a 	srli	r4,r3,24
   39884:	1004923a 	slli	r2,r2,8
   39888:	01bf0084 	movi	r6,-1022
   3988c:	29800215 	stw	r6,8(r5)
   39890:	2084b03a 	or	r2,r4,r2
   39894:	010000c4 	movi	r4,3
   39898:	29000015 	stw	r4,0(r5)
   3989c:	02040034 	movhi	r8,4096
   398a0:	423fffc4 	addi	r8,r8,-1
   398a4:	1806923a 	slli	r3,r3,8
   398a8:	40801836 	bltu	r8,r2,3990c <__unpack_d+0xbc>
   398ac:	013f0044 	movi	r4,-1023
   398b0:	18cd883a 	add	r6,r3,r3
   398b4:	30c7803a 	cmpltu	r3,r6,r3
   398b8:	1085883a 	add	r2,r2,r2
   398bc:	1885883a 	add	r2,r3,r2
   398c0:	200f883a 	mov	r7,r4
   398c4:	3007883a 	mov	r3,r6
   398c8:	213fffc4 	addi	r4,r4,-1
   398cc:	40bff82e 	bgeu	r8,r2,398b0 <__unpack_d+0x60>
   398d0:	29c00215 	stw	r7,8(r5)
   398d4:	28c00315 	stw	r3,12(r5)
   398d8:	28800415 	stw	r2,16(r5)
   398dc:	f800283a 	ret
   398e0:	01c1ffc4 	movi	r7,2047
   398e4:	21c00f26 	beq	r4,r7,39924 <__unpack_d+0xd4>
   398e8:	180cd63a 	srli	r6,r3,24
   398ec:	1004923a 	slli	r2,r2,8
   398f0:	213f0044 	addi	r4,r4,-1023
   398f4:	1806923a 	slli	r3,r3,8
   398f8:	3084b03a 	or	r2,r6,r2
   398fc:	29000215 	stw	r4,8(r5)
   39900:	010000c4 	movi	r4,3
   39904:	10840034 	orhi	r2,r2,4096
   39908:	29000015 	stw	r4,0(r5)
   3990c:	28c00315 	stw	r3,12(r5)
   39910:	28800415 	stw	r2,16(r5)
   39914:	f800283a 	ret
   39918:	00800084 	movi	r2,2
   3991c:	28800015 	stw	r2,0(r5)
   39920:	f800283a 	ret
   39924:	1888b03a 	or	r4,r3,r2
   39928:	20000526 	beq	r4,zero,39940 <__unpack_d+0xf0>
   3992c:	3180022c 	andhi	r6,r6,8
   39930:	30000626 	beq	r6,zero,3994c <__unpack_d+0xfc>
   39934:	01000044 	movi	r4,1
   39938:	29000015 	stw	r4,0(r5)
   3993c:	003ff306 	br	3990c <__unpack_d+0xbc>
   39940:	00800104 	movi	r2,4
   39944:	28800015 	stw	r2,0(r5)
   39948:	f800283a 	ret
   3994c:	28000015 	stw	zero,0(r5)
   39950:	003fee06 	br	3990c <__unpack_d+0xbc>

00039954 <__fpcmp_parts_d>:
   39954:	20c00017 	ldw	r3,0(r4)
   39958:	00800044 	movi	r2,1
   3995c:	10c0142e 	bgeu	r2,r3,399b0 <__fpcmp_parts_d+0x5c>
   39960:	29800017 	ldw	r6,0(r5)
   39964:	1180122e 	bgeu	r2,r6,399b0 <__fpcmp_parts_d+0x5c>
   39968:	01c00104 	movi	r7,4
   3996c:	19c02826 	beq	r3,r7,39a10 <__fpcmp_parts_d+0xbc>
   39970:	31c00926 	beq	r6,r7,39998 <__fpcmp_parts_d+0x44>
   39974:	01c00084 	movi	r7,2
   39978:	19c00626 	beq	r3,r7,39994 <__fpcmp_parts_d+0x40>
   3997c:	31c00a26 	beq	r6,r7,399a8 <__fpcmp_parts_d+0x54>
   39980:	20c00117 	ldw	r3,4(r4)
   39984:	29800117 	ldw	r6,4(r5)
   39988:	19800b26 	beq	r3,r6,399b8 <__fpcmp_parts_d+0x64>
   3998c:	1800041e 	bne	r3,zero,399a0 <__fpcmp_parts_d+0x4c>
   39990:	f800283a 	ret
   39994:	30c01a26 	beq	r6,r3,39a00 <__fpcmp_parts_d+0xac>
   39998:	28800117 	ldw	r2,4(r5)
   3999c:	1000041e 	bne	r2,zero,399b0 <__fpcmp_parts_d+0x5c>
   399a0:	00bfffc4 	movi	r2,-1
   399a4:	f800283a 	ret
   399a8:	20800117 	ldw	r2,4(r4)
   399ac:	103ffc1e 	bne	r2,zero,399a0 <__fpcmp_parts_d+0x4c>
   399b0:	00800044 	movi	r2,1
   399b4:	f800283a 	ret
   399b8:	21c00217 	ldw	r7,8(r4)
   399bc:	29800217 	ldw	r6,8(r5)
   399c0:	31c0020e 	bge	r6,r7,399cc <__fpcmp_parts_d+0x78>
   399c4:	183ff61e 	bne	r3,zero,399a0 <__fpcmp_parts_d+0x4c>
   399c8:	f800283a 	ret
   399cc:	39800a16 	blt	r7,r6,399f8 <__fpcmp_parts_d+0xa4>
   399d0:	20800417 	ldw	r2,16(r4)
   399d4:	29800417 	ldw	r6,16(r5)
   399d8:	21c00317 	ldw	r7,12(r4)
   399dc:	29000317 	ldw	r4,12(r5)
   399e0:	30800936 	bltu	r6,r2,39a08 <__fpcmp_parts_d+0xb4>
   399e4:	1180011e 	bne	r2,r6,399ec <__fpcmp_parts_d+0x98>
   399e8:	21c00736 	bltu	r4,r7,39a08 <__fpcmp_parts_d+0xb4>
   399ec:	11800236 	bltu	r2,r6,399f8 <__fpcmp_parts_d+0xa4>
   399f0:	3080031e 	bne	r6,r2,39a00 <__fpcmp_parts_d+0xac>
   399f4:	3900022e 	bgeu	r7,r4,39a00 <__fpcmp_parts_d+0xac>
   399f8:	183fe926 	beq	r3,zero,399a0 <__fpcmp_parts_d+0x4c>
   399fc:	003fec06 	br	399b0 <__fpcmp_parts_d+0x5c>
   39a00:	0005883a 	mov	r2,zero
   39a04:	f800283a 	ret
   39a08:	183fe926 	beq	r3,zero,399b0 <__fpcmp_parts_d+0x5c>
   39a0c:	003fe406 	br	399a0 <__fpcmp_parts_d+0x4c>
   39a10:	30ffe51e 	bne	r6,r3,399a8 <__fpcmp_parts_d+0x54>
   39a14:	28c00117 	ldw	r3,4(r5)
   39a18:	20800117 	ldw	r2,4(r4)
   39a1c:	1885c83a 	sub	r2,r3,r2
   39a20:	f800283a 	ret

00039a24 <__lshrdi3>:
   39a24:	2005883a 	mov	r2,r4
   39a28:	2807883a 	mov	r3,r5
   39a2c:	30000826 	beq	r6,zero,39a50 <__lshrdi3+0x2c>
   39a30:	01000804 	movi	r4,32
   39a34:	2189c83a 	sub	r4,r4,r6
   39a38:	0100060e 	bge	zero,r4,39a54 <__lshrdi3+0x30>
   39a3c:	1184d83a 	srl	r2,r2,r6
   39a40:	2908983a 	sll	r4,r5,r4
   39a44:	298cd83a 	srl	r6,r5,r6
   39a48:	2084b03a 	or	r2,r4,r2
   39a4c:	3007883a 	mov	r3,r6
   39a50:	f800283a 	ret
   39a54:	0105c83a 	sub	r2,zero,r4
   39a58:	000d883a 	mov	r6,zero
   39a5c:	2884d83a 	srl	r2,r5,r2
   39a60:	3007883a 	mov	r3,r6
   39a64:	003ffa06 	br	39a50 <__lshrdi3+0x2c>

00039a68 <__ashldi3>:
   39a68:	2005883a 	mov	r2,r4
   39a6c:	2807883a 	mov	r3,r5
   39a70:	30000826 	beq	r6,zero,39a94 <__ashldi3+0x2c>
   39a74:	01000804 	movi	r4,32
   39a78:	2189c83a 	sub	r4,r4,r6
   39a7c:	0100060e 	bge	zero,r4,39a98 <__ashldi3+0x30>
   39a80:	1108d83a 	srl	r4,r2,r4
   39a84:	2986983a 	sll	r3,r5,r6
   39a88:	118c983a 	sll	r6,r2,r6
   39a8c:	20c6b03a 	or	r3,r4,r3
   39a90:	3005883a 	mov	r2,r6
   39a94:	f800283a 	ret
   39a98:	0107c83a 	sub	r3,zero,r4
   39a9c:	000d883a 	mov	r6,zero
   39aa0:	10c6983a 	sll	r3,r2,r3
   39aa4:	3005883a 	mov	r2,r6
   39aa8:	003ffa06 	br	39a94 <__ashldi3+0x2c>

00039aac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39aac:	defffe04 	addi	sp,sp,-8
   39ab0:	dfc00115 	stw	ra,4(sp)
   39ab4:	df000015 	stw	fp,0(sp)
   39ab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39abc:	00800034 	movhi	r2,0
   39ac0:	10876804 	addi	r2,r2,7584
   39ac4:	10800017 	ldw	r2,0(r2)
   39ac8:	10000526 	beq	r2,zero,39ae0 <alt_get_errno+0x34>
   39acc:	00800034 	movhi	r2,0
   39ad0:	10876804 	addi	r2,r2,7584
   39ad4:	10800017 	ldw	r2,0(r2)
   39ad8:	103ee83a 	callr	r2
   39adc:	00000206 	br	39ae8 <alt_get_errno+0x3c>
   39ae0:	00800034 	movhi	r2,0
   39ae4:	10877304 	addi	r2,r2,7628
}
   39ae8:	e037883a 	mov	sp,fp
   39aec:	dfc00117 	ldw	ra,4(sp)
   39af0:	df000017 	ldw	fp,0(sp)
   39af4:	dec00204 	addi	sp,sp,8
   39af8:	f800283a 	ret

00039afc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   39afc:	defffb04 	addi	sp,sp,-20
   39b00:	dfc00415 	stw	ra,16(sp)
   39b04:	df000315 	stw	fp,12(sp)
   39b08:	df000304 	addi	fp,sp,12
   39b0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   39b10:	e0bfff17 	ldw	r2,-4(fp)
   39b14:	10000716 	blt	r2,zero,39b34 <close+0x38>
   39b18:	e13fff17 	ldw	r4,-4(fp)
   39b1c:	01400304 	movi	r5,12
   39b20:	00394480 	call	39448 <__mulsi3>
   39b24:	00c00034 	movhi	r3,0
   39b28:	18c2e604 	addi	r3,r3,2968
   39b2c:	10c5883a 	add	r2,r2,r3
   39b30:	00000106 	br	39b38 <close+0x3c>
   39b34:	0005883a 	mov	r2,zero
   39b38:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   39b3c:	e0bffd17 	ldw	r2,-12(fp)
   39b40:	10001826 	beq	r2,zero,39ba4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   39b44:	e0bffd17 	ldw	r2,-12(fp)
   39b48:	10800017 	ldw	r2,0(r2)
   39b4c:	10800417 	ldw	r2,16(r2)
   39b50:	10000626 	beq	r2,zero,39b6c <close+0x70>
   39b54:	e0bffd17 	ldw	r2,-12(fp)
   39b58:	10800017 	ldw	r2,0(r2)
   39b5c:	10800417 	ldw	r2,16(r2)
   39b60:	e13ffd17 	ldw	r4,-12(fp)
   39b64:	103ee83a 	callr	r2
   39b68:	00000106 	br	39b70 <close+0x74>
   39b6c:	0005883a 	mov	r2,zero
   39b70:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   39b74:	e13fff17 	ldw	r4,-4(fp)
   39b78:	003a1f40 	call	3a1f4 <alt_release_fd>
    if (rval < 0)
   39b7c:	e0bffe17 	ldw	r2,-8(fp)
   39b80:	1000060e 	bge	r2,zero,39b9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   39b84:	0039aac0 	call	39aac <alt_get_errno>
   39b88:	e0fffe17 	ldw	r3,-8(fp)
   39b8c:	00c7c83a 	sub	r3,zero,r3
   39b90:	10c00015 	stw	r3,0(r2)
      return -1;
   39b94:	00bfffc4 	movi	r2,-1
   39b98:	00000606 	br	39bb4 <close+0xb8>
    }
    return 0;
   39b9c:	0005883a 	mov	r2,zero
   39ba0:	00000406 	br	39bb4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39ba4:	0039aac0 	call	39aac <alt_get_errno>
   39ba8:	00c01444 	movi	r3,81
   39bac:	10c00015 	stw	r3,0(r2)
    return -1;
   39bb0:	00bfffc4 	movi	r2,-1
  }
}
   39bb4:	e037883a 	mov	sp,fp
   39bb8:	dfc00117 	ldw	ra,4(sp)
   39bbc:	df000017 	ldw	fp,0(sp)
   39bc0:	dec00204 	addi	sp,sp,8
   39bc4:	f800283a 	ret

00039bc8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   39bc8:	defffc04 	addi	sp,sp,-16
   39bcc:	df000315 	stw	fp,12(sp)
   39bd0:	df000304 	addi	fp,sp,12
   39bd4:	e13ffd15 	stw	r4,-12(fp)
   39bd8:	e17ffe15 	stw	r5,-8(fp)
   39bdc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   39be0:	e0bfff17 	ldw	r2,-4(fp)
}
   39be4:	e037883a 	mov	sp,fp
   39be8:	df000017 	ldw	fp,0(sp)
   39bec:	dec00104 	addi	sp,sp,4
   39bf0:	f800283a 	ret

00039bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39bf4:	defffe04 	addi	sp,sp,-8
   39bf8:	dfc00115 	stw	ra,4(sp)
   39bfc:	df000015 	stw	fp,0(sp)
   39c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39c04:	00800034 	movhi	r2,0
   39c08:	10876804 	addi	r2,r2,7584
   39c0c:	10800017 	ldw	r2,0(r2)
   39c10:	10000526 	beq	r2,zero,39c28 <alt_get_errno+0x34>
   39c14:	00800034 	movhi	r2,0
   39c18:	10876804 	addi	r2,r2,7584
   39c1c:	10800017 	ldw	r2,0(r2)
   39c20:	103ee83a 	callr	r2
   39c24:	00000206 	br	39c30 <alt_get_errno+0x3c>
   39c28:	00800034 	movhi	r2,0
   39c2c:	10877304 	addi	r2,r2,7628
}
   39c30:	e037883a 	mov	sp,fp
   39c34:	dfc00117 	ldw	ra,4(sp)
   39c38:	df000017 	ldw	fp,0(sp)
   39c3c:	dec00204 	addi	sp,sp,8
   39c40:	f800283a 	ret

00039c44 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   39c44:	defffb04 	addi	sp,sp,-20
   39c48:	dfc00415 	stw	ra,16(sp)
   39c4c:	df000315 	stw	fp,12(sp)
   39c50:	df000304 	addi	fp,sp,12
   39c54:	e13ffe15 	stw	r4,-8(fp)
   39c58:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   39c5c:	e0bffe17 	ldw	r2,-8(fp)
   39c60:	10000716 	blt	r2,zero,39c80 <fstat+0x3c>
   39c64:	e13ffe17 	ldw	r4,-8(fp)
   39c68:	01400304 	movi	r5,12
   39c6c:	00394480 	call	39448 <__mulsi3>
   39c70:	00c00034 	movhi	r3,0
   39c74:	18c2e604 	addi	r3,r3,2968
   39c78:	10c5883a 	add	r2,r2,r3
   39c7c:	00000106 	br	39c84 <fstat+0x40>
   39c80:	0005883a 	mov	r2,zero
   39c84:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   39c88:	e0bffd17 	ldw	r2,-12(fp)
   39c8c:	10001026 	beq	r2,zero,39cd0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   39c90:	e0bffd17 	ldw	r2,-12(fp)
   39c94:	10800017 	ldw	r2,0(r2)
   39c98:	10800817 	ldw	r2,32(r2)
   39c9c:	10000726 	beq	r2,zero,39cbc <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   39ca0:	e0bffd17 	ldw	r2,-12(fp)
   39ca4:	10800017 	ldw	r2,0(r2)
   39ca8:	10800817 	ldw	r2,32(r2)
   39cac:	e13ffd17 	ldw	r4,-12(fp)
   39cb0:	e17fff17 	ldw	r5,-4(fp)
   39cb4:	103ee83a 	callr	r2
   39cb8:	00000906 	br	39ce0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   39cbc:	e0bfff17 	ldw	r2,-4(fp)
   39cc0:	00c80004 	movi	r3,8192
   39cc4:	10c00115 	stw	r3,4(r2)
      return 0;
   39cc8:	0005883a 	mov	r2,zero
   39ccc:	00000406 	br	39ce0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39cd0:	0039bf40 	call	39bf4 <alt_get_errno>
   39cd4:	00c01444 	movi	r3,81
   39cd8:	10c00015 	stw	r3,0(r2)
    return -1;
   39cdc:	00bfffc4 	movi	r2,-1
  }
}
   39ce0:	e037883a 	mov	sp,fp
   39ce4:	dfc00117 	ldw	ra,4(sp)
   39ce8:	df000017 	ldw	fp,0(sp)
   39cec:	dec00204 	addi	sp,sp,8
   39cf0:	f800283a 	ret

00039cf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39cf4:	defffe04 	addi	sp,sp,-8
   39cf8:	dfc00115 	stw	ra,4(sp)
   39cfc:	df000015 	stw	fp,0(sp)
   39d00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39d04:	00800034 	movhi	r2,0
   39d08:	10876804 	addi	r2,r2,7584
   39d0c:	10800017 	ldw	r2,0(r2)
   39d10:	10000526 	beq	r2,zero,39d28 <alt_get_errno+0x34>
   39d14:	00800034 	movhi	r2,0
   39d18:	10876804 	addi	r2,r2,7584
   39d1c:	10800017 	ldw	r2,0(r2)
   39d20:	103ee83a 	callr	r2
   39d24:	00000206 	br	39d30 <alt_get_errno+0x3c>
   39d28:	00800034 	movhi	r2,0
   39d2c:	10877304 	addi	r2,r2,7628
}
   39d30:	e037883a 	mov	sp,fp
   39d34:	dfc00117 	ldw	ra,4(sp)
   39d38:	df000017 	ldw	fp,0(sp)
   39d3c:	dec00204 	addi	sp,sp,8
   39d40:	f800283a 	ret

00039d44 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   39d44:	deffed04 	addi	sp,sp,-76
   39d48:	dfc01215 	stw	ra,72(sp)
   39d4c:	df001115 	stw	fp,68(sp)
   39d50:	df001104 	addi	fp,sp,68
   39d54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   39d58:	e0bfff17 	ldw	r2,-4(fp)
   39d5c:	10000716 	blt	r2,zero,39d7c <isatty+0x38>
   39d60:	e13fff17 	ldw	r4,-4(fp)
   39d64:	01400304 	movi	r5,12
   39d68:	00394480 	call	39448 <__mulsi3>
   39d6c:	00c00034 	movhi	r3,0
   39d70:	18c2e604 	addi	r3,r3,2968
   39d74:	10c5883a 	add	r2,r2,r3
   39d78:	00000106 	br	39d80 <isatty+0x3c>
   39d7c:	0005883a 	mov	r2,zero
   39d80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   39d84:	e0bfef17 	ldw	r2,-68(fp)
   39d88:	10000e26 	beq	r2,zero,39dc4 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   39d8c:	e0bfef17 	ldw	r2,-68(fp)
   39d90:	10800017 	ldw	r2,0(r2)
   39d94:	10800817 	ldw	r2,32(r2)
   39d98:	1000021e 	bne	r2,zero,39da4 <isatty+0x60>
    {
      return 1;
   39d9c:	00800044 	movi	r2,1
   39da0:	00000c06 	br	39dd4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   39da4:	e0bff004 	addi	r2,fp,-64
   39da8:	e13fff17 	ldw	r4,-4(fp)
   39dac:	100b883a 	mov	r5,r2
   39db0:	0039c440 	call	39c44 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   39db4:	e0bff117 	ldw	r2,-60(fp)
   39db8:	10880020 	cmpeqi	r2,r2,8192
   39dbc:	10803fcc 	andi	r2,r2,255
   39dc0:	00000406 	br	39dd4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   39dc4:	0039cf40 	call	39cf4 <alt_get_errno>
   39dc8:	00c01444 	movi	r3,81
   39dcc:	10c00015 	stw	r3,0(r2)
    return 0;
   39dd0:	0005883a 	mov	r2,zero
  }
}
   39dd4:	e037883a 	mov	sp,fp
   39dd8:	dfc00117 	ldw	ra,4(sp)
   39ddc:	df000017 	ldw	fp,0(sp)
   39de0:	dec00204 	addi	sp,sp,8
   39de4:	f800283a 	ret

00039de8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   39de8:	defffc04 	addi	sp,sp,-16
   39dec:	df000315 	stw	fp,12(sp)
   39df0:	df000304 	addi	fp,sp,12
   39df4:	e13ffd15 	stw	r4,-12(fp)
   39df8:	e17ffe15 	stw	r5,-8(fp)
   39dfc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   39e00:	e0fffe17 	ldw	r3,-8(fp)
   39e04:	e0bffd17 	ldw	r2,-12(fp)
   39e08:	18800e26 	beq	r3,r2,39e44 <alt_load_section+0x5c>
  {
    while( to != end )
   39e0c:	00000a06 	br	39e38 <alt_load_section+0x50>
    {
      *to++ = *from++;
   39e10:	e0bffd17 	ldw	r2,-12(fp)
   39e14:	10c00017 	ldw	r3,0(r2)
   39e18:	e0bffe17 	ldw	r2,-8(fp)
   39e1c:	10c00015 	stw	r3,0(r2)
   39e20:	e0bffe17 	ldw	r2,-8(fp)
   39e24:	10800104 	addi	r2,r2,4
   39e28:	e0bffe15 	stw	r2,-8(fp)
   39e2c:	e0bffd17 	ldw	r2,-12(fp)
   39e30:	10800104 	addi	r2,r2,4
   39e34:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   39e38:	e0fffe17 	ldw	r3,-8(fp)
   39e3c:	e0bfff17 	ldw	r2,-4(fp)
   39e40:	18bff31e 	bne	r3,r2,39e10 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   39e44:	e037883a 	mov	sp,fp
   39e48:	df000017 	ldw	fp,0(sp)
   39e4c:	dec00104 	addi	sp,sp,4
   39e50:	f800283a 	ret

00039e54 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   39e54:	defffe04 	addi	sp,sp,-8
   39e58:	dfc00115 	stw	ra,4(sp)
   39e5c:	df000015 	stw	fp,0(sp)
   39e60:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   39e64:	01000134 	movhi	r4,4
   39e68:	2132b004 	addi	r4,r4,-13632
   39e6c:	01400034 	movhi	r5,0
   39e70:	2940d704 	addi	r5,r5,860
   39e74:	01800034 	movhi	r6,0
   39e78:	31876d04 	addi	r6,r6,7604
   39e7c:	0039de80 	call	39de8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   39e80:	010000f4 	movhi	r4,3
   39e84:	21000804 	addi	r4,r4,32
   39e88:	014000f4 	movhi	r5,3
   39e8c:	29400804 	addi	r5,r5,32
   39e90:	018000f4 	movhi	r6,3
   39e94:	31806e04 	addi	r6,r6,440
   39e98:	0039de80 	call	39de8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   39e9c:	01000134 	movhi	r4,4
   39ea0:	2131d904 	addi	r4,r4,-14492
   39ea4:	01400034 	movhi	r5,0
   39ea8:	29400004 	addi	r5,r5,0
   39eac:	01800034 	movhi	r6,0
   39eb0:	3180d704 	addi	r6,r6,860
   39eb4:	0039de80 	call	39de8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   39eb8:	003b6c40 	call	3b6c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   39ebc:	003b8880 	call	3b888 <alt_icache_flush_all>
}
   39ec0:	e037883a 	mov	sp,fp
   39ec4:	dfc00117 	ldw	ra,4(sp)
   39ec8:	df000017 	ldw	fp,0(sp)
   39ecc:	dec00204 	addi	sp,sp,8
   39ed0:	f800283a 	ret

00039ed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   39ed4:	defffe04 	addi	sp,sp,-8
   39ed8:	dfc00115 	stw	ra,4(sp)
   39edc:	df000015 	stw	fp,0(sp)
   39ee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   39ee4:	00800034 	movhi	r2,0
   39ee8:	10876804 	addi	r2,r2,7584
   39eec:	10800017 	ldw	r2,0(r2)
   39ef0:	10000526 	beq	r2,zero,39f08 <alt_get_errno+0x34>
   39ef4:	00800034 	movhi	r2,0
   39ef8:	10876804 	addi	r2,r2,7584
   39efc:	10800017 	ldw	r2,0(r2)
   39f00:	103ee83a 	callr	r2
   39f04:	00000206 	br	39f10 <alt_get_errno+0x3c>
   39f08:	00800034 	movhi	r2,0
   39f0c:	10877304 	addi	r2,r2,7628
}
   39f10:	e037883a 	mov	sp,fp
   39f14:	dfc00117 	ldw	ra,4(sp)
   39f18:	df000017 	ldw	fp,0(sp)
   39f1c:	dec00204 	addi	sp,sp,8
   39f20:	f800283a 	ret

00039f24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   39f24:	defff904 	addi	sp,sp,-28
   39f28:	dfc00615 	stw	ra,24(sp)
   39f2c:	df000515 	stw	fp,20(sp)
   39f30:	df000504 	addi	fp,sp,20
   39f34:	e13ffd15 	stw	r4,-12(fp)
   39f38:	e17ffe15 	stw	r5,-8(fp)
   39f3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   39f40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   39f44:	e0bffd17 	ldw	r2,-12(fp)
   39f48:	10000716 	blt	r2,zero,39f68 <lseek+0x44>
   39f4c:	e13ffd17 	ldw	r4,-12(fp)
   39f50:	01400304 	movi	r5,12
   39f54:	00394480 	call	39448 <__mulsi3>
   39f58:	00c00034 	movhi	r3,0
   39f5c:	18c2e604 	addi	r3,r3,2968
   39f60:	10c5883a 	add	r2,r2,r3
   39f64:	00000106 	br	39f6c <lseek+0x48>
   39f68:	0005883a 	mov	r2,zero
   39f6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   39f70:	e0bffc17 	ldw	r2,-16(fp)
   39f74:	10001026 	beq	r2,zero,39fb8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   39f78:	e0bffc17 	ldw	r2,-16(fp)
   39f7c:	10800017 	ldw	r2,0(r2)
   39f80:	10800717 	ldw	r2,28(r2)
   39f84:	10000926 	beq	r2,zero,39fac <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   39f88:	e0bffc17 	ldw	r2,-16(fp)
   39f8c:	10800017 	ldw	r2,0(r2)
   39f90:	10800717 	ldw	r2,28(r2)
   39f94:	e13ffc17 	ldw	r4,-16(fp)
   39f98:	e17ffe17 	ldw	r5,-8(fp)
   39f9c:	e1bfff17 	ldw	r6,-4(fp)
   39fa0:	103ee83a 	callr	r2
   39fa4:	e0bffb15 	stw	r2,-20(fp)
   39fa8:	00000506 	br	39fc0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   39fac:	00bfde84 	movi	r2,-134
   39fb0:	e0bffb15 	stw	r2,-20(fp)
   39fb4:	00000206 	br	39fc0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   39fb8:	00bfebc4 	movi	r2,-81
   39fbc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   39fc0:	e0bffb17 	ldw	r2,-20(fp)
   39fc4:	1000060e 	bge	r2,zero,39fe0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   39fc8:	0039ed40 	call	39ed4 <alt_get_errno>
   39fcc:	e0fffb17 	ldw	r3,-20(fp)
   39fd0:	00c7c83a 	sub	r3,zero,r3
   39fd4:	10c00015 	stw	r3,0(r2)
    rc = -1;
   39fd8:	00bfffc4 	movi	r2,-1
   39fdc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   39fe0:	e0bffb17 	ldw	r2,-20(fp)
}
   39fe4:	e037883a 	mov	sp,fp
   39fe8:	dfc00117 	ldw	ra,4(sp)
   39fec:	df000017 	ldw	fp,0(sp)
   39ff0:	dec00204 	addi	sp,sp,8
   39ff4:	f800283a 	ret

00039ff8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   39ff8:	defffd04 	addi	sp,sp,-12
   39ffc:	dfc00215 	stw	ra,8(sp)
   3a000:	df000115 	stw	fp,4(sp)
   3a004:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   3a008:	0009883a 	mov	r4,zero
   3a00c:	003a49c0 	call	3a49c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   3a010:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   3a014:	003a4d00 	call	3a4d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   3a018:	01000034 	movhi	r4,0
   3a01c:	2100cf04 	addi	r4,r4,828
   3a020:	01400034 	movhi	r5,0
   3a024:	2940cf04 	addi	r5,r5,828
   3a028:	01800034 	movhi	r6,0
   3a02c:	3180cf04 	addi	r6,r6,828
   3a030:	003bc4c0 	call	3bc4c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   3a034:	003b7d00 	call	3b7d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   3a038:	01000134 	movhi	r4,4
   3a03c:	212e0b04 	addi	r4,r4,-18388
   3a040:	003c3900 	call	3c390 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   3a044:	d1201617 	ldw	r4,-32680(gp)
   3a048:	d0e01717 	ldw	r3,-32676(gp)
   3a04c:	d0a01817 	ldw	r2,-32672(gp)
   3a050:	180b883a 	mov	r5,r3
   3a054:	100d883a 	mov	r6,r2
   3a058:	00302bc0 	call	302bc <main>
   3a05c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3a060:	01000044 	movi	r4,1
   3a064:	0039afc0 	call	39afc <close>
  exit (result);
   3a068:	e13fff17 	ldw	r4,-4(fp)
   3a06c:	003c3a40 	call	3c3a4 <exit>

0003a070 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   3a070:	defffe04 	addi	sp,sp,-8
   3a074:	df000115 	stw	fp,4(sp)
   3a078:	df000104 	addi	fp,sp,4
   3a07c:	e13fff15 	stw	r4,-4(fp)
}
   3a080:	e037883a 	mov	sp,fp
   3a084:	df000017 	ldw	fp,0(sp)
   3a088:	dec00104 	addi	sp,sp,4
   3a08c:	f800283a 	ret

0003a090 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   3a090:	defffe04 	addi	sp,sp,-8
   3a094:	df000115 	stw	fp,4(sp)
   3a098:	df000104 	addi	fp,sp,4
   3a09c:	e13fff15 	stw	r4,-4(fp)
}
   3a0a0:	e037883a 	mov	sp,fp
   3a0a4:	df000017 	ldw	fp,0(sp)
   3a0a8:	dec00104 	addi	sp,sp,4
   3a0ac:	f800283a 	ret

0003a0b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a0b0:	defffe04 	addi	sp,sp,-8
   3a0b4:	dfc00115 	stw	ra,4(sp)
   3a0b8:	df000015 	stw	fp,0(sp)
   3a0bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3a0c0:	00800034 	movhi	r2,0
   3a0c4:	10876804 	addi	r2,r2,7584
   3a0c8:	10800017 	ldw	r2,0(r2)
   3a0cc:	10000526 	beq	r2,zero,3a0e4 <alt_get_errno+0x34>
   3a0d0:	00800034 	movhi	r2,0
   3a0d4:	10876804 	addi	r2,r2,7584
   3a0d8:	10800017 	ldw	r2,0(r2)
   3a0dc:	103ee83a 	callr	r2
   3a0e0:	00000206 	br	3a0ec <alt_get_errno+0x3c>
   3a0e4:	00800034 	movhi	r2,0
   3a0e8:	10877304 	addi	r2,r2,7628
}
   3a0ec:	e037883a 	mov	sp,fp
   3a0f0:	dfc00117 	ldw	ra,4(sp)
   3a0f4:	df000017 	ldw	fp,0(sp)
   3a0f8:	dec00204 	addi	sp,sp,8
   3a0fc:	f800283a 	ret

0003a100 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3a100:	defff904 	addi	sp,sp,-28
   3a104:	dfc00615 	stw	ra,24(sp)
   3a108:	df000515 	stw	fp,20(sp)
   3a10c:	df000504 	addi	fp,sp,20
   3a110:	e13ffd15 	stw	r4,-12(fp)
   3a114:	e17ffe15 	stw	r5,-8(fp)
   3a118:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a11c:	e0bffd17 	ldw	r2,-12(fp)
   3a120:	10000716 	blt	r2,zero,3a140 <read+0x40>
   3a124:	e13ffd17 	ldw	r4,-12(fp)
   3a128:	01400304 	movi	r5,12
   3a12c:	00394480 	call	39448 <__mulsi3>
   3a130:	00c00034 	movhi	r3,0
   3a134:	18c2e604 	addi	r3,r3,2968
   3a138:	10c5883a 	add	r2,r2,r3
   3a13c:	00000106 	br	3a144 <read+0x44>
   3a140:	0005883a 	mov	r2,zero
   3a144:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3a148:	e0bffb17 	ldw	r2,-20(fp)
   3a14c:	10002026 	beq	r2,zero,3a1d0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a150:	e0bffb17 	ldw	r2,-20(fp)
   3a154:	10800217 	ldw	r2,8(r2)
   3a158:	108000cc 	andi	r2,r2,3
   3a15c:	10800060 	cmpeqi	r2,r2,1
   3a160:	1000171e 	bne	r2,zero,3a1c0 <read+0xc0>
        (fd->dev->read))
   3a164:	e0bffb17 	ldw	r2,-20(fp)
   3a168:	10800017 	ldw	r2,0(r2)
   3a16c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   3a170:	10001326 	beq	r2,zero,3a1c0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   3a174:	e0bffb17 	ldw	r2,-20(fp)
   3a178:	10800017 	ldw	r2,0(r2)
   3a17c:	10c00517 	ldw	r3,20(r2)
   3a180:	e0bfff17 	ldw	r2,-4(fp)
   3a184:	e13ffb17 	ldw	r4,-20(fp)
   3a188:	e17ffe17 	ldw	r5,-8(fp)
   3a18c:	100d883a 	mov	r6,r2
   3a190:	183ee83a 	callr	r3
   3a194:	e0bffc15 	stw	r2,-16(fp)
   3a198:	e0bffc17 	ldw	r2,-16(fp)
   3a19c:	1000060e 	bge	r2,zero,3a1b8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   3a1a0:	003a0b00 	call	3a0b0 <alt_get_errno>
   3a1a4:	e0fffc17 	ldw	r3,-16(fp)
   3a1a8:	00c7c83a 	sub	r3,zero,r3
   3a1ac:	10c00015 	stw	r3,0(r2)
          return -1;
   3a1b0:	00bfffc4 	movi	r2,-1
   3a1b4:	00000a06 	br	3a1e0 <read+0xe0>
        }
        return rval;
   3a1b8:	e0bffc17 	ldw	r2,-16(fp)
   3a1bc:	00000806 	br	3a1e0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   3a1c0:	003a0b00 	call	3a0b0 <alt_get_errno>
   3a1c4:	00c00344 	movi	r3,13
   3a1c8:	10c00015 	stw	r3,0(r2)
   3a1cc:	00000306 	br	3a1dc <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   3a1d0:	003a0b00 	call	3a0b0 <alt_get_errno>
   3a1d4:	00c01444 	movi	r3,81
   3a1d8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   3a1dc:	00bfffc4 	movi	r2,-1
}
   3a1e0:	e037883a 	mov	sp,fp
   3a1e4:	dfc00117 	ldw	ra,4(sp)
   3a1e8:	df000017 	ldw	fp,0(sp)
   3a1ec:	dec00204 	addi	sp,sp,8
   3a1f0:	f800283a 	ret

0003a1f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   3a1f4:	defffc04 	addi	sp,sp,-16
   3a1f8:	dfc00315 	stw	ra,12(sp)
   3a1fc:	df000215 	stw	fp,8(sp)
   3a200:	dc000115 	stw	r16,4(sp)
   3a204:	df000104 	addi	fp,sp,4
   3a208:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   3a20c:	e0bfff17 	ldw	r2,-4(fp)
   3a210:	108000d0 	cmplti	r2,r2,3
   3a214:	1000111e 	bne	r2,zero,3a25c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   3a218:	04000034 	movhi	r16,0
   3a21c:	8402e604 	addi	r16,r16,2968
   3a220:	e0bfff17 	ldw	r2,-4(fp)
   3a224:	1009883a 	mov	r4,r2
   3a228:	01400304 	movi	r5,12
   3a22c:	00394480 	call	39448 <__mulsi3>
   3a230:	8085883a 	add	r2,r16,r2
   3a234:	10800204 	addi	r2,r2,8
   3a238:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3a23c:	04000034 	movhi	r16,0
   3a240:	8402e604 	addi	r16,r16,2968
   3a244:	e0bfff17 	ldw	r2,-4(fp)
   3a248:	1009883a 	mov	r4,r2
   3a24c:	01400304 	movi	r5,12
   3a250:	00394480 	call	39448 <__mulsi3>
   3a254:	8085883a 	add	r2,r16,r2
   3a258:	10000015 	stw	zero,0(r2)
  }
}
   3a25c:	e037883a 	mov	sp,fp
   3a260:	dfc00217 	ldw	ra,8(sp)
   3a264:	df000117 	ldw	fp,4(sp)
   3a268:	dc000017 	ldw	r16,0(sp)
   3a26c:	dec00304 	addi	sp,sp,12
   3a270:	f800283a 	ret

0003a274 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   3a274:	defff904 	addi	sp,sp,-28
   3a278:	df000615 	stw	fp,24(sp)
   3a27c:	df000604 	addi	fp,sp,24
   3a280:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3a284:	0005303a 	rdctl	r2,status
   3a288:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3a28c:	e0fffc17 	ldw	r3,-16(fp)
   3a290:	00bfff84 	movi	r2,-2
   3a294:	1884703a 	and	r2,r3,r2
   3a298:	1001703a 	wrctl	status,r2
  
  return context;
   3a29c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   3a2a0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   3a2a4:	d0a00b17 	ldw	r2,-32724(gp)
   3a2a8:	10c000c4 	addi	r3,r2,3
   3a2ac:	00bfff04 	movi	r2,-4
   3a2b0:	1884703a 	and	r2,r3,r2
   3a2b4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   3a2b8:	d0e00b17 	ldw	r3,-32724(gp)
   3a2bc:	e0bfff17 	ldw	r2,-4(fp)
   3a2c0:	1885883a 	add	r2,r3,r2
   3a2c4:	00c000b4 	movhi	r3,2
   3a2c8:	18c00004 	addi	r3,r3,0
   3a2cc:	1880062e 	bgeu	r3,r2,3a2e8 <sbrk+0x74>
   3a2d0:	e0bffa17 	ldw	r2,-24(fp)
   3a2d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3a2d8:	e0bffd17 	ldw	r2,-12(fp)
   3a2dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   3a2e0:	00bfffc4 	movi	r2,-1
   3a2e4:	00000b06 	br	3a314 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   3a2e8:	d0a00b17 	ldw	r2,-32724(gp)
   3a2ec:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   3a2f0:	d0e00b17 	ldw	r3,-32724(gp)
   3a2f4:	e0bfff17 	ldw	r2,-4(fp)
   3a2f8:	1885883a 	add	r2,r3,r2
   3a2fc:	d0a00b15 	stw	r2,-32724(gp)
   3a300:	e0bffa17 	ldw	r2,-24(fp)
   3a304:	e0bffe15 	stw	r2,-8(fp)
   3a308:	e0bffe17 	ldw	r2,-8(fp)
   3a30c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   3a310:	e0bffb17 	ldw	r2,-20(fp)
} 
   3a314:	e037883a 	mov	sp,fp
   3a318:	df000017 	ldw	fp,0(sp)
   3a31c:	dec00104 	addi	sp,sp,4
   3a320:	f800283a 	ret

0003a324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3a324:	defffe04 	addi	sp,sp,-8
   3a328:	dfc00115 	stw	ra,4(sp)
   3a32c:	df000015 	stw	fp,0(sp)
   3a330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3a334:	00800034 	movhi	r2,0
   3a338:	10876804 	addi	r2,r2,7584
   3a33c:	10800017 	ldw	r2,0(r2)
   3a340:	10000526 	beq	r2,zero,3a358 <alt_get_errno+0x34>
   3a344:	00800034 	movhi	r2,0
   3a348:	10876804 	addi	r2,r2,7584
   3a34c:	10800017 	ldw	r2,0(r2)
   3a350:	103ee83a 	callr	r2
   3a354:	00000206 	br	3a360 <alt_get_errno+0x3c>
   3a358:	00800034 	movhi	r2,0
   3a35c:	10877304 	addi	r2,r2,7628
}
   3a360:	e037883a 	mov	sp,fp
   3a364:	dfc00117 	ldw	ra,4(sp)
   3a368:	df000017 	ldw	fp,0(sp)
   3a36c:	dec00204 	addi	sp,sp,8
   3a370:	f800283a 	ret

0003a374 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3a374:	defff904 	addi	sp,sp,-28
   3a378:	dfc00615 	stw	ra,24(sp)
   3a37c:	df000515 	stw	fp,20(sp)
   3a380:	df000504 	addi	fp,sp,20
   3a384:	e13ffd15 	stw	r4,-12(fp)
   3a388:	e17ffe15 	stw	r5,-8(fp)
   3a38c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3a390:	e0bffd17 	ldw	r2,-12(fp)
   3a394:	10000716 	blt	r2,zero,3a3b4 <write+0x40>
   3a398:	e13ffd17 	ldw	r4,-12(fp)
   3a39c:	01400304 	movi	r5,12
   3a3a0:	00394480 	call	39448 <__mulsi3>
   3a3a4:	00c00034 	movhi	r3,0
   3a3a8:	18c2e604 	addi	r3,r3,2968
   3a3ac:	10c5883a 	add	r2,r2,r3
   3a3b0:	00000106 	br	3a3b8 <write+0x44>
   3a3b4:	0005883a 	mov	r2,zero
   3a3b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3a3bc:	e0bffb17 	ldw	r2,-20(fp)
   3a3c0:	10001f26 	beq	r2,zero,3a440 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3a3c4:	e0bffb17 	ldw	r2,-20(fp)
   3a3c8:	10800217 	ldw	r2,8(r2)
   3a3cc:	108000cc 	andi	r2,r2,3
   3a3d0:	10001726 	beq	r2,zero,3a430 <write+0xbc>
   3a3d4:	e0bffb17 	ldw	r2,-20(fp)
   3a3d8:	10800017 	ldw	r2,0(r2)
   3a3dc:	10800617 	ldw	r2,24(r2)
   3a3e0:	10001326 	beq	r2,zero,3a430 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3a3e4:	e0bffb17 	ldw	r2,-20(fp)
   3a3e8:	10800017 	ldw	r2,0(r2)
   3a3ec:	10c00617 	ldw	r3,24(r2)
   3a3f0:	e0bfff17 	ldw	r2,-4(fp)
   3a3f4:	e13ffb17 	ldw	r4,-20(fp)
   3a3f8:	e17ffe17 	ldw	r5,-8(fp)
   3a3fc:	100d883a 	mov	r6,r2
   3a400:	183ee83a 	callr	r3
   3a404:	e0bffc15 	stw	r2,-16(fp)
   3a408:	e0bffc17 	ldw	r2,-16(fp)
   3a40c:	1000060e 	bge	r2,zero,3a428 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   3a410:	003a3240 	call	3a324 <alt_get_errno>
   3a414:	e0fffc17 	ldw	r3,-16(fp)
   3a418:	00c7c83a 	sub	r3,zero,r3
   3a41c:	10c00015 	stw	r3,0(r2)
        return -1;
   3a420:	00bfffc4 	movi	r2,-1
   3a424:	00000a06 	br	3a450 <write+0xdc>
      }
      return rval;
   3a428:	e0bffc17 	ldw	r2,-16(fp)
   3a42c:	00000806 	br	3a450 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3a430:	003a3240 	call	3a324 <alt_get_errno>
   3a434:	00c00344 	movi	r3,13
   3a438:	10c00015 	stw	r3,0(r2)
   3a43c:	00000306 	br	3a44c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   3a440:	003a3240 	call	3a324 <alt_get_errno>
   3a444:	00c01444 	movi	r3,81
   3a448:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   3a44c:	00bfffc4 	movi	r2,-1
}
   3a450:	e037883a 	mov	sp,fp
   3a454:	dfc00117 	ldw	ra,4(sp)
   3a458:	df000017 	ldw	fp,0(sp)
   3a45c:	dec00204 	addi	sp,sp,8
   3a460:	f800283a 	ret

0003a464 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   3a464:	defffd04 	addi	sp,sp,-12
   3a468:	dfc00215 	stw	ra,8(sp)
   3a46c:	df000115 	stw	fp,4(sp)
   3a470:	df000104 	addi	fp,sp,4
   3a474:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   3a478:	e13fff17 	ldw	r4,-4(fp)
   3a47c:	01400034 	movhi	r5,0
   3a480:	29476504 	addi	r5,r5,7572
   3a484:	003b7300 	call	3b730 <alt_dev_llist_insert>
}
   3a488:	e037883a 	mov	sp,fp
   3a48c:	dfc00117 	ldw	ra,4(sp)
   3a490:	df000017 	ldw	fp,0(sp)
   3a494:	dec00204 	addi	sp,sp,8
   3a498:	f800283a 	ret

0003a49c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   3a49c:	defffd04 	addi	sp,sp,-12
   3a4a0:	dfc00215 	stw	ra,8(sp)
   3a4a4:	df000115 	stw	fp,4(sp)
   3a4a8:	df000104 	addi	fp,sp,4
   3a4ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   3a4b0:	003c0f80 	call	3c0f8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   3a4b4:	00800044 	movi	r2,1
   3a4b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   3a4bc:	e037883a 	mov	sp,fp
   3a4c0:	dfc00117 	ldw	ra,4(sp)
   3a4c4:	df000017 	ldw	fp,0(sp)
   3a4c8:	dec00204 	addi	sp,sp,8
   3a4cc:	f800283a 	ret

0003a4d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   3a4d0:	defffe04 	addi	sp,sp,-8
   3a4d4:	dfc00115 	stw	ra,4(sp)
   3a4d8:	df000015 	stw	fp,0(sp)
   3a4dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   3a4e0:	01000134 	movhi	r4,4
   3a4e4:	21040804 	addi	r4,r4,4128
   3a4e8:	000b883a 	mov	r5,zero
   3a4ec:	000d883a 	mov	r6,zero
   3a4f0:	01c0fa04 	movi	r7,1000
   3a4f4:	003b4fc0 	call	3b4fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_MEM, fifo_mem);
   3a4f8:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART0, jtag_uart0);
   3a4fc:	01000034 	movhi	r4,0
   3a500:	21035004 	addi	r4,r4,3392
   3a504:	000b883a 	mov	r5,zero
   3a508:	01800044 	movi	r6,1
   3a50c:	003ab880 	call	3ab88 <altera_avalon_jtag_uart_init>
   3a510:	01000034 	movhi	r4,0
   3a514:	21034604 	addi	r4,r4,3352
   3a518:	003a4640 	call	3a464 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysId);
   3a51c:	0001883a 	nop
}
   3a520:	e037883a 	mov	sp,fp
   3a524:	dfc00117 	ldw	ra,4(sp)
   3a528:	df000017 	ldw	fp,0(sp)
   3a52c:	dec00204 	addi	sp,sp,8
   3a530:	f800283a 	ret

0003a534 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   3a534:	defffa04 	addi	sp,sp,-24
   3a538:	dfc00515 	stw	ra,20(sp)
   3a53c:	df000415 	stw	fp,16(sp)
   3a540:	df000404 	addi	fp,sp,16
   3a544:	e13ffc15 	stw	r4,-16(fp)
   3a548:	e17ffd15 	stw	r5,-12(fp)
   3a54c:	e1bffe15 	stw	r6,-8(fp)
   3a550:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   3a554:	e13ffc17 	ldw	r4,-16(fp)
   3a558:	01400fc4 	movi	r5,63
   3a55c:	003a7000 	call	3a700 <altera_avalon_fifo_clear_event>
   3a560:	10000226 	beq	r2,zero,3a56c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   3a564:	00bfffc4 	movi	r2,-1
   3a568:	00001306 	br	3a5b8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   3a56c:	e13ffc17 	ldw	r4,-16(fp)
   3a570:	e17ffd17 	ldw	r5,-12(fp)
   3a574:	003a75c0 	call	3a75c <altera_avalon_fifo_write_ienable>
   3a578:	10000226 	beq	r2,zero,3a584 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   3a57c:	00bfff84 	movi	r2,-2
   3a580:	00000d06 	br	3a5b8 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   3a584:	e13ffc17 	ldw	r4,-16(fp)
   3a588:	e17fff17 	ldw	r5,-4(fp)
   3a58c:	003a7b40 	call	3a7b4 <altera_avalon_fifo_write_almostfull>
   3a590:	10000226 	beq	r2,zero,3a59c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a594:	00bfff44 	movi	r2,-3
   3a598:	00000706 	br	3a5b8 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   3a59c:	e13ffc17 	ldw	r4,-16(fp)
   3a5a0:	e17ffe17 	ldw	r5,-8(fp)
   3a5a4:	003a80c0 	call	3a80c <altera_avalon_fifo_write_almostempty>
   3a5a8:	10000226 	beq	r2,zero,3a5b4 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a5ac:	00bfff44 	movi	r2,-3
   3a5b0:	00000106 	br	3a5b8 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   3a5b4:	0005883a 	mov	r2,zero
}
   3a5b8:	e037883a 	mov	sp,fp
   3a5bc:	dfc00117 	ldw	ra,4(sp)
   3a5c0:	df000017 	ldw	fp,0(sp)
   3a5c4:	dec00204 	addi	sp,sp,8
   3a5c8:	f800283a 	ret

0003a5cc <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   3a5cc:	defffd04 	addi	sp,sp,-12
   3a5d0:	df000215 	stw	fp,8(sp)
   3a5d4:	df000204 	addi	fp,sp,8
   3a5d8:	e13ffe15 	stw	r4,-8(fp)
   3a5dc:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   3a5e0:	e0bffe17 	ldw	r2,-8(fp)
   3a5e4:	10800104 	addi	r2,r2,4
   3a5e8:	10800037 	ldwio	r2,0(r2)
   3a5ec:	1007883a 	mov	r3,r2
   3a5f0:	e0bfff17 	ldw	r2,-4(fp)
   3a5f4:	1884703a 	and	r2,r3,r2
}
   3a5f8:	e037883a 	mov	sp,fp
   3a5fc:	df000017 	ldw	fp,0(sp)
   3a600:	dec00104 	addi	sp,sp,4
   3a604:	f800283a 	ret

0003a608 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   3a608:	defffd04 	addi	sp,sp,-12
   3a60c:	df000215 	stw	fp,8(sp)
   3a610:	df000204 	addi	fp,sp,8
   3a614:	e13ffe15 	stw	r4,-8(fp)
   3a618:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   3a61c:	e0bffe17 	ldw	r2,-8(fp)
   3a620:	10800304 	addi	r2,r2,12
   3a624:	10800037 	ldwio	r2,0(r2)
   3a628:	1007883a 	mov	r3,r2
   3a62c:	e0bfff17 	ldw	r2,-4(fp)
   3a630:	1884703a 	and	r2,r3,r2
}
   3a634:	e037883a 	mov	sp,fp
   3a638:	df000017 	ldw	fp,0(sp)
   3a63c:	dec00104 	addi	sp,sp,4
   3a640:	f800283a 	ret

0003a644 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   3a644:	defffe04 	addi	sp,sp,-8
   3a648:	df000115 	stw	fp,4(sp)
   3a64c:	df000104 	addi	fp,sp,4
   3a650:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   3a654:	e0bfff17 	ldw	r2,-4(fp)
   3a658:	10800404 	addi	r2,r2,16
   3a65c:	10800037 	ldwio	r2,0(r2)
}
   3a660:	e037883a 	mov	sp,fp
   3a664:	df000017 	ldw	fp,0(sp)
   3a668:	dec00104 	addi	sp,sp,4
   3a66c:	f800283a 	ret

0003a670 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   3a670:	defffe04 	addi	sp,sp,-8
   3a674:	df000115 	stw	fp,4(sp)
   3a678:	df000104 	addi	fp,sp,4
   3a67c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   3a680:	e0bfff17 	ldw	r2,-4(fp)
   3a684:	10800504 	addi	r2,r2,20
   3a688:	10800037 	ldwio	r2,0(r2)
}
   3a68c:	e037883a 	mov	sp,fp
   3a690:	df000017 	ldw	fp,0(sp)
   3a694:	dec00104 	addi	sp,sp,4
   3a698:	f800283a 	ret

0003a69c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   3a69c:	defffd04 	addi	sp,sp,-12
   3a6a0:	df000215 	stw	fp,8(sp)
   3a6a4:	df000204 	addi	fp,sp,8
   3a6a8:	e13ffe15 	stw	r4,-8(fp)
   3a6ac:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   3a6b0:	e0bffe17 	ldw	r2,-8(fp)
   3a6b4:	10800204 	addi	r2,r2,8
   3a6b8:	10800037 	ldwio	r2,0(r2)
   3a6bc:	1007883a 	mov	r3,r2
   3a6c0:	e0bfff17 	ldw	r2,-4(fp)
   3a6c4:	1884703a 	and	r2,r3,r2
}
   3a6c8:	e037883a 	mov	sp,fp
   3a6cc:	df000017 	ldw	fp,0(sp)
   3a6d0:	dec00104 	addi	sp,sp,4
   3a6d4:	f800283a 	ret

0003a6d8 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   3a6d8:	defffe04 	addi	sp,sp,-8
   3a6dc:	df000115 	stw	fp,4(sp)
   3a6e0:	df000104 	addi	fp,sp,4
   3a6e4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   3a6e8:	e0bfff17 	ldw	r2,-4(fp)
   3a6ec:	10800037 	ldwio	r2,0(r2)
}
   3a6f0:	e037883a 	mov	sp,fp
   3a6f4:	df000017 	ldw	fp,0(sp)
   3a6f8:	dec00104 	addi	sp,sp,4
   3a6fc:	f800283a 	ret

0003a700 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   3a700:	defffd04 	addi	sp,sp,-12
   3a704:	df000215 	stw	fp,8(sp)
   3a708:	df000204 	addi	fp,sp,8
   3a70c:	e13ffe15 	stw	r4,-8(fp)
   3a710:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   3a714:	e0bffe17 	ldw	r2,-8(fp)
   3a718:	10800204 	addi	r2,r2,8
   3a71c:	e0ffff17 	ldw	r3,-4(fp)
   3a720:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   3a724:	e0bffe17 	ldw	r2,-8(fp)
   3a728:	10800204 	addi	r2,r2,8
   3a72c:	10800037 	ldwio	r2,0(r2)
   3a730:	1007883a 	mov	r3,r2
   3a734:	e0bfff17 	ldw	r2,-4(fp)
   3a738:	1884703a 	and	r2,r3,r2
   3a73c:	1000021e 	bne	r2,zero,3a748 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   3a740:	0005883a 	mov	r2,zero
   3a744:	00000106 	br	3a74c <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   3a748:	00bfffc4 	movi	r2,-1
}
   3a74c:	e037883a 	mov	sp,fp
   3a750:	df000017 	ldw	fp,0(sp)
   3a754:	dec00104 	addi	sp,sp,4
   3a758:	f800283a 	ret

0003a75c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   3a75c:	defffd04 	addi	sp,sp,-12
   3a760:	df000215 	stw	fp,8(sp)
   3a764:	df000204 	addi	fp,sp,8
   3a768:	e13ffe15 	stw	r4,-8(fp)
   3a76c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   3a770:	e0bffe17 	ldw	r2,-8(fp)
   3a774:	10800304 	addi	r2,r2,12
   3a778:	e0ffff17 	ldw	r3,-4(fp)
   3a77c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   3a780:	e0bffe17 	ldw	r2,-8(fp)
   3a784:	10800304 	addi	r2,r2,12
   3a788:	10800037 	ldwio	r2,0(r2)
   3a78c:	1007883a 	mov	r3,r2
   3a790:	e0bfff17 	ldw	r2,-4(fp)
   3a794:	1880021e 	bne	r3,r2,3a7a0 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   3a798:	0005883a 	mov	r2,zero
   3a79c:	00000106 	br	3a7a4 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   3a7a0:	00bfff84 	movi	r2,-2
}
   3a7a4:	e037883a 	mov	sp,fp
   3a7a8:	df000017 	ldw	fp,0(sp)
   3a7ac:	dec00104 	addi	sp,sp,4
   3a7b0:	f800283a 	ret

0003a7b4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   3a7b4:	defffd04 	addi	sp,sp,-12
   3a7b8:	df000215 	stw	fp,8(sp)
   3a7bc:	df000204 	addi	fp,sp,8
   3a7c0:	e13ffe15 	stw	r4,-8(fp)
   3a7c4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   3a7c8:	e0bffe17 	ldw	r2,-8(fp)
   3a7cc:	10800404 	addi	r2,r2,16
   3a7d0:	e0ffff17 	ldw	r3,-4(fp)
   3a7d4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   3a7d8:	e0bffe17 	ldw	r2,-8(fp)
   3a7dc:	10800404 	addi	r2,r2,16
   3a7e0:	10800037 	ldwio	r2,0(r2)
   3a7e4:	1007883a 	mov	r3,r2
   3a7e8:	e0bfff17 	ldw	r2,-4(fp)
   3a7ec:	1880021e 	bne	r3,r2,3a7f8 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   3a7f0:	0005883a 	mov	r2,zero
   3a7f4:	00000106 	br	3a7fc <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a7f8:	00bfff44 	movi	r2,-3
}
   3a7fc:	e037883a 	mov	sp,fp
   3a800:	df000017 	ldw	fp,0(sp)
   3a804:	dec00104 	addi	sp,sp,4
   3a808:	f800283a 	ret

0003a80c <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   3a80c:	defffd04 	addi	sp,sp,-12
   3a810:	df000215 	stw	fp,8(sp)
   3a814:	df000204 	addi	fp,sp,8
   3a818:	e13ffe15 	stw	r4,-8(fp)
   3a81c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   3a820:	e0bffe17 	ldw	r2,-8(fp)
   3a824:	10800504 	addi	r2,r2,20
   3a828:	e0ffff17 	ldw	r3,-4(fp)
   3a82c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   3a830:	e0bffe17 	ldw	r2,-8(fp)
   3a834:	10800504 	addi	r2,r2,20
   3a838:	10800037 	ldwio	r2,0(r2)
   3a83c:	1007883a 	mov	r3,r2
   3a840:	e0bfff17 	ldw	r2,-4(fp)
   3a844:	1880021e 	bne	r3,r2,3a850 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   3a848:	0005883a 	mov	r2,zero
   3a84c:	00000106 	br	3a854 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   3a850:	00bfff44 	movi	r2,-3
}
   3a854:	e037883a 	mov	sp,fp
   3a858:	df000017 	ldw	fp,0(sp)
   3a85c:	dec00104 	addi	sp,sp,4
   3a860:	f800283a 	ret

0003a864 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   3a864:	defffb04 	addi	sp,sp,-20
   3a868:	dfc00415 	stw	ra,16(sp)
   3a86c:	df000315 	stw	fp,12(sp)
   3a870:	df000304 	addi	fp,sp,12
   3a874:	e13ffd15 	stw	r4,-12(fp)
   3a878:	e17ffe15 	stw	r5,-8(fp)
   3a87c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   3a880:	e13ffe17 	ldw	r4,-8(fp)
   3a884:	01400044 	movi	r5,1
   3a888:	003a5cc0 	call	3a5cc <altera_avalon_fifo_read_status>
   3a88c:	1000051e 	bne	r2,zero,3a8a4 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   3a890:	e0bffd17 	ldw	r2,-12(fp)
   3a894:	e0ffff17 	ldw	r3,-4(fp)
   3a898:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   3a89c:	0005883a 	mov	r2,zero
   3a8a0:	00000106 	br	3a8a8 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   3a8a4:	00bfff04 	movi	r2,-4
    }
}
   3a8a8:	e037883a 	mov	sp,fp
   3a8ac:	dfc00117 	ldw	ra,4(sp)
   3a8b0:	df000017 	ldw	fp,0(sp)
   3a8b4:	dec00204 	addi	sp,sp,8
   3a8b8:	f800283a 	ret

0003a8bc <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   3a8bc:	defffa04 	addi	sp,sp,-24
   3a8c0:	dfc00515 	stw	ra,20(sp)
   3a8c4:	df000415 	stw	fp,16(sp)
   3a8c8:	df000404 	addi	fp,sp,16
   3a8cc:	e13ffd15 	stw	r4,-12(fp)
   3a8d0:	e17ffe15 	stw	r5,-8(fp)
   3a8d4:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   3a8d8:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   3a8dc:	e0bfff17 	ldw	r2,-4(fp)
   3a8e0:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   3a8e4:	e13ffe17 	ldw	r4,-8(fp)
   3a8e8:	01400084 	movi	r5,2
   3a8ec:	003a5cc0 	call	3a5cc <altera_avalon_fifo_read_status>
   3a8f0:	1000071e 	bne	r2,zero,3a910 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   3a8f4:	e13ffe17 	ldw	r4,-8(fp)
   3a8f8:	003a6d80 	call	3a6d8 <altera_avalon_fifo_read_level>
   3a8fc:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   3a900:	e0bffd17 	ldw	r2,-12(fp)
   3a904:	10c00037 	ldwio	r3,0(r2)
   3a908:	e0bfff17 	ldw	r2,-4(fp)
   3a90c:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   3a910:	e0bffc17 	ldw	r2,-16(fp)
}
   3a914:	e037883a 	mov	sp,fp
   3a918:	dfc00117 	ldw	ra,4(sp)
   3a91c:	df000017 	ldw	fp,0(sp)
   3a920:	dec00204 	addi	sp,sp,8
   3a924:	f800283a 	ret

0003a928 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   3a928:	defffc04 	addi	sp,sp,-16
   3a92c:	dfc00315 	stw	ra,12(sp)
   3a930:	df000215 	stw	fp,8(sp)
   3a934:	df000204 	addi	fp,sp,8
   3a938:	e13ffe15 	stw	r4,-8(fp)
   3a93c:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   3a940:	e13fff17 	ldw	r4,-4(fp)
   3a944:	01400084 	movi	r5,2
   3a948:	003a5cc0 	call	3a5cc <altera_avalon_fifo_read_status>
   3a94c:	1000031e 	bne	r2,zero,3a95c <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   3a950:	e0bffe17 	ldw	r2,-8(fp)
   3a954:	10800037 	ldwio	r2,0(r2)
   3a958:	00000106 	br	3a960 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   3a95c:	0005883a 	mov	r2,zero
}
   3a960:	e037883a 	mov	sp,fp
   3a964:	dfc00117 	ldw	ra,4(sp)
   3a968:	df000017 	ldw	fp,0(sp)
   3a96c:	dec00204 	addi	sp,sp,8
   3a970:	f800283a 	ret

0003a974 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   3a974:	defffb04 	addi	sp,sp,-20
   3a978:	dfc00415 	stw	ra,16(sp)
   3a97c:	df000315 	stw	fp,12(sp)
   3a980:	df000304 	addi	fp,sp,12
   3a984:	e13ffd15 	stw	r4,-12(fp)
   3a988:	e17ffe15 	stw	r5,-8(fp)
   3a98c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   3a990:	e13ffe17 	ldw	r4,-8(fp)
   3a994:	01400044 	movi	r5,1
   3a998:	003a5cc0 	call	3a5cc <altera_avalon_fifo_read_status>
   3a99c:	1000061e 	bne	r2,zero,3a9b8 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   3a9a0:	e0bffd17 	ldw	r2,-12(fp)
   3a9a4:	10800104 	addi	r2,r2,4
   3a9a8:	e0ffff17 	ldw	r3,-4(fp)
   3a9ac:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   3a9b0:	0005883a 	mov	r2,zero
   3a9b4:	00000106 	br	3a9bc <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   3a9b8:	00bfff04 	movi	r2,-4
    }
}
   3a9bc:	e037883a 	mov	sp,fp
   3a9c0:	dfc00117 	ldw	ra,4(sp)
   3a9c4:	df000017 	ldw	fp,0(sp)
   3a9c8:	dec00204 	addi	sp,sp,8
   3a9cc:	f800283a 	ret

0003a9d0 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   3a9d0:	defffe04 	addi	sp,sp,-8
   3a9d4:	df000115 	stw	fp,4(sp)
   3a9d8:	df000104 	addi	fp,sp,4
   3a9dc:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   3a9e0:	e0bfff17 	ldw	r2,-4(fp)
   3a9e4:	10800104 	addi	r2,r2,4
   3a9e8:	10800037 	ldwio	r2,0(r2)
}
   3a9ec:	e037883a 	mov	sp,fp
   3a9f0:	df000017 	ldw	fp,0(sp)
   3a9f4:	dec00104 	addi	sp,sp,4
   3a9f8:	f800283a 	ret

0003a9fc <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   3a9fc:	defffe04 	addi	sp,sp,-8
   3aa00:	df000115 	stw	fp,4(sp)
   3aa04:	df000104 	addi	fp,sp,4
   3aa08:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   3aa0c:	e0bfff17 	ldw	r2,-4(fp)
   3aa10:	10800037 	ldwio	r2,0(r2)
}
   3aa14:	e037883a 	mov	sp,fp
   3aa18:	df000017 	ldw	fp,0(sp)
   3aa1c:	dec00104 	addi	sp,sp,4
   3aa20:	f800283a 	ret

0003aa24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   3aa24:	defffa04 	addi	sp,sp,-24
   3aa28:	dfc00515 	stw	ra,20(sp)
   3aa2c:	df000415 	stw	fp,16(sp)
   3aa30:	df000404 	addi	fp,sp,16
   3aa34:	e13ffd15 	stw	r4,-12(fp)
   3aa38:	e17ffe15 	stw	r5,-8(fp)
   3aa3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3aa40:	e0bffd17 	ldw	r2,-12(fp)
   3aa44:	10800017 	ldw	r2,0(r2)
   3aa48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3aa4c:	e0bffc17 	ldw	r2,-16(fp)
   3aa50:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   3aa54:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3aa58:	10800217 	ldw	r2,8(r2)
   3aa5c:	1809883a 	mov	r4,r3
   3aa60:	e17ffe17 	ldw	r5,-8(fp)
   3aa64:	e1bfff17 	ldw	r6,-4(fp)
   3aa68:	100f883a 	mov	r7,r2
   3aa6c:	003b04c0 	call	3b04c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   3aa70:	e037883a 	mov	sp,fp
   3aa74:	dfc00117 	ldw	ra,4(sp)
   3aa78:	df000017 	ldw	fp,0(sp)
   3aa7c:	dec00204 	addi	sp,sp,8
   3aa80:	f800283a 	ret

0003aa84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   3aa84:	defffa04 	addi	sp,sp,-24
   3aa88:	dfc00515 	stw	ra,20(sp)
   3aa8c:	df000415 	stw	fp,16(sp)
   3aa90:	df000404 	addi	fp,sp,16
   3aa94:	e13ffd15 	stw	r4,-12(fp)
   3aa98:	e17ffe15 	stw	r5,-8(fp)
   3aa9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3aaa0:	e0bffd17 	ldw	r2,-12(fp)
   3aaa4:	10800017 	ldw	r2,0(r2)
   3aaa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3aaac:	e0bffc17 	ldw	r2,-16(fp)
   3aab0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   3aab4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3aab8:	10800217 	ldw	r2,8(r2)
   3aabc:	1809883a 	mov	r4,r3
   3aac0:	e17ffe17 	ldw	r5,-8(fp)
   3aac4:	e1bfff17 	ldw	r6,-4(fp)
   3aac8:	100f883a 	mov	r7,r2
   3aacc:	003b2640 	call	3b264 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   3aad0:	e037883a 	mov	sp,fp
   3aad4:	dfc00117 	ldw	ra,4(sp)
   3aad8:	df000017 	ldw	fp,0(sp)
   3aadc:	dec00204 	addi	sp,sp,8
   3aae0:	f800283a 	ret

0003aae4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   3aae4:	defffc04 	addi	sp,sp,-16
   3aae8:	dfc00315 	stw	ra,12(sp)
   3aaec:	df000215 	stw	fp,8(sp)
   3aaf0:	df000204 	addi	fp,sp,8
   3aaf4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3aaf8:	e0bfff17 	ldw	r2,-4(fp)
   3aafc:	10800017 	ldw	r2,0(r2)
   3ab00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   3ab04:	e0bffe17 	ldw	r2,-8(fp)
   3ab08:	10c00a04 	addi	r3,r2,40
   3ab0c:	e0bfff17 	ldw	r2,-4(fp)
   3ab10:	10800217 	ldw	r2,8(r2)
   3ab14:	1809883a 	mov	r4,r3
   3ab18:	100b883a 	mov	r5,r2
   3ab1c:	003aef00 	call	3aef0 <altera_avalon_jtag_uart_close>
}
   3ab20:	e037883a 	mov	sp,fp
   3ab24:	dfc00117 	ldw	ra,4(sp)
   3ab28:	df000017 	ldw	fp,0(sp)
   3ab2c:	dec00204 	addi	sp,sp,8
   3ab30:	f800283a 	ret

0003ab34 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   3ab34:	defffa04 	addi	sp,sp,-24
   3ab38:	dfc00515 	stw	ra,20(sp)
   3ab3c:	df000415 	stw	fp,16(sp)
   3ab40:	df000404 	addi	fp,sp,16
   3ab44:	e13ffd15 	stw	r4,-12(fp)
   3ab48:	e17ffe15 	stw	r5,-8(fp)
   3ab4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   3ab50:	e0bffd17 	ldw	r2,-12(fp)
   3ab54:	10800017 	ldw	r2,0(r2)
   3ab58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   3ab5c:	e0bffc17 	ldw	r2,-16(fp)
   3ab60:	10800a04 	addi	r2,r2,40
   3ab64:	1009883a 	mov	r4,r2
   3ab68:	e17ffe17 	ldw	r5,-8(fp)
   3ab6c:	e1bfff17 	ldw	r6,-4(fp)
   3ab70:	003af580 	call	3af58 <altera_avalon_jtag_uart_ioctl>
}
   3ab74:	e037883a 	mov	sp,fp
   3ab78:	dfc00117 	ldw	ra,4(sp)
   3ab7c:	df000017 	ldw	fp,0(sp)
   3ab80:	dec00204 	addi	sp,sp,8
   3ab84:	f800283a 	ret

0003ab88 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   3ab88:	defffa04 	addi	sp,sp,-24
   3ab8c:	dfc00515 	stw	ra,20(sp)
   3ab90:	df000415 	stw	fp,16(sp)
   3ab94:	df000404 	addi	fp,sp,16
   3ab98:	e13ffd15 	stw	r4,-12(fp)
   3ab9c:	e17ffe15 	stw	r5,-8(fp)
   3aba0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3aba4:	e0bffd17 	ldw	r2,-12(fp)
   3aba8:	00c00044 	movi	r3,1
   3abac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   3abb0:	e0bffd17 	ldw	r2,-12(fp)
   3abb4:	10800017 	ldw	r2,0(r2)
   3abb8:	10800104 	addi	r2,r2,4
   3abbc:	e0fffd17 	ldw	r3,-12(fp)
   3abc0:	18c00817 	ldw	r3,32(r3)
   3abc4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   3abc8:	e0fffe17 	ldw	r3,-8(fp)
   3abcc:	e0bfff17 	ldw	r2,-4(fp)
   3abd0:	d8000015 	stw	zero,0(sp)
   3abd4:	1809883a 	mov	r4,r3
   3abd8:	100b883a 	mov	r5,r2
   3abdc:	01800134 	movhi	r6,4
   3abe0:	31ab1204 	addi	r6,r6,-21432
   3abe4:	e1fffd17 	ldw	r7,-12(fp)
   3abe8:	003b8a40 	call	3b8a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   3abec:	e0bffd17 	ldw	r2,-12(fp)
   3abf0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   3abf4:	e0bffd17 	ldw	r2,-12(fp)
   3abf8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3abfc:	00800034 	movhi	r2,0
   3ac00:	10877804 	addi	r2,r2,7648
   3ac04:	10800017 	ldw	r2,0(r2)
   3ac08:	1809883a 	mov	r4,r3
   3ac0c:	100b883a 	mov	r5,r2
   3ac10:	01800134 	movhi	r6,4
   3ac14:	31ab9304 	addi	r6,r6,-20916
   3ac18:	e1fffd17 	ldw	r7,-12(fp)
   3ac1c:	003b5840 	call	3b584 <alt_alarm_start>
   3ac20:	1000040e 	bge	r2,zero,3ac34 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   3ac24:	e0bffd17 	ldw	r2,-12(fp)
   3ac28:	00e00034 	movhi	r3,32768
   3ac2c:	18ffffc4 	addi	r3,r3,-1
   3ac30:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   3ac34:	e037883a 	mov	sp,fp
   3ac38:	dfc00117 	ldw	ra,4(sp)
   3ac3c:	df000017 	ldw	fp,0(sp)
   3ac40:	dec00204 	addi	sp,sp,8
   3ac44:	f800283a 	ret

0003ac48 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   3ac48:	defff804 	addi	sp,sp,-32
   3ac4c:	df000715 	stw	fp,28(sp)
   3ac50:	df000704 	addi	fp,sp,28
   3ac54:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   3ac58:	e0bfff17 	ldw	r2,-4(fp)
   3ac5c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   3ac60:	e0bffb17 	ldw	r2,-20(fp)
   3ac64:	10800017 	ldw	r2,0(r2)
   3ac68:	e0bffc15 	stw	r2,-16(fp)
   3ac6c:	00000106 	br	3ac74 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   3ac70:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ac74:	e0bffc17 	ldw	r2,-16(fp)
   3ac78:	10800104 	addi	r2,r2,4
   3ac7c:	10800037 	ldwio	r2,0(r2)
   3ac80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   3ac84:	e0bffd17 	ldw	r2,-12(fp)
   3ac88:	1080c00c 	andi	r2,r2,768
   3ac8c:	10006a26 	beq	r2,zero,3ae38 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   3ac90:	e0bffd17 	ldw	r2,-12(fp)
   3ac94:	1080400c 	andi	r2,r2,256
   3ac98:	10003326 	beq	r2,zero,3ad68 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   3ac9c:	00800074 	movhi	r2,1
   3aca0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3aca4:	e0bffb17 	ldw	r2,-20(fp)
   3aca8:	10800a17 	ldw	r2,40(r2)
   3acac:	10800044 	addi	r2,r2,1
   3acb0:	1081ffcc 	andi	r2,r2,2047
   3acb4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   3acb8:	e0bffb17 	ldw	r2,-20(fp)
   3acbc:	10c00b17 	ldw	r3,44(r2)
   3acc0:	e0bffe17 	ldw	r2,-8(fp)
   3acc4:	18801426 	beq	r3,r2,3ad18 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   3acc8:	e0bffc17 	ldw	r2,-16(fp)
   3accc:	10800037 	ldwio	r2,0(r2)
   3acd0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   3acd4:	e0bff917 	ldw	r2,-28(fp)
   3acd8:	10a0000c 	andi	r2,r2,32768
   3acdc:	10001026 	beq	r2,zero,3ad20 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   3ace0:	e0bffb17 	ldw	r2,-20(fp)
   3ace4:	10800a17 	ldw	r2,40(r2)
   3ace8:	e0fff917 	ldw	r3,-28(fp)
   3acec:	e13ffb17 	ldw	r4,-20(fp)
   3acf0:	2085883a 	add	r2,r4,r2
   3acf4:	10800e04 	addi	r2,r2,56
   3acf8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3acfc:	e0bffb17 	ldw	r2,-20(fp)
   3ad00:	10800a17 	ldw	r2,40(r2)
   3ad04:	10800044 	addi	r2,r2,1
   3ad08:	10c1ffcc 	andi	r3,r2,2047
   3ad0c:	e0bffb17 	ldw	r2,-20(fp)
   3ad10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   3ad14:	003fe306 	br	3aca4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   3ad18:	0001883a 	nop
   3ad1c:	00000106 	br	3ad24 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   3ad20:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   3ad24:	e0bff917 	ldw	r2,-28(fp)
   3ad28:	10bfffec 	andhi	r2,r2,65535
   3ad2c:	10000e26 	beq	r2,zero,3ad68 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3ad30:	e0bffb17 	ldw	r2,-20(fp)
   3ad34:	10c00817 	ldw	r3,32(r2)
   3ad38:	00bfff84 	movi	r2,-2
   3ad3c:	1886703a 	and	r3,r3,r2
   3ad40:	e0bffb17 	ldw	r2,-20(fp)
   3ad44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   3ad48:	e0bffc17 	ldw	r2,-16(fp)
   3ad4c:	10800104 	addi	r2,r2,4
   3ad50:	e0fffb17 	ldw	r3,-20(fp)
   3ad54:	18c00817 	ldw	r3,32(r3)
   3ad58:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ad5c:	e0bffc17 	ldw	r2,-16(fp)
   3ad60:	10800104 	addi	r2,r2,4
   3ad64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3ad68:	e0bffd17 	ldw	r2,-12(fp)
   3ad6c:	1080800c 	andi	r2,r2,512
   3ad70:	103fbf26 	beq	r2,zero,3ac70 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   3ad74:	e0bffd17 	ldw	r2,-12(fp)
   3ad78:	1004d43a 	srli	r2,r2,16
   3ad7c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   3ad80:	00001406 	br	3add4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   3ad84:	e0bffc17 	ldw	r2,-16(fp)
   3ad88:	e0fffb17 	ldw	r3,-20(fp)
   3ad8c:	18c00d17 	ldw	r3,52(r3)
   3ad90:	e13ffb17 	ldw	r4,-20(fp)
   3ad94:	20c7883a 	add	r3,r4,r3
   3ad98:	18c20e04 	addi	r3,r3,2104
   3ad9c:	18c00003 	ldbu	r3,0(r3)
   3ada0:	18c03fcc 	andi	r3,r3,255
   3ada4:	18c0201c 	xori	r3,r3,128
   3ada8:	18ffe004 	addi	r3,r3,-128
   3adac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3adb0:	e0bffb17 	ldw	r2,-20(fp)
   3adb4:	10800d17 	ldw	r2,52(r2)
   3adb8:	10800044 	addi	r2,r2,1
   3adbc:	10c1ffcc 	andi	r3,r2,2047
   3adc0:	e0bffb17 	ldw	r2,-20(fp)
   3adc4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   3adc8:	e0bffa17 	ldw	r2,-24(fp)
   3adcc:	10bfffc4 	addi	r2,r2,-1
   3add0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   3add4:	e0bffa17 	ldw	r2,-24(fp)
   3add8:	10000526 	beq	r2,zero,3adf0 <altera_avalon_jtag_uart_irq+0x1a8>
   3addc:	e0bffb17 	ldw	r2,-20(fp)
   3ade0:	10c00d17 	ldw	r3,52(r2)
   3ade4:	e0bffb17 	ldw	r2,-20(fp)
   3ade8:	10800c17 	ldw	r2,48(r2)
   3adec:	18bfe51e 	bne	r3,r2,3ad84 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   3adf0:	e0bffa17 	ldw	r2,-24(fp)
   3adf4:	103f9e26 	beq	r2,zero,3ac70 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3adf8:	e0bffb17 	ldw	r2,-20(fp)
   3adfc:	10c00817 	ldw	r3,32(r2)
   3ae00:	00bfff44 	movi	r2,-3
   3ae04:	1886703a 	and	r3,r3,r2
   3ae08:	e0bffb17 	ldw	r2,-20(fp)
   3ae0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3ae10:	e0bffb17 	ldw	r2,-20(fp)
   3ae14:	10800017 	ldw	r2,0(r2)
   3ae18:	10800104 	addi	r2,r2,4
   3ae1c:	e0fffb17 	ldw	r3,-20(fp)
   3ae20:	18c00817 	ldw	r3,32(r3)
   3ae24:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3ae28:	e0bffc17 	ldw	r2,-16(fp)
   3ae2c:	10800104 	addi	r2,r2,4
   3ae30:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   3ae34:	003f8e06 	br	3ac70 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   3ae38:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   3ae3c:	e037883a 	mov	sp,fp
   3ae40:	df000017 	ldw	fp,0(sp)
   3ae44:	dec00104 	addi	sp,sp,4
   3ae48:	f800283a 	ret

0003ae4c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   3ae4c:	defffc04 	addi	sp,sp,-16
   3ae50:	df000315 	stw	fp,12(sp)
   3ae54:	df000304 	addi	fp,sp,12
   3ae58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   3ae5c:	e0bfff17 	ldw	r2,-4(fp)
   3ae60:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3ae64:	e0bffd17 	ldw	r2,-12(fp)
   3ae68:	10800017 	ldw	r2,0(r2)
   3ae6c:	10800104 	addi	r2,r2,4
   3ae70:	10800037 	ldwio	r2,0(r2)
   3ae74:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   3ae78:	e0bffe17 	ldw	r2,-8(fp)
   3ae7c:	1081000c 	andi	r2,r2,1024
   3ae80:	10000a26 	beq	r2,zero,3aeac <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   3ae84:	e0bffd17 	ldw	r2,-12(fp)
   3ae88:	10800017 	ldw	r2,0(r2)
   3ae8c:	10800104 	addi	r2,r2,4
   3ae90:	e0fffd17 	ldw	r3,-12(fp)
   3ae94:	18c00817 	ldw	r3,32(r3)
   3ae98:	18c10014 	ori	r3,r3,1024
   3ae9c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   3aea0:	e0bffd17 	ldw	r2,-12(fp)
   3aea4:	10000915 	stw	zero,36(r2)
   3aea8:	00000a06 	br	3aed4 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   3aeac:	e0bffd17 	ldw	r2,-12(fp)
   3aeb0:	10800917 	ldw	r2,36(r2)
   3aeb4:	00e00034 	movhi	r3,32768
   3aeb8:	18ffff04 	addi	r3,r3,-4
   3aebc:	18800536 	bltu	r3,r2,3aed4 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   3aec0:	e0bffd17 	ldw	r2,-12(fp)
   3aec4:	10800917 	ldw	r2,36(r2)
   3aec8:	10c00044 	addi	r3,r2,1
   3aecc:	e0bffd17 	ldw	r2,-12(fp)
   3aed0:	10c00915 	stw	r3,36(r2)
   3aed4:	00800034 	movhi	r2,0
   3aed8:	10877804 	addi	r2,r2,7648
   3aedc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   3aee0:	e037883a 	mov	sp,fp
   3aee4:	df000017 	ldw	fp,0(sp)
   3aee8:	dec00104 	addi	sp,sp,4
   3aeec:	f800283a 	ret

0003aef0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   3aef0:	defffd04 	addi	sp,sp,-12
   3aef4:	df000215 	stw	fp,8(sp)
   3aef8:	df000204 	addi	fp,sp,8
   3aefc:	e13ffe15 	stw	r4,-8(fp)
   3af00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3af04:	00000506 	br	3af1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   3af08:	e0bfff17 	ldw	r2,-4(fp)
   3af0c:	1090000c 	andi	r2,r2,16384
   3af10:	10000226 	beq	r2,zero,3af1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3af14:	00bffd44 	movi	r2,-11
   3af18:	00000b06 	br	3af48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3af1c:	e0bffe17 	ldw	r2,-8(fp)
   3af20:	10c00d17 	ldw	r3,52(r2)
   3af24:	e0bffe17 	ldw	r2,-8(fp)
   3af28:	10800c17 	ldw	r2,48(r2)
   3af2c:	18800526 	beq	r3,r2,3af44 <altera_avalon_jtag_uart_close+0x54>
   3af30:	e0bffe17 	ldw	r2,-8(fp)
   3af34:	10c00917 	ldw	r3,36(r2)
   3af38:	e0bffe17 	ldw	r2,-8(fp)
   3af3c:	10800117 	ldw	r2,4(r2)
   3af40:	18bff136 	bltu	r3,r2,3af08 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3af44:	0005883a 	mov	r2,zero
}
   3af48:	e037883a 	mov	sp,fp
   3af4c:	df000017 	ldw	fp,0(sp)
   3af50:	dec00104 	addi	sp,sp,4
   3af54:	f800283a 	ret

0003af58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3af58:	defffa04 	addi	sp,sp,-24
   3af5c:	df000515 	stw	fp,20(sp)
   3af60:	df000504 	addi	fp,sp,20
   3af64:	e13ffd15 	stw	r4,-12(fp)
   3af68:	e17ffe15 	stw	r5,-8(fp)
   3af6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   3af70:	00bff9c4 	movi	r2,-25
   3af74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   3af78:	e0bffe17 	ldw	r2,-8(fp)
   3af7c:	10da8060 	cmpeqi	r3,r2,27137
   3af80:	1800031e 	bne	r3,zero,3af90 <altera_avalon_jtag_uart_ioctl+0x38>
   3af84:	109a80a0 	cmpeqi	r2,r2,27138
   3af88:	1000181e 	bne	r2,zero,3afec <altera_avalon_jtag_uart_ioctl+0x94>
   3af8c:	00002606 	br	3b028 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   3af90:	e0bffd17 	ldw	r2,-12(fp)
   3af94:	10c00117 	ldw	r3,4(r2)
   3af98:	00a00034 	movhi	r2,32768
   3af9c:	10bfffc4 	addi	r2,r2,-1
   3afa0:	18802226 	beq	r3,r2,3b02c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   3afa4:	e0bfff17 	ldw	r2,-4(fp)
   3afa8:	10800017 	ldw	r2,0(r2)
   3afac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   3afb0:	e0bffc17 	ldw	r2,-16(fp)
   3afb4:	10800090 	cmplti	r2,r2,2
   3afb8:	1000061e 	bne	r2,zero,3afd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   3afbc:	e0fffc17 	ldw	r3,-16(fp)
   3afc0:	00a00034 	movhi	r2,32768
   3afc4:	10bfffc4 	addi	r2,r2,-1
   3afc8:	18800226 	beq	r3,r2,3afd4 <altera_avalon_jtag_uart_ioctl+0x7c>
   3afcc:	e0bffc17 	ldw	r2,-16(fp)
   3afd0:	00000206 	br	3afdc <altera_avalon_jtag_uart_ioctl+0x84>
   3afd4:	00a00034 	movhi	r2,32768
   3afd8:	10bfff84 	addi	r2,r2,-2
   3afdc:	e0fffd17 	ldw	r3,-12(fp)
   3afe0:	18800115 	stw	r2,4(r3)
      rc = 0;
   3afe4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3afe8:	00001006 	br	3b02c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   3afec:	e0bffd17 	ldw	r2,-12(fp)
   3aff0:	10c00117 	ldw	r3,4(r2)
   3aff4:	00a00034 	movhi	r2,32768
   3aff8:	10bfffc4 	addi	r2,r2,-1
   3affc:	18800d26 	beq	r3,r2,3b034 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   3b000:	e0bffd17 	ldw	r2,-12(fp)
   3b004:	10c00917 	ldw	r3,36(r2)
   3b008:	e0bffd17 	ldw	r2,-12(fp)
   3b00c:	10800117 	ldw	r2,4(r2)
   3b010:	1885803a 	cmpltu	r2,r3,r2
   3b014:	10c03fcc 	andi	r3,r2,255
   3b018:	e0bfff17 	ldw	r2,-4(fp)
   3b01c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   3b020:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3b024:	00000306 	br	3b034 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   3b028:	00000306 	br	3b038 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   3b02c:	0001883a 	nop
   3b030:	00000106 	br	3b038 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   3b034:	0001883a 	nop

  default:
    break;
  }

  return rc;
   3b038:	e0bffb17 	ldw	r2,-20(fp)
}
   3b03c:	e037883a 	mov	sp,fp
   3b040:	df000017 	ldw	fp,0(sp)
   3b044:	dec00104 	addi	sp,sp,4
   3b048:	f800283a 	ret

0003b04c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3b04c:	defff304 	addi	sp,sp,-52
   3b050:	dfc00c15 	stw	ra,48(sp)
   3b054:	df000b15 	stw	fp,44(sp)
   3b058:	df000b04 	addi	fp,sp,44
   3b05c:	e13ffc15 	stw	r4,-16(fp)
   3b060:	e17ffd15 	stw	r5,-12(fp)
   3b064:	e1bffe15 	stw	r6,-8(fp)
   3b068:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   3b06c:	e0bffd17 	ldw	r2,-12(fp)
   3b070:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3b074:	00004706 	br	3b194 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3b078:	e0bffc17 	ldw	r2,-16(fp)
   3b07c:	10800a17 	ldw	r2,40(r2)
   3b080:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   3b084:	e0bffc17 	ldw	r2,-16(fp)
   3b088:	10800b17 	ldw	r2,44(r2)
   3b08c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   3b090:	e0fff717 	ldw	r3,-36(fp)
   3b094:	e0bff817 	ldw	r2,-32(fp)
   3b098:	18800536 	bltu	r3,r2,3b0b0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   3b09c:	e0fff717 	ldw	r3,-36(fp)
   3b0a0:	e0bff817 	ldw	r2,-32(fp)
   3b0a4:	1885c83a 	sub	r2,r3,r2
   3b0a8:	e0bff615 	stw	r2,-40(fp)
   3b0ac:	00000406 	br	3b0c0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   3b0b0:	00c20004 	movi	r3,2048
   3b0b4:	e0bff817 	ldw	r2,-32(fp)
   3b0b8:	1885c83a 	sub	r2,r3,r2
   3b0bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3b0c0:	e0bff617 	ldw	r2,-40(fp)
   3b0c4:	10001e26 	beq	r2,zero,3b140 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   3b0c8:	e0fffe17 	ldw	r3,-8(fp)
   3b0cc:	e0bff617 	ldw	r2,-40(fp)
   3b0d0:	1880022e 	bgeu	r3,r2,3b0dc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   3b0d4:	e0bffe17 	ldw	r2,-8(fp)
   3b0d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   3b0dc:	e0bff817 	ldw	r2,-32(fp)
   3b0e0:	10800e04 	addi	r2,r2,56
   3b0e4:	e0fffc17 	ldw	r3,-16(fp)
   3b0e8:	1885883a 	add	r2,r3,r2
   3b0ec:	e13ff517 	ldw	r4,-44(fp)
   3b0f0:	100b883a 	mov	r5,r2
   3b0f4:	e1bff617 	ldw	r6,-40(fp)
   3b0f8:	00358300 	call	35830 <memcpy>
      ptr   += n;
   3b0fc:	e0fff517 	ldw	r3,-44(fp)
   3b100:	e0bff617 	ldw	r2,-40(fp)
   3b104:	1885883a 	add	r2,r3,r2
   3b108:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   3b10c:	e0fffe17 	ldw	r3,-8(fp)
   3b110:	e0bff617 	ldw	r2,-40(fp)
   3b114:	1885c83a 	sub	r2,r3,r2
   3b118:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b11c:	e0fff817 	ldw	r3,-32(fp)
   3b120:	e0bff617 	ldw	r2,-40(fp)
   3b124:	1885883a 	add	r2,r3,r2
   3b128:	10c1ffcc 	andi	r3,r2,2047
   3b12c:	e0bffc17 	ldw	r2,-16(fp)
   3b130:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   3b134:	e0bffe17 	ldw	r2,-8(fp)
   3b138:	00bfcf16 	blt	zero,r2,3b078 <altera_avalon_jtag_uart_read+0x2c>
   3b13c:	00000106 	br	3b144 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   3b140:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   3b144:	e0fff517 	ldw	r3,-44(fp)
   3b148:	e0bffd17 	ldw	r2,-12(fp)
   3b14c:	1880141e 	bne	r3,r2,3b1a0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   3b150:	e0bfff17 	ldw	r2,-4(fp)
   3b154:	1090000c 	andi	r2,r2,16384
   3b158:	1000131e 	bne	r2,zero,3b1a8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3b15c:	0001883a 	nop
   3b160:	e0bffc17 	ldw	r2,-16(fp)
   3b164:	10c00a17 	ldw	r3,40(r2)
   3b168:	e0bff717 	ldw	r2,-36(fp)
   3b16c:	1880051e 	bne	r3,r2,3b184 <altera_avalon_jtag_uart_read+0x138>
   3b170:	e0bffc17 	ldw	r2,-16(fp)
   3b174:	10c00917 	ldw	r3,36(r2)
   3b178:	e0bffc17 	ldw	r2,-16(fp)
   3b17c:	10800117 	ldw	r2,4(r2)
   3b180:	18bff736 	bltu	r3,r2,3b160 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   3b184:	e0bffc17 	ldw	r2,-16(fp)
   3b188:	10c00a17 	ldw	r3,40(r2)
   3b18c:	e0bff717 	ldw	r2,-36(fp)
   3b190:	18800726 	beq	r3,r2,3b1b0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   3b194:	e0bffe17 	ldw	r2,-8(fp)
   3b198:	00bfb716 	blt	zero,r2,3b078 <altera_avalon_jtag_uart_read+0x2c>
   3b19c:	00000506 	br	3b1b4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   3b1a0:	0001883a 	nop
   3b1a4:	00000306 	br	3b1b4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   3b1a8:	0001883a 	nop
   3b1ac:	00000106 	br	3b1b4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   3b1b0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   3b1b4:	e0fff517 	ldw	r3,-44(fp)
   3b1b8:	e0bffd17 	ldw	r2,-12(fp)
   3b1bc:	18801726 	beq	r3,r2,3b21c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b1c0:	0005303a 	rdctl	r2,status
   3b1c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b1c8:	e0fffa17 	ldw	r3,-24(fp)
   3b1cc:	00bfff84 	movi	r2,-2
   3b1d0:	1884703a 	and	r2,r3,r2
   3b1d4:	1001703a 	wrctl	status,r2
  
  return context;
   3b1d8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   3b1dc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3b1e0:	e0bffc17 	ldw	r2,-16(fp)
   3b1e4:	10800817 	ldw	r2,32(r2)
   3b1e8:	10c00054 	ori	r3,r2,1
   3b1ec:	e0bffc17 	ldw	r2,-16(fp)
   3b1f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b1f4:	e0bffc17 	ldw	r2,-16(fp)
   3b1f8:	10800017 	ldw	r2,0(r2)
   3b1fc:	10800104 	addi	r2,r2,4
   3b200:	e0fffc17 	ldw	r3,-16(fp)
   3b204:	18c00817 	ldw	r3,32(r3)
   3b208:	10c00035 	stwio	r3,0(r2)
   3b20c:	e0bff917 	ldw	r2,-28(fp)
   3b210:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b214:	e0bffb17 	ldw	r2,-20(fp)
   3b218:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   3b21c:	e0fff517 	ldw	r3,-44(fp)
   3b220:	e0bffd17 	ldw	r2,-12(fp)
   3b224:	18800426 	beq	r3,r2,3b238 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   3b228:	e0fff517 	ldw	r3,-44(fp)
   3b22c:	e0bffd17 	ldw	r2,-12(fp)
   3b230:	1885c83a 	sub	r2,r3,r2
   3b234:	00000606 	br	3b250 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   3b238:	e0bfff17 	ldw	r2,-4(fp)
   3b23c:	1090000c 	andi	r2,r2,16384
   3b240:	10000226 	beq	r2,zero,3b24c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   3b244:	00bffd44 	movi	r2,-11
   3b248:	00000106 	br	3b250 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   3b24c:	00bffec4 	movi	r2,-5
}
   3b250:	e037883a 	mov	sp,fp
   3b254:	dfc00117 	ldw	ra,4(sp)
   3b258:	df000017 	ldw	fp,0(sp)
   3b25c:	dec00204 	addi	sp,sp,8
   3b260:	f800283a 	ret

0003b264 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   3b264:	defff304 	addi	sp,sp,-52
   3b268:	dfc00c15 	stw	ra,48(sp)
   3b26c:	df000b15 	stw	fp,44(sp)
   3b270:	df000b04 	addi	fp,sp,44
   3b274:	e13ffc15 	stw	r4,-16(fp)
   3b278:	e17ffd15 	stw	r5,-12(fp)
   3b27c:	e1bffe15 	stw	r6,-8(fp)
   3b280:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   3b284:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   3b288:	e0bffd17 	ldw	r2,-12(fp)
   3b28c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b290:	00003706 	br	3b370 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   3b294:	e0bffc17 	ldw	r2,-16(fp)
   3b298:	10800c17 	ldw	r2,48(r2)
   3b29c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   3b2a0:	e0bffc17 	ldw	r2,-16(fp)
   3b2a4:	10800d17 	ldw	r2,52(r2)
   3b2a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   3b2ac:	e0fff817 	ldw	r3,-32(fp)
   3b2b0:	e0bff517 	ldw	r2,-44(fp)
   3b2b4:	1880062e 	bgeu	r3,r2,3b2d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   3b2b8:	e0fff517 	ldw	r3,-44(fp)
   3b2bc:	e0bff817 	ldw	r2,-32(fp)
   3b2c0:	1885c83a 	sub	r2,r3,r2
   3b2c4:	10bfffc4 	addi	r2,r2,-1
   3b2c8:	e0bff615 	stw	r2,-40(fp)
   3b2cc:	00000b06 	br	3b2fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   3b2d0:	e0bff517 	ldw	r2,-44(fp)
   3b2d4:	10000526 	beq	r2,zero,3b2ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   3b2d8:	00c20004 	movi	r3,2048
   3b2dc:	e0bff817 	ldw	r2,-32(fp)
   3b2e0:	1885c83a 	sub	r2,r3,r2
   3b2e4:	e0bff615 	stw	r2,-40(fp)
   3b2e8:	00000406 	br	3b2fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   3b2ec:	00c1ffc4 	movi	r3,2047
   3b2f0:	e0bff817 	ldw	r2,-32(fp)
   3b2f4:	1885c83a 	sub	r2,r3,r2
   3b2f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3b2fc:	e0bff617 	ldw	r2,-40(fp)
   3b300:	10001e26 	beq	r2,zero,3b37c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   3b304:	e0fffe17 	ldw	r3,-8(fp)
   3b308:	e0bff617 	ldw	r2,-40(fp)
   3b30c:	1880022e 	bgeu	r3,r2,3b318 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   3b310:	e0bffe17 	ldw	r2,-8(fp)
   3b314:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   3b318:	e0bff817 	ldw	r2,-32(fp)
   3b31c:	10820e04 	addi	r2,r2,2104
   3b320:	e0fffc17 	ldw	r3,-16(fp)
   3b324:	1885883a 	add	r2,r3,r2
   3b328:	1009883a 	mov	r4,r2
   3b32c:	e17ffd17 	ldw	r5,-12(fp)
   3b330:	e1bff617 	ldw	r6,-40(fp)
   3b334:	00358300 	call	35830 <memcpy>
      ptr   += n;
   3b338:	e0fffd17 	ldw	r3,-12(fp)
   3b33c:	e0bff617 	ldw	r2,-40(fp)
   3b340:	1885883a 	add	r2,r3,r2
   3b344:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   3b348:	e0fffe17 	ldw	r3,-8(fp)
   3b34c:	e0bff617 	ldw	r2,-40(fp)
   3b350:	1885c83a 	sub	r2,r3,r2
   3b354:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3b358:	e0fff817 	ldw	r3,-32(fp)
   3b35c:	e0bff617 	ldw	r2,-40(fp)
   3b360:	1885883a 	add	r2,r3,r2
   3b364:	10c1ffcc 	andi	r3,r2,2047
   3b368:	e0bffc17 	ldw	r2,-16(fp)
   3b36c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3b370:	e0bffe17 	ldw	r2,-8(fp)
   3b374:	00bfc716 	blt	zero,r2,3b294 <altera_avalon_jtag_uart_write+0x30>
   3b378:	00000106 	br	3b380 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   3b37c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b380:	0005303a 	rdctl	r2,status
   3b384:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b388:	e0fffa17 	ldw	r3,-24(fp)
   3b38c:	00bfff84 	movi	r2,-2
   3b390:	1884703a 	and	r2,r3,r2
   3b394:	1001703a 	wrctl	status,r2
  
  return context;
   3b398:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   3b39c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3b3a0:	e0bffc17 	ldw	r2,-16(fp)
   3b3a4:	10800817 	ldw	r2,32(r2)
   3b3a8:	10c00094 	ori	r3,r2,2
   3b3ac:	e0bffc17 	ldw	r2,-16(fp)
   3b3b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3b3b4:	e0bffc17 	ldw	r2,-16(fp)
   3b3b8:	10800017 	ldw	r2,0(r2)
   3b3bc:	10800104 	addi	r2,r2,4
   3b3c0:	e0fffc17 	ldw	r3,-16(fp)
   3b3c4:	18c00817 	ldw	r3,32(r3)
   3b3c8:	10c00035 	stwio	r3,0(r2)
   3b3cc:	e0bff917 	ldw	r2,-28(fp)
   3b3d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b3d4:	e0bffb17 	ldw	r2,-20(fp)
   3b3d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   3b3dc:	e0bffe17 	ldw	r2,-8(fp)
   3b3e0:	0080110e 	bge	zero,r2,3b428 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   3b3e4:	e0bfff17 	ldw	r2,-4(fp)
   3b3e8:	1090000c 	andi	r2,r2,16384
   3b3ec:	1000111e 	bne	r2,zero,3b434 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   3b3f0:	0001883a 	nop
   3b3f4:	e0bffc17 	ldw	r2,-16(fp)
   3b3f8:	10c00d17 	ldw	r3,52(r2)
   3b3fc:	e0bff517 	ldw	r2,-44(fp)
   3b400:	1880051e 	bne	r3,r2,3b418 <altera_avalon_jtag_uart_write+0x1b4>
   3b404:	e0bffc17 	ldw	r2,-16(fp)
   3b408:	10c00917 	ldw	r3,36(r2)
   3b40c:	e0bffc17 	ldw	r2,-16(fp)
   3b410:	10800117 	ldw	r2,4(r2)
   3b414:	18bff736 	bltu	r3,r2,3b3f4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   3b418:	e0bffc17 	ldw	r2,-16(fp)
   3b41c:	10c00d17 	ldw	r3,52(r2)
   3b420:	e0bff517 	ldw	r2,-44(fp)
   3b424:	18800526 	beq	r3,r2,3b43c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   3b428:	e0bffe17 	ldw	r2,-8(fp)
   3b42c:	00bfd016 	blt	zero,r2,3b370 <altera_avalon_jtag_uart_write+0x10c>
   3b430:	00000306 	br	3b440 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   3b434:	0001883a 	nop
   3b438:	00000106 	br	3b440 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   3b43c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   3b440:	e0fffd17 	ldw	r3,-12(fp)
   3b444:	e0bff717 	ldw	r2,-36(fp)
   3b448:	18800426 	beq	r3,r2,3b45c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   3b44c:	e0fffd17 	ldw	r3,-12(fp)
   3b450:	e0bff717 	ldw	r2,-36(fp)
   3b454:	1885c83a 	sub	r2,r3,r2
   3b458:	00000606 	br	3b474 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   3b45c:	e0bfff17 	ldw	r2,-4(fp)
   3b460:	1090000c 	andi	r2,r2,16384
   3b464:	10000226 	beq	r2,zero,3b470 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   3b468:	00bffd44 	movi	r2,-11
   3b46c:	00000106 	br	3b474 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   3b470:	00bffec4 	movi	r2,-5
}
   3b474:	e037883a 	mov	sp,fp
   3b478:	dfc00117 	ldw	ra,4(sp)
   3b47c:	df000017 	ldw	fp,0(sp)
   3b480:	dec00204 	addi	sp,sp,8
   3b484:	f800283a 	ret

0003b488 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3b488:	defffa04 	addi	sp,sp,-24
   3b48c:	dfc00515 	stw	ra,20(sp)
   3b490:	df000415 	stw	fp,16(sp)
   3b494:	df000404 	addi	fp,sp,16
   3b498:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   3b49c:	0007883a 	mov	r3,zero
   3b4a0:	e0bfff17 	ldw	r2,-4(fp)
   3b4a4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   3b4a8:	e0bfff17 	ldw	r2,-4(fp)
   3b4ac:	10800104 	addi	r2,r2,4
   3b4b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b4b4:	0005303a 	rdctl	r2,status
   3b4b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b4bc:	e0fffd17 	ldw	r3,-12(fp)
   3b4c0:	00bfff84 	movi	r2,-2
   3b4c4:	1884703a 	and	r2,r3,r2
   3b4c8:	1001703a 	wrctl	status,r2
  
  return context;
   3b4cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   3b4d0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   3b4d4:	003bff40 	call	3bff4 <alt_tick>
   3b4d8:	e0bffc17 	ldw	r2,-16(fp)
   3b4dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b4e0:	e0bffe17 	ldw	r2,-8(fp)
   3b4e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   3b4e8:	e037883a 	mov	sp,fp
   3b4ec:	dfc00117 	ldw	ra,4(sp)
   3b4f0:	df000017 	ldw	fp,0(sp)
   3b4f4:	dec00204 	addi	sp,sp,8
   3b4f8:	f800283a 	ret

0003b4fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   3b4fc:	defff804 	addi	sp,sp,-32
   3b500:	dfc00715 	stw	ra,28(sp)
   3b504:	df000615 	stw	fp,24(sp)
   3b508:	df000604 	addi	fp,sp,24
   3b50c:	e13ffc15 	stw	r4,-16(fp)
   3b510:	e17ffd15 	stw	r5,-12(fp)
   3b514:	e1bffe15 	stw	r6,-8(fp)
   3b518:	e1ffff15 	stw	r7,-4(fp)
   3b51c:	e0bfff17 	ldw	r2,-4(fp)
   3b520:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   3b524:	00800034 	movhi	r2,0
   3b528:	10877804 	addi	r2,r2,7648
   3b52c:	10800017 	ldw	r2,0(r2)
   3b530:	1000041e 	bne	r2,zero,3b544 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   3b534:	00800034 	movhi	r2,0
   3b538:	10877804 	addi	r2,r2,7648
   3b53c:	e0fffb17 	ldw	r3,-20(fp)
   3b540:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   3b544:	e0bffc17 	ldw	r2,-16(fp)
   3b548:	10800104 	addi	r2,r2,4
   3b54c:	00c001c4 	movi	r3,7
   3b550:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   3b554:	d8000015 	stw	zero,0(sp)
   3b558:	e13ffd17 	ldw	r4,-12(fp)
   3b55c:	e17ffe17 	ldw	r5,-8(fp)
   3b560:	01800134 	movhi	r6,4
   3b564:	31ad2204 	addi	r6,r6,-19320
   3b568:	e1fffc17 	ldw	r7,-16(fp)
   3b56c:	003b8a40 	call	3b8a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   3b570:	e037883a 	mov	sp,fp
   3b574:	dfc00117 	ldw	ra,4(sp)
   3b578:	df000017 	ldw	fp,0(sp)
   3b57c:	dec00204 	addi	sp,sp,8
   3b580:	f800283a 	ret

0003b584 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3b584:	defff504 	addi	sp,sp,-44
   3b588:	df000a15 	stw	fp,40(sp)
   3b58c:	df000a04 	addi	fp,sp,40
   3b590:	e13ffc15 	stw	r4,-16(fp)
   3b594:	e17ffd15 	stw	r5,-12(fp)
   3b598:	e1bffe15 	stw	r6,-8(fp)
   3b59c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   3b5a0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   3b5a4:	00800034 	movhi	r2,0
   3b5a8:	10877804 	addi	r2,r2,7648
   3b5ac:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   3b5b0:	10003f26 	beq	r2,zero,3b6b0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   3b5b4:	e0bffc17 	ldw	r2,-16(fp)
   3b5b8:	10003b26 	beq	r2,zero,3b6a8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   3b5bc:	e0bffc17 	ldw	r2,-16(fp)
   3b5c0:	e0fffe17 	ldw	r3,-8(fp)
   3b5c4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   3b5c8:	e0bffc17 	ldw	r2,-16(fp)
   3b5cc:	e0ffff17 	ldw	r3,-4(fp)
   3b5d0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b5d4:	0005303a 	rdctl	r2,status
   3b5d8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b5dc:	e0fff817 	ldw	r3,-32(fp)
   3b5e0:	00bfff84 	movi	r2,-2
   3b5e4:	1884703a 	and	r2,r3,r2
   3b5e8:	1001703a 	wrctl	status,r2
  
  return context;
   3b5ec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   3b5f0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   3b5f4:	00800034 	movhi	r2,0
   3b5f8:	10877904 	addi	r2,r2,7652
   3b5fc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   3b600:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3b604:	e0fffd17 	ldw	r3,-12(fp)
   3b608:	e0bff617 	ldw	r2,-40(fp)
   3b60c:	1885883a 	add	r2,r3,r2
   3b610:	10c00044 	addi	r3,r2,1
   3b614:	e0bffc17 	ldw	r2,-16(fp)
   3b618:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   3b61c:	e0bffc17 	ldw	r2,-16(fp)
   3b620:	10c00217 	ldw	r3,8(r2)
   3b624:	e0bff617 	ldw	r2,-40(fp)
   3b628:	1880042e 	bgeu	r3,r2,3b63c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   3b62c:	e0bffc17 	ldw	r2,-16(fp)
   3b630:	00c00044 	movi	r3,1
   3b634:	10c00405 	stb	r3,16(r2)
   3b638:	00000206 	br	3b644 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   3b63c:	e0bffc17 	ldw	r2,-16(fp)
   3b640:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   3b644:	e0bffc17 	ldw	r2,-16(fp)
   3b648:	00c00034 	movhi	r3,0
   3b64c:	18c76b04 	addi	r3,r3,7596
   3b650:	e0fff915 	stw	r3,-28(fp)
   3b654:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b658:	e0bffa17 	ldw	r2,-24(fp)
   3b65c:	e0fff917 	ldw	r3,-28(fp)
   3b660:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3b664:	e0bff917 	ldw	r2,-28(fp)
   3b668:	10c00017 	ldw	r3,0(r2)
   3b66c:	e0bffa17 	ldw	r2,-24(fp)
   3b670:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b674:	e0bff917 	ldw	r2,-28(fp)
   3b678:	10800017 	ldw	r2,0(r2)
   3b67c:	e0fffa17 	ldw	r3,-24(fp)
   3b680:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3b684:	e0bff917 	ldw	r2,-28(fp)
   3b688:	e0fffa17 	ldw	r3,-24(fp)
   3b68c:	10c00015 	stw	r3,0(r2)
   3b690:	e0bff717 	ldw	r2,-36(fp)
   3b694:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b698:	e0bffb17 	ldw	r2,-20(fp)
   3b69c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   3b6a0:	0005883a 	mov	r2,zero
   3b6a4:	00000306 	br	3b6b4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   3b6a8:	00bffa84 	movi	r2,-22
   3b6ac:	00000106 	br	3b6b4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   3b6b0:	00bfde84 	movi	r2,-134
  }
}
   3b6b4:	e037883a 	mov	sp,fp
   3b6b8:	df000017 	ldw	fp,0(sp)
   3b6bc:	dec00104 	addi	sp,sp,4
   3b6c0:	f800283a 	ret

0003b6c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   3b6c4:	deffff04 	addi	sp,sp,-4
   3b6c8:	df000015 	stw	fp,0(sp)
   3b6cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3b6d0:	e037883a 	mov	sp,fp
   3b6d4:	df000017 	ldw	fp,0(sp)
   3b6d8:	dec00104 	addi	sp,sp,4
   3b6dc:	f800283a 	ret

0003b6e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3b6e0:	defffe04 	addi	sp,sp,-8
   3b6e4:	dfc00115 	stw	ra,4(sp)
   3b6e8:	df000015 	stw	fp,0(sp)
   3b6ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3b6f0:	00800034 	movhi	r2,0
   3b6f4:	10876804 	addi	r2,r2,7584
   3b6f8:	10800017 	ldw	r2,0(r2)
   3b6fc:	10000526 	beq	r2,zero,3b714 <alt_get_errno+0x34>
   3b700:	00800034 	movhi	r2,0
   3b704:	10876804 	addi	r2,r2,7584
   3b708:	10800017 	ldw	r2,0(r2)
   3b70c:	103ee83a 	callr	r2
   3b710:	00000206 	br	3b71c <alt_get_errno+0x3c>
   3b714:	00800034 	movhi	r2,0
   3b718:	10877304 	addi	r2,r2,7628
}
   3b71c:	e037883a 	mov	sp,fp
   3b720:	dfc00117 	ldw	ra,4(sp)
   3b724:	df000017 	ldw	fp,0(sp)
   3b728:	dec00204 	addi	sp,sp,8
   3b72c:	f800283a 	ret

0003b730 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   3b730:	defffa04 	addi	sp,sp,-24
   3b734:	dfc00515 	stw	ra,20(sp)
   3b738:	df000415 	stw	fp,16(sp)
   3b73c:	df000404 	addi	fp,sp,16
   3b740:	e13ffe15 	stw	r4,-8(fp)
   3b744:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3b748:	e0bffe17 	ldw	r2,-8(fp)
   3b74c:	10000326 	beq	r2,zero,3b75c <alt_dev_llist_insert+0x2c>
   3b750:	e0bffe17 	ldw	r2,-8(fp)
   3b754:	10800217 	ldw	r2,8(r2)
   3b758:	1000051e 	bne	r2,zero,3b770 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   3b75c:	003b6e00 	call	3b6e0 <alt_get_errno>
   3b760:	00c00584 	movi	r3,22
   3b764:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   3b768:	00bffa84 	movi	r2,-22
   3b76c:	00001306 	br	3b7bc <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   3b770:	e0bffe17 	ldw	r2,-8(fp)
   3b774:	e0ffff17 	ldw	r3,-4(fp)
   3b778:	e0fffc15 	stw	r3,-16(fp)
   3b77c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3b780:	e0bffd17 	ldw	r2,-12(fp)
   3b784:	e0fffc17 	ldw	r3,-16(fp)
   3b788:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3b78c:	e0bffc17 	ldw	r2,-16(fp)
   3b790:	10c00017 	ldw	r3,0(r2)
   3b794:	e0bffd17 	ldw	r2,-12(fp)
   3b798:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3b79c:	e0bffc17 	ldw	r2,-16(fp)
   3b7a0:	10800017 	ldw	r2,0(r2)
   3b7a4:	e0fffd17 	ldw	r3,-12(fp)
   3b7a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3b7ac:	e0bffc17 	ldw	r2,-16(fp)
   3b7b0:	e0fffd17 	ldw	r3,-12(fp)
   3b7b4:	10c00015 	stw	r3,0(r2)

  return 0;  
   3b7b8:	0005883a 	mov	r2,zero
}
   3b7bc:	e037883a 	mov	sp,fp
   3b7c0:	dfc00117 	ldw	ra,4(sp)
   3b7c4:	df000017 	ldw	fp,0(sp)
   3b7c8:	dec00204 	addi	sp,sp,8
   3b7cc:	f800283a 	ret

0003b7d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   3b7d0:	defffd04 	addi	sp,sp,-12
   3b7d4:	dfc00215 	stw	ra,8(sp)
   3b7d8:	df000115 	stw	fp,4(sp)
   3b7dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b7e0:	00800134 	movhi	r2,4
   3b7e4:	10b1d804 	addi	r2,r2,-14496
   3b7e8:	e0bfff15 	stw	r2,-4(fp)
   3b7ec:	00000606 	br	3b808 <_do_ctors+0x38>
        (*ctor) (); 
   3b7f0:	e0bfff17 	ldw	r2,-4(fp)
   3b7f4:	10800017 	ldw	r2,0(r2)
   3b7f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3b7fc:	e0bfff17 	ldw	r2,-4(fp)
   3b800:	10bfff04 	addi	r2,r2,-4
   3b804:	e0bfff15 	stw	r2,-4(fp)
   3b808:	e0ffff17 	ldw	r3,-4(fp)
   3b80c:	00800134 	movhi	r2,4
   3b810:	10b1d904 	addi	r2,r2,-14492
   3b814:	18bff62e 	bgeu	r3,r2,3b7f0 <_do_ctors+0x20>
        (*ctor) (); 
}
   3b818:	e037883a 	mov	sp,fp
   3b81c:	dfc00117 	ldw	ra,4(sp)
   3b820:	df000017 	ldw	fp,0(sp)
   3b824:	dec00204 	addi	sp,sp,8
   3b828:	f800283a 	ret

0003b82c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3b82c:	defffd04 	addi	sp,sp,-12
   3b830:	dfc00215 	stw	ra,8(sp)
   3b834:	df000115 	stw	fp,4(sp)
   3b838:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b83c:	00800134 	movhi	r2,4
   3b840:	10b1d804 	addi	r2,r2,-14496
   3b844:	e0bfff15 	stw	r2,-4(fp)
   3b848:	00000606 	br	3b864 <_do_dtors+0x38>
        (*dtor) (); 
   3b84c:	e0bfff17 	ldw	r2,-4(fp)
   3b850:	10800017 	ldw	r2,0(r2)
   3b854:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3b858:	e0bfff17 	ldw	r2,-4(fp)
   3b85c:	10bfff04 	addi	r2,r2,-4
   3b860:	e0bfff15 	stw	r2,-4(fp)
   3b864:	e0ffff17 	ldw	r3,-4(fp)
   3b868:	00800134 	movhi	r2,4
   3b86c:	10b1d904 	addi	r2,r2,-14492
   3b870:	18bff62e 	bgeu	r3,r2,3b84c <_do_dtors+0x20>
        (*dtor) (); 
}
   3b874:	e037883a 	mov	sp,fp
   3b878:	dfc00117 	ldw	ra,4(sp)
   3b87c:	df000017 	ldw	fp,0(sp)
   3b880:	dec00204 	addi	sp,sp,8
   3b884:	f800283a 	ret

0003b888 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   3b888:	deffff04 	addi	sp,sp,-4
   3b88c:	df000015 	stw	fp,0(sp)
   3b890:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   3b894:	e037883a 	mov	sp,fp
   3b898:	df000017 	ldw	fp,0(sp)
   3b89c:	dec00104 	addi	sp,sp,4
   3b8a0:	f800283a 	ret

0003b8a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3b8a4:	defff904 	addi	sp,sp,-28
   3b8a8:	dfc00615 	stw	ra,24(sp)
   3b8ac:	df000515 	stw	fp,20(sp)
   3b8b0:	df000504 	addi	fp,sp,20
   3b8b4:	e13ffc15 	stw	r4,-16(fp)
   3b8b8:	e17ffd15 	stw	r5,-12(fp)
   3b8bc:	e1bffe15 	stw	r6,-8(fp)
   3b8c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   3b8c4:	e0800217 	ldw	r2,8(fp)
   3b8c8:	d8800015 	stw	r2,0(sp)
   3b8cc:	e13ffc17 	ldw	r4,-16(fp)
   3b8d0:	e17ffd17 	ldw	r5,-12(fp)
   3b8d4:	e1bffe17 	ldw	r6,-8(fp)
   3b8d8:	e1ffff17 	ldw	r7,-4(fp)
   3b8dc:	003ba7c0 	call	3ba7c <alt_iic_isr_register>
}  
   3b8e0:	e037883a 	mov	sp,fp
   3b8e4:	dfc00117 	ldw	ra,4(sp)
   3b8e8:	df000017 	ldw	fp,0(sp)
   3b8ec:	dec00204 	addi	sp,sp,8
   3b8f0:	f800283a 	ret

0003b8f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   3b8f4:	defff904 	addi	sp,sp,-28
   3b8f8:	df000615 	stw	fp,24(sp)
   3b8fc:	df000604 	addi	fp,sp,24
   3b900:	e13ffe15 	stw	r4,-8(fp)
   3b904:	e17fff15 	stw	r5,-4(fp)
   3b908:	e0bfff17 	ldw	r2,-4(fp)
   3b90c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b910:	0005303a 	rdctl	r2,status
   3b914:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b918:	e0fffb17 	ldw	r3,-20(fp)
   3b91c:	00bfff84 	movi	r2,-2
   3b920:	1884703a 	and	r2,r3,r2
   3b924:	1001703a 	wrctl	status,r2
  
  return context;
   3b928:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3b92c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   3b930:	e0bffa17 	ldw	r2,-24(fp)
   3b934:	00c00044 	movi	r3,1
   3b938:	1884983a 	sll	r2,r3,r2
   3b93c:	1007883a 	mov	r3,r2
   3b940:	00800034 	movhi	r2,0
   3b944:	10877704 	addi	r2,r2,7644
   3b948:	10800017 	ldw	r2,0(r2)
   3b94c:	1886b03a 	or	r3,r3,r2
   3b950:	00800034 	movhi	r2,0
   3b954:	10877704 	addi	r2,r2,7644
   3b958:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3b95c:	00800034 	movhi	r2,0
   3b960:	10877704 	addi	r2,r2,7644
   3b964:	10800017 	ldw	r2,0(r2)
   3b968:	100170fa 	wrctl	ienable,r2
   3b96c:	e0bffc17 	ldw	r2,-16(fp)
   3b970:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3b974:	e0bffd17 	ldw	r2,-12(fp)
   3b978:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3b97c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   3b980:	e037883a 	mov	sp,fp
   3b984:	df000017 	ldw	fp,0(sp)
   3b988:	dec00104 	addi	sp,sp,4
   3b98c:	f800283a 	ret

0003b990 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   3b990:	defff904 	addi	sp,sp,-28
   3b994:	df000615 	stw	fp,24(sp)
   3b998:	df000604 	addi	fp,sp,24
   3b99c:	e13ffe15 	stw	r4,-8(fp)
   3b9a0:	e17fff15 	stw	r5,-4(fp)
   3b9a4:	e0bfff17 	ldw	r2,-4(fp)
   3b9a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3b9ac:	0005303a 	rdctl	r2,status
   3b9b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3b9b4:	e0fffb17 	ldw	r3,-20(fp)
   3b9b8:	00bfff84 	movi	r2,-2
   3b9bc:	1884703a 	and	r2,r3,r2
   3b9c0:	1001703a 	wrctl	status,r2
  
  return context;
   3b9c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3b9c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   3b9cc:	e0bffa17 	ldw	r2,-24(fp)
   3b9d0:	00c00044 	movi	r3,1
   3b9d4:	1884983a 	sll	r2,r3,r2
   3b9d8:	0084303a 	nor	r2,zero,r2
   3b9dc:	1007883a 	mov	r3,r2
   3b9e0:	00800034 	movhi	r2,0
   3b9e4:	10877704 	addi	r2,r2,7644
   3b9e8:	10800017 	ldw	r2,0(r2)
   3b9ec:	1886703a 	and	r3,r3,r2
   3b9f0:	00800034 	movhi	r2,0
   3b9f4:	10877704 	addi	r2,r2,7644
   3b9f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3b9fc:	00800034 	movhi	r2,0
   3ba00:	10877704 	addi	r2,r2,7644
   3ba04:	10800017 	ldw	r2,0(r2)
   3ba08:	100170fa 	wrctl	ienable,r2
   3ba0c:	e0bffc17 	ldw	r2,-16(fp)
   3ba10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3ba14:	e0bffd17 	ldw	r2,-12(fp)
   3ba18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3ba1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   3ba20:	e037883a 	mov	sp,fp
   3ba24:	df000017 	ldw	fp,0(sp)
   3ba28:	dec00104 	addi	sp,sp,4
   3ba2c:	f800283a 	ret

0003ba30 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   3ba30:	defffc04 	addi	sp,sp,-16
   3ba34:	df000315 	stw	fp,12(sp)
   3ba38:	df000304 	addi	fp,sp,12
   3ba3c:	e13ffe15 	stw	r4,-8(fp)
   3ba40:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3ba44:	000530fa 	rdctl	r2,ienable
   3ba48:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   3ba4c:	e0bfff17 	ldw	r2,-4(fp)
   3ba50:	00c00044 	movi	r3,1
   3ba54:	1884983a 	sll	r2,r3,r2
   3ba58:	1007883a 	mov	r3,r2
   3ba5c:	e0bffd17 	ldw	r2,-12(fp)
   3ba60:	1884703a 	and	r2,r3,r2
   3ba64:	1004c03a 	cmpne	r2,r2,zero
   3ba68:	10803fcc 	andi	r2,r2,255
}
   3ba6c:	e037883a 	mov	sp,fp
   3ba70:	df000017 	ldw	fp,0(sp)
   3ba74:	dec00104 	addi	sp,sp,4
   3ba78:	f800283a 	ret

0003ba7c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3ba7c:	defff504 	addi	sp,sp,-44
   3ba80:	dfc00a15 	stw	ra,40(sp)
   3ba84:	df000915 	stw	fp,36(sp)
   3ba88:	df000904 	addi	fp,sp,36
   3ba8c:	e13ffc15 	stw	r4,-16(fp)
   3ba90:	e17ffd15 	stw	r5,-12(fp)
   3ba94:	e1bffe15 	stw	r6,-8(fp)
   3ba98:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   3ba9c:	00bffa84 	movi	r2,-22
   3baa0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   3baa4:	e0bffd17 	ldw	r2,-12(fp)
   3baa8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   3baac:	e0bff817 	ldw	r2,-32(fp)
   3bab0:	10800808 	cmpgei	r2,r2,32
   3bab4:	1000271e 	bne	r2,zero,3bb54 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3bab8:	0005303a 	rdctl	r2,status
   3babc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3bac0:	e0fffa17 	ldw	r3,-24(fp)
   3bac4:	00bfff84 	movi	r2,-2
   3bac8:	1884703a 	and	r2,r3,r2
   3bacc:	1001703a 	wrctl	status,r2
  
  return context;
   3bad0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   3bad4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   3bad8:	00c00034 	movhi	r3,0
   3badc:	18c78404 	addi	r3,r3,7696
   3bae0:	e0bff817 	ldw	r2,-32(fp)
   3bae4:	100490fa 	slli	r2,r2,3
   3bae8:	1885883a 	add	r2,r3,r2
   3baec:	e0fffe17 	ldw	r3,-8(fp)
   3baf0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   3baf4:	00c00034 	movhi	r3,0
   3baf8:	18c78404 	addi	r3,r3,7696
   3bafc:	e0bff817 	ldw	r2,-32(fp)
   3bb00:	100490fa 	slli	r2,r2,3
   3bb04:	1885883a 	add	r2,r3,r2
   3bb08:	10800104 	addi	r2,r2,4
   3bb0c:	e0ffff17 	ldw	r3,-4(fp)
   3bb10:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   3bb14:	e0bffe17 	ldw	r2,-8(fp)
   3bb18:	10000526 	beq	r2,zero,3bb30 <alt_iic_isr_register+0xb4>
   3bb1c:	e0bff817 	ldw	r2,-32(fp)
   3bb20:	e13ffc17 	ldw	r4,-16(fp)
   3bb24:	100b883a 	mov	r5,r2
   3bb28:	003b8f40 	call	3b8f4 <alt_ic_irq_enable>
   3bb2c:	00000406 	br	3bb40 <alt_iic_isr_register+0xc4>
   3bb30:	e0bff817 	ldw	r2,-32(fp)
   3bb34:	e13ffc17 	ldw	r4,-16(fp)
   3bb38:	100b883a 	mov	r5,r2
   3bb3c:	003b9900 	call	3b990 <alt_ic_irq_disable>
   3bb40:	e0bff715 	stw	r2,-36(fp)
   3bb44:	e0bff917 	ldw	r2,-28(fp)
   3bb48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bb4c:	e0bffb17 	ldw	r2,-20(fp)
   3bb50:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   3bb54:	e0bff717 	ldw	r2,-36(fp)
}
   3bb58:	e037883a 	mov	sp,fp
   3bb5c:	dfc00117 	ldw	ra,4(sp)
   3bb60:	df000017 	ldw	fp,0(sp)
   3bb64:	dec00204 	addi	sp,sp,8
   3bb68:	f800283a 	ret

0003bb6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   3bb6c:	defff804 	addi	sp,sp,-32
   3bb70:	dfc00715 	stw	ra,28(sp)
   3bb74:	df000615 	stw	fp,24(sp)
   3bb78:	dc000515 	stw	r16,20(sp)
   3bb7c:	df000504 	addi	fp,sp,20
   3bb80:	e13ffc15 	stw	r4,-16(fp)
   3bb84:	e17ffd15 	stw	r5,-12(fp)
   3bb88:	e1bffe15 	stw	r6,-8(fp)
   3bb8c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   3bb90:	e13ffd17 	ldw	r4,-12(fp)
   3bb94:	e17ffe17 	ldw	r5,-8(fp)
   3bb98:	e1bfff17 	ldw	r6,-4(fp)
   3bb9c:	003be040 	call	3be04 <open>
   3bba0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3bba4:	e0bffb17 	ldw	r2,-20(fp)
   3bba8:	10002216 	blt	r2,zero,3bc34 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   3bbac:	04000034 	movhi	r16,0
   3bbb0:	8402e604 	addi	r16,r16,2968
   3bbb4:	e0bffb17 	ldw	r2,-20(fp)
   3bbb8:	1009883a 	mov	r4,r2
   3bbbc:	01400304 	movi	r5,12
   3bbc0:	00394480 	call	39448 <__mulsi3>
   3bbc4:	8085883a 	add	r2,r16,r2
   3bbc8:	10c00017 	ldw	r3,0(r2)
   3bbcc:	e0bffc17 	ldw	r2,-16(fp)
   3bbd0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   3bbd4:	04000034 	movhi	r16,0
   3bbd8:	8402e604 	addi	r16,r16,2968
   3bbdc:	e0bffb17 	ldw	r2,-20(fp)
   3bbe0:	1009883a 	mov	r4,r2
   3bbe4:	01400304 	movi	r5,12
   3bbe8:	00394480 	call	39448 <__mulsi3>
   3bbec:	8085883a 	add	r2,r16,r2
   3bbf0:	10800104 	addi	r2,r2,4
   3bbf4:	10c00017 	ldw	r3,0(r2)
   3bbf8:	e0bffc17 	ldw	r2,-16(fp)
   3bbfc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   3bc00:	04000034 	movhi	r16,0
   3bc04:	8402e604 	addi	r16,r16,2968
   3bc08:	e0bffb17 	ldw	r2,-20(fp)
   3bc0c:	1009883a 	mov	r4,r2
   3bc10:	01400304 	movi	r5,12
   3bc14:	00394480 	call	39448 <__mulsi3>
   3bc18:	8085883a 	add	r2,r16,r2
   3bc1c:	10800204 	addi	r2,r2,8
   3bc20:	10c00017 	ldw	r3,0(r2)
   3bc24:	e0bffc17 	ldw	r2,-16(fp)
   3bc28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   3bc2c:	e13ffb17 	ldw	r4,-20(fp)
   3bc30:	003a1f40 	call	3a1f4 <alt_release_fd>
  }
} 
   3bc34:	e037883a 	mov	sp,fp
   3bc38:	dfc00217 	ldw	ra,8(sp)
   3bc3c:	df000117 	ldw	fp,4(sp)
   3bc40:	dc000017 	ldw	r16,0(sp)
   3bc44:	dec00304 	addi	sp,sp,12
   3bc48:	f800283a 	ret

0003bc4c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   3bc4c:	defffb04 	addi	sp,sp,-20
   3bc50:	dfc00415 	stw	ra,16(sp)
   3bc54:	df000315 	stw	fp,12(sp)
   3bc58:	df000304 	addi	fp,sp,12
   3bc5c:	e13ffd15 	stw	r4,-12(fp)
   3bc60:	e17ffe15 	stw	r5,-8(fp)
   3bc64:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   3bc68:	01000034 	movhi	r4,0
   3bc6c:	2102e904 	addi	r4,r4,2980
   3bc70:	e17ffd17 	ldw	r5,-12(fp)
   3bc74:	01800044 	movi	r6,1
   3bc78:	01c07fc4 	movi	r7,511
   3bc7c:	003bb6c0 	call	3bb6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3bc80:	01000034 	movhi	r4,0
   3bc84:	2102e604 	addi	r4,r4,2968
   3bc88:	e17ffe17 	ldw	r5,-8(fp)
   3bc8c:	000d883a 	mov	r6,zero
   3bc90:	01c07fc4 	movi	r7,511
   3bc94:	003bb6c0 	call	3bb6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3bc98:	01000034 	movhi	r4,0
   3bc9c:	2102ec04 	addi	r4,r4,2992
   3bca0:	e17fff17 	ldw	r5,-4(fp)
   3bca4:	01800044 	movi	r6,1
   3bca8:	01c07fc4 	movi	r7,511
   3bcac:	003bb6c0 	call	3bb6c <alt_open_fd>
}  
   3bcb0:	e037883a 	mov	sp,fp
   3bcb4:	dfc00117 	ldw	ra,4(sp)
   3bcb8:	df000017 	ldw	fp,0(sp)
   3bcbc:	dec00204 	addi	sp,sp,8
   3bcc0:	f800283a 	ret

0003bcc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3bcc4:	defffe04 	addi	sp,sp,-8
   3bcc8:	dfc00115 	stw	ra,4(sp)
   3bccc:	df000015 	stw	fp,0(sp)
   3bcd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3bcd4:	00800034 	movhi	r2,0
   3bcd8:	10876804 	addi	r2,r2,7584
   3bcdc:	10800017 	ldw	r2,0(r2)
   3bce0:	10000526 	beq	r2,zero,3bcf8 <alt_get_errno+0x34>
   3bce4:	00800034 	movhi	r2,0
   3bce8:	10876804 	addi	r2,r2,7584
   3bcec:	10800017 	ldw	r2,0(r2)
   3bcf0:	103ee83a 	callr	r2
   3bcf4:	00000206 	br	3bd00 <alt_get_errno+0x3c>
   3bcf8:	00800034 	movhi	r2,0
   3bcfc:	10877304 	addi	r2,r2,7628
}
   3bd00:	e037883a 	mov	sp,fp
   3bd04:	dfc00117 	ldw	ra,4(sp)
   3bd08:	df000017 	ldw	fp,0(sp)
   3bd0c:	dec00204 	addi	sp,sp,8
   3bd10:	f800283a 	ret

0003bd14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   3bd14:	defffb04 	addi	sp,sp,-20
   3bd18:	dfc00415 	stw	ra,16(sp)
   3bd1c:	df000315 	stw	fp,12(sp)
   3bd20:	dc000215 	stw	r16,8(sp)
   3bd24:	df000204 	addi	fp,sp,8
   3bd28:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   3bd2c:	e0bfff17 	ldw	r2,-4(fp)
   3bd30:	10800217 	ldw	r2,8(r2)
   3bd34:	10d00034 	orhi	r3,r2,16384
   3bd38:	e0bfff17 	ldw	r2,-4(fp)
   3bd3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3bd40:	e03ffe15 	stw	zero,-8(fp)
   3bd44:	00002206 	br	3bdd0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3bd48:	04000034 	movhi	r16,0
   3bd4c:	8402e604 	addi	r16,r16,2968
   3bd50:	e0bffe17 	ldw	r2,-8(fp)
   3bd54:	1009883a 	mov	r4,r2
   3bd58:	01400304 	movi	r5,12
   3bd5c:	00394480 	call	39448 <__mulsi3>
   3bd60:	8085883a 	add	r2,r16,r2
   3bd64:	10c00017 	ldw	r3,0(r2)
   3bd68:	e0bfff17 	ldw	r2,-4(fp)
   3bd6c:	10800017 	ldw	r2,0(r2)
   3bd70:	1880141e 	bne	r3,r2,3bdc4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3bd74:	04000034 	movhi	r16,0
   3bd78:	8402e604 	addi	r16,r16,2968
   3bd7c:	e0bffe17 	ldw	r2,-8(fp)
   3bd80:	1009883a 	mov	r4,r2
   3bd84:	01400304 	movi	r5,12
   3bd88:	00394480 	call	39448 <__mulsi3>
   3bd8c:	8085883a 	add	r2,r16,r2
   3bd90:	10800204 	addi	r2,r2,8
   3bd94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3bd98:	10000a0e 	bge	r2,zero,3bdc4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   3bd9c:	e13ffe17 	ldw	r4,-8(fp)
   3bda0:	01400304 	movi	r5,12
   3bda4:	00394480 	call	39448 <__mulsi3>
   3bda8:	00c00034 	movhi	r3,0
   3bdac:	18c2e604 	addi	r3,r3,2968
   3bdb0:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3bdb4:	e0bfff17 	ldw	r2,-4(fp)
   3bdb8:	18800226 	beq	r3,r2,3bdc4 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   3bdbc:	00bffcc4 	movi	r2,-13
   3bdc0:	00000a06 	br	3bdec <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3bdc4:	e0bffe17 	ldw	r2,-8(fp)
   3bdc8:	10800044 	addi	r2,r2,1
   3bdcc:	e0bffe15 	stw	r2,-8(fp)
   3bdd0:	00800034 	movhi	r2,0
   3bdd4:	10876704 	addi	r2,r2,7580
   3bdd8:	10800017 	ldw	r2,0(r2)
   3bddc:	1007883a 	mov	r3,r2
   3bde0:	e0bffe17 	ldw	r2,-8(fp)
   3bde4:	18bfd82e 	bgeu	r3,r2,3bd48 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   3bde8:	0005883a 	mov	r2,zero
}
   3bdec:	e037883a 	mov	sp,fp
   3bdf0:	dfc00217 	ldw	ra,8(sp)
   3bdf4:	df000117 	ldw	fp,4(sp)
   3bdf8:	dc000017 	ldw	r16,0(sp)
   3bdfc:	dec00304 	addi	sp,sp,12
   3be00:	f800283a 	ret

0003be04 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3be04:	defff604 	addi	sp,sp,-40
   3be08:	dfc00915 	stw	ra,36(sp)
   3be0c:	df000815 	stw	fp,32(sp)
   3be10:	df000804 	addi	fp,sp,32
   3be14:	e13ffd15 	stw	r4,-12(fp)
   3be18:	e17ffe15 	stw	r5,-8(fp)
   3be1c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   3be20:	00bfffc4 	movi	r2,-1
   3be24:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   3be28:	00bffb44 	movi	r2,-19
   3be2c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   3be30:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   3be34:	e13ffd17 	ldw	r4,-12(fp)
   3be38:	01400034 	movhi	r5,0
   3be3c:	29476504 	addi	r5,r5,7572
   3be40:	003c1180 	call	3c118 <alt_find_dev>
   3be44:	e0bff815 	stw	r2,-32(fp)
   3be48:	e0bff817 	ldw	r2,-32(fp)
   3be4c:	1000051e 	bne	r2,zero,3be64 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3be50:	e13ffd17 	ldw	r4,-12(fp)
   3be54:	003c1a80 	call	3c1a8 <alt_find_file>
   3be58:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   3be5c:	00800044 	movi	r2,1
   3be60:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3be64:	e0bff817 	ldw	r2,-32(fp)
   3be68:	10002a26 	beq	r2,zero,3bf14 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   3be6c:	e13ff817 	ldw	r4,-32(fp)
   3be70:	003c2bc0 	call	3c2bc <alt_get_fd>
   3be74:	e0bff915 	stw	r2,-28(fp)
   3be78:	e0bff917 	ldw	r2,-28(fp)
   3be7c:	1000030e 	bge	r2,zero,3be8c <open+0x88>
    {
      status = index;
   3be80:	e0bff917 	ldw	r2,-28(fp)
   3be84:	e0bffa15 	stw	r2,-24(fp)
   3be88:	00002406 	br	3bf1c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   3be8c:	e13ff917 	ldw	r4,-28(fp)
   3be90:	01400304 	movi	r5,12
   3be94:	00394480 	call	39448 <__mulsi3>
   3be98:	00c00034 	movhi	r3,0
   3be9c:	18c2e604 	addi	r3,r3,2968
   3bea0:	10c5883a 	add	r2,r2,r3
   3bea4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3bea8:	e0fffe17 	ldw	r3,-8(fp)
   3beac:	00900034 	movhi	r2,16384
   3beb0:	10bfffc4 	addi	r2,r2,-1
   3beb4:	1886703a 	and	r3,r3,r2
   3beb8:	e0bffc17 	ldw	r2,-16(fp)
   3bebc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   3bec0:	e0bffb17 	ldw	r2,-20(fp)
   3bec4:	1000051e 	bne	r2,zero,3bedc <open+0xd8>
   3bec8:	e13ffc17 	ldw	r4,-16(fp)
   3becc:	003bd140 	call	3bd14 <alt_file_locked>
   3bed0:	e0bffa15 	stw	r2,-24(fp)
   3bed4:	e0bffa17 	ldw	r2,-24(fp)
   3bed8:	10001016 	blt	r2,zero,3bf1c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3bedc:	e0bff817 	ldw	r2,-32(fp)
   3bee0:	10800317 	ldw	r2,12(r2)
   3bee4:	10000826 	beq	r2,zero,3bf08 <open+0x104>
   3bee8:	e0bff817 	ldw	r2,-32(fp)
   3beec:	10800317 	ldw	r2,12(r2)
   3bef0:	e13ffc17 	ldw	r4,-16(fp)
   3bef4:	e17ffd17 	ldw	r5,-12(fp)
   3bef8:	e1bffe17 	ldw	r6,-8(fp)
   3befc:	e1ffff17 	ldw	r7,-4(fp)
   3bf00:	103ee83a 	callr	r2
   3bf04:	00000106 	br	3bf0c <open+0x108>
   3bf08:	0005883a 	mov	r2,zero
   3bf0c:	e0bffa15 	stw	r2,-24(fp)
   3bf10:	00000206 	br	3bf1c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3bf14:	00bffb44 	movi	r2,-19
   3bf18:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   3bf1c:	e0bffa17 	ldw	r2,-24(fp)
   3bf20:	1000080e 	bge	r2,zero,3bf44 <open+0x140>
  {
    alt_release_fd (index);  
   3bf24:	e13ff917 	ldw	r4,-28(fp)
   3bf28:	003a1f40 	call	3a1f4 <alt_release_fd>
    ALT_ERRNO = -status;
   3bf2c:	003bcc40 	call	3bcc4 <alt_get_errno>
   3bf30:	e0fffa17 	ldw	r3,-24(fp)
   3bf34:	00c7c83a 	sub	r3,zero,r3
   3bf38:	10c00015 	stw	r3,0(r2)
    return -1;
   3bf3c:	00bfffc4 	movi	r2,-1
   3bf40:	00000106 	br	3bf48 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   3bf44:	e0bff917 	ldw	r2,-28(fp)
}
   3bf48:	e037883a 	mov	sp,fp
   3bf4c:	dfc00117 	ldw	ra,4(sp)
   3bf50:	df000017 	ldw	fp,0(sp)
   3bf54:	dec00204 	addi	sp,sp,8
   3bf58:	f800283a 	ret

0003bf5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3bf5c:	defffa04 	addi	sp,sp,-24
   3bf60:	df000515 	stw	fp,20(sp)
   3bf64:	df000504 	addi	fp,sp,20
   3bf68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3bf6c:	0005303a 	rdctl	r2,status
   3bf70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3bf74:	e0fffc17 	ldw	r3,-16(fp)
   3bf78:	00bfff84 	movi	r2,-2
   3bf7c:	1884703a 	and	r2,r3,r2
   3bf80:	1001703a 	wrctl	status,r2
  
  return context;
   3bf84:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3bf88:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   3bf8c:	e0bfff17 	ldw	r2,-4(fp)
   3bf90:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   3bf94:	e0bffd17 	ldw	r2,-12(fp)
   3bf98:	10800017 	ldw	r2,0(r2)
   3bf9c:	e0fffd17 	ldw	r3,-12(fp)
   3bfa0:	18c00117 	ldw	r3,4(r3)
   3bfa4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3bfa8:	e0bffd17 	ldw	r2,-12(fp)
   3bfac:	10800117 	ldw	r2,4(r2)
   3bfb0:	e0fffd17 	ldw	r3,-12(fp)
   3bfb4:	18c00017 	ldw	r3,0(r3)
   3bfb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3bfbc:	e0bffd17 	ldw	r2,-12(fp)
   3bfc0:	e0fffd17 	ldw	r3,-12(fp)
   3bfc4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3bfc8:	e0bffd17 	ldw	r2,-12(fp)
   3bfcc:	e0fffd17 	ldw	r3,-12(fp)
   3bfd0:	10c00015 	stw	r3,0(r2)
   3bfd4:	e0bffb17 	ldw	r2,-20(fp)
   3bfd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3bfdc:	e0bffe17 	ldw	r2,-8(fp)
   3bfe0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3bfe4:	e037883a 	mov	sp,fp
   3bfe8:	df000017 	ldw	fp,0(sp)
   3bfec:	dec00104 	addi	sp,sp,4
   3bff0:	f800283a 	ret

0003bff4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3bff4:	defffb04 	addi	sp,sp,-20
   3bff8:	dfc00415 	stw	ra,16(sp)
   3bffc:	df000315 	stw	fp,12(sp)
   3c000:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3c004:	d0a00d17 	ldw	r2,-32716(gp)
   3c008:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3c00c:	d0a01b17 	ldw	r2,-32660(gp)
   3c010:	10800044 	addi	r2,r2,1
   3c014:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3c018:	00002e06 	br	3c0d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   3c01c:	e0bffd17 	ldw	r2,-12(fp)
   3c020:	10800017 	ldw	r2,0(r2)
   3c024:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3c028:	e0bffd17 	ldw	r2,-12(fp)
   3c02c:	10800403 	ldbu	r2,16(r2)
   3c030:	10803fcc 	andi	r2,r2,255
   3c034:	10000426 	beq	r2,zero,3c048 <alt_tick+0x54>
   3c038:	d0a01b17 	ldw	r2,-32660(gp)
   3c03c:	1000021e 	bne	r2,zero,3c048 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   3c040:	e0bffd17 	ldw	r2,-12(fp)
   3c044:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3c048:	e0bffd17 	ldw	r2,-12(fp)
   3c04c:	10800217 	ldw	r2,8(r2)
   3c050:	d0e01b17 	ldw	r3,-32660(gp)
   3c054:	18801d36 	bltu	r3,r2,3c0cc <alt_tick+0xd8>
   3c058:	e0bffd17 	ldw	r2,-12(fp)
   3c05c:	10800403 	ldbu	r2,16(r2)
   3c060:	10803fcc 	andi	r2,r2,255
   3c064:	1000191e 	bne	r2,zero,3c0cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3c068:	e0bffd17 	ldw	r2,-12(fp)
   3c06c:	10c00317 	ldw	r3,12(r2)
   3c070:	e0bffd17 	ldw	r2,-12(fp)
   3c074:	10800517 	ldw	r2,20(r2)
   3c078:	1009883a 	mov	r4,r2
   3c07c:	183ee83a 	callr	r3
   3c080:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   3c084:	e0bfff17 	ldw	r2,-4(fp)
   3c088:	1000031e 	bne	r2,zero,3c098 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   3c08c:	e13ffd17 	ldw	r4,-12(fp)
   3c090:	003bf5c0 	call	3bf5c <alt_alarm_stop>
   3c094:	00000d06 	br	3c0cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3c098:	e0bffd17 	ldw	r2,-12(fp)
   3c09c:	10c00217 	ldw	r3,8(r2)
   3c0a0:	e0bfff17 	ldw	r2,-4(fp)
   3c0a4:	1887883a 	add	r3,r3,r2
   3c0a8:	e0bffd17 	ldw	r2,-12(fp)
   3c0ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   3c0b0:	e0bffd17 	ldw	r2,-12(fp)
   3c0b4:	10c00217 	ldw	r3,8(r2)
   3c0b8:	d0a01b17 	ldw	r2,-32660(gp)
   3c0bc:	1880032e 	bgeu	r3,r2,3c0cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   3c0c0:	e0bffd17 	ldw	r2,-12(fp)
   3c0c4:	00c00044 	movi	r3,1
   3c0c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   3c0cc:	e0bffe17 	ldw	r2,-8(fp)
   3c0d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3c0d4:	e0fffd17 	ldw	r3,-12(fp)
   3c0d8:	d0a00d04 	addi	r2,gp,-32716
   3c0dc:	18bfcf1e 	bne	r3,r2,3c01c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3c0e0:	0001883a 	nop
}
   3c0e4:	e037883a 	mov	sp,fp
   3c0e8:	dfc00117 	ldw	ra,4(sp)
   3c0ec:	df000017 	ldw	fp,0(sp)
   3c0f0:	dec00204 	addi	sp,sp,8
   3c0f4:	f800283a 	ret

0003c0f8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   3c0f8:	deffff04 	addi	sp,sp,-4
   3c0fc:	df000015 	stw	fp,0(sp)
   3c100:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3c104:	000170fa 	wrctl	ienable,zero
}
   3c108:	e037883a 	mov	sp,fp
   3c10c:	df000017 	ldw	fp,0(sp)
   3c110:	dec00104 	addi	sp,sp,4
   3c114:	f800283a 	ret

0003c118 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   3c118:	defffa04 	addi	sp,sp,-24
   3c11c:	dfc00515 	stw	ra,20(sp)
   3c120:	df000415 	stw	fp,16(sp)
   3c124:	df000404 	addi	fp,sp,16
   3c128:	e13ffe15 	stw	r4,-8(fp)
   3c12c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   3c130:	e0bfff17 	ldw	r2,-4(fp)
   3c134:	10800017 	ldw	r2,0(r2)
   3c138:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3c13c:	e13ffe17 	ldw	r4,-8(fp)
   3c140:	00304b00 	call	304b0 <strlen>
   3c144:	10800044 	addi	r2,r2,1
   3c148:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c14c:	00000d06 	br	3c184 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   3c150:	e0bffc17 	ldw	r2,-16(fp)
   3c154:	10c00217 	ldw	r3,8(r2)
   3c158:	e0bffd17 	ldw	r2,-12(fp)
   3c15c:	1809883a 	mov	r4,r3
   3c160:	e17ffe17 	ldw	r5,-8(fp)
   3c164:	100d883a 	mov	r6,r2
   3c168:	003c3dc0 	call	3c3dc <memcmp>
   3c16c:	1000021e 	bne	r2,zero,3c178 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   3c170:	e0bffc17 	ldw	r2,-16(fp)
   3c174:	00000706 	br	3c194 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3c178:	e0bffc17 	ldw	r2,-16(fp)
   3c17c:	10800017 	ldw	r2,0(r2)
   3c180:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3c184:	e0fffc17 	ldw	r3,-16(fp)
   3c188:	e0bfff17 	ldw	r2,-4(fp)
   3c18c:	18bff01e 	bne	r3,r2,3c150 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   3c190:	0005883a 	mov	r2,zero
}
   3c194:	e037883a 	mov	sp,fp
   3c198:	dfc00117 	ldw	ra,4(sp)
   3c19c:	df000017 	ldw	fp,0(sp)
   3c1a0:	dec00204 	addi	sp,sp,8
   3c1a4:	f800283a 	ret

0003c1a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3c1a8:	defffb04 	addi	sp,sp,-20
   3c1ac:	dfc00415 	stw	ra,16(sp)
   3c1b0:	df000315 	stw	fp,12(sp)
   3c1b4:	df000304 	addi	fp,sp,12
   3c1b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   3c1bc:	00800034 	movhi	r2,0
   3c1c0:	10876304 	addi	r2,r2,7564
   3c1c4:	10800017 	ldw	r2,0(r2)
   3c1c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c1cc:	00003106 	br	3c294 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   3c1d0:	e0bffd17 	ldw	r2,-12(fp)
   3c1d4:	10800217 	ldw	r2,8(r2)
   3c1d8:	1009883a 	mov	r4,r2
   3c1dc:	00304b00 	call	304b0 <strlen>
   3c1e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   3c1e4:	e0bffd17 	ldw	r2,-12(fp)
   3c1e8:	10c00217 	ldw	r3,8(r2)
   3c1ec:	e0bffe17 	ldw	r2,-8(fp)
   3c1f0:	10bfffc4 	addi	r2,r2,-1
   3c1f4:	1885883a 	add	r2,r3,r2
   3c1f8:	10800003 	ldbu	r2,0(r2)
   3c1fc:	10803fcc 	andi	r2,r2,255
   3c200:	1080201c 	xori	r2,r2,128
   3c204:	10bfe004 	addi	r2,r2,-128
   3c208:	10800bd8 	cmpnei	r2,r2,47
   3c20c:	1000031e 	bne	r2,zero,3c21c <alt_find_file+0x74>
    {
      len -= 1;
   3c210:	e0bffe17 	ldw	r2,-8(fp)
   3c214:	10bfffc4 	addi	r2,r2,-1
   3c218:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3c21c:	e0bffe17 	ldw	r2,-8(fp)
   3c220:	e0ffff17 	ldw	r3,-4(fp)
   3c224:	1885883a 	add	r2,r3,r2
   3c228:	10800003 	ldbu	r2,0(r2)
   3c22c:	10803fcc 	andi	r2,r2,255
   3c230:	1080201c 	xori	r2,r2,128
   3c234:	10bfe004 	addi	r2,r2,-128
   3c238:	10800be0 	cmpeqi	r2,r2,47
   3c23c:	1000081e 	bne	r2,zero,3c260 <alt_find_file+0xb8>
   3c240:	e0bffe17 	ldw	r2,-8(fp)
   3c244:	e0ffff17 	ldw	r3,-4(fp)
   3c248:	1885883a 	add	r2,r3,r2
   3c24c:	10800003 	ldbu	r2,0(r2)
   3c250:	10803fcc 	andi	r2,r2,255
   3c254:	1080201c 	xori	r2,r2,128
   3c258:	10bfe004 	addi	r2,r2,-128
   3c25c:	10000a1e 	bne	r2,zero,3c288 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   3c260:	e0bffd17 	ldw	r2,-12(fp)
   3c264:	10c00217 	ldw	r3,8(r2)
   3c268:	e0bffe17 	ldw	r2,-8(fp)
   3c26c:	1809883a 	mov	r4,r3
   3c270:	e17fff17 	ldw	r5,-4(fp)
   3c274:	100d883a 	mov	r6,r2
   3c278:	003c3dc0 	call	3c3dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3c27c:	1000021e 	bne	r2,zero,3c288 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3c280:	e0bffd17 	ldw	r2,-12(fp)
   3c284:	00000806 	br	3c2a8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   3c288:	e0bffd17 	ldw	r2,-12(fp)
   3c28c:	10800017 	ldw	r2,0(r2)
   3c290:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3c294:	e0fffd17 	ldw	r3,-12(fp)
   3c298:	00800034 	movhi	r2,0
   3c29c:	10876304 	addi	r2,r2,7564
   3c2a0:	18bfcb1e 	bne	r3,r2,3c1d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3c2a4:	0005883a 	mov	r2,zero
}
   3c2a8:	e037883a 	mov	sp,fp
   3c2ac:	dfc00117 	ldw	ra,4(sp)
   3c2b0:	df000017 	ldw	fp,0(sp)
   3c2b4:	dec00204 	addi	sp,sp,8
   3c2b8:	f800283a 	ret

0003c2bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3c2bc:	defffa04 	addi	sp,sp,-24
   3c2c0:	dfc00515 	stw	ra,20(sp)
   3c2c4:	df000415 	stw	fp,16(sp)
   3c2c8:	dc000315 	stw	r16,12(sp)
   3c2cc:	df000304 	addi	fp,sp,12
   3c2d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   3c2d4:	00bffa04 	movi	r2,-24
   3c2d8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c2dc:	e03ffd15 	stw	zero,-12(fp)
   3c2e0:	00002106 	br	3c368 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   3c2e4:	04000034 	movhi	r16,0
   3c2e8:	8402e604 	addi	r16,r16,2968
   3c2ec:	e0bffd17 	ldw	r2,-12(fp)
   3c2f0:	1009883a 	mov	r4,r2
   3c2f4:	01400304 	movi	r5,12
   3c2f8:	00394480 	call	39448 <__mulsi3>
   3c2fc:	8085883a 	add	r2,r16,r2
   3c300:	10800017 	ldw	r2,0(r2)
   3c304:	1000151e 	bne	r2,zero,3c35c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   3c308:	04000034 	movhi	r16,0
   3c30c:	8402e604 	addi	r16,r16,2968
   3c310:	e0bffd17 	ldw	r2,-12(fp)
   3c314:	1009883a 	mov	r4,r2
   3c318:	01400304 	movi	r5,12
   3c31c:	00394480 	call	39448 <__mulsi3>
   3c320:	8085883a 	add	r2,r16,r2
   3c324:	e0ffff17 	ldw	r3,-4(fp)
   3c328:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   3c32c:	00800034 	movhi	r2,0
   3c330:	10876704 	addi	r2,r2,7580
   3c334:	10c00017 	ldw	r3,0(r2)
   3c338:	e0bffd17 	ldw	r2,-12(fp)
   3c33c:	1880040e 	bge	r3,r2,3c350 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   3c340:	00800034 	movhi	r2,0
   3c344:	10876704 	addi	r2,r2,7580
   3c348:	e0fffd17 	ldw	r3,-12(fp)
   3c34c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   3c350:	e0bffd17 	ldw	r2,-12(fp)
   3c354:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   3c358:	00000606 	br	3c374 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   3c35c:	e0bffd17 	ldw	r2,-12(fp)
   3c360:	10800044 	addi	r2,r2,1
   3c364:	e0bffd15 	stw	r2,-12(fp)
   3c368:	e0bffd17 	ldw	r2,-12(fp)
   3c36c:	10800810 	cmplti	r2,r2,32
   3c370:	103fdc1e 	bne	r2,zero,3c2e4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   3c374:	e0bffe17 	ldw	r2,-8(fp)
}
   3c378:	e037883a 	mov	sp,fp
   3c37c:	dfc00217 	ldw	ra,8(sp)
   3c380:	df000117 	ldw	fp,4(sp)
   3c384:	dc000017 	ldw	r16,0(sp)
   3c388:	dec00304 	addi	sp,sp,12
   3c38c:	f800283a 	ret

0003c390 <atexit>:
   3c390:	200b883a 	mov	r5,r4
   3c394:	000d883a 	mov	r6,zero
   3c398:	0009883a 	mov	r4,zero
   3c39c:	000f883a 	mov	r7,zero
   3c3a0:	003c4581 	jmpi	3c458 <__register_exitproc>

0003c3a4 <exit>:
   3c3a4:	defffe04 	addi	sp,sp,-8
   3c3a8:	000b883a 	mov	r5,zero
   3c3ac:	dc000015 	stw	r16,0(sp)
   3c3b0:	dfc00115 	stw	ra,4(sp)
   3c3b4:	2021883a 	mov	r16,r4
   3c3b8:	003c5880 	call	3c588 <__call_exitprocs>
   3c3bc:	00800034 	movhi	r2,0
   3c3c0:	10875e04 	addi	r2,r2,7544
   3c3c4:	11000017 	ldw	r4,0(r2)
   3c3c8:	20800f17 	ldw	r2,60(r4)
   3c3cc:	10000126 	beq	r2,zero,3c3d4 <exit+0x30>
   3c3d0:	103ee83a 	callr	r2
   3c3d4:	8009883a 	mov	r4,r16
   3c3d8:	003c7280 	call	3c728 <_exit>

0003c3dc <memcmp>:
   3c3dc:	01c000c4 	movi	r7,3
   3c3e0:	3980192e 	bgeu	r7,r6,3c448 <memcmp+0x6c>
   3c3e4:	2904b03a 	or	r2,r5,r4
   3c3e8:	11c4703a 	and	r2,r2,r7
   3c3ec:	10000f26 	beq	r2,zero,3c42c <memcmp+0x50>
   3c3f0:	20c00003 	ldbu	r3,0(r4)
   3c3f4:	28800003 	ldbu	r2,0(r5)
   3c3f8:	1880151e 	bne	r3,r2,3c450 <memcmp+0x74>
   3c3fc:	31bfff84 	addi	r6,r6,-2
   3c400:	01ffffc4 	movi	r7,-1
   3c404:	00000406 	br	3c418 <memcmp+0x3c>
   3c408:	20c00003 	ldbu	r3,0(r4)
   3c40c:	28800003 	ldbu	r2,0(r5)
   3c410:	31bfffc4 	addi	r6,r6,-1
   3c414:	18800e1e 	bne	r3,r2,3c450 <memcmp+0x74>
   3c418:	21000044 	addi	r4,r4,1
   3c41c:	29400044 	addi	r5,r5,1
   3c420:	31fff91e 	bne	r6,r7,3c408 <memcmp+0x2c>
   3c424:	0005883a 	mov	r2,zero
   3c428:	f800283a 	ret
   3c42c:	20c00017 	ldw	r3,0(r4)
   3c430:	28800017 	ldw	r2,0(r5)
   3c434:	1880041e 	bne	r3,r2,3c448 <memcmp+0x6c>
   3c438:	31bfff04 	addi	r6,r6,-4
   3c43c:	21000104 	addi	r4,r4,4
   3c440:	29400104 	addi	r5,r5,4
   3c444:	39bff936 	bltu	r7,r6,3c42c <memcmp+0x50>
   3c448:	303fe91e 	bne	r6,zero,3c3f0 <memcmp+0x14>
   3c44c:	003ff506 	br	3c424 <memcmp+0x48>
   3c450:	1885c83a 	sub	r2,r3,r2
   3c454:	f800283a 	ret

0003c458 <__register_exitproc>:
   3c458:	defffa04 	addi	sp,sp,-24
   3c45c:	00800034 	movhi	r2,0
   3c460:	10875e04 	addi	r2,r2,7544
   3c464:	dc000315 	stw	r16,12(sp)
   3c468:	14000017 	ldw	r16,0(r2)
   3c46c:	dc400415 	stw	r17,16(sp)
   3c470:	dfc00515 	stw	ra,20(sp)
   3c474:	80805217 	ldw	r2,328(r16)
   3c478:	2023883a 	mov	r17,r4
   3c47c:	10003e26 	beq	r2,zero,3c578 <__register_exitproc+0x120>
   3c480:	10c00117 	ldw	r3,4(r2)
   3c484:	020007c4 	movi	r8,31
   3c488:	40c0180e 	bge	r8,r3,3c4ec <__register_exitproc+0x94>
   3c48c:	00800034 	movhi	r2,0
   3c490:	10800004 	addi	r2,r2,0
   3c494:	1000061e 	bne	r2,zero,3c4b0 <__register_exitproc+0x58>
   3c498:	00bfffc4 	movi	r2,-1
   3c49c:	dfc00517 	ldw	ra,20(sp)
   3c4a0:	dc400417 	ldw	r17,16(sp)
   3c4a4:	dc000317 	ldw	r16,12(sp)
   3c4a8:	dec00604 	addi	sp,sp,24
   3c4ac:	f800283a 	ret
   3c4b0:	01006404 	movi	r4,400
   3c4b4:	d9400015 	stw	r5,0(sp)
   3c4b8:	d9800115 	stw	r6,4(sp)
   3c4bc:	d9c00215 	stw	r7,8(sp)
   3c4c0:	00000000 	call	0 <__alt_mem_onchip_data_memory_cpu0>
   3c4c4:	d9400017 	ldw	r5,0(sp)
   3c4c8:	d9800117 	ldw	r6,4(sp)
   3c4cc:	d9c00217 	ldw	r7,8(sp)
   3c4d0:	103ff126 	beq	r2,zero,3c498 <__register_exitproc+0x40>
   3c4d4:	80c05217 	ldw	r3,328(r16)
   3c4d8:	10000115 	stw	zero,4(r2)
   3c4dc:	10c00015 	stw	r3,0(r2)
   3c4e0:	80805215 	stw	r2,328(r16)
   3c4e4:	10006215 	stw	zero,392(r2)
   3c4e8:	10006315 	stw	zero,396(r2)
   3c4ec:	10c00117 	ldw	r3,4(r2)
   3c4f0:	88000d1e 	bne	r17,zero,3c528 <__register_exitproc+0xd0>
   3c4f4:	19000084 	addi	r4,r3,2
   3c4f8:	2109883a 	add	r4,r4,r4
   3c4fc:	18c00044 	addi	r3,r3,1
   3c500:	2109883a 	add	r4,r4,r4
   3c504:	1109883a 	add	r4,r2,r4
   3c508:	10c00115 	stw	r3,4(r2)
   3c50c:	0005883a 	mov	r2,zero
   3c510:	21400015 	stw	r5,0(r4)
   3c514:	dfc00517 	ldw	ra,20(sp)
   3c518:	dc400417 	ldw	r17,16(sp)
   3c51c:	dc000317 	ldw	r16,12(sp)
   3c520:	dec00604 	addi	sp,sp,24
   3c524:	f800283a 	ret
   3c528:	02400044 	movi	r9,1
   3c52c:	12806217 	ldw	r10,392(r2)
   3c530:	48d2983a 	sll	r9,r9,r3
   3c534:	19000804 	addi	r4,r3,32
   3c538:	18d1883a 	add	r8,r3,r3
   3c53c:	2109883a 	add	r4,r4,r4
   3c540:	4211883a 	add	r8,r8,r8
   3c544:	2109883a 	add	r4,r4,r4
   3c548:	1109883a 	add	r4,r2,r4
   3c54c:	1211883a 	add	r8,r2,r8
   3c550:	5254b03a 	or	r10,r10,r9
   3c554:	21c02215 	stw	r7,136(r4)
   3c558:	41802215 	stw	r6,136(r8)
   3c55c:	12806215 	stw	r10,392(r2)
   3c560:	01000084 	movi	r4,2
   3c564:	893fe31e 	bne	r17,r4,3c4f4 <__register_exitproc+0x9c>
   3c568:	11006317 	ldw	r4,396(r2)
   3c56c:	2252b03a 	or	r9,r4,r9
   3c570:	12406315 	stw	r9,396(r2)
   3c574:	003fdf06 	br	3c4f4 <__register_exitproc+0x9c>
   3c578:	00800034 	movhi	r2,0
   3c57c:	1087c404 	addi	r2,r2,7952
   3c580:	80805215 	stw	r2,328(r16)
   3c584:	003fbe06 	br	3c480 <__register_exitproc+0x28>

0003c588 <__call_exitprocs>:
   3c588:	00800034 	movhi	r2,0
   3c58c:	10875e04 	addi	r2,r2,7544
   3c590:	10800017 	ldw	r2,0(r2)
   3c594:	defff304 	addi	sp,sp,-52
   3c598:	df000b15 	stw	fp,44(sp)
   3c59c:	d8800015 	stw	r2,0(sp)
   3c5a0:	10805204 	addi	r2,r2,328
   3c5a4:	dd400815 	stw	r21,32(sp)
   3c5a8:	dfc00c15 	stw	ra,48(sp)
   3c5ac:	ddc00a15 	stw	r23,40(sp)
   3c5b0:	dd800915 	stw	r22,36(sp)
   3c5b4:	dd000715 	stw	r20,28(sp)
   3c5b8:	dcc00615 	stw	r19,24(sp)
   3c5bc:	dc800515 	stw	r18,20(sp)
   3c5c0:	dc400415 	stw	r17,16(sp)
   3c5c4:	dc000315 	stw	r16,12(sp)
   3c5c8:	d9000115 	stw	r4,4(sp)
   3c5cc:	2839883a 	mov	fp,r5
   3c5d0:	d8800215 	stw	r2,8(sp)
   3c5d4:	057fffc4 	movi	r21,-1
   3c5d8:	d8800017 	ldw	r2,0(sp)
   3c5dc:	ddc00217 	ldw	r23,8(sp)
   3c5e0:	14805217 	ldw	r18,328(r2)
   3c5e4:	90001726 	beq	r18,zero,3c644 <__call_exitprocs+0xbc>
   3c5e8:	94400117 	ldw	r17,4(r18)
   3c5ec:	8c3fffc4 	addi	r16,r17,-1
   3c5f0:	80001116 	blt	r16,zero,3c638 <__call_exitprocs+0xb0>
   3c5f4:	8c400044 	addi	r17,r17,1
   3c5f8:	8427883a 	add	r19,r16,r16
   3c5fc:	8c63883a 	add	r17,r17,r17
   3c600:	95802204 	addi	r22,r18,136
   3c604:	9ce7883a 	add	r19,r19,r19
   3c608:	8c63883a 	add	r17,r17,r17
   3c60c:	b4e7883a 	add	r19,r22,r19
   3c610:	9463883a 	add	r17,r18,r17
   3c614:	e0001726 	beq	fp,zero,3c674 <__call_exitprocs+0xec>
   3c618:	8c87c83a 	sub	r3,r17,r18
   3c61c:	b0c7883a 	add	r3,r22,r3
   3c620:	18c01e17 	ldw	r3,120(r3)
   3c624:	1f001326 	beq	r3,fp,3c674 <__call_exitprocs+0xec>
   3c628:	843fffc4 	addi	r16,r16,-1
   3c62c:	9cffff04 	addi	r19,r19,-4
   3c630:	8c7fff04 	addi	r17,r17,-4
   3c634:	857ff71e 	bne	r16,r21,3c614 <__call_exitprocs+0x8c>
   3c638:	00800034 	movhi	r2,0
   3c63c:	10800004 	addi	r2,r2,0
   3c640:	10002a1e 	bne	r2,zero,3c6ec <__call_exitprocs+0x164>
   3c644:	dfc00c17 	ldw	ra,48(sp)
   3c648:	df000b17 	ldw	fp,44(sp)
   3c64c:	ddc00a17 	ldw	r23,40(sp)
   3c650:	dd800917 	ldw	r22,36(sp)
   3c654:	dd400817 	ldw	r21,32(sp)
   3c658:	dd000717 	ldw	r20,28(sp)
   3c65c:	dcc00617 	ldw	r19,24(sp)
   3c660:	dc800517 	ldw	r18,20(sp)
   3c664:	dc400417 	ldw	r17,16(sp)
   3c668:	dc000317 	ldw	r16,12(sp)
   3c66c:	dec00d04 	addi	sp,sp,52
   3c670:	f800283a 	ret
   3c674:	91000117 	ldw	r4,4(r18)
   3c678:	88c00017 	ldw	r3,0(r17)
   3c67c:	213fffc4 	addi	r4,r4,-1
   3c680:	24001526 	beq	r4,r16,3c6d8 <__call_exitprocs+0x150>
   3c684:	88000015 	stw	zero,0(r17)
   3c688:	183fe726 	beq	r3,zero,3c628 <__call_exitprocs+0xa0>
   3c68c:	00800044 	movi	r2,1
   3c690:	1408983a 	sll	r4,r2,r16
   3c694:	91406217 	ldw	r5,392(r18)
   3c698:	95000117 	ldw	r20,4(r18)
   3c69c:	214a703a 	and	r5,r4,r5
   3c6a0:	28000b26 	beq	r5,zero,3c6d0 <__call_exitprocs+0x148>
   3c6a4:	91406317 	ldw	r5,396(r18)
   3c6a8:	2148703a 	and	r4,r4,r5
   3c6ac:	20000c1e 	bne	r4,zero,3c6e0 <__call_exitprocs+0x158>
   3c6b0:	99400017 	ldw	r5,0(r19)
   3c6b4:	d9000117 	ldw	r4,4(sp)
   3c6b8:	183ee83a 	callr	r3
   3c6bc:	90c00117 	ldw	r3,4(r18)
   3c6c0:	1d3fc51e 	bne	r3,r20,3c5d8 <__call_exitprocs+0x50>
   3c6c4:	b8c00017 	ldw	r3,0(r23)
   3c6c8:	1cbfd726 	beq	r3,r18,3c628 <__call_exitprocs+0xa0>
   3c6cc:	003fc206 	br	3c5d8 <__call_exitprocs+0x50>
   3c6d0:	183ee83a 	callr	r3
   3c6d4:	003ff906 	br	3c6bc <__call_exitprocs+0x134>
   3c6d8:	94000115 	stw	r16,4(r18)
   3c6dc:	003fea06 	br	3c688 <__call_exitprocs+0x100>
   3c6e0:	99000017 	ldw	r4,0(r19)
   3c6e4:	183ee83a 	callr	r3
   3c6e8:	003ff406 	br	3c6bc <__call_exitprocs+0x134>
   3c6ec:	90c00117 	ldw	r3,4(r18)
   3c6f0:	1800071e 	bne	r3,zero,3c710 <__call_exitprocs+0x188>
   3c6f4:	90c00017 	ldw	r3,0(r18)
   3c6f8:	18000926 	beq	r3,zero,3c720 <__call_exitprocs+0x198>
   3c6fc:	9009883a 	mov	r4,r18
   3c700:	b8c00015 	stw	r3,0(r23)
   3c704:	00000000 	call	0 <__alt_mem_onchip_data_memory_cpu0>
   3c708:	bc800017 	ldw	r18,0(r23)
   3c70c:	003fb506 	br	3c5e4 <__call_exitprocs+0x5c>
   3c710:	90c00017 	ldw	r3,0(r18)
   3c714:	902f883a 	mov	r23,r18
   3c718:	1825883a 	mov	r18,r3
   3c71c:	003fb106 	br	3c5e4 <__call_exitprocs+0x5c>
   3c720:	0007883a 	mov	r3,zero
   3c724:	003ffb06 	br	3c714 <__call_exitprocs+0x18c>

0003c728 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3c728:	defffc04 	addi	sp,sp,-16
   3c72c:	df000315 	stw	fp,12(sp)
   3c730:	df000304 	addi	fp,sp,12
   3c734:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   3c738:	0001883a 	nop
   3c73c:	e0bfff17 	ldw	r2,-4(fp)
   3c740:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   3c744:	e0bffd17 	ldw	r2,-12(fp)
   3c748:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   3c74c:	e0bffe17 	ldw	r2,-8(fp)
   3c750:	10000226 	beq	r2,zero,3c75c <_exit+0x34>
    ALT_SIM_FAIL();
   3c754:	002af070 	cmpltui	zero,zero,43969
   3c758:	00000106 	br	3c760 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   3c75c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3c760:	003fff06 	br	3c760 <_exit+0x38>
